
U3.4_Loadcell_Library.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054c4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  080055d8  080055d8  000155d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a3c  08005a3c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08005a3c  08005a3c  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005a3c  08005a3c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a3c  08005a3c  00015a3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a40  08005a40  00015a40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08005a44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  200001dc  08005c20  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000274  08005c20  00020274  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000074ae  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000183e  00000000  00000000  000276b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e8  00000000  00000000  00028ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000650  00000000  00000000  000295e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000176aa  00000000  00000000  00029c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000075cb  00000000  00000000  000412da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000838c0  00000000  00000000  000488a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cc165  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c8c  00000000  00000000  000cc1b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	080055bc 	.word	0x080055bc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	080055bc 	.word	0x080055bc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__aeabi_f2iz>:
 8000f44:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f48:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f4c:	d30f      	bcc.n	8000f6e <__aeabi_f2iz+0x2a>
 8000f4e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f52:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f56:	d90d      	bls.n	8000f74 <__aeabi_f2iz+0x30>
 8000f58:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f60:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f64:	fa23 f002 	lsr.w	r0, r3, r2
 8000f68:	bf18      	it	ne
 8000f6a:	4240      	negne	r0, r0
 8000f6c:	4770      	bx	lr
 8000f6e:	f04f 0000 	mov.w	r0, #0
 8000f72:	4770      	bx	lr
 8000f74:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f78:	d101      	bne.n	8000f7e <__aeabi_f2iz+0x3a>
 8000f7a:	0242      	lsls	r2, r0, #9
 8000f7c:	d105      	bne.n	8000f8a <__aeabi_f2iz+0x46>
 8000f7e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f82:	bf08      	it	eq
 8000f84:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f88:	4770      	bx	lr
 8000f8a:	f04f 0000 	mov.w	r0, #0
 8000f8e:	4770      	bx	lr

08000f90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b088      	sub	sp, #32
 8000f94:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f96:	f000 fa79 	bl	800148c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f9a:	f000 f837 	bl	800100c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f9e:	f000 f8a1 	bl	80010e4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000fa2:	f000 f875 	bl	8001090 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  LC_Init(&hlc1, GPIOA, GPIO_PIN_4, GPIOA, GPIO_PIN_5);
 8000fa6:	2320      	movs	r3, #32
 8000fa8:	9300      	str	r3, [sp, #0]
 8000faa:	4b14      	ldr	r3, [pc, #80]	; (8000ffc <main+0x6c>)
 8000fac:	2210      	movs	r2, #16
 8000fae:	4913      	ldr	r1, [pc, #76]	; (8000ffc <main+0x6c>)
 8000fb0:	4813      	ldr	r0, [pc, #76]	; (8001000 <main+0x70>)
 8000fb2:	f001 fb5b 	bl	800266c <LC_Init>
//	  sprintf(buff1, "%f_", hlc1.a);
//	  HAL_UART_Transmit(&huart2, buff1, 10, 100);
//	  uint8_t buff2[20] = {};
//	  sprintf(buff2, "%f_", hlc1.b);
//	  HAL_UART_Transmit(&huart2, buff2, 10, 100);
	  uint8_t buff3[20] = {};
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	603b      	str	r3, [r7, #0]
 8000fba:	1d3b      	adds	r3, r7, #4
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
	  long mass = LC_Get_Mass(&hlc1);
 8000fc6:	480e      	ldr	r0, [pc, #56]	; (8001000 <main+0x70>)
 8000fc8:	f001 fc0e 	bl	80027e8 <LC_Get_Mass>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff ffb8 	bl	8000f44 <__aeabi_f2iz>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	617b      	str	r3, [r7, #20]
	  sprintf(buff3, "%d\n", mass);
 8000fd8:	463b      	mov	r3, r7
 8000fda:	697a      	ldr	r2, [r7, #20]
 8000fdc:	4909      	ldr	r1, [pc, #36]	; (8001004 <main+0x74>)
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f002 f8b4 	bl	800314c <siprintf>
	  HAL_UART_Transmit(&huart2, buff3, 10, 100);
 8000fe4:	4639      	mov	r1, r7
 8000fe6:	2364      	movs	r3, #100	; 0x64
 8000fe8:	220a      	movs	r2, #10
 8000fea:	4807      	ldr	r0, [pc, #28]	; (8001008 <main+0x78>)
 8000fec:	f001 f9d3 	bl	8002396 <HAL_UART_Transmit>
	  HAL_Delay(2000);
 8000ff0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ff4:	f000 faac 	bl	8001550 <HAL_Delay>
  {
 8000ff8:	e7dd      	b.n	8000fb6 <main+0x26>
 8000ffa:	bf00      	nop
 8000ffc:	40010800 	.word	0x40010800
 8001000:	20000248 	.word	0x20000248
 8001004:	080055d8 	.word	0x080055d8
 8001008:	20000204 	.word	0x20000204

0800100c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b090      	sub	sp, #64	; 0x40
 8001010:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001012:	f107 0318 	add.w	r3, r7, #24
 8001016:	2228      	movs	r2, #40	; 0x28
 8001018:	2100      	movs	r1, #0
 800101a:	4618      	mov	r0, r3
 800101c:	f001 fc2e 	bl	800287c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001020:	1d3b      	adds	r3, r7, #4
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	605a      	str	r2, [r3, #4]
 8001028:	609a      	str	r2, [r3, #8]
 800102a:	60da      	str	r2, [r3, #12]
 800102c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800102e:	2302      	movs	r3, #2
 8001030:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001032:	2301      	movs	r3, #1
 8001034:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001036:	2310      	movs	r3, #16
 8001038:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800103a:	2302      	movs	r3, #2
 800103c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800103e:	2300      	movs	r3, #0
 8001040:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001042:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001046:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001048:	f107 0318 	add.w	r3, r7, #24
 800104c:	4618      	mov	r0, r3
 800104e:	f000 fd3b 	bl	8001ac8 <HAL_RCC_OscConfig>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001058:	f000 f882 	bl	8001160 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800105c:	230f      	movs	r3, #15
 800105e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001060:	2302      	movs	r3, #2
 8001062:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001064:	2300      	movs	r3, #0
 8001066:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001068:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800106c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800106e:	2300      	movs	r3, #0
 8001070:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001072:	1d3b      	adds	r3, r7, #4
 8001074:	2102      	movs	r1, #2
 8001076:	4618      	mov	r0, r3
 8001078:	f000 ffa6 	bl	8001fc8 <HAL_RCC_ClockConfig>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001082:	f000 f86d 	bl	8001160 <Error_Handler>
  }
}
 8001086:	bf00      	nop
 8001088:	3740      	adds	r7, #64	; 0x40
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
	...

08001090 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001094:	4b11      	ldr	r3, [pc, #68]	; (80010dc <MX_USART2_UART_Init+0x4c>)
 8001096:	4a12      	ldr	r2, [pc, #72]	; (80010e0 <MX_USART2_UART_Init+0x50>)
 8001098:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800109a:	4b10      	ldr	r3, [pc, #64]	; (80010dc <MX_USART2_UART_Init+0x4c>)
 800109c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010a2:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <MX_USART2_UART_Init+0x4c>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010a8:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <MX_USART2_UART_Init+0x4c>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010ae:	4b0b      	ldr	r3, [pc, #44]	; (80010dc <MX_USART2_UART_Init+0x4c>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010b4:	4b09      	ldr	r3, [pc, #36]	; (80010dc <MX_USART2_UART_Init+0x4c>)
 80010b6:	220c      	movs	r2, #12
 80010b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ba:	4b08      	ldr	r3, [pc, #32]	; (80010dc <MX_USART2_UART_Init+0x4c>)
 80010bc:	2200      	movs	r2, #0
 80010be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010c0:	4b06      	ldr	r3, [pc, #24]	; (80010dc <MX_USART2_UART_Init+0x4c>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010c6:	4805      	ldr	r0, [pc, #20]	; (80010dc <MX_USART2_UART_Init+0x4c>)
 80010c8:	f001 f918 	bl	80022fc <HAL_UART_Init>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010d2:	f000 f845 	bl	8001160 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	20000204 	.word	0x20000204
 80010e0:	40004400 	.word	0x40004400

080010e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ea:	f107 0308 	add.w	r3, r7, #8
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	605a      	str	r2, [r3, #4]
 80010f4:	609a      	str	r2, [r3, #8]
 80010f6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f8:	4b17      	ldr	r3, [pc, #92]	; (8001158 <MX_GPIO_Init+0x74>)
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	4a16      	ldr	r2, [pc, #88]	; (8001158 <MX_GPIO_Init+0x74>)
 80010fe:	f043 0304 	orr.w	r3, r3, #4
 8001102:	6193      	str	r3, [r2, #24]
 8001104:	4b14      	ldr	r3, [pc, #80]	; (8001158 <MX_GPIO_Init+0x74>)
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	f003 0304 	and.w	r3, r3, #4
 800110c:	607b      	str	r3, [r7, #4]
 800110e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001110:	2200      	movs	r2, #0
 8001112:	2120      	movs	r1, #32
 8001114:	4811      	ldr	r0, [pc, #68]	; (800115c <MX_GPIO_Init+0x78>)
 8001116:	f000 fcbe 	bl	8001a96 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800111a:	2310      	movs	r3, #16
 800111c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800111e:	2300      	movs	r3, #0
 8001120:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001126:	f107 0308 	add.w	r3, r7, #8
 800112a:	4619      	mov	r1, r3
 800112c:	480b      	ldr	r0, [pc, #44]	; (800115c <MX_GPIO_Init+0x78>)
 800112e:	f000 fb17 	bl	8001760 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001132:	2320      	movs	r3, #32
 8001134:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001136:	2301      	movs	r3, #1
 8001138:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113e:	2302      	movs	r3, #2
 8001140:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001142:	f107 0308 	add.w	r3, r7, #8
 8001146:	4619      	mov	r1, r3
 8001148:	4804      	ldr	r0, [pc, #16]	; (800115c <MX_GPIO_Init+0x78>)
 800114a:	f000 fb09 	bl	8001760 <HAL_GPIO_Init>

}
 800114e:	bf00      	nop
 8001150:	3718      	adds	r7, #24
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40021000 	.word	0x40021000
 800115c:	40010800 	.word	0x40010800

08001160 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001164:	b672      	cpsid	i
}
 8001166:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001168:	e7fe      	b.n	8001168 <Error_Handler+0x8>
	...

0800116c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001172:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <HAL_MspInit+0x5c>)
 8001174:	699b      	ldr	r3, [r3, #24]
 8001176:	4a14      	ldr	r2, [pc, #80]	; (80011c8 <HAL_MspInit+0x5c>)
 8001178:	f043 0301 	orr.w	r3, r3, #1
 800117c:	6193      	str	r3, [r2, #24]
 800117e:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <HAL_MspInit+0x5c>)
 8001180:	699b      	ldr	r3, [r3, #24]
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	60bb      	str	r3, [r7, #8]
 8001188:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800118a:	4b0f      	ldr	r3, [pc, #60]	; (80011c8 <HAL_MspInit+0x5c>)
 800118c:	69db      	ldr	r3, [r3, #28]
 800118e:	4a0e      	ldr	r2, [pc, #56]	; (80011c8 <HAL_MspInit+0x5c>)
 8001190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001194:	61d3      	str	r3, [r2, #28]
 8001196:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <HAL_MspInit+0x5c>)
 8001198:	69db      	ldr	r3, [r3, #28]
 800119a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800119e:	607b      	str	r3, [r7, #4]
 80011a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80011a2:	4b0a      	ldr	r3, [pc, #40]	; (80011cc <HAL_MspInit+0x60>)
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	4a04      	ldr	r2, [pc, #16]	; (80011cc <HAL_MspInit+0x60>)
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011be:	bf00      	nop
 80011c0:	3714      	adds	r7, #20
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bc80      	pop	{r7}
 80011c6:	4770      	bx	lr
 80011c8:	40021000 	.word	0x40021000
 80011cc:	40010000 	.word	0x40010000

080011d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b088      	sub	sp, #32
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d8:	f107 0310 	add.w	r3, r7, #16
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a1b      	ldr	r2, [pc, #108]	; (8001258 <HAL_UART_MspInit+0x88>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d12f      	bne.n	8001250 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011f0:	4b1a      	ldr	r3, [pc, #104]	; (800125c <HAL_UART_MspInit+0x8c>)
 80011f2:	69db      	ldr	r3, [r3, #28]
 80011f4:	4a19      	ldr	r2, [pc, #100]	; (800125c <HAL_UART_MspInit+0x8c>)
 80011f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011fa:	61d3      	str	r3, [r2, #28]
 80011fc:	4b17      	ldr	r3, [pc, #92]	; (800125c <HAL_UART_MspInit+0x8c>)
 80011fe:	69db      	ldr	r3, [r3, #28]
 8001200:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001208:	4b14      	ldr	r3, [pc, #80]	; (800125c <HAL_UART_MspInit+0x8c>)
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	4a13      	ldr	r2, [pc, #76]	; (800125c <HAL_UART_MspInit+0x8c>)
 800120e:	f043 0304 	orr.w	r3, r3, #4
 8001212:	6193      	str	r3, [r2, #24]
 8001214:	4b11      	ldr	r3, [pc, #68]	; (800125c <HAL_UART_MspInit+0x8c>)
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	f003 0304 	and.w	r3, r3, #4
 800121c:	60bb      	str	r3, [r7, #8]
 800121e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001220:	2304      	movs	r3, #4
 8001222:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001224:	2302      	movs	r3, #2
 8001226:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001228:	2303      	movs	r3, #3
 800122a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122c:	f107 0310 	add.w	r3, r7, #16
 8001230:	4619      	mov	r1, r3
 8001232:	480b      	ldr	r0, [pc, #44]	; (8001260 <HAL_UART_MspInit+0x90>)
 8001234:	f000 fa94 	bl	8001760 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001238:	2308      	movs	r3, #8
 800123a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800123c:	2300      	movs	r3, #0
 800123e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001244:	f107 0310 	add.w	r3, r7, #16
 8001248:	4619      	mov	r1, r3
 800124a:	4805      	ldr	r0, [pc, #20]	; (8001260 <HAL_UART_MspInit+0x90>)
 800124c:	f000 fa88 	bl	8001760 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001250:	bf00      	nop
 8001252:	3720      	adds	r7, #32
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	40004400 	.word	0x40004400
 800125c:	40021000 	.word	0x40021000
 8001260:	40010800 	.word	0x40010800

08001264 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001268:	e7fe      	b.n	8001268 <NMI_Handler+0x4>

0800126a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800126a:	b480      	push	{r7}
 800126c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800126e:	e7fe      	b.n	800126e <HardFault_Handler+0x4>

08001270 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001274:	e7fe      	b.n	8001274 <MemManage_Handler+0x4>

08001276 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001276:	b480      	push	{r7}
 8001278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800127a:	e7fe      	b.n	800127a <BusFault_Handler+0x4>

0800127c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001280:	e7fe      	b.n	8001280 <UsageFault_Handler+0x4>

08001282 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	46bd      	mov	sp, r7
 800128a:	bc80      	pop	{r7}
 800128c:	4770      	bx	lr

0800128e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800128e:	b480      	push	{r7}
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	46bd      	mov	sp, r7
 8001296:	bc80      	pop	{r7}
 8001298:	4770      	bx	lr

0800129a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800129a:	b480      	push	{r7}
 800129c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800129e:	bf00      	nop
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bc80      	pop	{r7}
 80012a4:	4770      	bx	lr

080012a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012aa:	f000 f935 	bl	8001518 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012b2:	b480      	push	{r7}
 80012b4:	af00      	add	r7, sp, #0
	return 1;
 80012b6:	2301      	movs	r3, #1
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bc80      	pop	{r7}
 80012be:	4770      	bx	lr

080012c0 <_kill>:

int _kill(int pid, int sig)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80012ca:	f001 faad 	bl	8002828 <__errno>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2216      	movs	r2, #22
 80012d2:	601a      	str	r2, [r3, #0]
	return -1;
 80012d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <_exit>:

void _exit (int status)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80012e8:	f04f 31ff 	mov.w	r1, #4294967295
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f7ff ffe7 	bl	80012c0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80012f2:	e7fe      	b.n	80012f2 <_exit+0x12>

080012f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]
 8001304:	e00a      	b.n	800131c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001306:	f3af 8000 	nop.w
 800130a:	4601      	mov	r1, r0
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	1c5a      	adds	r2, r3, #1
 8001310:	60ba      	str	r2, [r7, #8]
 8001312:	b2ca      	uxtb	r2, r1
 8001314:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	3301      	adds	r3, #1
 800131a:	617b      	str	r3, [r7, #20]
 800131c:	697a      	ldr	r2, [r7, #20]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	429a      	cmp	r2, r3
 8001322:	dbf0      	blt.n	8001306 <_read+0x12>
	}

return len;
 8001324:	687b      	ldr	r3, [r7, #4]
}
 8001326:	4618      	mov	r0, r3
 8001328:	3718      	adds	r7, #24
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b086      	sub	sp, #24
 8001332:	af00      	add	r7, sp, #0
 8001334:	60f8      	str	r0, [r7, #12]
 8001336:	60b9      	str	r1, [r7, #8]
 8001338:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800133a:	2300      	movs	r3, #0
 800133c:	617b      	str	r3, [r7, #20]
 800133e:	e009      	b.n	8001354 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	1c5a      	adds	r2, r3, #1
 8001344:	60ba      	str	r2, [r7, #8]
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	4618      	mov	r0, r3
 800134a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	3301      	adds	r3, #1
 8001352:	617b      	str	r3, [r7, #20]
 8001354:	697a      	ldr	r2, [r7, #20]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	429a      	cmp	r2, r3
 800135a:	dbf1      	blt.n	8001340 <_write+0x12>
	}
	return len;
 800135c:	687b      	ldr	r3, [r7, #4]
}
 800135e:	4618      	mov	r0, r3
 8001360:	3718      	adds	r7, #24
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <_close>:

int _close(int file)
{
 8001366:	b480      	push	{r7}
 8001368:	b083      	sub	sp, #12
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
	return -1;
 800136e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001372:	4618      	mov	r0, r3
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	bc80      	pop	{r7}
 800137a:	4770      	bx	lr

0800137c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800138c:	605a      	str	r2, [r3, #4]
	return 0;
 800138e:	2300      	movs	r3, #0
}
 8001390:	4618      	mov	r0, r3
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	bc80      	pop	{r7}
 8001398:	4770      	bx	lr

0800139a <_isatty>:

int _isatty(int file)
{
 800139a:	b480      	push	{r7}
 800139c:	b083      	sub	sp, #12
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
	return 1;
 80013a2:	2301      	movs	r3, #1
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bc80      	pop	{r7}
 80013ac:	4770      	bx	lr

080013ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013ae:	b480      	push	{r7}
 80013b0:	b085      	sub	sp, #20
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	60f8      	str	r0, [r7, #12]
 80013b6:	60b9      	str	r1, [r7, #8]
 80013b8:	607a      	str	r2, [r7, #4]
	return 0;
 80013ba:	2300      	movs	r3, #0
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3714      	adds	r7, #20
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bc80      	pop	{r7}
 80013c4:	4770      	bx	lr
	...

080013c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b086      	sub	sp, #24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013d0:	4a14      	ldr	r2, [pc, #80]	; (8001424 <_sbrk+0x5c>)
 80013d2:	4b15      	ldr	r3, [pc, #84]	; (8001428 <_sbrk+0x60>)
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013dc:	4b13      	ldr	r3, [pc, #76]	; (800142c <_sbrk+0x64>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d102      	bne.n	80013ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013e4:	4b11      	ldr	r3, [pc, #68]	; (800142c <_sbrk+0x64>)
 80013e6:	4a12      	ldr	r2, [pc, #72]	; (8001430 <_sbrk+0x68>)
 80013e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ea:	4b10      	ldr	r3, [pc, #64]	; (800142c <_sbrk+0x64>)
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4413      	add	r3, r2
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d207      	bcs.n	8001408 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013f8:	f001 fa16 	bl	8002828 <__errno>
 80013fc:	4603      	mov	r3, r0
 80013fe:	220c      	movs	r2, #12
 8001400:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001402:	f04f 33ff 	mov.w	r3, #4294967295
 8001406:	e009      	b.n	800141c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001408:	4b08      	ldr	r3, [pc, #32]	; (800142c <_sbrk+0x64>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800140e:	4b07      	ldr	r3, [pc, #28]	; (800142c <_sbrk+0x64>)
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4413      	add	r3, r2
 8001416:	4a05      	ldr	r2, [pc, #20]	; (800142c <_sbrk+0x64>)
 8001418:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800141a:	68fb      	ldr	r3, [r7, #12]
}
 800141c:	4618      	mov	r0, r3
 800141e:	3718      	adds	r7, #24
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	20005000 	.word	0x20005000
 8001428:	00000400 	.word	0x00000400
 800142c:	200001f8 	.word	0x200001f8
 8001430:	20000278 	.word	0x20000278

08001434 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001438:	bf00      	nop
 800143a:	46bd      	mov	sp, r7
 800143c:	bc80      	pop	{r7}
 800143e:	4770      	bx	lr

08001440 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001440:	480c      	ldr	r0, [pc, #48]	; (8001474 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001442:	490d      	ldr	r1, [pc, #52]	; (8001478 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001444:	4a0d      	ldr	r2, [pc, #52]	; (800147c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001446:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001448:	e002      	b.n	8001450 <LoopCopyDataInit>

0800144a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800144a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800144c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800144e:	3304      	adds	r3, #4

08001450 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001450:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001452:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001454:	d3f9      	bcc.n	800144a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001456:	4a0a      	ldr	r2, [pc, #40]	; (8001480 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001458:	4c0a      	ldr	r4, [pc, #40]	; (8001484 <LoopFillZerobss+0x22>)
  movs r3, #0
 800145a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800145c:	e001      	b.n	8001462 <LoopFillZerobss>

0800145e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800145e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001460:	3204      	adds	r2, #4

08001462 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001462:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001464:	d3fb      	bcc.n	800145e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001466:	f7ff ffe5 	bl	8001434 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800146a:	f001 f9e3 	bl	8002834 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800146e:	f7ff fd8f 	bl	8000f90 <main>
  bx lr
 8001472:	4770      	bx	lr
  ldr r0, =_sdata
 8001474:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001478:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800147c:	08005a44 	.word	0x08005a44
  ldr r2, =_sbss
 8001480:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001484:	20000274 	.word	0x20000274

08001488 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001488:	e7fe      	b.n	8001488 <ADC1_2_IRQHandler>
	...

0800148c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001490:	4b08      	ldr	r3, [pc, #32]	; (80014b4 <HAL_Init+0x28>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a07      	ldr	r2, [pc, #28]	; (80014b4 <HAL_Init+0x28>)
 8001496:	f043 0310 	orr.w	r3, r3, #16
 800149a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800149c:	2003      	movs	r0, #3
 800149e:	f000 f92b 	bl	80016f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014a2:	200f      	movs	r0, #15
 80014a4:	f000 f808 	bl	80014b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014a8:	f7ff fe60 	bl	800116c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40022000 	.word	0x40022000

080014b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014c0:	4b12      	ldr	r3, [pc, #72]	; (800150c <HAL_InitTick+0x54>)
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	4b12      	ldr	r3, [pc, #72]	; (8001510 <HAL_InitTick+0x58>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	4619      	mov	r1, r3
 80014ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80014d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 f935 	bl	8001746 <HAL_SYSTICK_Config>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e00e      	b.n	8001504 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2b0f      	cmp	r3, #15
 80014ea:	d80a      	bhi.n	8001502 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014ec:	2200      	movs	r2, #0
 80014ee:	6879      	ldr	r1, [r7, #4]
 80014f0:	f04f 30ff 	mov.w	r0, #4294967295
 80014f4:	f000 f90b 	bl	800170e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014f8:	4a06      	ldr	r2, [pc, #24]	; (8001514 <HAL_InitTick+0x5c>)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014fe:	2300      	movs	r3, #0
 8001500:	e000      	b.n	8001504 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
}
 8001504:	4618      	mov	r0, r3
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	20000000 	.word	0x20000000
 8001510:	20000008 	.word	0x20000008
 8001514:	20000004 	.word	0x20000004

08001518 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800151c:	4b05      	ldr	r3, [pc, #20]	; (8001534 <HAL_IncTick+0x1c>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	461a      	mov	r2, r3
 8001522:	4b05      	ldr	r3, [pc, #20]	; (8001538 <HAL_IncTick+0x20>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4413      	add	r3, r2
 8001528:	4a03      	ldr	r2, [pc, #12]	; (8001538 <HAL_IncTick+0x20>)
 800152a:	6013      	str	r3, [r2, #0]
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	bc80      	pop	{r7}
 8001532:	4770      	bx	lr
 8001534:	20000008 	.word	0x20000008
 8001538:	20000260 	.word	0x20000260

0800153c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  return uwTick;
 8001540:	4b02      	ldr	r3, [pc, #8]	; (800154c <HAL_GetTick+0x10>)
 8001542:	681b      	ldr	r3, [r3, #0]
}
 8001544:	4618      	mov	r0, r3
 8001546:	46bd      	mov	sp, r7
 8001548:	bc80      	pop	{r7}
 800154a:	4770      	bx	lr
 800154c:	20000260 	.word	0x20000260

08001550 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001558:	f7ff fff0 	bl	800153c <HAL_GetTick>
 800155c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001568:	d005      	beq.n	8001576 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800156a:	4b0a      	ldr	r3, [pc, #40]	; (8001594 <HAL_Delay+0x44>)
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	461a      	mov	r2, r3
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	4413      	add	r3, r2
 8001574:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001576:	bf00      	nop
 8001578:	f7ff ffe0 	bl	800153c <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	68fa      	ldr	r2, [r7, #12]
 8001584:	429a      	cmp	r2, r3
 8001586:	d8f7      	bhi.n	8001578 <HAL_Delay+0x28>
  {
  }
}
 8001588:	bf00      	nop
 800158a:	bf00      	nop
 800158c:	3710      	adds	r7, #16
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	20000008 	.word	0x20000008

08001598 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f003 0307 	and.w	r3, r3, #7
 80015a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015a8:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <__NVIC_SetPriorityGrouping+0x44>)
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ae:	68ba      	ldr	r2, [r7, #8]
 80015b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015b4:	4013      	ands	r3, r2
 80015b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ca:	4a04      	ldr	r2, [pc, #16]	; (80015dc <__NVIC_SetPriorityGrouping+0x44>)
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	60d3      	str	r3, [r2, #12]
}
 80015d0:	bf00      	nop
 80015d2:	3714      	adds	r7, #20
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bc80      	pop	{r7}
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	e000ed00 	.word	0xe000ed00

080015e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015e4:	4b04      	ldr	r3, [pc, #16]	; (80015f8 <__NVIC_GetPriorityGrouping+0x18>)
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	0a1b      	lsrs	r3, r3, #8
 80015ea:	f003 0307 	and.w	r3, r3, #7
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bc80      	pop	{r7}
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	e000ed00 	.word	0xe000ed00

080015fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	6039      	str	r1, [r7, #0]
 8001606:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160c:	2b00      	cmp	r3, #0
 800160e:	db0a      	blt.n	8001626 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	b2da      	uxtb	r2, r3
 8001614:	490c      	ldr	r1, [pc, #48]	; (8001648 <__NVIC_SetPriority+0x4c>)
 8001616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161a:	0112      	lsls	r2, r2, #4
 800161c:	b2d2      	uxtb	r2, r2
 800161e:	440b      	add	r3, r1
 8001620:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001624:	e00a      	b.n	800163c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	b2da      	uxtb	r2, r3
 800162a:	4908      	ldr	r1, [pc, #32]	; (800164c <__NVIC_SetPriority+0x50>)
 800162c:	79fb      	ldrb	r3, [r7, #7]
 800162e:	f003 030f 	and.w	r3, r3, #15
 8001632:	3b04      	subs	r3, #4
 8001634:	0112      	lsls	r2, r2, #4
 8001636:	b2d2      	uxtb	r2, r2
 8001638:	440b      	add	r3, r1
 800163a:	761a      	strb	r2, [r3, #24]
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	bc80      	pop	{r7}
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	e000e100 	.word	0xe000e100
 800164c:	e000ed00 	.word	0xe000ed00

08001650 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001650:	b480      	push	{r7}
 8001652:	b089      	sub	sp, #36	; 0x24
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	f003 0307 	and.w	r3, r3, #7
 8001662:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	f1c3 0307 	rsb	r3, r3, #7
 800166a:	2b04      	cmp	r3, #4
 800166c:	bf28      	it	cs
 800166e:	2304      	movcs	r3, #4
 8001670:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	3304      	adds	r3, #4
 8001676:	2b06      	cmp	r3, #6
 8001678:	d902      	bls.n	8001680 <NVIC_EncodePriority+0x30>
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	3b03      	subs	r3, #3
 800167e:	e000      	b.n	8001682 <NVIC_EncodePriority+0x32>
 8001680:	2300      	movs	r3, #0
 8001682:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001684:	f04f 32ff 	mov.w	r2, #4294967295
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	43da      	mvns	r2, r3
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	401a      	ands	r2, r3
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001698:	f04f 31ff 	mov.w	r1, #4294967295
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	fa01 f303 	lsl.w	r3, r1, r3
 80016a2:	43d9      	mvns	r1, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a8:	4313      	orrs	r3, r2
         );
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3724      	adds	r7, #36	; 0x24
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bc80      	pop	{r7}
 80016b2:	4770      	bx	lr

080016b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	3b01      	subs	r3, #1
 80016c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016c4:	d301      	bcc.n	80016ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016c6:	2301      	movs	r3, #1
 80016c8:	e00f      	b.n	80016ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ca:	4a0a      	ldr	r2, [pc, #40]	; (80016f4 <SysTick_Config+0x40>)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	3b01      	subs	r3, #1
 80016d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016d2:	210f      	movs	r1, #15
 80016d4:	f04f 30ff 	mov.w	r0, #4294967295
 80016d8:	f7ff ff90 	bl	80015fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016dc:	4b05      	ldr	r3, [pc, #20]	; (80016f4 <SysTick_Config+0x40>)
 80016de:	2200      	movs	r2, #0
 80016e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016e2:	4b04      	ldr	r3, [pc, #16]	; (80016f4 <SysTick_Config+0x40>)
 80016e4:	2207      	movs	r2, #7
 80016e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	e000e010 	.word	0xe000e010

080016f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f7ff ff49 	bl	8001598 <__NVIC_SetPriorityGrouping>
}
 8001706:	bf00      	nop
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800170e:	b580      	push	{r7, lr}
 8001710:	b086      	sub	sp, #24
 8001712:	af00      	add	r7, sp, #0
 8001714:	4603      	mov	r3, r0
 8001716:	60b9      	str	r1, [r7, #8]
 8001718:	607a      	str	r2, [r7, #4]
 800171a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800171c:	2300      	movs	r3, #0
 800171e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001720:	f7ff ff5e 	bl	80015e0 <__NVIC_GetPriorityGrouping>
 8001724:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	68b9      	ldr	r1, [r7, #8]
 800172a:	6978      	ldr	r0, [r7, #20]
 800172c:	f7ff ff90 	bl	8001650 <NVIC_EncodePriority>
 8001730:	4602      	mov	r2, r0
 8001732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001736:	4611      	mov	r1, r2
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff ff5f 	bl	80015fc <__NVIC_SetPriority>
}
 800173e:	bf00      	nop
 8001740:	3718      	adds	r7, #24
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b082      	sub	sp, #8
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f7ff ffb0 	bl	80016b4 <SysTick_Config>
 8001754:	4603      	mov	r3, r0
}
 8001756:	4618      	mov	r0, r3
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
	...

08001760 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001760:	b480      	push	{r7}
 8001762:	b08b      	sub	sp, #44	; 0x2c
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800176a:	2300      	movs	r3, #0
 800176c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800176e:	2300      	movs	r3, #0
 8001770:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001772:	e169      	b.n	8001a48 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001774:	2201      	movs	r2, #1
 8001776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	69fa      	ldr	r2, [r7, #28]
 8001784:	4013      	ands	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	429a      	cmp	r2, r3
 800178e:	f040 8158 	bne.w	8001a42 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	4a9a      	ldr	r2, [pc, #616]	; (8001a00 <HAL_GPIO_Init+0x2a0>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d05e      	beq.n	800185a <HAL_GPIO_Init+0xfa>
 800179c:	4a98      	ldr	r2, [pc, #608]	; (8001a00 <HAL_GPIO_Init+0x2a0>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d875      	bhi.n	800188e <HAL_GPIO_Init+0x12e>
 80017a2:	4a98      	ldr	r2, [pc, #608]	; (8001a04 <HAL_GPIO_Init+0x2a4>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d058      	beq.n	800185a <HAL_GPIO_Init+0xfa>
 80017a8:	4a96      	ldr	r2, [pc, #600]	; (8001a04 <HAL_GPIO_Init+0x2a4>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d86f      	bhi.n	800188e <HAL_GPIO_Init+0x12e>
 80017ae:	4a96      	ldr	r2, [pc, #600]	; (8001a08 <HAL_GPIO_Init+0x2a8>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d052      	beq.n	800185a <HAL_GPIO_Init+0xfa>
 80017b4:	4a94      	ldr	r2, [pc, #592]	; (8001a08 <HAL_GPIO_Init+0x2a8>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d869      	bhi.n	800188e <HAL_GPIO_Init+0x12e>
 80017ba:	4a94      	ldr	r2, [pc, #592]	; (8001a0c <HAL_GPIO_Init+0x2ac>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d04c      	beq.n	800185a <HAL_GPIO_Init+0xfa>
 80017c0:	4a92      	ldr	r2, [pc, #584]	; (8001a0c <HAL_GPIO_Init+0x2ac>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d863      	bhi.n	800188e <HAL_GPIO_Init+0x12e>
 80017c6:	4a92      	ldr	r2, [pc, #584]	; (8001a10 <HAL_GPIO_Init+0x2b0>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d046      	beq.n	800185a <HAL_GPIO_Init+0xfa>
 80017cc:	4a90      	ldr	r2, [pc, #576]	; (8001a10 <HAL_GPIO_Init+0x2b0>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d85d      	bhi.n	800188e <HAL_GPIO_Init+0x12e>
 80017d2:	2b12      	cmp	r3, #18
 80017d4:	d82a      	bhi.n	800182c <HAL_GPIO_Init+0xcc>
 80017d6:	2b12      	cmp	r3, #18
 80017d8:	d859      	bhi.n	800188e <HAL_GPIO_Init+0x12e>
 80017da:	a201      	add	r2, pc, #4	; (adr r2, 80017e0 <HAL_GPIO_Init+0x80>)
 80017dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017e0:	0800185b 	.word	0x0800185b
 80017e4:	08001835 	.word	0x08001835
 80017e8:	08001847 	.word	0x08001847
 80017ec:	08001889 	.word	0x08001889
 80017f0:	0800188f 	.word	0x0800188f
 80017f4:	0800188f 	.word	0x0800188f
 80017f8:	0800188f 	.word	0x0800188f
 80017fc:	0800188f 	.word	0x0800188f
 8001800:	0800188f 	.word	0x0800188f
 8001804:	0800188f 	.word	0x0800188f
 8001808:	0800188f 	.word	0x0800188f
 800180c:	0800188f 	.word	0x0800188f
 8001810:	0800188f 	.word	0x0800188f
 8001814:	0800188f 	.word	0x0800188f
 8001818:	0800188f 	.word	0x0800188f
 800181c:	0800188f 	.word	0x0800188f
 8001820:	0800188f 	.word	0x0800188f
 8001824:	0800183d 	.word	0x0800183d
 8001828:	08001851 	.word	0x08001851
 800182c:	4a79      	ldr	r2, [pc, #484]	; (8001a14 <HAL_GPIO_Init+0x2b4>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d013      	beq.n	800185a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001832:	e02c      	b.n	800188e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	623b      	str	r3, [r7, #32]
          break;
 800183a:	e029      	b.n	8001890 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	3304      	adds	r3, #4
 8001842:	623b      	str	r3, [r7, #32]
          break;
 8001844:	e024      	b.n	8001890 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	3308      	adds	r3, #8
 800184c:	623b      	str	r3, [r7, #32]
          break;
 800184e:	e01f      	b.n	8001890 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	330c      	adds	r3, #12
 8001856:	623b      	str	r3, [r7, #32]
          break;
 8001858:	e01a      	b.n	8001890 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d102      	bne.n	8001868 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001862:	2304      	movs	r3, #4
 8001864:	623b      	str	r3, [r7, #32]
          break;
 8001866:	e013      	b.n	8001890 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d105      	bne.n	800187c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001870:	2308      	movs	r3, #8
 8001872:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	69fa      	ldr	r2, [r7, #28]
 8001878:	611a      	str	r2, [r3, #16]
          break;
 800187a:	e009      	b.n	8001890 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800187c:	2308      	movs	r3, #8
 800187e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	69fa      	ldr	r2, [r7, #28]
 8001884:	615a      	str	r2, [r3, #20]
          break;
 8001886:	e003      	b.n	8001890 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001888:	2300      	movs	r3, #0
 800188a:	623b      	str	r3, [r7, #32]
          break;
 800188c:	e000      	b.n	8001890 <HAL_GPIO_Init+0x130>
          break;
 800188e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	2bff      	cmp	r3, #255	; 0xff
 8001894:	d801      	bhi.n	800189a <HAL_GPIO_Init+0x13a>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	e001      	b.n	800189e <HAL_GPIO_Init+0x13e>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	3304      	adds	r3, #4
 800189e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	2bff      	cmp	r3, #255	; 0xff
 80018a4:	d802      	bhi.n	80018ac <HAL_GPIO_Init+0x14c>
 80018a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	e002      	b.n	80018b2 <HAL_GPIO_Init+0x152>
 80018ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ae:	3b08      	subs	r3, #8
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	210f      	movs	r1, #15
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	fa01 f303 	lsl.w	r3, r1, r3
 80018c0:	43db      	mvns	r3, r3
 80018c2:	401a      	ands	r2, r3
 80018c4:	6a39      	ldr	r1, [r7, #32]
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	fa01 f303 	lsl.w	r3, r1, r3
 80018cc:	431a      	orrs	r2, r3
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	f000 80b1 	beq.w	8001a42 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018e0:	4b4d      	ldr	r3, [pc, #308]	; (8001a18 <HAL_GPIO_Init+0x2b8>)
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	4a4c      	ldr	r2, [pc, #304]	; (8001a18 <HAL_GPIO_Init+0x2b8>)
 80018e6:	f043 0301 	orr.w	r3, r3, #1
 80018ea:	6193      	str	r3, [r2, #24]
 80018ec:	4b4a      	ldr	r3, [pc, #296]	; (8001a18 <HAL_GPIO_Init+0x2b8>)
 80018ee:	699b      	ldr	r3, [r3, #24]
 80018f0:	f003 0301 	and.w	r3, r3, #1
 80018f4:	60bb      	str	r3, [r7, #8]
 80018f6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018f8:	4a48      	ldr	r2, [pc, #288]	; (8001a1c <HAL_GPIO_Init+0x2bc>)
 80018fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fc:	089b      	lsrs	r3, r3, #2
 80018fe:	3302      	adds	r3, #2
 8001900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001904:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001908:	f003 0303 	and.w	r3, r3, #3
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	220f      	movs	r2, #15
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	43db      	mvns	r3, r3
 8001916:	68fa      	ldr	r2, [r7, #12]
 8001918:	4013      	ands	r3, r2
 800191a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	4a40      	ldr	r2, [pc, #256]	; (8001a20 <HAL_GPIO_Init+0x2c0>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d013      	beq.n	800194c <HAL_GPIO_Init+0x1ec>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	4a3f      	ldr	r2, [pc, #252]	; (8001a24 <HAL_GPIO_Init+0x2c4>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d00d      	beq.n	8001948 <HAL_GPIO_Init+0x1e8>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	4a3e      	ldr	r2, [pc, #248]	; (8001a28 <HAL_GPIO_Init+0x2c8>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d007      	beq.n	8001944 <HAL_GPIO_Init+0x1e4>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	4a3d      	ldr	r2, [pc, #244]	; (8001a2c <HAL_GPIO_Init+0x2cc>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d101      	bne.n	8001940 <HAL_GPIO_Init+0x1e0>
 800193c:	2303      	movs	r3, #3
 800193e:	e006      	b.n	800194e <HAL_GPIO_Init+0x1ee>
 8001940:	2304      	movs	r3, #4
 8001942:	e004      	b.n	800194e <HAL_GPIO_Init+0x1ee>
 8001944:	2302      	movs	r3, #2
 8001946:	e002      	b.n	800194e <HAL_GPIO_Init+0x1ee>
 8001948:	2301      	movs	r3, #1
 800194a:	e000      	b.n	800194e <HAL_GPIO_Init+0x1ee>
 800194c:	2300      	movs	r3, #0
 800194e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001950:	f002 0203 	and.w	r2, r2, #3
 8001954:	0092      	lsls	r2, r2, #2
 8001956:	4093      	lsls	r3, r2
 8001958:	68fa      	ldr	r2, [r7, #12]
 800195a:	4313      	orrs	r3, r2
 800195c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800195e:	492f      	ldr	r1, [pc, #188]	; (8001a1c <HAL_GPIO_Init+0x2bc>)
 8001960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001962:	089b      	lsrs	r3, r3, #2
 8001964:	3302      	adds	r3, #2
 8001966:	68fa      	ldr	r2, [r7, #12]
 8001968:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001974:	2b00      	cmp	r3, #0
 8001976:	d006      	beq.n	8001986 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001978:	4b2d      	ldr	r3, [pc, #180]	; (8001a30 <HAL_GPIO_Init+0x2d0>)
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	492c      	ldr	r1, [pc, #176]	; (8001a30 <HAL_GPIO_Init+0x2d0>)
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	4313      	orrs	r3, r2
 8001982:	600b      	str	r3, [r1, #0]
 8001984:	e006      	b.n	8001994 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001986:	4b2a      	ldr	r3, [pc, #168]	; (8001a30 <HAL_GPIO_Init+0x2d0>)
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	43db      	mvns	r3, r3
 800198e:	4928      	ldr	r1, [pc, #160]	; (8001a30 <HAL_GPIO_Init+0x2d0>)
 8001990:	4013      	ands	r3, r2
 8001992:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d006      	beq.n	80019ae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019a0:	4b23      	ldr	r3, [pc, #140]	; (8001a30 <HAL_GPIO_Init+0x2d0>)
 80019a2:	685a      	ldr	r2, [r3, #4]
 80019a4:	4922      	ldr	r1, [pc, #136]	; (8001a30 <HAL_GPIO_Init+0x2d0>)
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	604b      	str	r3, [r1, #4]
 80019ac:	e006      	b.n	80019bc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019ae:	4b20      	ldr	r3, [pc, #128]	; (8001a30 <HAL_GPIO_Init+0x2d0>)
 80019b0:	685a      	ldr	r2, [r3, #4]
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	43db      	mvns	r3, r3
 80019b6:	491e      	ldr	r1, [pc, #120]	; (8001a30 <HAL_GPIO_Init+0x2d0>)
 80019b8:	4013      	ands	r3, r2
 80019ba:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d006      	beq.n	80019d6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019c8:	4b19      	ldr	r3, [pc, #100]	; (8001a30 <HAL_GPIO_Init+0x2d0>)
 80019ca:	689a      	ldr	r2, [r3, #8]
 80019cc:	4918      	ldr	r1, [pc, #96]	; (8001a30 <HAL_GPIO_Init+0x2d0>)
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	608b      	str	r3, [r1, #8]
 80019d4:	e006      	b.n	80019e4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019d6:	4b16      	ldr	r3, [pc, #88]	; (8001a30 <HAL_GPIO_Init+0x2d0>)
 80019d8:	689a      	ldr	r2, [r3, #8]
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	43db      	mvns	r3, r3
 80019de:	4914      	ldr	r1, [pc, #80]	; (8001a30 <HAL_GPIO_Init+0x2d0>)
 80019e0:	4013      	ands	r3, r2
 80019e2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d021      	beq.n	8001a34 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019f0:	4b0f      	ldr	r3, [pc, #60]	; (8001a30 <HAL_GPIO_Init+0x2d0>)
 80019f2:	68da      	ldr	r2, [r3, #12]
 80019f4:	490e      	ldr	r1, [pc, #56]	; (8001a30 <HAL_GPIO_Init+0x2d0>)
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	60cb      	str	r3, [r1, #12]
 80019fc:	e021      	b.n	8001a42 <HAL_GPIO_Init+0x2e2>
 80019fe:	bf00      	nop
 8001a00:	10320000 	.word	0x10320000
 8001a04:	10310000 	.word	0x10310000
 8001a08:	10220000 	.word	0x10220000
 8001a0c:	10210000 	.word	0x10210000
 8001a10:	10120000 	.word	0x10120000
 8001a14:	10110000 	.word	0x10110000
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	40010000 	.word	0x40010000
 8001a20:	40010800 	.word	0x40010800
 8001a24:	40010c00 	.word	0x40010c00
 8001a28:	40011000 	.word	0x40011000
 8001a2c:	40011400 	.word	0x40011400
 8001a30:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a34:	4b0b      	ldr	r3, [pc, #44]	; (8001a64 <HAL_GPIO_Init+0x304>)
 8001a36:	68da      	ldr	r2, [r3, #12]
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	4909      	ldr	r1, [pc, #36]	; (8001a64 <HAL_GPIO_Init+0x304>)
 8001a3e:	4013      	ands	r3, r2
 8001a40:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a44:	3301      	adds	r3, #1
 8001a46:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	f47f ae8e 	bne.w	8001774 <HAL_GPIO_Init+0x14>
  }
}
 8001a58:	bf00      	nop
 8001a5a:	bf00      	nop
 8001a5c:	372c      	adds	r7, #44	; 0x2c
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bc80      	pop	{r7}
 8001a62:	4770      	bx	lr
 8001a64:	40010400 	.word	0x40010400

08001a68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	460b      	mov	r3, r1
 8001a72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689a      	ldr	r2, [r3, #8]
 8001a78:	887b      	ldrh	r3, [r7, #2]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d002      	beq.n	8001a86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a80:	2301      	movs	r3, #1
 8001a82:	73fb      	strb	r3, [r7, #15]
 8001a84:	e001      	b.n	8001a8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a86:	2300      	movs	r3, #0
 8001a88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3714      	adds	r7, #20
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bc80      	pop	{r7}
 8001a94:	4770      	bx	lr

08001a96 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a96:	b480      	push	{r7}
 8001a98:	b083      	sub	sp, #12
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	807b      	strh	r3, [r7, #2]
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001aa6:	787b      	ldrb	r3, [r7, #1]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d003      	beq.n	8001ab4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aac:	887a      	ldrh	r2, [r7, #2]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ab2:	e003      	b.n	8001abc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ab4:	887b      	ldrh	r3, [r7, #2]
 8001ab6:	041a      	lsls	r2, r3, #16
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	611a      	str	r2, [r3, #16]
}
 8001abc:	bf00      	nop
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bc80      	pop	{r7}
 8001ac4:	4770      	bx	lr
	...

08001ac8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d101      	bne.n	8001ada <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e26c      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	f000 8087 	beq.w	8001bf6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ae8:	4b92      	ldr	r3, [pc, #584]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f003 030c 	and.w	r3, r3, #12
 8001af0:	2b04      	cmp	r3, #4
 8001af2:	d00c      	beq.n	8001b0e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001af4:	4b8f      	ldr	r3, [pc, #572]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f003 030c 	and.w	r3, r3, #12
 8001afc:	2b08      	cmp	r3, #8
 8001afe:	d112      	bne.n	8001b26 <HAL_RCC_OscConfig+0x5e>
 8001b00:	4b8c      	ldr	r3, [pc, #560]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b0c:	d10b      	bne.n	8001b26 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b0e:	4b89      	ldr	r3, [pc, #548]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d06c      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x12c>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d168      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e246      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b2e:	d106      	bne.n	8001b3e <HAL_RCC_OscConfig+0x76>
 8001b30:	4b80      	ldr	r3, [pc, #512]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a7f      	ldr	r2, [pc, #508]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b3a:	6013      	str	r3, [r2, #0]
 8001b3c:	e02e      	b.n	8001b9c <HAL_RCC_OscConfig+0xd4>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d10c      	bne.n	8001b60 <HAL_RCC_OscConfig+0x98>
 8001b46:	4b7b      	ldr	r3, [pc, #492]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a7a      	ldr	r2, [pc, #488]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b50:	6013      	str	r3, [r2, #0]
 8001b52:	4b78      	ldr	r3, [pc, #480]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a77      	ldr	r2, [pc, #476]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b5c:	6013      	str	r3, [r2, #0]
 8001b5e:	e01d      	b.n	8001b9c <HAL_RCC_OscConfig+0xd4>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b68:	d10c      	bne.n	8001b84 <HAL_RCC_OscConfig+0xbc>
 8001b6a:	4b72      	ldr	r3, [pc, #456]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a71      	ldr	r2, [pc, #452]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b74:	6013      	str	r3, [r2, #0]
 8001b76:	4b6f      	ldr	r3, [pc, #444]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a6e      	ldr	r2, [pc, #440]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b80:	6013      	str	r3, [r2, #0]
 8001b82:	e00b      	b.n	8001b9c <HAL_RCC_OscConfig+0xd4>
 8001b84:	4b6b      	ldr	r3, [pc, #428]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a6a      	ldr	r2, [pc, #424]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b8e:	6013      	str	r3, [r2, #0]
 8001b90:	4b68      	ldr	r3, [pc, #416]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a67      	ldr	r2, [pc, #412]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b9a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d013      	beq.n	8001bcc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba4:	f7ff fcca 	bl	800153c <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bac:	f7ff fcc6 	bl	800153c <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b64      	cmp	r3, #100	; 0x64
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e1fa      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bbe:	4b5d      	ldr	r3, [pc, #372]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d0f0      	beq.n	8001bac <HAL_RCC_OscConfig+0xe4>
 8001bca:	e014      	b.n	8001bf6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bcc:	f7ff fcb6 	bl	800153c <HAL_GetTick>
 8001bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bd2:	e008      	b.n	8001be6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bd4:	f7ff fcb2 	bl	800153c <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b64      	cmp	r3, #100	; 0x64
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e1e6      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001be6:	4b53      	ldr	r3, [pc, #332]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d1f0      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x10c>
 8001bf2:	e000      	b.n	8001bf6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d063      	beq.n	8001cca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c02:	4b4c      	ldr	r3, [pc, #304]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f003 030c 	and.w	r3, r3, #12
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d00b      	beq.n	8001c26 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c0e:	4b49      	ldr	r3, [pc, #292]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f003 030c 	and.w	r3, r3, #12
 8001c16:	2b08      	cmp	r3, #8
 8001c18:	d11c      	bne.n	8001c54 <HAL_RCC_OscConfig+0x18c>
 8001c1a:	4b46      	ldr	r3, [pc, #280]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d116      	bne.n	8001c54 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c26:	4b43      	ldr	r3, [pc, #268]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d005      	beq.n	8001c3e <HAL_RCC_OscConfig+0x176>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d001      	beq.n	8001c3e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e1ba      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c3e:	4b3d      	ldr	r3, [pc, #244]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	695b      	ldr	r3, [r3, #20]
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	4939      	ldr	r1, [pc, #228]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c52:	e03a      	b.n	8001cca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	691b      	ldr	r3, [r3, #16]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d020      	beq.n	8001c9e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c5c:	4b36      	ldr	r3, [pc, #216]	; (8001d38 <HAL_RCC_OscConfig+0x270>)
 8001c5e:	2201      	movs	r2, #1
 8001c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c62:	f7ff fc6b 	bl	800153c <HAL_GetTick>
 8001c66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c68:	e008      	b.n	8001c7c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c6a:	f7ff fc67 	bl	800153c <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e19b      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c7c:	4b2d      	ldr	r3, [pc, #180]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d0f0      	beq.n	8001c6a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c88:	4b2a      	ldr	r3, [pc, #168]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	695b      	ldr	r3, [r3, #20]
 8001c94:	00db      	lsls	r3, r3, #3
 8001c96:	4927      	ldr	r1, [pc, #156]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	600b      	str	r3, [r1, #0]
 8001c9c:	e015      	b.n	8001cca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c9e:	4b26      	ldr	r3, [pc, #152]	; (8001d38 <HAL_RCC_OscConfig+0x270>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca4:	f7ff fc4a 	bl	800153c <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cac:	f7ff fc46 	bl	800153c <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e17a      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cbe:	4b1d      	ldr	r3, [pc, #116]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1f0      	bne.n	8001cac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0308 	and.w	r3, r3, #8
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d03a      	beq.n	8001d4c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d019      	beq.n	8001d12 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cde:	4b17      	ldr	r3, [pc, #92]	; (8001d3c <HAL_RCC_OscConfig+0x274>)
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ce4:	f7ff fc2a 	bl	800153c <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cec:	f7ff fc26 	bl	800153c <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e15a      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cfe:	4b0d      	ldr	r3, [pc, #52]	; (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d0f0      	beq.n	8001cec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d0a:	2001      	movs	r0, #1
 8001d0c:	f000 fad8 	bl	80022c0 <RCC_Delay>
 8001d10:	e01c      	b.n	8001d4c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d12:	4b0a      	ldr	r3, [pc, #40]	; (8001d3c <HAL_RCC_OscConfig+0x274>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d18:	f7ff fc10 	bl	800153c <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d1e:	e00f      	b.n	8001d40 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d20:	f7ff fc0c 	bl	800153c <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d908      	bls.n	8001d40 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e140      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4ec>
 8001d32:	bf00      	nop
 8001d34:	40021000 	.word	0x40021000
 8001d38:	42420000 	.word	0x42420000
 8001d3c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d40:	4b9e      	ldr	r3, [pc, #632]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d44:	f003 0302 	and.w	r3, r3, #2
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d1e9      	bne.n	8001d20 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0304 	and.w	r3, r3, #4
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f000 80a6 	beq.w	8001ea6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d5e:	4b97      	ldr	r3, [pc, #604]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d10d      	bne.n	8001d86 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d6a:	4b94      	ldr	r3, [pc, #592]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001d6c:	69db      	ldr	r3, [r3, #28]
 8001d6e:	4a93      	ldr	r2, [pc, #588]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001d70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d74:	61d3      	str	r3, [r2, #28]
 8001d76:	4b91      	ldr	r3, [pc, #580]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001d78:	69db      	ldr	r3, [r3, #28]
 8001d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d7e:	60bb      	str	r3, [r7, #8]
 8001d80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d82:	2301      	movs	r3, #1
 8001d84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d86:	4b8e      	ldr	r3, [pc, #568]	; (8001fc0 <HAL_RCC_OscConfig+0x4f8>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d118      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d92:	4b8b      	ldr	r3, [pc, #556]	; (8001fc0 <HAL_RCC_OscConfig+0x4f8>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a8a      	ldr	r2, [pc, #552]	; (8001fc0 <HAL_RCC_OscConfig+0x4f8>)
 8001d98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d9e:	f7ff fbcd 	bl	800153c <HAL_GetTick>
 8001da2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da4:	e008      	b.n	8001db8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001da6:	f7ff fbc9 	bl	800153c <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	2b64      	cmp	r3, #100	; 0x64
 8001db2:	d901      	bls.n	8001db8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e0fd      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db8:	4b81      	ldr	r3, [pc, #516]	; (8001fc0 <HAL_RCC_OscConfig+0x4f8>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d0f0      	beq.n	8001da6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d106      	bne.n	8001dda <HAL_RCC_OscConfig+0x312>
 8001dcc:	4b7b      	ldr	r3, [pc, #492]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001dce:	6a1b      	ldr	r3, [r3, #32]
 8001dd0:	4a7a      	ldr	r2, [pc, #488]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001dd2:	f043 0301 	orr.w	r3, r3, #1
 8001dd6:	6213      	str	r3, [r2, #32]
 8001dd8:	e02d      	b.n	8001e36 <HAL_RCC_OscConfig+0x36e>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d10c      	bne.n	8001dfc <HAL_RCC_OscConfig+0x334>
 8001de2:	4b76      	ldr	r3, [pc, #472]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001de4:	6a1b      	ldr	r3, [r3, #32]
 8001de6:	4a75      	ldr	r2, [pc, #468]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001de8:	f023 0301 	bic.w	r3, r3, #1
 8001dec:	6213      	str	r3, [r2, #32]
 8001dee:	4b73      	ldr	r3, [pc, #460]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001df0:	6a1b      	ldr	r3, [r3, #32]
 8001df2:	4a72      	ldr	r2, [pc, #456]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001df4:	f023 0304 	bic.w	r3, r3, #4
 8001df8:	6213      	str	r3, [r2, #32]
 8001dfa:	e01c      	b.n	8001e36 <HAL_RCC_OscConfig+0x36e>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	2b05      	cmp	r3, #5
 8001e02:	d10c      	bne.n	8001e1e <HAL_RCC_OscConfig+0x356>
 8001e04:	4b6d      	ldr	r3, [pc, #436]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001e06:	6a1b      	ldr	r3, [r3, #32]
 8001e08:	4a6c      	ldr	r2, [pc, #432]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001e0a:	f043 0304 	orr.w	r3, r3, #4
 8001e0e:	6213      	str	r3, [r2, #32]
 8001e10:	4b6a      	ldr	r3, [pc, #424]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001e12:	6a1b      	ldr	r3, [r3, #32]
 8001e14:	4a69      	ldr	r2, [pc, #420]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001e16:	f043 0301 	orr.w	r3, r3, #1
 8001e1a:	6213      	str	r3, [r2, #32]
 8001e1c:	e00b      	b.n	8001e36 <HAL_RCC_OscConfig+0x36e>
 8001e1e:	4b67      	ldr	r3, [pc, #412]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001e20:	6a1b      	ldr	r3, [r3, #32]
 8001e22:	4a66      	ldr	r2, [pc, #408]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001e24:	f023 0301 	bic.w	r3, r3, #1
 8001e28:	6213      	str	r3, [r2, #32]
 8001e2a:	4b64      	ldr	r3, [pc, #400]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001e2c:	6a1b      	ldr	r3, [r3, #32]
 8001e2e:	4a63      	ldr	r2, [pc, #396]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001e30:	f023 0304 	bic.w	r3, r3, #4
 8001e34:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d015      	beq.n	8001e6a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e3e:	f7ff fb7d 	bl	800153c <HAL_GetTick>
 8001e42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e44:	e00a      	b.n	8001e5c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e46:	f7ff fb79 	bl	800153c <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d901      	bls.n	8001e5c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e0ab      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e5c:	4b57      	ldr	r3, [pc, #348]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001e5e:	6a1b      	ldr	r3, [r3, #32]
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d0ee      	beq.n	8001e46 <HAL_RCC_OscConfig+0x37e>
 8001e68:	e014      	b.n	8001e94 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e6a:	f7ff fb67 	bl	800153c <HAL_GetTick>
 8001e6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e70:	e00a      	b.n	8001e88 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e72:	f7ff fb63 	bl	800153c <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d901      	bls.n	8001e88 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e095      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e88:	4b4c      	ldr	r3, [pc, #304]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001e8a:	6a1b      	ldr	r3, [r3, #32]
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1ee      	bne.n	8001e72 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e94:	7dfb      	ldrb	r3, [r7, #23]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d105      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e9a:	4b48      	ldr	r3, [pc, #288]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001e9c:	69db      	ldr	r3, [r3, #28]
 8001e9e:	4a47      	ldr	r2, [pc, #284]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001ea0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ea4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	f000 8081 	beq.w	8001fb2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001eb0:	4b42      	ldr	r3, [pc, #264]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f003 030c 	and.w	r3, r3, #12
 8001eb8:	2b08      	cmp	r3, #8
 8001eba:	d061      	beq.n	8001f80 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	69db      	ldr	r3, [r3, #28]
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d146      	bne.n	8001f52 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ec4:	4b3f      	ldr	r3, [pc, #252]	; (8001fc4 <HAL_RCC_OscConfig+0x4fc>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eca:	f7ff fb37 	bl	800153c <HAL_GetTick>
 8001ece:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ed0:	e008      	b.n	8001ee4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ed2:	f7ff fb33 	bl	800153c <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d901      	bls.n	8001ee4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e067      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ee4:	4b35      	ldr	r3, [pc, #212]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d1f0      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a1b      	ldr	r3, [r3, #32]
 8001ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ef8:	d108      	bne.n	8001f0c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001efa:	4b30      	ldr	r3, [pc, #192]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	492d      	ldr	r1, [pc, #180]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f0c:	4b2b      	ldr	r3, [pc, #172]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a19      	ldr	r1, [r3, #32]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1c:	430b      	orrs	r3, r1
 8001f1e:	4927      	ldr	r1, [pc, #156]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001f20:	4313      	orrs	r3, r2
 8001f22:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f24:	4b27      	ldr	r3, [pc, #156]	; (8001fc4 <HAL_RCC_OscConfig+0x4fc>)
 8001f26:	2201      	movs	r2, #1
 8001f28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2a:	f7ff fb07 	bl	800153c <HAL_GetTick>
 8001f2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f30:	e008      	b.n	8001f44 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f32:	f7ff fb03 	bl	800153c <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d901      	bls.n	8001f44 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e037      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f44:	4b1d      	ldr	r3, [pc, #116]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d0f0      	beq.n	8001f32 <HAL_RCC_OscConfig+0x46a>
 8001f50:	e02f      	b.n	8001fb2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f52:	4b1c      	ldr	r3, [pc, #112]	; (8001fc4 <HAL_RCC_OscConfig+0x4fc>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f58:	f7ff faf0 	bl	800153c <HAL_GetTick>
 8001f5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f5e:	e008      	b.n	8001f72 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f60:	f7ff faec 	bl	800153c <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e020      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f72:	4b12      	ldr	r3, [pc, #72]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d1f0      	bne.n	8001f60 <HAL_RCC_OscConfig+0x498>
 8001f7e:	e018      	b.n	8001fb2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	69db      	ldr	r3, [r3, #28]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d101      	bne.n	8001f8c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e013      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f8c:	4b0b      	ldr	r3, [pc, #44]	; (8001fbc <HAL_RCC_OscConfig+0x4f4>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a1b      	ldr	r3, [r3, #32]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d106      	bne.n	8001fae <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d001      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e000      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3718      	adds	r7, #24
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	40007000 	.word	0x40007000
 8001fc4:	42420060 	.word	0x42420060

08001fc8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d101      	bne.n	8001fdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e0d0      	b.n	800217e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fdc:	4b6a      	ldr	r3, [pc, #424]	; (8002188 <HAL_RCC_ClockConfig+0x1c0>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0307 	and.w	r3, r3, #7
 8001fe4:	683a      	ldr	r2, [r7, #0]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d910      	bls.n	800200c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fea:	4b67      	ldr	r3, [pc, #412]	; (8002188 <HAL_RCC_ClockConfig+0x1c0>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f023 0207 	bic.w	r2, r3, #7
 8001ff2:	4965      	ldr	r1, [pc, #404]	; (8002188 <HAL_RCC_ClockConfig+0x1c0>)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ffa:	4b63      	ldr	r3, [pc, #396]	; (8002188 <HAL_RCC_ClockConfig+0x1c0>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0307 	and.w	r3, r3, #7
 8002002:	683a      	ldr	r2, [r7, #0]
 8002004:	429a      	cmp	r2, r3
 8002006:	d001      	beq.n	800200c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e0b8      	b.n	800217e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d020      	beq.n	800205a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0304 	and.w	r3, r3, #4
 8002020:	2b00      	cmp	r3, #0
 8002022:	d005      	beq.n	8002030 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002024:	4b59      	ldr	r3, [pc, #356]	; (800218c <HAL_RCC_ClockConfig+0x1c4>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	4a58      	ldr	r2, [pc, #352]	; (800218c <HAL_RCC_ClockConfig+0x1c4>)
 800202a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800202e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0308 	and.w	r3, r3, #8
 8002038:	2b00      	cmp	r3, #0
 800203a:	d005      	beq.n	8002048 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800203c:	4b53      	ldr	r3, [pc, #332]	; (800218c <HAL_RCC_ClockConfig+0x1c4>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	4a52      	ldr	r2, [pc, #328]	; (800218c <HAL_RCC_ClockConfig+0x1c4>)
 8002042:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002046:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002048:	4b50      	ldr	r3, [pc, #320]	; (800218c <HAL_RCC_ClockConfig+0x1c4>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	494d      	ldr	r1, [pc, #308]	; (800218c <HAL_RCC_ClockConfig+0x1c4>)
 8002056:	4313      	orrs	r3, r2
 8002058:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	2b00      	cmp	r3, #0
 8002064:	d040      	beq.n	80020e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d107      	bne.n	800207e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800206e:	4b47      	ldr	r3, [pc, #284]	; (800218c <HAL_RCC_ClockConfig+0x1c4>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d115      	bne.n	80020a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e07f      	b.n	800217e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	2b02      	cmp	r3, #2
 8002084:	d107      	bne.n	8002096 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002086:	4b41      	ldr	r3, [pc, #260]	; (800218c <HAL_RCC_ClockConfig+0x1c4>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d109      	bne.n	80020a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e073      	b.n	800217e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002096:	4b3d      	ldr	r3, [pc, #244]	; (800218c <HAL_RCC_ClockConfig+0x1c4>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d101      	bne.n	80020a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e06b      	b.n	800217e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020a6:	4b39      	ldr	r3, [pc, #228]	; (800218c <HAL_RCC_ClockConfig+0x1c4>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f023 0203 	bic.w	r2, r3, #3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	4936      	ldr	r1, [pc, #216]	; (800218c <HAL_RCC_ClockConfig+0x1c4>)
 80020b4:	4313      	orrs	r3, r2
 80020b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020b8:	f7ff fa40 	bl	800153c <HAL_GetTick>
 80020bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020be:	e00a      	b.n	80020d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020c0:	f7ff fa3c 	bl	800153c <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e053      	b.n	800217e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020d6:	4b2d      	ldr	r3, [pc, #180]	; (800218c <HAL_RCC_ClockConfig+0x1c4>)
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f003 020c 	and.w	r2, r3, #12
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d1eb      	bne.n	80020c0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020e8:	4b27      	ldr	r3, [pc, #156]	; (8002188 <HAL_RCC_ClockConfig+0x1c0>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0307 	and.w	r3, r3, #7
 80020f0:	683a      	ldr	r2, [r7, #0]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d210      	bcs.n	8002118 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020f6:	4b24      	ldr	r3, [pc, #144]	; (8002188 <HAL_RCC_ClockConfig+0x1c0>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f023 0207 	bic.w	r2, r3, #7
 80020fe:	4922      	ldr	r1, [pc, #136]	; (8002188 <HAL_RCC_ClockConfig+0x1c0>)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	4313      	orrs	r3, r2
 8002104:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002106:	4b20      	ldr	r3, [pc, #128]	; (8002188 <HAL_RCC_ClockConfig+0x1c0>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0307 	and.w	r3, r3, #7
 800210e:	683a      	ldr	r2, [r7, #0]
 8002110:	429a      	cmp	r2, r3
 8002112:	d001      	beq.n	8002118 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e032      	b.n	800217e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0304 	and.w	r3, r3, #4
 8002120:	2b00      	cmp	r3, #0
 8002122:	d008      	beq.n	8002136 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002124:	4b19      	ldr	r3, [pc, #100]	; (800218c <HAL_RCC_ClockConfig+0x1c4>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	4916      	ldr	r1, [pc, #88]	; (800218c <HAL_RCC_ClockConfig+0x1c4>)
 8002132:	4313      	orrs	r3, r2
 8002134:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0308 	and.w	r3, r3, #8
 800213e:	2b00      	cmp	r3, #0
 8002140:	d009      	beq.n	8002156 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002142:	4b12      	ldr	r3, [pc, #72]	; (800218c <HAL_RCC_ClockConfig+0x1c4>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	00db      	lsls	r3, r3, #3
 8002150:	490e      	ldr	r1, [pc, #56]	; (800218c <HAL_RCC_ClockConfig+0x1c4>)
 8002152:	4313      	orrs	r3, r2
 8002154:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002156:	f000 f821 	bl	800219c <HAL_RCC_GetSysClockFreq>
 800215a:	4602      	mov	r2, r0
 800215c:	4b0b      	ldr	r3, [pc, #44]	; (800218c <HAL_RCC_ClockConfig+0x1c4>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	091b      	lsrs	r3, r3, #4
 8002162:	f003 030f 	and.w	r3, r3, #15
 8002166:	490a      	ldr	r1, [pc, #40]	; (8002190 <HAL_RCC_ClockConfig+0x1c8>)
 8002168:	5ccb      	ldrb	r3, [r1, r3]
 800216a:	fa22 f303 	lsr.w	r3, r2, r3
 800216e:	4a09      	ldr	r2, [pc, #36]	; (8002194 <HAL_RCC_ClockConfig+0x1cc>)
 8002170:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002172:	4b09      	ldr	r3, [pc, #36]	; (8002198 <HAL_RCC_ClockConfig+0x1d0>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4618      	mov	r0, r3
 8002178:	f7ff f99e 	bl	80014b8 <HAL_InitTick>

  return HAL_OK;
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3710      	adds	r7, #16
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	40022000 	.word	0x40022000
 800218c:	40021000 	.word	0x40021000
 8002190:	08005640 	.word	0x08005640
 8002194:	20000000 	.word	0x20000000
 8002198:	20000004 	.word	0x20000004

0800219c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800219c:	b490      	push	{r4, r7}
 800219e:	b08a      	sub	sp, #40	; 0x28
 80021a0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80021a2:	4b2a      	ldr	r3, [pc, #168]	; (800224c <HAL_RCC_GetSysClockFreq+0xb0>)
 80021a4:	1d3c      	adds	r4, r7, #4
 80021a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80021ac:	f240 2301 	movw	r3, #513	; 0x201
 80021b0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021b2:	2300      	movs	r3, #0
 80021b4:	61fb      	str	r3, [r7, #28]
 80021b6:	2300      	movs	r3, #0
 80021b8:	61bb      	str	r3, [r7, #24]
 80021ba:	2300      	movs	r3, #0
 80021bc:	627b      	str	r3, [r7, #36]	; 0x24
 80021be:	2300      	movs	r3, #0
 80021c0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80021c2:	2300      	movs	r3, #0
 80021c4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80021c6:	4b22      	ldr	r3, [pc, #136]	; (8002250 <HAL_RCC_GetSysClockFreq+0xb4>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	f003 030c 	and.w	r3, r3, #12
 80021d2:	2b04      	cmp	r3, #4
 80021d4:	d002      	beq.n	80021dc <HAL_RCC_GetSysClockFreq+0x40>
 80021d6:	2b08      	cmp	r3, #8
 80021d8:	d003      	beq.n	80021e2 <HAL_RCC_GetSysClockFreq+0x46>
 80021da:	e02d      	b.n	8002238 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021dc:	4b1d      	ldr	r3, [pc, #116]	; (8002254 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021de:	623b      	str	r3, [r7, #32]
      break;
 80021e0:	e02d      	b.n	800223e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	0c9b      	lsrs	r3, r3, #18
 80021e6:	f003 030f 	and.w	r3, r3, #15
 80021ea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80021ee:	4413      	add	r3, r2
 80021f0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80021f4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d013      	beq.n	8002228 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002200:	4b13      	ldr	r3, [pc, #76]	; (8002250 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	0c5b      	lsrs	r3, r3, #17
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800220e:	4413      	add	r3, r2
 8002210:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002214:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	4a0e      	ldr	r2, [pc, #56]	; (8002254 <HAL_RCC_GetSysClockFreq+0xb8>)
 800221a:	fb02 f203 	mul.w	r2, r2, r3
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	fbb2 f3f3 	udiv	r3, r2, r3
 8002224:	627b      	str	r3, [r7, #36]	; 0x24
 8002226:	e004      	b.n	8002232 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	4a0b      	ldr	r2, [pc, #44]	; (8002258 <HAL_RCC_GetSysClockFreq+0xbc>)
 800222c:	fb02 f303 	mul.w	r3, r2, r3
 8002230:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002234:	623b      	str	r3, [r7, #32]
      break;
 8002236:	e002      	b.n	800223e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002238:	4b06      	ldr	r3, [pc, #24]	; (8002254 <HAL_RCC_GetSysClockFreq+0xb8>)
 800223a:	623b      	str	r3, [r7, #32]
      break;
 800223c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800223e:	6a3b      	ldr	r3, [r7, #32]
}
 8002240:	4618      	mov	r0, r3
 8002242:	3728      	adds	r7, #40	; 0x28
 8002244:	46bd      	mov	sp, r7
 8002246:	bc90      	pop	{r4, r7}
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	080055dc 	.word	0x080055dc
 8002250:	40021000 	.word	0x40021000
 8002254:	007a1200 	.word	0x007a1200
 8002258:	003d0900 	.word	0x003d0900

0800225c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002260:	4b02      	ldr	r3, [pc, #8]	; (800226c <HAL_RCC_GetHCLKFreq+0x10>)
 8002262:	681b      	ldr	r3, [r3, #0]
}
 8002264:	4618      	mov	r0, r3
 8002266:	46bd      	mov	sp, r7
 8002268:	bc80      	pop	{r7}
 800226a:	4770      	bx	lr
 800226c:	20000000 	.word	0x20000000

08002270 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002274:	f7ff fff2 	bl	800225c <HAL_RCC_GetHCLKFreq>
 8002278:	4602      	mov	r2, r0
 800227a:	4b05      	ldr	r3, [pc, #20]	; (8002290 <HAL_RCC_GetPCLK1Freq+0x20>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	0a1b      	lsrs	r3, r3, #8
 8002280:	f003 0307 	and.w	r3, r3, #7
 8002284:	4903      	ldr	r1, [pc, #12]	; (8002294 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002286:	5ccb      	ldrb	r3, [r1, r3]
 8002288:	fa22 f303 	lsr.w	r3, r2, r3
}
 800228c:	4618      	mov	r0, r3
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40021000 	.word	0x40021000
 8002294:	08005650 	.word	0x08005650

08002298 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800229c:	f7ff ffde 	bl	800225c <HAL_RCC_GetHCLKFreq>
 80022a0:	4602      	mov	r2, r0
 80022a2:	4b05      	ldr	r3, [pc, #20]	; (80022b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	0adb      	lsrs	r3, r3, #11
 80022a8:	f003 0307 	and.w	r3, r3, #7
 80022ac:	4903      	ldr	r1, [pc, #12]	; (80022bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80022ae:	5ccb      	ldrb	r3, [r1, r3]
 80022b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40021000 	.word	0x40021000
 80022bc:	08005650 	.word	0x08005650

080022c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022c8:	4b0a      	ldr	r3, [pc, #40]	; (80022f4 <RCC_Delay+0x34>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a0a      	ldr	r2, [pc, #40]	; (80022f8 <RCC_Delay+0x38>)
 80022ce:	fba2 2303 	umull	r2, r3, r2, r3
 80022d2:	0a5b      	lsrs	r3, r3, #9
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	fb02 f303 	mul.w	r3, r2, r3
 80022da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80022dc:	bf00      	nop
  }
  while (Delay --);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	1e5a      	subs	r2, r3, #1
 80022e2:	60fa      	str	r2, [r7, #12]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d1f9      	bne.n	80022dc <RCC_Delay+0x1c>
}
 80022e8:	bf00      	nop
 80022ea:	bf00      	nop
 80022ec:	3714      	adds	r7, #20
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bc80      	pop	{r7}
 80022f2:	4770      	bx	lr
 80022f4:	20000000 	.word	0x20000000
 80022f8:	10624dd3 	.word	0x10624dd3

080022fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e03f      	b.n	800238e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b00      	cmp	r3, #0
 8002318:	d106      	bne.n	8002328 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f7fe ff54 	bl	80011d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2224      	movs	r2, #36	; 0x24
 800232c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	68da      	ldr	r2, [r3, #12]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800233e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f000 f905 	bl	8002550 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	691a      	ldr	r2, [r3, #16]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002354:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	695a      	ldr	r2, [r3, #20]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002364:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68da      	ldr	r2, [r3, #12]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002374:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2220      	movs	r2, #32
 8002380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2220      	movs	r2, #32
 8002388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}

08002396 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002396:	b580      	push	{r7, lr}
 8002398:	b08a      	sub	sp, #40	; 0x28
 800239a:	af02      	add	r7, sp, #8
 800239c:	60f8      	str	r0, [r7, #12]
 800239e:	60b9      	str	r1, [r7, #8]
 80023a0:	603b      	str	r3, [r7, #0]
 80023a2:	4613      	mov	r3, r2
 80023a4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80023a6:	2300      	movs	r3, #0
 80023a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	2b20      	cmp	r3, #32
 80023b4:	d17c      	bne.n	80024b0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d002      	beq.n	80023c2 <HAL_UART_Transmit+0x2c>
 80023bc:	88fb      	ldrh	r3, [r7, #6]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d101      	bne.n	80023c6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e075      	b.n	80024b2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d101      	bne.n	80023d4 <HAL_UART_Transmit+0x3e>
 80023d0:	2302      	movs	r3, #2
 80023d2:	e06e      	b.n	80024b2 <HAL_UART_Transmit+0x11c>
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2200      	movs	r2, #0
 80023e0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2221      	movs	r2, #33	; 0x21
 80023e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80023ea:	f7ff f8a7 	bl	800153c <HAL_GetTick>
 80023ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	88fa      	ldrh	r2, [r7, #6]
 80023f4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	88fa      	ldrh	r2, [r7, #6]
 80023fa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002404:	d108      	bne.n	8002418 <HAL_UART_Transmit+0x82>
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d104      	bne.n	8002418 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800240e:	2300      	movs	r3, #0
 8002410:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	61bb      	str	r3, [r7, #24]
 8002416:	e003      	b.n	8002420 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800241c:	2300      	movs	r3, #0
 800241e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002428:	e02a      	b.n	8002480 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	9300      	str	r3, [sp, #0]
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	2200      	movs	r2, #0
 8002432:	2180      	movs	r1, #128	; 0x80
 8002434:	68f8      	ldr	r0, [r7, #12]
 8002436:	f000 f840 	bl	80024ba <UART_WaitOnFlagUntilTimeout>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d001      	beq.n	8002444 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e036      	b.n	80024b2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d10b      	bne.n	8002462 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	881b      	ldrh	r3, [r3, #0]
 800244e:	461a      	mov	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002458:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	3302      	adds	r3, #2
 800245e:	61bb      	str	r3, [r7, #24]
 8002460:	e007      	b.n	8002472 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	781a      	ldrb	r2, [r3, #0]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	3301      	adds	r3, #1
 8002470:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002476:	b29b      	uxth	r3, r3
 8002478:	3b01      	subs	r3, #1
 800247a:	b29a      	uxth	r2, r3
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002484:	b29b      	uxth	r3, r3
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1cf      	bne.n	800242a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	9300      	str	r3, [sp, #0]
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	2200      	movs	r2, #0
 8002492:	2140      	movs	r1, #64	; 0x40
 8002494:	68f8      	ldr	r0, [r7, #12]
 8002496:	f000 f810 	bl	80024ba <UART_WaitOnFlagUntilTimeout>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e006      	b.n	80024b2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2220      	movs	r2, #32
 80024a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80024ac:	2300      	movs	r3, #0
 80024ae:	e000      	b.n	80024b2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80024b0:	2302      	movs	r3, #2
  }
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3720      	adds	r7, #32
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b084      	sub	sp, #16
 80024be:	af00      	add	r7, sp, #0
 80024c0:	60f8      	str	r0, [r7, #12]
 80024c2:	60b9      	str	r1, [r7, #8]
 80024c4:	603b      	str	r3, [r7, #0]
 80024c6:	4613      	mov	r3, r2
 80024c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024ca:	e02c      	b.n	8002526 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d2:	d028      	beq.n	8002526 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d007      	beq.n	80024ea <UART_WaitOnFlagUntilTimeout+0x30>
 80024da:	f7ff f82f 	bl	800153c <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d21d      	bcs.n	8002526 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68da      	ldr	r2, [r3, #12]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80024f8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	695a      	ldr	r2, [r3, #20]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f022 0201 	bic.w	r2, r2, #1
 8002508:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2220      	movs	r2, #32
 800250e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2220      	movs	r2, #32
 8002516:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e00f      	b.n	8002546 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	4013      	ands	r3, r2
 8002530:	68ba      	ldr	r2, [r7, #8]
 8002532:	429a      	cmp	r2, r3
 8002534:	bf0c      	ite	eq
 8002536:	2301      	moveq	r3, #1
 8002538:	2300      	movne	r3, #0
 800253a:	b2db      	uxtb	r3, r3
 800253c:	461a      	mov	r2, r3
 800253e:	79fb      	ldrb	r3, [r7, #7]
 8002540:	429a      	cmp	r2, r3
 8002542:	d0c3      	beq.n	80024cc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
	...

08002550 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	68da      	ldr	r2, [r3, #12]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	430a      	orrs	r2, r1
 800256c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	689a      	ldr	r2, [r3, #8]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	431a      	orrs	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	695b      	ldr	r3, [r3, #20]
 800257c:	4313      	orrs	r3, r2
 800257e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800258a:	f023 030c 	bic.w	r3, r3, #12
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	6812      	ldr	r2, [r2, #0]
 8002592:	68b9      	ldr	r1, [r7, #8]
 8002594:	430b      	orrs	r3, r1
 8002596:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	695b      	ldr	r3, [r3, #20]
 800259e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	699a      	ldr	r2, [r3, #24]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	430a      	orrs	r2, r1
 80025ac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a2c      	ldr	r2, [pc, #176]	; (8002664 <UART_SetConfig+0x114>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d103      	bne.n	80025c0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80025b8:	f7ff fe6e 	bl	8002298 <HAL_RCC_GetPCLK2Freq>
 80025bc:	60f8      	str	r0, [r7, #12]
 80025be:	e002      	b.n	80025c6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80025c0:	f7ff fe56 	bl	8002270 <HAL_RCC_GetPCLK1Freq>
 80025c4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025c6:	68fa      	ldr	r2, [r7, #12]
 80025c8:	4613      	mov	r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	4413      	add	r3, r2
 80025ce:	009a      	lsls	r2, r3, #2
 80025d0:	441a      	add	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025dc:	4a22      	ldr	r2, [pc, #136]	; (8002668 <UART_SetConfig+0x118>)
 80025de:	fba2 2303 	umull	r2, r3, r2, r3
 80025e2:	095b      	lsrs	r3, r3, #5
 80025e4:	0119      	lsls	r1, r3, #4
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	4613      	mov	r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	4413      	add	r3, r2
 80025ee:	009a      	lsls	r2, r3, #2
 80025f0:	441a      	add	r2, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80025fc:	4b1a      	ldr	r3, [pc, #104]	; (8002668 <UART_SetConfig+0x118>)
 80025fe:	fba3 0302 	umull	r0, r3, r3, r2
 8002602:	095b      	lsrs	r3, r3, #5
 8002604:	2064      	movs	r0, #100	; 0x64
 8002606:	fb00 f303 	mul.w	r3, r0, r3
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	011b      	lsls	r3, r3, #4
 800260e:	3332      	adds	r3, #50	; 0x32
 8002610:	4a15      	ldr	r2, [pc, #84]	; (8002668 <UART_SetConfig+0x118>)
 8002612:	fba2 2303 	umull	r2, r3, r2, r3
 8002616:	095b      	lsrs	r3, r3, #5
 8002618:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800261c:	4419      	add	r1, r3
 800261e:	68fa      	ldr	r2, [r7, #12]
 8002620:	4613      	mov	r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	4413      	add	r3, r2
 8002626:	009a      	lsls	r2, r3, #2
 8002628:	441a      	add	r2, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	fbb2 f2f3 	udiv	r2, r2, r3
 8002634:	4b0c      	ldr	r3, [pc, #48]	; (8002668 <UART_SetConfig+0x118>)
 8002636:	fba3 0302 	umull	r0, r3, r3, r2
 800263a:	095b      	lsrs	r3, r3, #5
 800263c:	2064      	movs	r0, #100	; 0x64
 800263e:	fb00 f303 	mul.w	r3, r0, r3
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	011b      	lsls	r3, r3, #4
 8002646:	3332      	adds	r3, #50	; 0x32
 8002648:	4a07      	ldr	r2, [pc, #28]	; (8002668 <UART_SetConfig+0x118>)
 800264a:	fba2 2303 	umull	r2, r3, r2, r3
 800264e:	095b      	lsrs	r3, r3, #5
 8002650:	f003 020f 	and.w	r2, r3, #15
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	440a      	add	r2, r1
 800265a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800265c:	bf00      	nop
 800265e:	3710      	adds	r7, #16
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	40013800 	.word	0x40013800
 8002668:	51eb851f 	.word	0x51eb851f

0800266c <LC_Init>:
#include "loadcell.h"

extern UART_HandleTypeDef huart2;

void LC_Init(LC_HandleTypeDef *hlc, GPIO_TypeDef *DT_GPIOx, uint16_t DT_GPIO_Pin, GPIO_TypeDef *CLK_GPIOx, uint16_t CLK_GPIO_Pin){
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	603b      	str	r3, [r7, #0]
 8002678:	4613      	mov	r3, r2
 800267a:	80fb      	strh	r3, [r7, #6]
	hlc->DT_GPIOx = DT_GPIOx;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	68ba      	ldr	r2, [r7, #8]
 8002680:	601a      	str	r2, [r3, #0]
	hlc->DT_GPIO_Pin = DT_GPIO_Pin;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	88fa      	ldrh	r2, [r7, #6]
 8002686:	809a      	strh	r2, [r3, #4]
	hlc->CLK_GPIOx = CLK_GPIOx;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	683a      	ldr	r2, [r7, #0]
 800268c:	609a      	str	r2, [r3, #8]
	hlc->CLK_GPIO_Pin = CLK_GPIO_Pin;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	8b3a      	ldrh	r2, [r7, #24]
 8002692:	819a      	strh	r2, [r3, #12]
	hlc->calib_state = NO_CALIBRATE;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2200      	movs	r2, #0
 8002698:	739a      	strb	r2, [r3, #14]
//	uint32_t data = 0b00111001111001000010000000111001;
	hlc->a = 0.000437;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	4a09      	ldr	r2, [pc, #36]	; (80026c4 <LC_Init+0x58>)
 800269e:	611a      	str	r2, [r3, #16]
	hlc->b = -3916.127441;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	4a09      	ldr	r2, [pc, #36]	; (80026c8 <LC_Init+0x5c>)
 80026a4:	615a      	str	r2, [r3, #20]
	hlc->b += 3;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	4908      	ldr	r1, [pc, #32]	; (80026cc <LC_Init+0x60>)
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7fe f9f1 	bl	8000a94 <__addsf3>
 80026b2:	4603      	mov	r3, r0
 80026b4:	461a      	mov	r2, r3
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	615a      	str	r2, [r3, #20]
}
 80026ba:	bf00      	nop
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	39e51d26 	.word	0x39e51d26
 80026c8:	c574c20a 	.word	0xc574c20a
 80026cc:	40400000 	.word	0x40400000

080026d0 <LC_Read>:

long LC_Read(LC_HandleTypeDef *hlc){
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b086      	sub	sp, #24
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
	long res = 0;
 80026d8:	2300      	movs	r3, #0
 80026da:	60fb      	str	r3, [r7, #12]
	uint8_t data[3] = {};
 80026dc:	4b41      	ldr	r3, [pc, #260]	; (80027e4 <LC_Read+0x114>)
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	723b      	strb	r3, [r7, #8]
 80026e2:	f107 0309 	add.w	r3, r7, #9
 80026e6:	2200      	movs	r2, #0
 80026e8:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(hlc->CLK_GPIOx, hlc->CLK_GPIO_Pin, GPIO_PIN_RESET);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6898      	ldr	r0, [r3, #8]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	899b      	ldrh	r3, [r3, #12]
 80026f2:	2200      	movs	r2, #0
 80026f4:	4619      	mov	r1, r3
 80026f6:	f7ff f9ce 	bl	8001a96 <HAL_GPIO_WritePin>
	while(HAL_GPIO_ReadPin(hlc->DT_GPIOx, hlc->DT_GPIO_Pin) == GPIO_PIN_SET);
 80026fa:	bf00      	nop
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	889b      	ldrh	r3, [r3, #4]
 8002704:	4619      	mov	r1, r3
 8002706:	4610      	mov	r0, r2
 8002708:	f7ff f9ae 	bl	8001a68 <HAL_GPIO_ReadPin>
 800270c:	4603      	mov	r3, r0
 800270e:	2b01      	cmp	r3, #1
 8002710:	d0f4      	beq.n	80026fc <LC_Read+0x2c>
	for(int i = 0; i < 3; i++){
 8002712:	2300      	movs	r3, #0
 8002714:	617b      	str	r3, [r7, #20]
 8002716:	e03f      	b.n	8002798 <LC_Read+0xc8>
	  for(int j = 0; j < 8; j++){
 8002718:	2300      	movs	r3, #0
 800271a:	613b      	str	r3, [r7, #16]
 800271c:	e036      	b.n	800278c <LC_Read+0xbc>
		HAL_GPIO_WritePin(hlc->CLK_GPIOx, hlc->CLK_GPIO_Pin, GPIO_PIN_SET);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6898      	ldr	r0, [r3, #8]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	899b      	ldrh	r3, [r3, #12]
 8002726:	2201      	movs	r2, #1
 8002728:	4619      	mov	r1, r3
 800272a:	f7ff f9b4 	bl	8001a96 <HAL_GPIO_WritePin>
		data[2-i] |= HAL_GPIO_ReadPin(hlc->DT_GPIOx, hlc->DT_GPIO_Pin) << (7-j);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	889b      	ldrh	r3, [r3, #4]
 8002736:	4619      	mov	r1, r3
 8002738:	4610      	mov	r0, r2
 800273a:	f7ff f995 	bl	8001a68 <HAL_GPIO_ReadPin>
 800273e:	4603      	mov	r3, r0
 8002740:	461a      	mov	r2, r3
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	f1c3 0307 	rsb	r3, r3, #7
 8002748:	fa02 f103 	lsl.w	r1, r2, r3
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	f1c3 0302 	rsb	r3, r3, #2
 8002752:	f107 0218 	add.w	r2, r7, #24
 8002756:	4413      	add	r3, r2
 8002758:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800275c:	b25a      	sxtb	r2, r3
 800275e:	b24b      	sxtb	r3, r1
 8002760:	4313      	orrs	r3, r2
 8002762:	b25a      	sxtb	r2, r3
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	f1c3 0302 	rsb	r3, r3, #2
 800276a:	b2d2      	uxtb	r2, r2
 800276c:	f107 0118 	add.w	r1, r7, #24
 8002770:	440b      	add	r3, r1
 8002772:	f803 2c10 	strb.w	r2, [r3, #-16]
		HAL_GPIO_WritePin(hlc->CLK_GPIOx, hlc->CLK_GPIO_Pin, GPIO_PIN_RESET);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6898      	ldr	r0, [r3, #8]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	899b      	ldrh	r3, [r3, #12]
 800277e:	2200      	movs	r2, #0
 8002780:	4619      	mov	r1, r3
 8002782:	f7ff f988 	bl	8001a96 <HAL_GPIO_WritePin>
	  for(int j = 0; j < 8; j++){
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	3301      	adds	r3, #1
 800278a:	613b      	str	r3, [r7, #16]
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	2b07      	cmp	r3, #7
 8002790:	ddc5      	ble.n	800271e <LC_Read+0x4e>
	for(int i = 0; i < 3; i++){
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	3301      	adds	r3, #1
 8002796:	617b      	str	r3, [r7, #20]
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	2b02      	cmp	r3, #2
 800279c:	ddbc      	ble.n	8002718 <LC_Read+0x48>
	  }
	}
	HAL_GPIO_WritePin(hlc->CLK_GPIOx, hlc->CLK_GPIO_Pin, GPIO_PIN_SET);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6898      	ldr	r0, [r3, #8]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	899b      	ldrh	r3, [r3, #12]
 80027a6:	2201      	movs	r2, #1
 80027a8:	4619      	mov	r1, r3
 80027aa:	f7ff f974 	bl	8001a96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(hlc->CLK_GPIOx, hlc->CLK_GPIO_Pin, GPIO_PIN_RESET);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6898      	ldr	r0, [r3, #8]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	899b      	ldrh	r3, [r3, #12]
 80027b6:	2200      	movs	r2, #0
 80027b8:	4619      	mov	r1, r3
 80027ba:	f7ff f96c 	bl	8001a96 <HAL_GPIO_WritePin>

	data[2] ^= 0x80; // if (MSB == 1) -> MSB = 0;
 80027be:	7abb      	ldrb	r3, [r7, #10]
 80027c0:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
 80027c4:	43db      	mvns	r3, r3
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	72bb      	strb	r3, [r7, #10]
	res = ((uint32_t) data[2] << 16) | ((uint32_t) data[1] << 8) | (uint32_t) data[0];
 80027ca:	7abb      	ldrb	r3, [r7, #10]
 80027cc:	041a      	lsls	r2, r3, #16
 80027ce:	7a7b      	ldrb	r3, [r7, #9]
 80027d0:	021b      	lsls	r3, r3, #8
 80027d2:	4313      	orrs	r3, r2
 80027d4:	7a3a      	ldrb	r2, [r7, #8]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	60fb      	str	r3, [r7, #12]
	return res;
 80027da:	68fb      	ldr	r3, [r7, #12]
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3718      	adds	r7, #24
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	080055ec 	.word	0x080055ec

080027e8 <LC_Get_Mass>:
	HAL_UART_Transmit(&huart2, "Calibrate done\n", 11, 100);

	hlc->calib_state = CALIBRATED;
}

float LC_Get_Mass(LC_HandleTypeDef *hlc){
 80027e8:	b590      	push	{r4, r7, lr}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
	return hlc->a * LC_Read(hlc) + hlc->b;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	691c      	ldr	r4, [r3, #16]
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f7ff ff6b 	bl	80026d0 <LC_Read>
 80027fa:	4603      	mov	r3, r0
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7fe f9fd 	bl	8000bfc <__aeabi_i2f>
 8002802:	4603      	mov	r3, r0
 8002804:	4619      	mov	r1, r3
 8002806:	4620      	mov	r0, r4
 8002808:	f7fe fa4c 	bl	8000ca4 <__aeabi_fmul>
 800280c:	4603      	mov	r3, r0
 800280e:	461a      	mov	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	695b      	ldr	r3, [r3, #20]
 8002814:	4619      	mov	r1, r3
 8002816:	4610      	mov	r0, r2
 8002818:	f7fe f93c 	bl	8000a94 <__addsf3>
 800281c:	4603      	mov	r3, r0
}
 800281e:	4618      	mov	r0, r3
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	bd90      	pop	{r4, r7, pc}
	...

08002828 <__errno>:
 8002828:	4b01      	ldr	r3, [pc, #4]	; (8002830 <__errno+0x8>)
 800282a:	6818      	ldr	r0, [r3, #0]
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	2000000c 	.word	0x2000000c

08002834 <__libc_init_array>:
 8002834:	b570      	push	{r4, r5, r6, lr}
 8002836:	2600      	movs	r6, #0
 8002838:	4d0c      	ldr	r5, [pc, #48]	; (800286c <__libc_init_array+0x38>)
 800283a:	4c0d      	ldr	r4, [pc, #52]	; (8002870 <__libc_init_array+0x3c>)
 800283c:	1b64      	subs	r4, r4, r5
 800283e:	10a4      	asrs	r4, r4, #2
 8002840:	42a6      	cmp	r6, r4
 8002842:	d109      	bne.n	8002858 <__libc_init_array+0x24>
 8002844:	f002 feba 	bl	80055bc <_init>
 8002848:	2600      	movs	r6, #0
 800284a:	4d0a      	ldr	r5, [pc, #40]	; (8002874 <__libc_init_array+0x40>)
 800284c:	4c0a      	ldr	r4, [pc, #40]	; (8002878 <__libc_init_array+0x44>)
 800284e:	1b64      	subs	r4, r4, r5
 8002850:	10a4      	asrs	r4, r4, #2
 8002852:	42a6      	cmp	r6, r4
 8002854:	d105      	bne.n	8002862 <__libc_init_array+0x2e>
 8002856:	bd70      	pop	{r4, r5, r6, pc}
 8002858:	f855 3b04 	ldr.w	r3, [r5], #4
 800285c:	4798      	blx	r3
 800285e:	3601      	adds	r6, #1
 8002860:	e7ee      	b.n	8002840 <__libc_init_array+0xc>
 8002862:	f855 3b04 	ldr.w	r3, [r5], #4
 8002866:	4798      	blx	r3
 8002868:	3601      	adds	r6, #1
 800286a:	e7f2      	b.n	8002852 <__libc_init_array+0x1e>
 800286c:	08005a3c 	.word	0x08005a3c
 8002870:	08005a3c 	.word	0x08005a3c
 8002874:	08005a3c 	.word	0x08005a3c
 8002878:	08005a40 	.word	0x08005a40

0800287c <memset>:
 800287c:	4603      	mov	r3, r0
 800287e:	4402      	add	r2, r0
 8002880:	4293      	cmp	r3, r2
 8002882:	d100      	bne.n	8002886 <memset+0xa>
 8002884:	4770      	bx	lr
 8002886:	f803 1b01 	strb.w	r1, [r3], #1
 800288a:	e7f9      	b.n	8002880 <memset+0x4>

0800288c <__cvt>:
 800288c:	2b00      	cmp	r3, #0
 800288e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002892:	461f      	mov	r7, r3
 8002894:	bfbb      	ittet	lt
 8002896:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800289a:	461f      	movlt	r7, r3
 800289c:	2300      	movge	r3, #0
 800289e:	232d      	movlt	r3, #45	; 0x2d
 80028a0:	b088      	sub	sp, #32
 80028a2:	4614      	mov	r4, r2
 80028a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80028a6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80028a8:	7013      	strb	r3, [r2, #0]
 80028aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80028ac:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80028b0:	f023 0820 	bic.w	r8, r3, #32
 80028b4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80028b8:	d005      	beq.n	80028c6 <__cvt+0x3a>
 80028ba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80028be:	d100      	bne.n	80028c2 <__cvt+0x36>
 80028c0:	3501      	adds	r5, #1
 80028c2:	2302      	movs	r3, #2
 80028c4:	e000      	b.n	80028c8 <__cvt+0x3c>
 80028c6:	2303      	movs	r3, #3
 80028c8:	aa07      	add	r2, sp, #28
 80028ca:	9204      	str	r2, [sp, #16]
 80028cc:	aa06      	add	r2, sp, #24
 80028ce:	e9cd a202 	strd	sl, r2, [sp, #8]
 80028d2:	e9cd 3500 	strd	r3, r5, [sp]
 80028d6:	4622      	mov	r2, r4
 80028d8:	463b      	mov	r3, r7
 80028da:	f000 fce5 	bl	80032a8 <_dtoa_r>
 80028de:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80028e2:	4606      	mov	r6, r0
 80028e4:	d102      	bne.n	80028ec <__cvt+0x60>
 80028e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80028e8:	07db      	lsls	r3, r3, #31
 80028ea:	d522      	bpl.n	8002932 <__cvt+0xa6>
 80028ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80028f0:	eb06 0905 	add.w	r9, r6, r5
 80028f4:	d110      	bne.n	8002918 <__cvt+0x8c>
 80028f6:	7833      	ldrb	r3, [r6, #0]
 80028f8:	2b30      	cmp	r3, #48	; 0x30
 80028fa:	d10a      	bne.n	8002912 <__cvt+0x86>
 80028fc:	2200      	movs	r2, #0
 80028fe:	2300      	movs	r3, #0
 8002900:	4620      	mov	r0, r4
 8002902:	4639      	mov	r1, r7
 8002904:	f7fe f850 	bl	80009a8 <__aeabi_dcmpeq>
 8002908:	b918      	cbnz	r0, 8002912 <__cvt+0x86>
 800290a:	f1c5 0501 	rsb	r5, r5, #1
 800290e:	f8ca 5000 	str.w	r5, [sl]
 8002912:	f8da 3000 	ldr.w	r3, [sl]
 8002916:	4499      	add	r9, r3
 8002918:	2200      	movs	r2, #0
 800291a:	2300      	movs	r3, #0
 800291c:	4620      	mov	r0, r4
 800291e:	4639      	mov	r1, r7
 8002920:	f7fe f842 	bl	80009a8 <__aeabi_dcmpeq>
 8002924:	b108      	cbz	r0, 800292a <__cvt+0x9e>
 8002926:	f8cd 901c 	str.w	r9, [sp, #28]
 800292a:	2230      	movs	r2, #48	; 0x30
 800292c:	9b07      	ldr	r3, [sp, #28]
 800292e:	454b      	cmp	r3, r9
 8002930:	d307      	bcc.n	8002942 <__cvt+0xb6>
 8002932:	4630      	mov	r0, r6
 8002934:	9b07      	ldr	r3, [sp, #28]
 8002936:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002938:	1b9b      	subs	r3, r3, r6
 800293a:	6013      	str	r3, [r2, #0]
 800293c:	b008      	add	sp, #32
 800293e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002942:	1c59      	adds	r1, r3, #1
 8002944:	9107      	str	r1, [sp, #28]
 8002946:	701a      	strb	r2, [r3, #0]
 8002948:	e7f0      	b.n	800292c <__cvt+0xa0>

0800294a <__exponent>:
 800294a:	4603      	mov	r3, r0
 800294c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800294e:	2900      	cmp	r1, #0
 8002950:	f803 2b02 	strb.w	r2, [r3], #2
 8002954:	bfb6      	itet	lt
 8002956:	222d      	movlt	r2, #45	; 0x2d
 8002958:	222b      	movge	r2, #43	; 0x2b
 800295a:	4249      	neglt	r1, r1
 800295c:	2909      	cmp	r1, #9
 800295e:	7042      	strb	r2, [r0, #1]
 8002960:	dd2b      	ble.n	80029ba <__exponent+0x70>
 8002962:	f10d 0407 	add.w	r4, sp, #7
 8002966:	46a4      	mov	ip, r4
 8002968:	270a      	movs	r7, #10
 800296a:	fb91 f6f7 	sdiv	r6, r1, r7
 800296e:	460a      	mov	r2, r1
 8002970:	46a6      	mov	lr, r4
 8002972:	fb07 1516 	mls	r5, r7, r6, r1
 8002976:	2a63      	cmp	r2, #99	; 0x63
 8002978:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800297c:	4631      	mov	r1, r6
 800297e:	f104 34ff 	add.w	r4, r4, #4294967295
 8002982:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8002986:	dcf0      	bgt.n	800296a <__exponent+0x20>
 8002988:	3130      	adds	r1, #48	; 0x30
 800298a:	f1ae 0502 	sub.w	r5, lr, #2
 800298e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8002992:	4629      	mov	r1, r5
 8002994:	1c44      	adds	r4, r0, #1
 8002996:	4561      	cmp	r1, ip
 8002998:	d30a      	bcc.n	80029b0 <__exponent+0x66>
 800299a:	f10d 0209 	add.w	r2, sp, #9
 800299e:	eba2 020e 	sub.w	r2, r2, lr
 80029a2:	4565      	cmp	r5, ip
 80029a4:	bf88      	it	hi
 80029a6:	2200      	movhi	r2, #0
 80029a8:	4413      	add	r3, r2
 80029aa:	1a18      	subs	r0, r3, r0
 80029ac:	b003      	add	sp, #12
 80029ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029b0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80029b4:	f804 2f01 	strb.w	r2, [r4, #1]!
 80029b8:	e7ed      	b.n	8002996 <__exponent+0x4c>
 80029ba:	2330      	movs	r3, #48	; 0x30
 80029bc:	3130      	adds	r1, #48	; 0x30
 80029be:	7083      	strb	r3, [r0, #2]
 80029c0:	70c1      	strb	r1, [r0, #3]
 80029c2:	1d03      	adds	r3, r0, #4
 80029c4:	e7f1      	b.n	80029aa <__exponent+0x60>
	...

080029c8 <_printf_float>:
 80029c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029cc:	b091      	sub	sp, #68	; 0x44
 80029ce:	460c      	mov	r4, r1
 80029d0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80029d4:	4616      	mov	r6, r2
 80029d6:	461f      	mov	r7, r3
 80029d8:	4605      	mov	r5, r0
 80029da:	f001 fa53 	bl	8003e84 <_localeconv_r>
 80029de:	6803      	ldr	r3, [r0, #0]
 80029e0:	4618      	mov	r0, r3
 80029e2:	9309      	str	r3, [sp, #36]	; 0x24
 80029e4:	f7fd fbb4 	bl	8000150 <strlen>
 80029e8:	2300      	movs	r3, #0
 80029ea:	930e      	str	r3, [sp, #56]	; 0x38
 80029ec:	f8d8 3000 	ldr.w	r3, [r8]
 80029f0:	900a      	str	r0, [sp, #40]	; 0x28
 80029f2:	3307      	adds	r3, #7
 80029f4:	f023 0307 	bic.w	r3, r3, #7
 80029f8:	f103 0208 	add.w	r2, r3, #8
 80029fc:	f894 9018 	ldrb.w	r9, [r4, #24]
 8002a00:	f8d4 b000 	ldr.w	fp, [r4]
 8002a04:	f8c8 2000 	str.w	r2, [r8]
 8002a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a0c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002a10:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8002a14:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8002a18:	930b      	str	r3, [sp, #44]	; 0x2c
 8002a1a:	f04f 32ff 	mov.w	r2, #4294967295
 8002a1e:	4640      	mov	r0, r8
 8002a20:	4b9c      	ldr	r3, [pc, #624]	; (8002c94 <_printf_float+0x2cc>)
 8002a22:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002a24:	f7fd fff2 	bl	8000a0c <__aeabi_dcmpun>
 8002a28:	bb70      	cbnz	r0, 8002a88 <_printf_float+0xc0>
 8002a2a:	f04f 32ff 	mov.w	r2, #4294967295
 8002a2e:	4640      	mov	r0, r8
 8002a30:	4b98      	ldr	r3, [pc, #608]	; (8002c94 <_printf_float+0x2cc>)
 8002a32:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002a34:	f7fd ffcc 	bl	80009d0 <__aeabi_dcmple>
 8002a38:	bb30      	cbnz	r0, 8002a88 <_printf_float+0xc0>
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	4640      	mov	r0, r8
 8002a40:	4651      	mov	r1, sl
 8002a42:	f7fd ffbb 	bl	80009bc <__aeabi_dcmplt>
 8002a46:	b110      	cbz	r0, 8002a4e <_printf_float+0x86>
 8002a48:	232d      	movs	r3, #45	; 0x2d
 8002a4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a4e:	4b92      	ldr	r3, [pc, #584]	; (8002c98 <_printf_float+0x2d0>)
 8002a50:	4892      	ldr	r0, [pc, #584]	; (8002c9c <_printf_float+0x2d4>)
 8002a52:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8002a56:	bf94      	ite	ls
 8002a58:	4698      	movls	r8, r3
 8002a5a:	4680      	movhi	r8, r0
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	f04f 0a00 	mov.w	sl, #0
 8002a62:	6123      	str	r3, [r4, #16]
 8002a64:	f02b 0304 	bic.w	r3, fp, #4
 8002a68:	6023      	str	r3, [r4, #0]
 8002a6a:	4633      	mov	r3, r6
 8002a6c:	4621      	mov	r1, r4
 8002a6e:	4628      	mov	r0, r5
 8002a70:	9700      	str	r7, [sp, #0]
 8002a72:	aa0f      	add	r2, sp, #60	; 0x3c
 8002a74:	f000 f9d4 	bl	8002e20 <_printf_common>
 8002a78:	3001      	adds	r0, #1
 8002a7a:	f040 8090 	bne.w	8002b9e <_printf_float+0x1d6>
 8002a7e:	f04f 30ff 	mov.w	r0, #4294967295
 8002a82:	b011      	add	sp, #68	; 0x44
 8002a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a88:	4642      	mov	r2, r8
 8002a8a:	4653      	mov	r3, sl
 8002a8c:	4640      	mov	r0, r8
 8002a8e:	4651      	mov	r1, sl
 8002a90:	f7fd ffbc 	bl	8000a0c <__aeabi_dcmpun>
 8002a94:	b148      	cbz	r0, 8002aaa <_printf_float+0xe2>
 8002a96:	f1ba 0f00 	cmp.w	sl, #0
 8002a9a:	bfb8      	it	lt
 8002a9c:	232d      	movlt	r3, #45	; 0x2d
 8002a9e:	4880      	ldr	r0, [pc, #512]	; (8002ca0 <_printf_float+0x2d8>)
 8002aa0:	bfb8      	it	lt
 8002aa2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8002aa6:	4b7f      	ldr	r3, [pc, #508]	; (8002ca4 <_printf_float+0x2dc>)
 8002aa8:	e7d3      	b.n	8002a52 <_printf_float+0x8a>
 8002aaa:	6863      	ldr	r3, [r4, #4]
 8002aac:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8002ab0:	1c5a      	adds	r2, r3, #1
 8002ab2:	d142      	bne.n	8002b3a <_printf_float+0x172>
 8002ab4:	2306      	movs	r3, #6
 8002ab6:	6063      	str	r3, [r4, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	9206      	str	r2, [sp, #24]
 8002abc:	aa0e      	add	r2, sp, #56	; 0x38
 8002abe:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8002ac2:	aa0d      	add	r2, sp, #52	; 0x34
 8002ac4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8002ac8:	9203      	str	r2, [sp, #12]
 8002aca:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8002ace:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002ad2:	6023      	str	r3, [r4, #0]
 8002ad4:	6863      	ldr	r3, [r4, #4]
 8002ad6:	4642      	mov	r2, r8
 8002ad8:	9300      	str	r3, [sp, #0]
 8002ada:	4628      	mov	r0, r5
 8002adc:	4653      	mov	r3, sl
 8002ade:	910b      	str	r1, [sp, #44]	; 0x2c
 8002ae0:	f7ff fed4 	bl	800288c <__cvt>
 8002ae4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002ae6:	4680      	mov	r8, r0
 8002ae8:	2947      	cmp	r1, #71	; 0x47
 8002aea:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002aec:	d108      	bne.n	8002b00 <_printf_float+0x138>
 8002aee:	1cc8      	adds	r0, r1, #3
 8002af0:	db02      	blt.n	8002af8 <_printf_float+0x130>
 8002af2:	6863      	ldr	r3, [r4, #4]
 8002af4:	4299      	cmp	r1, r3
 8002af6:	dd40      	ble.n	8002b7a <_printf_float+0x1b2>
 8002af8:	f1a9 0902 	sub.w	r9, r9, #2
 8002afc:	fa5f f989 	uxtb.w	r9, r9
 8002b00:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002b04:	d81f      	bhi.n	8002b46 <_printf_float+0x17e>
 8002b06:	464a      	mov	r2, r9
 8002b08:	3901      	subs	r1, #1
 8002b0a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002b0e:	910d      	str	r1, [sp, #52]	; 0x34
 8002b10:	f7ff ff1b 	bl	800294a <__exponent>
 8002b14:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002b16:	4682      	mov	sl, r0
 8002b18:	1813      	adds	r3, r2, r0
 8002b1a:	2a01      	cmp	r2, #1
 8002b1c:	6123      	str	r3, [r4, #16]
 8002b1e:	dc02      	bgt.n	8002b26 <_printf_float+0x15e>
 8002b20:	6822      	ldr	r2, [r4, #0]
 8002b22:	07d2      	lsls	r2, r2, #31
 8002b24:	d501      	bpl.n	8002b2a <_printf_float+0x162>
 8002b26:	3301      	adds	r3, #1
 8002b28:	6123      	str	r3, [r4, #16]
 8002b2a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d09b      	beq.n	8002a6a <_printf_float+0xa2>
 8002b32:	232d      	movs	r3, #45	; 0x2d
 8002b34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b38:	e797      	b.n	8002a6a <_printf_float+0xa2>
 8002b3a:	2947      	cmp	r1, #71	; 0x47
 8002b3c:	d1bc      	bne.n	8002ab8 <_printf_float+0xf0>
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d1ba      	bne.n	8002ab8 <_printf_float+0xf0>
 8002b42:	2301      	movs	r3, #1
 8002b44:	e7b7      	b.n	8002ab6 <_printf_float+0xee>
 8002b46:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8002b4a:	d118      	bne.n	8002b7e <_printf_float+0x1b6>
 8002b4c:	2900      	cmp	r1, #0
 8002b4e:	6863      	ldr	r3, [r4, #4]
 8002b50:	dd0b      	ble.n	8002b6a <_printf_float+0x1a2>
 8002b52:	6121      	str	r1, [r4, #16]
 8002b54:	b913      	cbnz	r3, 8002b5c <_printf_float+0x194>
 8002b56:	6822      	ldr	r2, [r4, #0]
 8002b58:	07d0      	lsls	r0, r2, #31
 8002b5a:	d502      	bpl.n	8002b62 <_printf_float+0x19a>
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	440b      	add	r3, r1
 8002b60:	6123      	str	r3, [r4, #16]
 8002b62:	f04f 0a00 	mov.w	sl, #0
 8002b66:	65a1      	str	r1, [r4, #88]	; 0x58
 8002b68:	e7df      	b.n	8002b2a <_printf_float+0x162>
 8002b6a:	b913      	cbnz	r3, 8002b72 <_printf_float+0x1aa>
 8002b6c:	6822      	ldr	r2, [r4, #0]
 8002b6e:	07d2      	lsls	r2, r2, #31
 8002b70:	d501      	bpl.n	8002b76 <_printf_float+0x1ae>
 8002b72:	3302      	adds	r3, #2
 8002b74:	e7f4      	b.n	8002b60 <_printf_float+0x198>
 8002b76:	2301      	movs	r3, #1
 8002b78:	e7f2      	b.n	8002b60 <_printf_float+0x198>
 8002b7a:	f04f 0967 	mov.w	r9, #103	; 0x67
 8002b7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002b80:	4299      	cmp	r1, r3
 8002b82:	db05      	blt.n	8002b90 <_printf_float+0x1c8>
 8002b84:	6823      	ldr	r3, [r4, #0]
 8002b86:	6121      	str	r1, [r4, #16]
 8002b88:	07d8      	lsls	r0, r3, #31
 8002b8a:	d5ea      	bpl.n	8002b62 <_printf_float+0x19a>
 8002b8c:	1c4b      	adds	r3, r1, #1
 8002b8e:	e7e7      	b.n	8002b60 <_printf_float+0x198>
 8002b90:	2900      	cmp	r1, #0
 8002b92:	bfcc      	ite	gt
 8002b94:	2201      	movgt	r2, #1
 8002b96:	f1c1 0202 	rsble	r2, r1, #2
 8002b9a:	4413      	add	r3, r2
 8002b9c:	e7e0      	b.n	8002b60 <_printf_float+0x198>
 8002b9e:	6823      	ldr	r3, [r4, #0]
 8002ba0:	055a      	lsls	r2, r3, #21
 8002ba2:	d407      	bmi.n	8002bb4 <_printf_float+0x1ec>
 8002ba4:	6923      	ldr	r3, [r4, #16]
 8002ba6:	4642      	mov	r2, r8
 8002ba8:	4631      	mov	r1, r6
 8002baa:	4628      	mov	r0, r5
 8002bac:	47b8      	blx	r7
 8002bae:	3001      	adds	r0, #1
 8002bb0:	d12b      	bne.n	8002c0a <_printf_float+0x242>
 8002bb2:	e764      	b.n	8002a7e <_printf_float+0xb6>
 8002bb4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002bb8:	f240 80dd 	bls.w	8002d76 <_printf_float+0x3ae>
 8002bbc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	f7fd fef0 	bl	80009a8 <__aeabi_dcmpeq>
 8002bc8:	2800      	cmp	r0, #0
 8002bca:	d033      	beq.n	8002c34 <_printf_float+0x26c>
 8002bcc:	2301      	movs	r3, #1
 8002bce:	4631      	mov	r1, r6
 8002bd0:	4628      	mov	r0, r5
 8002bd2:	4a35      	ldr	r2, [pc, #212]	; (8002ca8 <_printf_float+0x2e0>)
 8002bd4:	47b8      	blx	r7
 8002bd6:	3001      	adds	r0, #1
 8002bd8:	f43f af51 	beq.w	8002a7e <_printf_float+0xb6>
 8002bdc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002be0:	429a      	cmp	r2, r3
 8002be2:	db02      	blt.n	8002bea <_printf_float+0x222>
 8002be4:	6823      	ldr	r3, [r4, #0]
 8002be6:	07d8      	lsls	r0, r3, #31
 8002be8:	d50f      	bpl.n	8002c0a <_printf_float+0x242>
 8002bea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002bee:	4631      	mov	r1, r6
 8002bf0:	4628      	mov	r0, r5
 8002bf2:	47b8      	blx	r7
 8002bf4:	3001      	adds	r0, #1
 8002bf6:	f43f af42 	beq.w	8002a7e <_printf_float+0xb6>
 8002bfa:	f04f 0800 	mov.w	r8, #0
 8002bfe:	f104 091a 	add.w	r9, r4, #26
 8002c02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002c04:	3b01      	subs	r3, #1
 8002c06:	4543      	cmp	r3, r8
 8002c08:	dc09      	bgt.n	8002c1e <_printf_float+0x256>
 8002c0a:	6823      	ldr	r3, [r4, #0]
 8002c0c:	079b      	lsls	r3, r3, #30
 8002c0e:	f100 8102 	bmi.w	8002e16 <_printf_float+0x44e>
 8002c12:	68e0      	ldr	r0, [r4, #12]
 8002c14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002c16:	4298      	cmp	r0, r3
 8002c18:	bfb8      	it	lt
 8002c1a:	4618      	movlt	r0, r3
 8002c1c:	e731      	b.n	8002a82 <_printf_float+0xba>
 8002c1e:	2301      	movs	r3, #1
 8002c20:	464a      	mov	r2, r9
 8002c22:	4631      	mov	r1, r6
 8002c24:	4628      	mov	r0, r5
 8002c26:	47b8      	blx	r7
 8002c28:	3001      	adds	r0, #1
 8002c2a:	f43f af28 	beq.w	8002a7e <_printf_float+0xb6>
 8002c2e:	f108 0801 	add.w	r8, r8, #1
 8002c32:	e7e6      	b.n	8002c02 <_printf_float+0x23a>
 8002c34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	dc38      	bgt.n	8002cac <_printf_float+0x2e4>
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	4631      	mov	r1, r6
 8002c3e:	4628      	mov	r0, r5
 8002c40:	4a19      	ldr	r2, [pc, #100]	; (8002ca8 <_printf_float+0x2e0>)
 8002c42:	47b8      	blx	r7
 8002c44:	3001      	adds	r0, #1
 8002c46:	f43f af1a 	beq.w	8002a7e <_printf_float+0xb6>
 8002c4a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	d102      	bne.n	8002c58 <_printf_float+0x290>
 8002c52:	6823      	ldr	r3, [r4, #0]
 8002c54:	07d9      	lsls	r1, r3, #31
 8002c56:	d5d8      	bpl.n	8002c0a <_printf_float+0x242>
 8002c58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002c5c:	4631      	mov	r1, r6
 8002c5e:	4628      	mov	r0, r5
 8002c60:	47b8      	blx	r7
 8002c62:	3001      	adds	r0, #1
 8002c64:	f43f af0b 	beq.w	8002a7e <_printf_float+0xb6>
 8002c68:	f04f 0900 	mov.w	r9, #0
 8002c6c:	f104 0a1a 	add.w	sl, r4, #26
 8002c70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002c72:	425b      	negs	r3, r3
 8002c74:	454b      	cmp	r3, r9
 8002c76:	dc01      	bgt.n	8002c7c <_printf_float+0x2b4>
 8002c78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002c7a:	e794      	b.n	8002ba6 <_printf_float+0x1de>
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	4652      	mov	r2, sl
 8002c80:	4631      	mov	r1, r6
 8002c82:	4628      	mov	r0, r5
 8002c84:	47b8      	blx	r7
 8002c86:	3001      	adds	r0, #1
 8002c88:	f43f aef9 	beq.w	8002a7e <_printf_float+0xb6>
 8002c8c:	f109 0901 	add.w	r9, r9, #1
 8002c90:	e7ee      	b.n	8002c70 <_printf_float+0x2a8>
 8002c92:	bf00      	nop
 8002c94:	7fefffff 	.word	0x7fefffff
 8002c98:	0800565c 	.word	0x0800565c
 8002c9c:	08005660 	.word	0x08005660
 8002ca0:	08005668 	.word	0x08005668
 8002ca4:	08005664 	.word	0x08005664
 8002ca8:	0800566c 	.word	0x0800566c
 8002cac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002cae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	bfa8      	it	ge
 8002cb4:	461a      	movge	r2, r3
 8002cb6:	2a00      	cmp	r2, #0
 8002cb8:	4691      	mov	r9, r2
 8002cba:	dc37      	bgt.n	8002d2c <_printf_float+0x364>
 8002cbc:	f04f 0b00 	mov.w	fp, #0
 8002cc0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002cc4:	f104 021a 	add.w	r2, r4, #26
 8002cc8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8002ccc:	ebaa 0309 	sub.w	r3, sl, r9
 8002cd0:	455b      	cmp	r3, fp
 8002cd2:	dc33      	bgt.n	8002d3c <_printf_float+0x374>
 8002cd4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	db3b      	blt.n	8002d54 <_printf_float+0x38c>
 8002cdc:	6823      	ldr	r3, [r4, #0]
 8002cde:	07da      	lsls	r2, r3, #31
 8002ce0:	d438      	bmi.n	8002d54 <_printf_float+0x38c>
 8002ce2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002ce4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002ce6:	eba2 030a 	sub.w	r3, r2, sl
 8002cea:	eba2 0901 	sub.w	r9, r2, r1
 8002cee:	4599      	cmp	r9, r3
 8002cf0:	bfa8      	it	ge
 8002cf2:	4699      	movge	r9, r3
 8002cf4:	f1b9 0f00 	cmp.w	r9, #0
 8002cf8:	dc34      	bgt.n	8002d64 <_printf_float+0x39c>
 8002cfa:	f04f 0800 	mov.w	r8, #0
 8002cfe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002d02:	f104 0a1a 	add.w	sl, r4, #26
 8002d06:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002d0a:	1a9b      	subs	r3, r3, r2
 8002d0c:	eba3 0309 	sub.w	r3, r3, r9
 8002d10:	4543      	cmp	r3, r8
 8002d12:	f77f af7a 	ble.w	8002c0a <_printf_float+0x242>
 8002d16:	2301      	movs	r3, #1
 8002d18:	4652      	mov	r2, sl
 8002d1a:	4631      	mov	r1, r6
 8002d1c:	4628      	mov	r0, r5
 8002d1e:	47b8      	blx	r7
 8002d20:	3001      	adds	r0, #1
 8002d22:	f43f aeac 	beq.w	8002a7e <_printf_float+0xb6>
 8002d26:	f108 0801 	add.w	r8, r8, #1
 8002d2a:	e7ec      	b.n	8002d06 <_printf_float+0x33e>
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	4631      	mov	r1, r6
 8002d30:	4642      	mov	r2, r8
 8002d32:	4628      	mov	r0, r5
 8002d34:	47b8      	blx	r7
 8002d36:	3001      	adds	r0, #1
 8002d38:	d1c0      	bne.n	8002cbc <_printf_float+0x2f4>
 8002d3a:	e6a0      	b.n	8002a7e <_printf_float+0xb6>
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	4631      	mov	r1, r6
 8002d40:	4628      	mov	r0, r5
 8002d42:	920b      	str	r2, [sp, #44]	; 0x2c
 8002d44:	47b8      	blx	r7
 8002d46:	3001      	adds	r0, #1
 8002d48:	f43f ae99 	beq.w	8002a7e <_printf_float+0xb6>
 8002d4c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002d4e:	f10b 0b01 	add.w	fp, fp, #1
 8002d52:	e7b9      	b.n	8002cc8 <_printf_float+0x300>
 8002d54:	4631      	mov	r1, r6
 8002d56:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002d5a:	4628      	mov	r0, r5
 8002d5c:	47b8      	blx	r7
 8002d5e:	3001      	adds	r0, #1
 8002d60:	d1bf      	bne.n	8002ce2 <_printf_float+0x31a>
 8002d62:	e68c      	b.n	8002a7e <_printf_float+0xb6>
 8002d64:	464b      	mov	r3, r9
 8002d66:	4631      	mov	r1, r6
 8002d68:	4628      	mov	r0, r5
 8002d6a:	eb08 020a 	add.w	r2, r8, sl
 8002d6e:	47b8      	blx	r7
 8002d70:	3001      	adds	r0, #1
 8002d72:	d1c2      	bne.n	8002cfa <_printf_float+0x332>
 8002d74:	e683      	b.n	8002a7e <_printf_float+0xb6>
 8002d76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002d78:	2a01      	cmp	r2, #1
 8002d7a:	dc01      	bgt.n	8002d80 <_printf_float+0x3b8>
 8002d7c:	07db      	lsls	r3, r3, #31
 8002d7e:	d537      	bpl.n	8002df0 <_printf_float+0x428>
 8002d80:	2301      	movs	r3, #1
 8002d82:	4642      	mov	r2, r8
 8002d84:	4631      	mov	r1, r6
 8002d86:	4628      	mov	r0, r5
 8002d88:	47b8      	blx	r7
 8002d8a:	3001      	adds	r0, #1
 8002d8c:	f43f ae77 	beq.w	8002a7e <_printf_float+0xb6>
 8002d90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002d94:	4631      	mov	r1, r6
 8002d96:	4628      	mov	r0, r5
 8002d98:	47b8      	blx	r7
 8002d9a:	3001      	adds	r0, #1
 8002d9c:	f43f ae6f 	beq.w	8002a7e <_printf_float+0xb6>
 8002da0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002da4:	2200      	movs	r2, #0
 8002da6:	2300      	movs	r3, #0
 8002da8:	f7fd fdfe 	bl	80009a8 <__aeabi_dcmpeq>
 8002dac:	b9d8      	cbnz	r0, 8002de6 <_printf_float+0x41e>
 8002dae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002db0:	f108 0201 	add.w	r2, r8, #1
 8002db4:	3b01      	subs	r3, #1
 8002db6:	4631      	mov	r1, r6
 8002db8:	4628      	mov	r0, r5
 8002dba:	47b8      	blx	r7
 8002dbc:	3001      	adds	r0, #1
 8002dbe:	d10e      	bne.n	8002dde <_printf_float+0x416>
 8002dc0:	e65d      	b.n	8002a7e <_printf_float+0xb6>
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	464a      	mov	r2, r9
 8002dc6:	4631      	mov	r1, r6
 8002dc8:	4628      	mov	r0, r5
 8002dca:	47b8      	blx	r7
 8002dcc:	3001      	adds	r0, #1
 8002dce:	f43f ae56 	beq.w	8002a7e <_printf_float+0xb6>
 8002dd2:	f108 0801 	add.w	r8, r8, #1
 8002dd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	4543      	cmp	r3, r8
 8002ddc:	dcf1      	bgt.n	8002dc2 <_printf_float+0x3fa>
 8002dde:	4653      	mov	r3, sl
 8002de0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002de4:	e6e0      	b.n	8002ba8 <_printf_float+0x1e0>
 8002de6:	f04f 0800 	mov.w	r8, #0
 8002dea:	f104 091a 	add.w	r9, r4, #26
 8002dee:	e7f2      	b.n	8002dd6 <_printf_float+0x40e>
 8002df0:	2301      	movs	r3, #1
 8002df2:	4642      	mov	r2, r8
 8002df4:	e7df      	b.n	8002db6 <_printf_float+0x3ee>
 8002df6:	2301      	movs	r3, #1
 8002df8:	464a      	mov	r2, r9
 8002dfa:	4631      	mov	r1, r6
 8002dfc:	4628      	mov	r0, r5
 8002dfe:	47b8      	blx	r7
 8002e00:	3001      	adds	r0, #1
 8002e02:	f43f ae3c 	beq.w	8002a7e <_printf_float+0xb6>
 8002e06:	f108 0801 	add.w	r8, r8, #1
 8002e0a:	68e3      	ldr	r3, [r4, #12]
 8002e0c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8002e0e:	1a5b      	subs	r3, r3, r1
 8002e10:	4543      	cmp	r3, r8
 8002e12:	dcf0      	bgt.n	8002df6 <_printf_float+0x42e>
 8002e14:	e6fd      	b.n	8002c12 <_printf_float+0x24a>
 8002e16:	f04f 0800 	mov.w	r8, #0
 8002e1a:	f104 0919 	add.w	r9, r4, #25
 8002e1e:	e7f4      	b.n	8002e0a <_printf_float+0x442>

08002e20 <_printf_common>:
 8002e20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e24:	4616      	mov	r6, r2
 8002e26:	4699      	mov	r9, r3
 8002e28:	688a      	ldr	r2, [r1, #8]
 8002e2a:	690b      	ldr	r3, [r1, #16]
 8002e2c:	4607      	mov	r7, r0
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	bfb8      	it	lt
 8002e32:	4613      	movlt	r3, r2
 8002e34:	6033      	str	r3, [r6, #0]
 8002e36:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002e3a:	460c      	mov	r4, r1
 8002e3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002e40:	b10a      	cbz	r2, 8002e46 <_printf_common+0x26>
 8002e42:	3301      	adds	r3, #1
 8002e44:	6033      	str	r3, [r6, #0]
 8002e46:	6823      	ldr	r3, [r4, #0]
 8002e48:	0699      	lsls	r1, r3, #26
 8002e4a:	bf42      	ittt	mi
 8002e4c:	6833      	ldrmi	r3, [r6, #0]
 8002e4e:	3302      	addmi	r3, #2
 8002e50:	6033      	strmi	r3, [r6, #0]
 8002e52:	6825      	ldr	r5, [r4, #0]
 8002e54:	f015 0506 	ands.w	r5, r5, #6
 8002e58:	d106      	bne.n	8002e68 <_printf_common+0x48>
 8002e5a:	f104 0a19 	add.w	sl, r4, #25
 8002e5e:	68e3      	ldr	r3, [r4, #12]
 8002e60:	6832      	ldr	r2, [r6, #0]
 8002e62:	1a9b      	subs	r3, r3, r2
 8002e64:	42ab      	cmp	r3, r5
 8002e66:	dc28      	bgt.n	8002eba <_printf_common+0x9a>
 8002e68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002e6c:	1e13      	subs	r3, r2, #0
 8002e6e:	6822      	ldr	r2, [r4, #0]
 8002e70:	bf18      	it	ne
 8002e72:	2301      	movne	r3, #1
 8002e74:	0692      	lsls	r2, r2, #26
 8002e76:	d42d      	bmi.n	8002ed4 <_printf_common+0xb4>
 8002e78:	4649      	mov	r1, r9
 8002e7a:	4638      	mov	r0, r7
 8002e7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002e80:	47c0      	blx	r8
 8002e82:	3001      	adds	r0, #1
 8002e84:	d020      	beq.n	8002ec8 <_printf_common+0xa8>
 8002e86:	6823      	ldr	r3, [r4, #0]
 8002e88:	68e5      	ldr	r5, [r4, #12]
 8002e8a:	f003 0306 	and.w	r3, r3, #6
 8002e8e:	2b04      	cmp	r3, #4
 8002e90:	bf18      	it	ne
 8002e92:	2500      	movne	r5, #0
 8002e94:	6832      	ldr	r2, [r6, #0]
 8002e96:	f04f 0600 	mov.w	r6, #0
 8002e9a:	68a3      	ldr	r3, [r4, #8]
 8002e9c:	bf08      	it	eq
 8002e9e:	1aad      	subeq	r5, r5, r2
 8002ea0:	6922      	ldr	r2, [r4, #16]
 8002ea2:	bf08      	it	eq
 8002ea4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	bfc4      	itt	gt
 8002eac:	1a9b      	subgt	r3, r3, r2
 8002eae:	18ed      	addgt	r5, r5, r3
 8002eb0:	341a      	adds	r4, #26
 8002eb2:	42b5      	cmp	r5, r6
 8002eb4:	d11a      	bne.n	8002eec <_printf_common+0xcc>
 8002eb6:	2000      	movs	r0, #0
 8002eb8:	e008      	b.n	8002ecc <_printf_common+0xac>
 8002eba:	2301      	movs	r3, #1
 8002ebc:	4652      	mov	r2, sl
 8002ebe:	4649      	mov	r1, r9
 8002ec0:	4638      	mov	r0, r7
 8002ec2:	47c0      	blx	r8
 8002ec4:	3001      	adds	r0, #1
 8002ec6:	d103      	bne.n	8002ed0 <_printf_common+0xb0>
 8002ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ed0:	3501      	adds	r5, #1
 8002ed2:	e7c4      	b.n	8002e5e <_printf_common+0x3e>
 8002ed4:	2030      	movs	r0, #48	; 0x30
 8002ed6:	18e1      	adds	r1, r4, r3
 8002ed8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002edc:	1c5a      	adds	r2, r3, #1
 8002ede:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002ee2:	4422      	add	r2, r4
 8002ee4:	3302      	adds	r3, #2
 8002ee6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002eea:	e7c5      	b.n	8002e78 <_printf_common+0x58>
 8002eec:	2301      	movs	r3, #1
 8002eee:	4622      	mov	r2, r4
 8002ef0:	4649      	mov	r1, r9
 8002ef2:	4638      	mov	r0, r7
 8002ef4:	47c0      	blx	r8
 8002ef6:	3001      	adds	r0, #1
 8002ef8:	d0e6      	beq.n	8002ec8 <_printf_common+0xa8>
 8002efa:	3601      	adds	r6, #1
 8002efc:	e7d9      	b.n	8002eb2 <_printf_common+0x92>
	...

08002f00 <_printf_i>:
 8002f00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002f04:	460c      	mov	r4, r1
 8002f06:	7e27      	ldrb	r7, [r4, #24]
 8002f08:	4691      	mov	r9, r2
 8002f0a:	2f78      	cmp	r7, #120	; 0x78
 8002f0c:	4680      	mov	r8, r0
 8002f0e:	469a      	mov	sl, r3
 8002f10:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002f12:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002f16:	d807      	bhi.n	8002f28 <_printf_i+0x28>
 8002f18:	2f62      	cmp	r7, #98	; 0x62
 8002f1a:	d80a      	bhi.n	8002f32 <_printf_i+0x32>
 8002f1c:	2f00      	cmp	r7, #0
 8002f1e:	f000 80d9 	beq.w	80030d4 <_printf_i+0x1d4>
 8002f22:	2f58      	cmp	r7, #88	; 0x58
 8002f24:	f000 80a4 	beq.w	8003070 <_printf_i+0x170>
 8002f28:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002f2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002f30:	e03a      	b.n	8002fa8 <_printf_i+0xa8>
 8002f32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002f36:	2b15      	cmp	r3, #21
 8002f38:	d8f6      	bhi.n	8002f28 <_printf_i+0x28>
 8002f3a:	a001      	add	r0, pc, #4	; (adr r0, 8002f40 <_printf_i+0x40>)
 8002f3c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002f40:	08002f99 	.word	0x08002f99
 8002f44:	08002fad 	.word	0x08002fad
 8002f48:	08002f29 	.word	0x08002f29
 8002f4c:	08002f29 	.word	0x08002f29
 8002f50:	08002f29 	.word	0x08002f29
 8002f54:	08002f29 	.word	0x08002f29
 8002f58:	08002fad 	.word	0x08002fad
 8002f5c:	08002f29 	.word	0x08002f29
 8002f60:	08002f29 	.word	0x08002f29
 8002f64:	08002f29 	.word	0x08002f29
 8002f68:	08002f29 	.word	0x08002f29
 8002f6c:	080030bb 	.word	0x080030bb
 8002f70:	08002fdd 	.word	0x08002fdd
 8002f74:	0800309d 	.word	0x0800309d
 8002f78:	08002f29 	.word	0x08002f29
 8002f7c:	08002f29 	.word	0x08002f29
 8002f80:	080030dd 	.word	0x080030dd
 8002f84:	08002f29 	.word	0x08002f29
 8002f88:	08002fdd 	.word	0x08002fdd
 8002f8c:	08002f29 	.word	0x08002f29
 8002f90:	08002f29 	.word	0x08002f29
 8002f94:	080030a5 	.word	0x080030a5
 8002f98:	680b      	ldr	r3, [r1, #0]
 8002f9a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002f9e:	1d1a      	adds	r2, r3, #4
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	600a      	str	r2, [r1, #0]
 8002fa4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e0a4      	b.n	80030f6 <_printf_i+0x1f6>
 8002fac:	6825      	ldr	r5, [r4, #0]
 8002fae:	6808      	ldr	r0, [r1, #0]
 8002fb0:	062e      	lsls	r6, r5, #24
 8002fb2:	f100 0304 	add.w	r3, r0, #4
 8002fb6:	d50a      	bpl.n	8002fce <_printf_i+0xce>
 8002fb8:	6805      	ldr	r5, [r0, #0]
 8002fba:	600b      	str	r3, [r1, #0]
 8002fbc:	2d00      	cmp	r5, #0
 8002fbe:	da03      	bge.n	8002fc8 <_printf_i+0xc8>
 8002fc0:	232d      	movs	r3, #45	; 0x2d
 8002fc2:	426d      	negs	r5, r5
 8002fc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002fc8:	230a      	movs	r3, #10
 8002fca:	485e      	ldr	r0, [pc, #376]	; (8003144 <_printf_i+0x244>)
 8002fcc:	e019      	b.n	8003002 <_printf_i+0x102>
 8002fce:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002fd2:	6805      	ldr	r5, [r0, #0]
 8002fd4:	600b      	str	r3, [r1, #0]
 8002fd6:	bf18      	it	ne
 8002fd8:	b22d      	sxthne	r5, r5
 8002fda:	e7ef      	b.n	8002fbc <_printf_i+0xbc>
 8002fdc:	680b      	ldr	r3, [r1, #0]
 8002fde:	6825      	ldr	r5, [r4, #0]
 8002fe0:	1d18      	adds	r0, r3, #4
 8002fe2:	6008      	str	r0, [r1, #0]
 8002fe4:	0628      	lsls	r0, r5, #24
 8002fe6:	d501      	bpl.n	8002fec <_printf_i+0xec>
 8002fe8:	681d      	ldr	r5, [r3, #0]
 8002fea:	e002      	b.n	8002ff2 <_printf_i+0xf2>
 8002fec:	0669      	lsls	r1, r5, #25
 8002fee:	d5fb      	bpl.n	8002fe8 <_printf_i+0xe8>
 8002ff0:	881d      	ldrh	r5, [r3, #0]
 8002ff2:	2f6f      	cmp	r7, #111	; 0x6f
 8002ff4:	bf0c      	ite	eq
 8002ff6:	2308      	moveq	r3, #8
 8002ff8:	230a      	movne	r3, #10
 8002ffa:	4852      	ldr	r0, [pc, #328]	; (8003144 <_printf_i+0x244>)
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003002:	6866      	ldr	r6, [r4, #4]
 8003004:	2e00      	cmp	r6, #0
 8003006:	bfa8      	it	ge
 8003008:	6821      	ldrge	r1, [r4, #0]
 800300a:	60a6      	str	r6, [r4, #8]
 800300c:	bfa4      	itt	ge
 800300e:	f021 0104 	bicge.w	r1, r1, #4
 8003012:	6021      	strge	r1, [r4, #0]
 8003014:	b90d      	cbnz	r5, 800301a <_printf_i+0x11a>
 8003016:	2e00      	cmp	r6, #0
 8003018:	d04d      	beq.n	80030b6 <_printf_i+0x1b6>
 800301a:	4616      	mov	r6, r2
 800301c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003020:	fb03 5711 	mls	r7, r3, r1, r5
 8003024:	5dc7      	ldrb	r7, [r0, r7]
 8003026:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800302a:	462f      	mov	r7, r5
 800302c:	42bb      	cmp	r3, r7
 800302e:	460d      	mov	r5, r1
 8003030:	d9f4      	bls.n	800301c <_printf_i+0x11c>
 8003032:	2b08      	cmp	r3, #8
 8003034:	d10b      	bne.n	800304e <_printf_i+0x14e>
 8003036:	6823      	ldr	r3, [r4, #0]
 8003038:	07df      	lsls	r7, r3, #31
 800303a:	d508      	bpl.n	800304e <_printf_i+0x14e>
 800303c:	6923      	ldr	r3, [r4, #16]
 800303e:	6861      	ldr	r1, [r4, #4]
 8003040:	4299      	cmp	r1, r3
 8003042:	bfde      	ittt	le
 8003044:	2330      	movle	r3, #48	; 0x30
 8003046:	f806 3c01 	strble.w	r3, [r6, #-1]
 800304a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800304e:	1b92      	subs	r2, r2, r6
 8003050:	6122      	str	r2, [r4, #16]
 8003052:	464b      	mov	r3, r9
 8003054:	4621      	mov	r1, r4
 8003056:	4640      	mov	r0, r8
 8003058:	f8cd a000 	str.w	sl, [sp]
 800305c:	aa03      	add	r2, sp, #12
 800305e:	f7ff fedf 	bl	8002e20 <_printf_common>
 8003062:	3001      	adds	r0, #1
 8003064:	d14c      	bne.n	8003100 <_printf_i+0x200>
 8003066:	f04f 30ff 	mov.w	r0, #4294967295
 800306a:	b004      	add	sp, #16
 800306c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003070:	4834      	ldr	r0, [pc, #208]	; (8003144 <_printf_i+0x244>)
 8003072:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003076:	680e      	ldr	r6, [r1, #0]
 8003078:	6823      	ldr	r3, [r4, #0]
 800307a:	f856 5b04 	ldr.w	r5, [r6], #4
 800307e:	061f      	lsls	r7, r3, #24
 8003080:	600e      	str	r6, [r1, #0]
 8003082:	d514      	bpl.n	80030ae <_printf_i+0x1ae>
 8003084:	07d9      	lsls	r1, r3, #31
 8003086:	bf44      	itt	mi
 8003088:	f043 0320 	orrmi.w	r3, r3, #32
 800308c:	6023      	strmi	r3, [r4, #0]
 800308e:	b91d      	cbnz	r5, 8003098 <_printf_i+0x198>
 8003090:	6823      	ldr	r3, [r4, #0]
 8003092:	f023 0320 	bic.w	r3, r3, #32
 8003096:	6023      	str	r3, [r4, #0]
 8003098:	2310      	movs	r3, #16
 800309a:	e7af      	b.n	8002ffc <_printf_i+0xfc>
 800309c:	6823      	ldr	r3, [r4, #0]
 800309e:	f043 0320 	orr.w	r3, r3, #32
 80030a2:	6023      	str	r3, [r4, #0]
 80030a4:	2378      	movs	r3, #120	; 0x78
 80030a6:	4828      	ldr	r0, [pc, #160]	; (8003148 <_printf_i+0x248>)
 80030a8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80030ac:	e7e3      	b.n	8003076 <_printf_i+0x176>
 80030ae:	065e      	lsls	r6, r3, #25
 80030b0:	bf48      	it	mi
 80030b2:	b2ad      	uxthmi	r5, r5
 80030b4:	e7e6      	b.n	8003084 <_printf_i+0x184>
 80030b6:	4616      	mov	r6, r2
 80030b8:	e7bb      	b.n	8003032 <_printf_i+0x132>
 80030ba:	680b      	ldr	r3, [r1, #0]
 80030bc:	6826      	ldr	r6, [r4, #0]
 80030be:	1d1d      	adds	r5, r3, #4
 80030c0:	6960      	ldr	r0, [r4, #20]
 80030c2:	600d      	str	r5, [r1, #0]
 80030c4:	0635      	lsls	r5, r6, #24
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	d501      	bpl.n	80030ce <_printf_i+0x1ce>
 80030ca:	6018      	str	r0, [r3, #0]
 80030cc:	e002      	b.n	80030d4 <_printf_i+0x1d4>
 80030ce:	0671      	lsls	r1, r6, #25
 80030d0:	d5fb      	bpl.n	80030ca <_printf_i+0x1ca>
 80030d2:	8018      	strh	r0, [r3, #0]
 80030d4:	2300      	movs	r3, #0
 80030d6:	4616      	mov	r6, r2
 80030d8:	6123      	str	r3, [r4, #16]
 80030da:	e7ba      	b.n	8003052 <_printf_i+0x152>
 80030dc:	680b      	ldr	r3, [r1, #0]
 80030de:	1d1a      	adds	r2, r3, #4
 80030e0:	600a      	str	r2, [r1, #0]
 80030e2:	681e      	ldr	r6, [r3, #0]
 80030e4:	2100      	movs	r1, #0
 80030e6:	4630      	mov	r0, r6
 80030e8:	6862      	ldr	r2, [r4, #4]
 80030ea:	f000 fed7 	bl	8003e9c <memchr>
 80030ee:	b108      	cbz	r0, 80030f4 <_printf_i+0x1f4>
 80030f0:	1b80      	subs	r0, r0, r6
 80030f2:	6060      	str	r0, [r4, #4]
 80030f4:	6863      	ldr	r3, [r4, #4]
 80030f6:	6123      	str	r3, [r4, #16]
 80030f8:	2300      	movs	r3, #0
 80030fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80030fe:	e7a8      	b.n	8003052 <_printf_i+0x152>
 8003100:	4632      	mov	r2, r6
 8003102:	4649      	mov	r1, r9
 8003104:	4640      	mov	r0, r8
 8003106:	6923      	ldr	r3, [r4, #16]
 8003108:	47d0      	blx	sl
 800310a:	3001      	adds	r0, #1
 800310c:	d0ab      	beq.n	8003066 <_printf_i+0x166>
 800310e:	6823      	ldr	r3, [r4, #0]
 8003110:	079b      	lsls	r3, r3, #30
 8003112:	d413      	bmi.n	800313c <_printf_i+0x23c>
 8003114:	68e0      	ldr	r0, [r4, #12]
 8003116:	9b03      	ldr	r3, [sp, #12]
 8003118:	4298      	cmp	r0, r3
 800311a:	bfb8      	it	lt
 800311c:	4618      	movlt	r0, r3
 800311e:	e7a4      	b.n	800306a <_printf_i+0x16a>
 8003120:	2301      	movs	r3, #1
 8003122:	4632      	mov	r2, r6
 8003124:	4649      	mov	r1, r9
 8003126:	4640      	mov	r0, r8
 8003128:	47d0      	blx	sl
 800312a:	3001      	adds	r0, #1
 800312c:	d09b      	beq.n	8003066 <_printf_i+0x166>
 800312e:	3501      	adds	r5, #1
 8003130:	68e3      	ldr	r3, [r4, #12]
 8003132:	9903      	ldr	r1, [sp, #12]
 8003134:	1a5b      	subs	r3, r3, r1
 8003136:	42ab      	cmp	r3, r5
 8003138:	dcf2      	bgt.n	8003120 <_printf_i+0x220>
 800313a:	e7eb      	b.n	8003114 <_printf_i+0x214>
 800313c:	2500      	movs	r5, #0
 800313e:	f104 0619 	add.w	r6, r4, #25
 8003142:	e7f5      	b.n	8003130 <_printf_i+0x230>
 8003144:	0800566e 	.word	0x0800566e
 8003148:	0800567f 	.word	0x0800567f

0800314c <siprintf>:
 800314c:	b40e      	push	{r1, r2, r3}
 800314e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003152:	b500      	push	{lr}
 8003154:	b09c      	sub	sp, #112	; 0x70
 8003156:	ab1d      	add	r3, sp, #116	; 0x74
 8003158:	9002      	str	r0, [sp, #8]
 800315a:	9006      	str	r0, [sp, #24]
 800315c:	9107      	str	r1, [sp, #28]
 800315e:	9104      	str	r1, [sp, #16]
 8003160:	4808      	ldr	r0, [pc, #32]	; (8003184 <siprintf+0x38>)
 8003162:	4909      	ldr	r1, [pc, #36]	; (8003188 <siprintf+0x3c>)
 8003164:	f853 2b04 	ldr.w	r2, [r3], #4
 8003168:	9105      	str	r1, [sp, #20]
 800316a:	6800      	ldr	r0, [r0, #0]
 800316c:	a902      	add	r1, sp, #8
 800316e:	9301      	str	r3, [sp, #4]
 8003170:	f001 fb42 	bl	80047f8 <_svfiprintf_r>
 8003174:	2200      	movs	r2, #0
 8003176:	9b02      	ldr	r3, [sp, #8]
 8003178:	701a      	strb	r2, [r3, #0]
 800317a:	b01c      	add	sp, #112	; 0x70
 800317c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003180:	b003      	add	sp, #12
 8003182:	4770      	bx	lr
 8003184:	2000000c 	.word	0x2000000c
 8003188:	ffff0208 	.word	0xffff0208

0800318c <quorem>:
 800318c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003190:	6903      	ldr	r3, [r0, #16]
 8003192:	690c      	ldr	r4, [r1, #16]
 8003194:	4607      	mov	r7, r0
 8003196:	42a3      	cmp	r3, r4
 8003198:	f2c0 8083 	blt.w	80032a2 <quorem+0x116>
 800319c:	3c01      	subs	r4, #1
 800319e:	f100 0514 	add.w	r5, r0, #20
 80031a2:	f101 0814 	add.w	r8, r1, #20
 80031a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80031aa:	9301      	str	r3, [sp, #4]
 80031ac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80031b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80031b4:	3301      	adds	r3, #1
 80031b6:	429a      	cmp	r2, r3
 80031b8:	fbb2 f6f3 	udiv	r6, r2, r3
 80031bc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80031c0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80031c4:	d332      	bcc.n	800322c <quorem+0xa0>
 80031c6:	f04f 0e00 	mov.w	lr, #0
 80031ca:	4640      	mov	r0, r8
 80031cc:	46ac      	mov	ip, r5
 80031ce:	46f2      	mov	sl, lr
 80031d0:	f850 2b04 	ldr.w	r2, [r0], #4
 80031d4:	b293      	uxth	r3, r2
 80031d6:	fb06 e303 	mla	r3, r6, r3, lr
 80031da:	0c12      	lsrs	r2, r2, #16
 80031dc:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80031e0:	fb06 e202 	mla	r2, r6, r2, lr
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	ebaa 0303 	sub.w	r3, sl, r3
 80031ea:	f8dc a000 	ldr.w	sl, [ip]
 80031ee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80031f2:	fa1f fa8a 	uxth.w	sl, sl
 80031f6:	4453      	add	r3, sl
 80031f8:	fa1f fa82 	uxth.w	sl, r2
 80031fc:	f8dc 2000 	ldr.w	r2, [ip]
 8003200:	4581      	cmp	r9, r0
 8003202:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8003206:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800320a:	b29b      	uxth	r3, r3
 800320c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003210:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003214:	f84c 3b04 	str.w	r3, [ip], #4
 8003218:	d2da      	bcs.n	80031d0 <quorem+0x44>
 800321a:	f855 300b 	ldr.w	r3, [r5, fp]
 800321e:	b92b      	cbnz	r3, 800322c <quorem+0xa0>
 8003220:	9b01      	ldr	r3, [sp, #4]
 8003222:	3b04      	subs	r3, #4
 8003224:	429d      	cmp	r5, r3
 8003226:	461a      	mov	r2, r3
 8003228:	d32f      	bcc.n	800328a <quorem+0xfe>
 800322a:	613c      	str	r4, [r7, #16]
 800322c:	4638      	mov	r0, r7
 800322e:	f001 f8cb 	bl	80043c8 <__mcmp>
 8003232:	2800      	cmp	r0, #0
 8003234:	db25      	blt.n	8003282 <quorem+0xf6>
 8003236:	4628      	mov	r0, r5
 8003238:	f04f 0c00 	mov.w	ip, #0
 800323c:	3601      	adds	r6, #1
 800323e:	f858 1b04 	ldr.w	r1, [r8], #4
 8003242:	f8d0 e000 	ldr.w	lr, [r0]
 8003246:	b28b      	uxth	r3, r1
 8003248:	ebac 0303 	sub.w	r3, ip, r3
 800324c:	fa1f f28e 	uxth.w	r2, lr
 8003250:	4413      	add	r3, r2
 8003252:	0c0a      	lsrs	r2, r1, #16
 8003254:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003258:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800325c:	b29b      	uxth	r3, r3
 800325e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003262:	45c1      	cmp	r9, r8
 8003264:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003268:	f840 3b04 	str.w	r3, [r0], #4
 800326c:	d2e7      	bcs.n	800323e <quorem+0xb2>
 800326e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003272:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003276:	b922      	cbnz	r2, 8003282 <quorem+0xf6>
 8003278:	3b04      	subs	r3, #4
 800327a:	429d      	cmp	r5, r3
 800327c:	461a      	mov	r2, r3
 800327e:	d30a      	bcc.n	8003296 <quorem+0x10a>
 8003280:	613c      	str	r4, [r7, #16]
 8003282:	4630      	mov	r0, r6
 8003284:	b003      	add	sp, #12
 8003286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800328a:	6812      	ldr	r2, [r2, #0]
 800328c:	3b04      	subs	r3, #4
 800328e:	2a00      	cmp	r2, #0
 8003290:	d1cb      	bne.n	800322a <quorem+0x9e>
 8003292:	3c01      	subs	r4, #1
 8003294:	e7c6      	b.n	8003224 <quorem+0x98>
 8003296:	6812      	ldr	r2, [r2, #0]
 8003298:	3b04      	subs	r3, #4
 800329a:	2a00      	cmp	r2, #0
 800329c:	d1f0      	bne.n	8003280 <quorem+0xf4>
 800329e:	3c01      	subs	r4, #1
 80032a0:	e7eb      	b.n	800327a <quorem+0xee>
 80032a2:	2000      	movs	r0, #0
 80032a4:	e7ee      	b.n	8003284 <quorem+0xf8>
	...

080032a8 <_dtoa_r>:
 80032a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032ac:	4616      	mov	r6, r2
 80032ae:	461f      	mov	r7, r3
 80032b0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80032b2:	b099      	sub	sp, #100	; 0x64
 80032b4:	4605      	mov	r5, r0
 80032b6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80032ba:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80032be:	b974      	cbnz	r4, 80032de <_dtoa_r+0x36>
 80032c0:	2010      	movs	r0, #16
 80032c2:	f000 fde3 	bl	8003e8c <malloc>
 80032c6:	4602      	mov	r2, r0
 80032c8:	6268      	str	r0, [r5, #36]	; 0x24
 80032ca:	b920      	cbnz	r0, 80032d6 <_dtoa_r+0x2e>
 80032cc:	21ea      	movs	r1, #234	; 0xea
 80032ce:	4bae      	ldr	r3, [pc, #696]	; (8003588 <_dtoa_r+0x2e0>)
 80032d0:	48ae      	ldr	r0, [pc, #696]	; (800358c <_dtoa_r+0x2e4>)
 80032d2:	f001 fba1 	bl	8004a18 <__assert_func>
 80032d6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80032da:	6004      	str	r4, [r0, #0]
 80032dc:	60c4      	str	r4, [r0, #12]
 80032de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80032e0:	6819      	ldr	r1, [r3, #0]
 80032e2:	b151      	cbz	r1, 80032fa <_dtoa_r+0x52>
 80032e4:	685a      	ldr	r2, [r3, #4]
 80032e6:	2301      	movs	r3, #1
 80032e8:	4093      	lsls	r3, r2
 80032ea:	604a      	str	r2, [r1, #4]
 80032ec:	608b      	str	r3, [r1, #8]
 80032ee:	4628      	mov	r0, r5
 80032f0:	f000 fe30 	bl	8003f54 <_Bfree>
 80032f4:	2200      	movs	r2, #0
 80032f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80032f8:	601a      	str	r2, [r3, #0]
 80032fa:	1e3b      	subs	r3, r7, #0
 80032fc:	bfaf      	iteee	ge
 80032fe:	2300      	movge	r3, #0
 8003300:	2201      	movlt	r2, #1
 8003302:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003306:	9305      	strlt	r3, [sp, #20]
 8003308:	bfa8      	it	ge
 800330a:	f8c8 3000 	strge.w	r3, [r8]
 800330e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8003312:	4b9f      	ldr	r3, [pc, #636]	; (8003590 <_dtoa_r+0x2e8>)
 8003314:	bfb8      	it	lt
 8003316:	f8c8 2000 	strlt.w	r2, [r8]
 800331a:	ea33 0309 	bics.w	r3, r3, r9
 800331e:	d119      	bne.n	8003354 <_dtoa_r+0xac>
 8003320:	f242 730f 	movw	r3, #9999	; 0x270f
 8003324:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003326:	6013      	str	r3, [r2, #0]
 8003328:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800332c:	4333      	orrs	r3, r6
 800332e:	f000 8580 	beq.w	8003e32 <_dtoa_r+0xb8a>
 8003332:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003334:	b953      	cbnz	r3, 800334c <_dtoa_r+0xa4>
 8003336:	4b97      	ldr	r3, [pc, #604]	; (8003594 <_dtoa_r+0x2ec>)
 8003338:	e022      	b.n	8003380 <_dtoa_r+0xd8>
 800333a:	4b97      	ldr	r3, [pc, #604]	; (8003598 <_dtoa_r+0x2f0>)
 800333c:	9308      	str	r3, [sp, #32]
 800333e:	3308      	adds	r3, #8
 8003340:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8003342:	6013      	str	r3, [r2, #0]
 8003344:	9808      	ldr	r0, [sp, #32]
 8003346:	b019      	add	sp, #100	; 0x64
 8003348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800334c:	4b91      	ldr	r3, [pc, #580]	; (8003594 <_dtoa_r+0x2ec>)
 800334e:	9308      	str	r3, [sp, #32]
 8003350:	3303      	adds	r3, #3
 8003352:	e7f5      	b.n	8003340 <_dtoa_r+0x98>
 8003354:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003358:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800335c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003360:	2200      	movs	r2, #0
 8003362:	2300      	movs	r3, #0
 8003364:	f7fd fb20 	bl	80009a8 <__aeabi_dcmpeq>
 8003368:	4680      	mov	r8, r0
 800336a:	b158      	cbz	r0, 8003384 <_dtoa_r+0xdc>
 800336c:	2301      	movs	r3, #1
 800336e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003370:	6013      	str	r3, [r2, #0]
 8003372:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003374:	2b00      	cmp	r3, #0
 8003376:	f000 8559 	beq.w	8003e2c <_dtoa_r+0xb84>
 800337a:	4888      	ldr	r0, [pc, #544]	; (800359c <_dtoa_r+0x2f4>)
 800337c:	6018      	str	r0, [r3, #0]
 800337e:	1e43      	subs	r3, r0, #1
 8003380:	9308      	str	r3, [sp, #32]
 8003382:	e7df      	b.n	8003344 <_dtoa_r+0x9c>
 8003384:	ab16      	add	r3, sp, #88	; 0x58
 8003386:	9301      	str	r3, [sp, #4]
 8003388:	ab17      	add	r3, sp, #92	; 0x5c
 800338a:	9300      	str	r3, [sp, #0]
 800338c:	4628      	mov	r0, r5
 800338e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003392:	f001 f8c5 	bl	8004520 <__d2b>
 8003396:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800339a:	4682      	mov	sl, r0
 800339c:	2c00      	cmp	r4, #0
 800339e:	d07e      	beq.n	800349e <_dtoa_r+0x1f6>
 80033a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80033a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80033a6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80033aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033ae:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80033b2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80033b6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80033ba:	2200      	movs	r2, #0
 80033bc:	4b78      	ldr	r3, [pc, #480]	; (80035a0 <_dtoa_r+0x2f8>)
 80033be:	f7fc fed3 	bl	8000168 <__aeabi_dsub>
 80033c2:	a36b      	add	r3, pc, #428	; (adr r3, 8003570 <_dtoa_r+0x2c8>)
 80033c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c8:	f7fd f886 	bl	80004d8 <__aeabi_dmul>
 80033cc:	a36a      	add	r3, pc, #424	; (adr r3, 8003578 <_dtoa_r+0x2d0>)
 80033ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d2:	f7fc fecb 	bl	800016c <__adddf3>
 80033d6:	4606      	mov	r6, r0
 80033d8:	4620      	mov	r0, r4
 80033da:	460f      	mov	r7, r1
 80033dc:	f7fd f812 	bl	8000404 <__aeabi_i2d>
 80033e0:	a367      	add	r3, pc, #412	; (adr r3, 8003580 <_dtoa_r+0x2d8>)
 80033e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e6:	f7fd f877 	bl	80004d8 <__aeabi_dmul>
 80033ea:	4602      	mov	r2, r0
 80033ec:	460b      	mov	r3, r1
 80033ee:	4630      	mov	r0, r6
 80033f0:	4639      	mov	r1, r7
 80033f2:	f7fc febb 	bl	800016c <__adddf3>
 80033f6:	4606      	mov	r6, r0
 80033f8:	460f      	mov	r7, r1
 80033fa:	f7fd fb1d 	bl	8000a38 <__aeabi_d2iz>
 80033fe:	2200      	movs	r2, #0
 8003400:	4681      	mov	r9, r0
 8003402:	2300      	movs	r3, #0
 8003404:	4630      	mov	r0, r6
 8003406:	4639      	mov	r1, r7
 8003408:	f7fd fad8 	bl	80009bc <__aeabi_dcmplt>
 800340c:	b148      	cbz	r0, 8003422 <_dtoa_r+0x17a>
 800340e:	4648      	mov	r0, r9
 8003410:	f7fc fff8 	bl	8000404 <__aeabi_i2d>
 8003414:	4632      	mov	r2, r6
 8003416:	463b      	mov	r3, r7
 8003418:	f7fd fac6 	bl	80009a8 <__aeabi_dcmpeq>
 800341c:	b908      	cbnz	r0, 8003422 <_dtoa_r+0x17a>
 800341e:	f109 39ff 	add.w	r9, r9, #4294967295
 8003422:	f1b9 0f16 	cmp.w	r9, #22
 8003426:	d857      	bhi.n	80034d8 <_dtoa_r+0x230>
 8003428:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800342c:	4b5d      	ldr	r3, [pc, #372]	; (80035a4 <_dtoa_r+0x2fc>)
 800342e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8003432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003436:	f7fd fac1 	bl	80009bc <__aeabi_dcmplt>
 800343a:	2800      	cmp	r0, #0
 800343c:	d04e      	beq.n	80034dc <_dtoa_r+0x234>
 800343e:	2300      	movs	r3, #0
 8003440:	f109 39ff 	add.w	r9, r9, #4294967295
 8003444:	930f      	str	r3, [sp, #60]	; 0x3c
 8003446:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003448:	1b1c      	subs	r4, r3, r4
 800344a:	1e63      	subs	r3, r4, #1
 800344c:	9309      	str	r3, [sp, #36]	; 0x24
 800344e:	bf49      	itett	mi
 8003450:	f1c4 0301 	rsbmi	r3, r4, #1
 8003454:	2300      	movpl	r3, #0
 8003456:	9306      	strmi	r3, [sp, #24]
 8003458:	2300      	movmi	r3, #0
 800345a:	bf54      	ite	pl
 800345c:	9306      	strpl	r3, [sp, #24]
 800345e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8003460:	f1b9 0f00 	cmp.w	r9, #0
 8003464:	db3c      	blt.n	80034e0 <_dtoa_r+0x238>
 8003466:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003468:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800346c:	444b      	add	r3, r9
 800346e:	9309      	str	r3, [sp, #36]	; 0x24
 8003470:	2300      	movs	r3, #0
 8003472:	930a      	str	r3, [sp, #40]	; 0x28
 8003474:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003476:	2b09      	cmp	r3, #9
 8003478:	d86c      	bhi.n	8003554 <_dtoa_r+0x2ac>
 800347a:	2b05      	cmp	r3, #5
 800347c:	bfc4      	itt	gt
 800347e:	3b04      	subgt	r3, #4
 8003480:	9322      	strgt	r3, [sp, #136]	; 0x88
 8003482:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003484:	bfc8      	it	gt
 8003486:	2400      	movgt	r4, #0
 8003488:	f1a3 0302 	sub.w	r3, r3, #2
 800348c:	bfd8      	it	le
 800348e:	2401      	movle	r4, #1
 8003490:	2b03      	cmp	r3, #3
 8003492:	f200 808b 	bhi.w	80035ac <_dtoa_r+0x304>
 8003496:	e8df f003 	tbb	[pc, r3]
 800349a:	4f2d      	.short	0x4f2d
 800349c:	5b4d      	.short	0x5b4d
 800349e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80034a2:	441c      	add	r4, r3
 80034a4:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80034a8:	2b20      	cmp	r3, #32
 80034aa:	bfc3      	ittte	gt
 80034ac:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80034b0:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80034b4:	fa09 f303 	lslgt.w	r3, r9, r3
 80034b8:	f1c3 0320 	rsble	r3, r3, #32
 80034bc:	bfc6      	itte	gt
 80034be:	fa26 f000 	lsrgt.w	r0, r6, r0
 80034c2:	4318      	orrgt	r0, r3
 80034c4:	fa06 f003 	lslle.w	r0, r6, r3
 80034c8:	f7fc ff8c 	bl	80003e4 <__aeabi_ui2d>
 80034cc:	2301      	movs	r3, #1
 80034ce:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80034d2:	3c01      	subs	r4, #1
 80034d4:	9313      	str	r3, [sp, #76]	; 0x4c
 80034d6:	e770      	b.n	80033ba <_dtoa_r+0x112>
 80034d8:	2301      	movs	r3, #1
 80034da:	e7b3      	b.n	8003444 <_dtoa_r+0x19c>
 80034dc:	900f      	str	r0, [sp, #60]	; 0x3c
 80034de:	e7b2      	b.n	8003446 <_dtoa_r+0x19e>
 80034e0:	9b06      	ldr	r3, [sp, #24]
 80034e2:	eba3 0309 	sub.w	r3, r3, r9
 80034e6:	9306      	str	r3, [sp, #24]
 80034e8:	f1c9 0300 	rsb	r3, r9, #0
 80034ec:	930a      	str	r3, [sp, #40]	; 0x28
 80034ee:	2300      	movs	r3, #0
 80034f0:	930e      	str	r3, [sp, #56]	; 0x38
 80034f2:	e7bf      	b.n	8003474 <_dtoa_r+0x1cc>
 80034f4:	2300      	movs	r3, #0
 80034f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80034f8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	dc59      	bgt.n	80035b2 <_dtoa_r+0x30a>
 80034fe:	f04f 0b01 	mov.w	fp, #1
 8003502:	465b      	mov	r3, fp
 8003504:	f8cd b008 	str.w	fp, [sp, #8]
 8003508:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800350c:	2200      	movs	r2, #0
 800350e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003510:	6042      	str	r2, [r0, #4]
 8003512:	2204      	movs	r2, #4
 8003514:	f102 0614 	add.w	r6, r2, #20
 8003518:	429e      	cmp	r6, r3
 800351a:	6841      	ldr	r1, [r0, #4]
 800351c:	d94f      	bls.n	80035be <_dtoa_r+0x316>
 800351e:	4628      	mov	r0, r5
 8003520:	f000 fcd8 	bl	8003ed4 <_Balloc>
 8003524:	9008      	str	r0, [sp, #32]
 8003526:	2800      	cmp	r0, #0
 8003528:	d14d      	bne.n	80035c6 <_dtoa_r+0x31e>
 800352a:	4602      	mov	r2, r0
 800352c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003530:	4b1d      	ldr	r3, [pc, #116]	; (80035a8 <_dtoa_r+0x300>)
 8003532:	e6cd      	b.n	80032d0 <_dtoa_r+0x28>
 8003534:	2301      	movs	r3, #1
 8003536:	e7de      	b.n	80034f6 <_dtoa_r+0x24e>
 8003538:	2300      	movs	r3, #0
 800353a:	930b      	str	r3, [sp, #44]	; 0x2c
 800353c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800353e:	eb09 0b03 	add.w	fp, r9, r3
 8003542:	f10b 0301 	add.w	r3, fp, #1
 8003546:	2b01      	cmp	r3, #1
 8003548:	9302      	str	r3, [sp, #8]
 800354a:	bfb8      	it	lt
 800354c:	2301      	movlt	r3, #1
 800354e:	e7dd      	b.n	800350c <_dtoa_r+0x264>
 8003550:	2301      	movs	r3, #1
 8003552:	e7f2      	b.n	800353a <_dtoa_r+0x292>
 8003554:	2401      	movs	r4, #1
 8003556:	2300      	movs	r3, #0
 8003558:	940b      	str	r4, [sp, #44]	; 0x2c
 800355a:	9322      	str	r3, [sp, #136]	; 0x88
 800355c:	f04f 3bff 	mov.w	fp, #4294967295
 8003560:	2200      	movs	r2, #0
 8003562:	2312      	movs	r3, #18
 8003564:	f8cd b008 	str.w	fp, [sp, #8]
 8003568:	9223      	str	r2, [sp, #140]	; 0x8c
 800356a:	e7cf      	b.n	800350c <_dtoa_r+0x264>
 800356c:	f3af 8000 	nop.w
 8003570:	636f4361 	.word	0x636f4361
 8003574:	3fd287a7 	.word	0x3fd287a7
 8003578:	8b60c8b3 	.word	0x8b60c8b3
 800357c:	3fc68a28 	.word	0x3fc68a28
 8003580:	509f79fb 	.word	0x509f79fb
 8003584:	3fd34413 	.word	0x3fd34413
 8003588:	0800569d 	.word	0x0800569d
 800358c:	080056b4 	.word	0x080056b4
 8003590:	7ff00000 	.word	0x7ff00000
 8003594:	08005699 	.word	0x08005699
 8003598:	08005690 	.word	0x08005690
 800359c:	0800566d 	.word	0x0800566d
 80035a0:	3ff80000 	.word	0x3ff80000
 80035a4:	080057b0 	.word	0x080057b0
 80035a8:	08005713 	.word	0x08005713
 80035ac:	2301      	movs	r3, #1
 80035ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80035b0:	e7d4      	b.n	800355c <_dtoa_r+0x2b4>
 80035b2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80035b6:	465b      	mov	r3, fp
 80035b8:	f8cd b008 	str.w	fp, [sp, #8]
 80035bc:	e7a6      	b.n	800350c <_dtoa_r+0x264>
 80035be:	3101      	adds	r1, #1
 80035c0:	6041      	str	r1, [r0, #4]
 80035c2:	0052      	lsls	r2, r2, #1
 80035c4:	e7a6      	b.n	8003514 <_dtoa_r+0x26c>
 80035c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80035c8:	9a08      	ldr	r2, [sp, #32]
 80035ca:	601a      	str	r2, [r3, #0]
 80035cc:	9b02      	ldr	r3, [sp, #8]
 80035ce:	2b0e      	cmp	r3, #14
 80035d0:	f200 80a8 	bhi.w	8003724 <_dtoa_r+0x47c>
 80035d4:	2c00      	cmp	r4, #0
 80035d6:	f000 80a5 	beq.w	8003724 <_dtoa_r+0x47c>
 80035da:	f1b9 0f00 	cmp.w	r9, #0
 80035de:	dd34      	ble.n	800364a <_dtoa_r+0x3a2>
 80035e0:	4a9a      	ldr	r2, [pc, #616]	; (800384c <_dtoa_r+0x5a4>)
 80035e2:	f009 030f 	and.w	r3, r9, #15
 80035e6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80035ea:	f419 7f80 	tst.w	r9, #256	; 0x100
 80035ee:	e9d3 3400 	ldrd	r3, r4, [r3]
 80035f2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80035f6:	ea4f 1429 	mov.w	r4, r9, asr #4
 80035fa:	d016      	beq.n	800362a <_dtoa_r+0x382>
 80035fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003600:	4b93      	ldr	r3, [pc, #588]	; (8003850 <_dtoa_r+0x5a8>)
 8003602:	2703      	movs	r7, #3
 8003604:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003608:	f7fd f890 	bl	800072c <__aeabi_ddiv>
 800360c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003610:	f004 040f 	and.w	r4, r4, #15
 8003614:	4e8e      	ldr	r6, [pc, #568]	; (8003850 <_dtoa_r+0x5a8>)
 8003616:	b954      	cbnz	r4, 800362e <_dtoa_r+0x386>
 8003618:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800361c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003620:	f7fd f884 	bl	800072c <__aeabi_ddiv>
 8003624:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003628:	e029      	b.n	800367e <_dtoa_r+0x3d6>
 800362a:	2702      	movs	r7, #2
 800362c:	e7f2      	b.n	8003614 <_dtoa_r+0x36c>
 800362e:	07e1      	lsls	r1, r4, #31
 8003630:	d508      	bpl.n	8003644 <_dtoa_r+0x39c>
 8003632:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003636:	e9d6 2300 	ldrd	r2, r3, [r6]
 800363a:	f7fc ff4d 	bl	80004d8 <__aeabi_dmul>
 800363e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003642:	3701      	adds	r7, #1
 8003644:	1064      	asrs	r4, r4, #1
 8003646:	3608      	adds	r6, #8
 8003648:	e7e5      	b.n	8003616 <_dtoa_r+0x36e>
 800364a:	f000 80a5 	beq.w	8003798 <_dtoa_r+0x4f0>
 800364e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003652:	f1c9 0400 	rsb	r4, r9, #0
 8003656:	4b7d      	ldr	r3, [pc, #500]	; (800384c <_dtoa_r+0x5a4>)
 8003658:	f004 020f 	and.w	r2, r4, #15
 800365c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003664:	f7fc ff38 	bl	80004d8 <__aeabi_dmul>
 8003668:	2702      	movs	r7, #2
 800366a:	2300      	movs	r3, #0
 800366c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003670:	4e77      	ldr	r6, [pc, #476]	; (8003850 <_dtoa_r+0x5a8>)
 8003672:	1124      	asrs	r4, r4, #4
 8003674:	2c00      	cmp	r4, #0
 8003676:	f040 8084 	bne.w	8003782 <_dtoa_r+0x4da>
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1d2      	bne.n	8003624 <_dtoa_r+0x37c>
 800367e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003680:	2b00      	cmp	r3, #0
 8003682:	f000 808b 	beq.w	800379c <_dtoa_r+0x4f4>
 8003686:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800368a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800368e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003692:	2200      	movs	r2, #0
 8003694:	4b6f      	ldr	r3, [pc, #444]	; (8003854 <_dtoa_r+0x5ac>)
 8003696:	f7fd f991 	bl	80009bc <__aeabi_dcmplt>
 800369a:	2800      	cmp	r0, #0
 800369c:	d07e      	beq.n	800379c <_dtoa_r+0x4f4>
 800369e:	9b02      	ldr	r3, [sp, #8]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d07b      	beq.n	800379c <_dtoa_r+0x4f4>
 80036a4:	f1bb 0f00 	cmp.w	fp, #0
 80036a8:	dd38      	ble.n	800371c <_dtoa_r+0x474>
 80036aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80036ae:	2200      	movs	r2, #0
 80036b0:	4b69      	ldr	r3, [pc, #420]	; (8003858 <_dtoa_r+0x5b0>)
 80036b2:	f7fc ff11 	bl	80004d8 <__aeabi_dmul>
 80036b6:	465c      	mov	r4, fp
 80036b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80036bc:	f109 38ff 	add.w	r8, r9, #4294967295
 80036c0:	3701      	adds	r7, #1
 80036c2:	4638      	mov	r0, r7
 80036c4:	f7fc fe9e 	bl	8000404 <__aeabi_i2d>
 80036c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80036cc:	f7fc ff04 	bl	80004d8 <__aeabi_dmul>
 80036d0:	2200      	movs	r2, #0
 80036d2:	4b62      	ldr	r3, [pc, #392]	; (800385c <_dtoa_r+0x5b4>)
 80036d4:	f7fc fd4a 	bl	800016c <__adddf3>
 80036d8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80036dc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80036e0:	9611      	str	r6, [sp, #68]	; 0x44
 80036e2:	2c00      	cmp	r4, #0
 80036e4:	d15d      	bne.n	80037a2 <_dtoa_r+0x4fa>
 80036e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80036ea:	2200      	movs	r2, #0
 80036ec:	4b5c      	ldr	r3, [pc, #368]	; (8003860 <_dtoa_r+0x5b8>)
 80036ee:	f7fc fd3b 	bl	8000168 <__aeabi_dsub>
 80036f2:	4602      	mov	r2, r0
 80036f4:	460b      	mov	r3, r1
 80036f6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80036fa:	4633      	mov	r3, r6
 80036fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80036fe:	f7fd f97b 	bl	80009f8 <__aeabi_dcmpgt>
 8003702:	2800      	cmp	r0, #0
 8003704:	f040 829e 	bne.w	8003c44 <_dtoa_r+0x99c>
 8003708:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800370c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800370e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8003712:	f7fd f953 	bl	80009bc <__aeabi_dcmplt>
 8003716:	2800      	cmp	r0, #0
 8003718:	f040 8292 	bne.w	8003c40 <_dtoa_r+0x998>
 800371c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8003720:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003724:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003726:	2b00      	cmp	r3, #0
 8003728:	f2c0 8153 	blt.w	80039d2 <_dtoa_r+0x72a>
 800372c:	f1b9 0f0e 	cmp.w	r9, #14
 8003730:	f300 814f 	bgt.w	80039d2 <_dtoa_r+0x72a>
 8003734:	4b45      	ldr	r3, [pc, #276]	; (800384c <_dtoa_r+0x5a4>)
 8003736:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800373a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800373e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8003742:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003744:	2b00      	cmp	r3, #0
 8003746:	f280 80db 	bge.w	8003900 <_dtoa_r+0x658>
 800374a:	9b02      	ldr	r3, [sp, #8]
 800374c:	2b00      	cmp	r3, #0
 800374e:	f300 80d7 	bgt.w	8003900 <_dtoa_r+0x658>
 8003752:	f040 8274 	bne.w	8003c3e <_dtoa_r+0x996>
 8003756:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800375a:	2200      	movs	r2, #0
 800375c:	4b40      	ldr	r3, [pc, #256]	; (8003860 <_dtoa_r+0x5b8>)
 800375e:	f7fc febb 	bl	80004d8 <__aeabi_dmul>
 8003762:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003766:	f7fd f93d 	bl	80009e4 <__aeabi_dcmpge>
 800376a:	9c02      	ldr	r4, [sp, #8]
 800376c:	4626      	mov	r6, r4
 800376e:	2800      	cmp	r0, #0
 8003770:	f040 824a 	bne.w	8003c08 <_dtoa_r+0x960>
 8003774:	2331      	movs	r3, #49	; 0x31
 8003776:	9f08      	ldr	r7, [sp, #32]
 8003778:	f109 0901 	add.w	r9, r9, #1
 800377c:	f807 3b01 	strb.w	r3, [r7], #1
 8003780:	e246      	b.n	8003c10 <_dtoa_r+0x968>
 8003782:	07e2      	lsls	r2, r4, #31
 8003784:	d505      	bpl.n	8003792 <_dtoa_r+0x4ea>
 8003786:	e9d6 2300 	ldrd	r2, r3, [r6]
 800378a:	f7fc fea5 	bl	80004d8 <__aeabi_dmul>
 800378e:	2301      	movs	r3, #1
 8003790:	3701      	adds	r7, #1
 8003792:	1064      	asrs	r4, r4, #1
 8003794:	3608      	adds	r6, #8
 8003796:	e76d      	b.n	8003674 <_dtoa_r+0x3cc>
 8003798:	2702      	movs	r7, #2
 800379a:	e770      	b.n	800367e <_dtoa_r+0x3d6>
 800379c:	46c8      	mov	r8, r9
 800379e:	9c02      	ldr	r4, [sp, #8]
 80037a0:	e78f      	b.n	80036c2 <_dtoa_r+0x41a>
 80037a2:	9908      	ldr	r1, [sp, #32]
 80037a4:	4b29      	ldr	r3, [pc, #164]	; (800384c <_dtoa_r+0x5a4>)
 80037a6:	4421      	add	r1, r4
 80037a8:	9112      	str	r1, [sp, #72]	; 0x48
 80037aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80037ac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80037b0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80037b4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80037b8:	2900      	cmp	r1, #0
 80037ba:	d055      	beq.n	8003868 <_dtoa_r+0x5c0>
 80037bc:	2000      	movs	r0, #0
 80037be:	4929      	ldr	r1, [pc, #164]	; (8003864 <_dtoa_r+0x5bc>)
 80037c0:	f7fc ffb4 	bl	800072c <__aeabi_ddiv>
 80037c4:	463b      	mov	r3, r7
 80037c6:	4632      	mov	r2, r6
 80037c8:	f7fc fcce 	bl	8000168 <__aeabi_dsub>
 80037cc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80037d0:	9f08      	ldr	r7, [sp, #32]
 80037d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80037d6:	f7fd f92f 	bl	8000a38 <__aeabi_d2iz>
 80037da:	4604      	mov	r4, r0
 80037dc:	f7fc fe12 	bl	8000404 <__aeabi_i2d>
 80037e0:	4602      	mov	r2, r0
 80037e2:	460b      	mov	r3, r1
 80037e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80037e8:	f7fc fcbe 	bl	8000168 <__aeabi_dsub>
 80037ec:	4602      	mov	r2, r0
 80037ee:	460b      	mov	r3, r1
 80037f0:	3430      	adds	r4, #48	; 0x30
 80037f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80037f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80037fa:	f807 4b01 	strb.w	r4, [r7], #1
 80037fe:	f7fd f8dd 	bl	80009bc <__aeabi_dcmplt>
 8003802:	2800      	cmp	r0, #0
 8003804:	d174      	bne.n	80038f0 <_dtoa_r+0x648>
 8003806:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800380a:	2000      	movs	r0, #0
 800380c:	4911      	ldr	r1, [pc, #68]	; (8003854 <_dtoa_r+0x5ac>)
 800380e:	f7fc fcab 	bl	8000168 <__aeabi_dsub>
 8003812:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003816:	f7fd f8d1 	bl	80009bc <__aeabi_dcmplt>
 800381a:	2800      	cmp	r0, #0
 800381c:	f040 80b6 	bne.w	800398c <_dtoa_r+0x6e4>
 8003820:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003822:	429f      	cmp	r7, r3
 8003824:	f43f af7a 	beq.w	800371c <_dtoa_r+0x474>
 8003828:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800382c:	2200      	movs	r2, #0
 800382e:	4b0a      	ldr	r3, [pc, #40]	; (8003858 <_dtoa_r+0x5b0>)
 8003830:	f7fc fe52 	bl	80004d8 <__aeabi_dmul>
 8003834:	2200      	movs	r2, #0
 8003836:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800383a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800383e:	4b06      	ldr	r3, [pc, #24]	; (8003858 <_dtoa_r+0x5b0>)
 8003840:	f7fc fe4a 	bl	80004d8 <__aeabi_dmul>
 8003844:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003848:	e7c3      	b.n	80037d2 <_dtoa_r+0x52a>
 800384a:	bf00      	nop
 800384c:	080057b0 	.word	0x080057b0
 8003850:	08005788 	.word	0x08005788
 8003854:	3ff00000 	.word	0x3ff00000
 8003858:	40240000 	.word	0x40240000
 800385c:	401c0000 	.word	0x401c0000
 8003860:	40140000 	.word	0x40140000
 8003864:	3fe00000 	.word	0x3fe00000
 8003868:	4630      	mov	r0, r6
 800386a:	4639      	mov	r1, r7
 800386c:	f7fc fe34 	bl	80004d8 <__aeabi_dmul>
 8003870:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003872:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003876:	9c08      	ldr	r4, [sp, #32]
 8003878:	9314      	str	r3, [sp, #80]	; 0x50
 800387a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800387e:	f7fd f8db 	bl	8000a38 <__aeabi_d2iz>
 8003882:	9015      	str	r0, [sp, #84]	; 0x54
 8003884:	f7fc fdbe 	bl	8000404 <__aeabi_i2d>
 8003888:	4602      	mov	r2, r0
 800388a:	460b      	mov	r3, r1
 800388c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003890:	f7fc fc6a 	bl	8000168 <__aeabi_dsub>
 8003894:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003896:	4606      	mov	r6, r0
 8003898:	3330      	adds	r3, #48	; 0x30
 800389a:	f804 3b01 	strb.w	r3, [r4], #1
 800389e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80038a0:	460f      	mov	r7, r1
 80038a2:	429c      	cmp	r4, r3
 80038a4:	f04f 0200 	mov.w	r2, #0
 80038a8:	d124      	bne.n	80038f4 <_dtoa_r+0x64c>
 80038aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80038ae:	4bb3      	ldr	r3, [pc, #716]	; (8003b7c <_dtoa_r+0x8d4>)
 80038b0:	f7fc fc5c 	bl	800016c <__adddf3>
 80038b4:	4602      	mov	r2, r0
 80038b6:	460b      	mov	r3, r1
 80038b8:	4630      	mov	r0, r6
 80038ba:	4639      	mov	r1, r7
 80038bc:	f7fd f89c 	bl	80009f8 <__aeabi_dcmpgt>
 80038c0:	2800      	cmp	r0, #0
 80038c2:	d162      	bne.n	800398a <_dtoa_r+0x6e2>
 80038c4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80038c8:	2000      	movs	r0, #0
 80038ca:	49ac      	ldr	r1, [pc, #688]	; (8003b7c <_dtoa_r+0x8d4>)
 80038cc:	f7fc fc4c 	bl	8000168 <__aeabi_dsub>
 80038d0:	4602      	mov	r2, r0
 80038d2:	460b      	mov	r3, r1
 80038d4:	4630      	mov	r0, r6
 80038d6:	4639      	mov	r1, r7
 80038d8:	f7fd f870 	bl	80009bc <__aeabi_dcmplt>
 80038dc:	2800      	cmp	r0, #0
 80038de:	f43f af1d 	beq.w	800371c <_dtoa_r+0x474>
 80038e2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80038e4:	1e7b      	subs	r3, r7, #1
 80038e6:	9314      	str	r3, [sp, #80]	; 0x50
 80038e8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80038ec:	2b30      	cmp	r3, #48	; 0x30
 80038ee:	d0f8      	beq.n	80038e2 <_dtoa_r+0x63a>
 80038f0:	46c1      	mov	r9, r8
 80038f2:	e03a      	b.n	800396a <_dtoa_r+0x6c2>
 80038f4:	4ba2      	ldr	r3, [pc, #648]	; (8003b80 <_dtoa_r+0x8d8>)
 80038f6:	f7fc fdef 	bl	80004d8 <__aeabi_dmul>
 80038fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80038fe:	e7bc      	b.n	800387a <_dtoa_r+0x5d2>
 8003900:	9f08      	ldr	r7, [sp, #32]
 8003902:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003906:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800390a:	f7fc ff0f 	bl	800072c <__aeabi_ddiv>
 800390e:	f7fd f893 	bl	8000a38 <__aeabi_d2iz>
 8003912:	4604      	mov	r4, r0
 8003914:	f7fc fd76 	bl	8000404 <__aeabi_i2d>
 8003918:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800391c:	f7fc fddc 	bl	80004d8 <__aeabi_dmul>
 8003920:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8003924:	460b      	mov	r3, r1
 8003926:	4602      	mov	r2, r0
 8003928:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800392c:	f7fc fc1c 	bl	8000168 <__aeabi_dsub>
 8003930:	f807 6b01 	strb.w	r6, [r7], #1
 8003934:	9e08      	ldr	r6, [sp, #32]
 8003936:	9b02      	ldr	r3, [sp, #8]
 8003938:	1bbe      	subs	r6, r7, r6
 800393a:	42b3      	cmp	r3, r6
 800393c:	d13a      	bne.n	80039b4 <_dtoa_r+0x70c>
 800393e:	4602      	mov	r2, r0
 8003940:	460b      	mov	r3, r1
 8003942:	f7fc fc13 	bl	800016c <__adddf3>
 8003946:	4602      	mov	r2, r0
 8003948:	460b      	mov	r3, r1
 800394a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800394e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003952:	f7fd f851 	bl	80009f8 <__aeabi_dcmpgt>
 8003956:	bb58      	cbnz	r0, 80039b0 <_dtoa_r+0x708>
 8003958:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800395c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003960:	f7fd f822 	bl	80009a8 <__aeabi_dcmpeq>
 8003964:	b108      	cbz	r0, 800396a <_dtoa_r+0x6c2>
 8003966:	07e1      	lsls	r1, r4, #31
 8003968:	d422      	bmi.n	80039b0 <_dtoa_r+0x708>
 800396a:	4628      	mov	r0, r5
 800396c:	4651      	mov	r1, sl
 800396e:	f000 faf1 	bl	8003f54 <_Bfree>
 8003972:	2300      	movs	r3, #0
 8003974:	703b      	strb	r3, [r7, #0]
 8003976:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8003978:	f109 0001 	add.w	r0, r9, #1
 800397c:	6018      	str	r0, [r3, #0]
 800397e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003980:	2b00      	cmp	r3, #0
 8003982:	f43f acdf 	beq.w	8003344 <_dtoa_r+0x9c>
 8003986:	601f      	str	r7, [r3, #0]
 8003988:	e4dc      	b.n	8003344 <_dtoa_r+0x9c>
 800398a:	4627      	mov	r7, r4
 800398c:	463b      	mov	r3, r7
 800398e:	461f      	mov	r7, r3
 8003990:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003994:	2a39      	cmp	r2, #57	; 0x39
 8003996:	d107      	bne.n	80039a8 <_dtoa_r+0x700>
 8003998:	9a08      	ldr	r2, [sp, #32]
 800399a:	429a      	cmp	r2, r3
 800399c:	d1f7      	bne.n	800398e <_dtoa_r+0x6e6>
 800399e:	2230      	movs	r2, #48	; 0x30
 80039a0:	9908      	ldr	r1, [sp, #32]
 80039a2:	f108 0801 	add.w	r8, r8, #1
 80039a6:	700a      	strb	r2, [r1, #0]
 80039a8:	781a      	ldrb	r2, [r3, #0]
 80039aa:	3201      	adds	r2, #1
 80039ac:	701a      	strb	r2, [r3, #0]
 80039ae:	e79f      	b.n	80038f0 <_dtoa_r+0x648>
 80039b0:	46c8      	mov	r8, r9
 80039b2:	e7eb      	b.n	800398c <_dtoa_r+0x6e4>
 80039b4:	2200      	movs	r2, #0
 80039b6:	4b72      	ldr	r3, [pc, #456]	; (8003b80 <_dtoa_r+0x8d8>)
 80039b8:	f7fc fd8e 	bl	80004d8 <__aeabi_dmul>
 80039bc:	4602      	mov	r2, r0
 80039be:	460b      	mov	r3, r1
 80039c0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80039c4:	2200      	movs	r2, #0
 80039c6:	2300      	movs	r3, #0
 80039c8:	f7fc ffee 	bl	80009a8 <__aeabi_dcmpeq>
 80039cc:	2800      	cmp	r0, #0
 80039ce:	d098      	beq.n	8003902 <_dtoa_r+0x65a>
 80039d0:	e7cb      	b.n	800396a <_dtoa_r+0x6c2>
 80039d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80039d4:	2a00      	cmp	r2, #0
 80039d6:	f000 80cd 	beq.w	8003b74 <_dtoa_r+0x8cc>
 80039da:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80039dc:	2a01      	cmp	r2, #1
 80039de:	f300 80af 	bgt.w	8003b40 <_dtoa_r+0x898>
 80039e2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80039e4:	2a00      	cmp	r2, #0
 80039e6:	f000 80a7 	beq.w	8003b38 <_dtoa_r+0x890>
 80039ea:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80039ee:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80039f0:	9f06      	ldr	r7, [sp, #24]
 80039f2:	9a06      	ldr	r2, [sp, #24]
 80039f4:	2101      	movs	r1, #1
 80039f6:	441a      	add	r2, r3
 80039f8:	9206      	str	r2, [sp, #24]
 80039fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80039fc:	4628      	mov	r0, r5
 80039fe:	441a      	add	r2, r3
 8003a00:	9209      	str	r2, [sp, #36]	; 0x24
 8003a02:	f000 fb61 	bl	80040c8 <__i2b>
 8003a06:	4606      	mov	r6, r0
 8003a08:	2f00      	cmp	r7, #0
 8003a0a:	dd0c      	ble.n	8003a26 <_dtoa_r+0x77e>
 8003a0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	dd09      	ble.n	8003a26 <_dtoa_r+0x77e>
 8003a12:	42bb      	cmp	r3, r7
 8003a14:	bfa8      	it	ge
 8003a16:	463b      	movge	r3, r7
 8003a18:	9a06      	ldr	r2, [sp, #24]
 8003a1a:	1aff      	subs	r7, r7, r3
 8003a1c:	1ad2      	subs	r2, r2, r3
 8003a1e:	9206      	str	r2, [sp, #24]
 8003a20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	9309      	str	r3, [sp, #36]	; 0x24
 8003a26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003a28:	b1f3      	cbz	r3, 8003a68 <_dtoa_r+0x7c0>
 8003a2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f000 80a9 	beq.w	8003b84 <_dtoa_r+0x8dc>
 8003a32:	2c00      	cmp	r4, #0
 8003a34:	dd10      	ble.n	8003a58 <_dtoa_r+0x7b0>
 8003a36:	4631      	mov	r1, r6
 8003a38:	4622      	mov	r2, r4
 8003a3a:	4628      	mov	r0, r5
 8003a3c:	f000 fbfe 	bl	800423c <__pow5mult>
 8003a40:	4652      	mov	r2, sl
 8003a42:	4601      	mov	r1, r0
 8003a44:	4606      	mov	r6, r0
 8003a46:	4628      	mov	r0, r5
 8003a48:	f000 fb54 	bl	80040f4 <__multiply>
 8003a4c:	4680      	mov	r8, r0
 8003a4e:	4651      	mov	r1, sl
 8003a50:	4628      	mov	r0, r5
 8003a52:	f000 fa7f 	bl	8003f54 <_Bfree>
 8003a56:	46c2      	mov	sl, r8
 8003a58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003a5a:	1b1a      	subs	r2, r3, r4
 8003a5c:	d004      	beq.n	8003a68 <_dtoa_r+0x7c0>
 8003a5e:	4651      	mov	r1, sl
 8003a60:	4628      	mov	r0, r5
 8003a62:	f000 fbeb 	bl	800423c <__pow5mult>
 8003a66:	4682      	mov	sl, r0
 8003a68:	2101      	movs	r1, #1
 8003a6a:	4628      	mov	r0, r5
 8003a6c:	f000 fb2c 	bl	80040c8 <__i2b>
 8003a70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003a72:	4604      	mov	r4, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f340 8087 	ble.w	8003b88 <_dtoa_r+0x8e0>
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	4601      	mov	r1, r0
 8003a7e:	4628      	mov	r0, r5
 8003a80:	f000 fbdc 	bl	800423c <__pow5mult>
 8003a84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003a86:	4604      	mov	r4, r0
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	f340 8080 	ble.w	8003b8e <_dtoa_r+0x8e6>
 8003a8e:	f04f 0800 	mov.w	r8, #0
 8003a92:	6923      	ldr	r3, [r4, #16]
 8003a94:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003a98:	6918      	ldr	r0, [r3, #16]
 8003a9a:	f000 fac7 	bl	800402c <__hi0bits>
 8003a9e:	f1c0 0020 	rsb	r0, r0, #32
 8003aa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003aa4:	4418      	add	r0, r3
 8003aa6:	f010 001f 	ands.w	r0, r0, #31
 8003aaa:	f000 8092 	beq.w	8003bd2 <_dtoa_r+0x92a>
 8003aae:	f1c0 0320 	rsb	r3, r0, #32
 8003ab2:	2b04      	cmp	r3, #4
 8003ab4:	f340 808a 	ble.w	8003bcc <_dtoa_r+0x924>
 8003ab8:	f1c0 001c 	rsb	r0, r0, #28
 8003abc:	9b06      	ldr	r3, [sp, #24]
 8003abe:	4407      	add	r7, r0
 8003ac0:	4403      	add	r3, r0
 8003ac2:	9306      	str	r3, [sp, #24]
 8003ac4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ac6:	4403      	add	r3, r0
 8003ac8:	9309      	str	r3, [sp, #36]	; 0x24
 8003aca:	9b06      	ldr	r3, [sp, #24]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	dd05      	ble.n	8003adc <_dtoa_r+0x834>
 8003ad0:	4651      	mov	r1, sl
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	4628      	mov	r0, r5
 8003ad6:	f000 fc0b 	bl	80042f0 <__lshift>
 8003ada:	4682      	mov	sl, r0
 8003adc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	dd05      	ble.n	8003aee <_dtoa_r+0x846>
 8003ae2:	4621      	mov	r1, r4
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	4628      	mov	r0, r5
 8003ae8:	f000 fc02 	bl	80042f0 <__lshift>
 8003aec:	4604      	mov	r4, r0
 8003aee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d070      	beq.n	8003bd6 <_dtoa_r+0x92e>
 8003af4:	4621      	mov	r1, r4
 8003af6:	4650      	mov	r0, sl
 8003af8:	f000 fc66 	bl	80043c8 <__mcmp>
 8003afc:	2800      	cmp	r0, #0
 8003afe:	da6a      	bge.n	8003bd6 <_dtoa_r+0x92e>
 8003b00:	2300      	movs	r3, #0
 8003b02:	4651      	mov	r1, sl
 8003b04:	220a      	movs	r2, #10
 8003b06:	4628      	mov	r0, r5
 8003b08:	f000 fa46 	bl	8003f98 <__multadd>
 8003b0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003b0e:	4682      	mov	sl, r0
 8003b10:	f109 39ff 	add.w	r9, r9, #4294967295
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f000 8193 	beq.w	8003e40 <_dtoa_r+0xb98>
 8003b1a:	4631      	mov	r1, r6
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	220a      	movs	r2, #10
 8003b20:	4628      	mov	r0, r5
 8003b22:	f000 fa39 	bl	8003f98 <__multadd>
 8003b26:	f1bb 0f00 	cmp.w	fp, #0
 8003b2a:	4606      	mov	r6, r0
 8003b2c:	f300 8093 	bgt.w	8003c56 <_dtoa_r+0x9ae>
 8003b30:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	dc57      	bgt.n	8003be6 <_dtoa_r+0x93e>
 8003b36:	e08e      	b.n	8003c56 <_dtoa_r+0x9ae>
 8003b38:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003b3a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003b3e:	e756      	b.n	80039ee <_dtoa_r+0x746>
 8003b40:	9b02      	ldr	r3, [sp, #8]
 8003b42:	1e5c      	subs	r4, r3, #1
 8003b44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b46:	42a3      	cmp	r3, r4
 8003b48:	bfb7      	itett	lt
 8003b4a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8003b4c:	1b1c      	subge	r4, r3, r4
 8003b4e:	1ae2      	sublt	r2, r4, r3
 8003b50:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8003b52:	bfbe      	ittt	lt
 8003b54:	940a      	strlt	r4, [sp, #40]	; 0x28
 8003b56:	189b      	addlt	r3, r3, r2
 8003b58:	930e      	strlt	r3, [sp, #56]	; 0x38
 8003b5a:	9b02      	ldr	r3, [sp, #8]
 8003b5c:	bfb8      	it	lt
 8003b5e:	2400      	movlt	r4, #0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	bfbb      	ittet	lt
 8003b64:	9b06      	ldrlt	r3, [sp, #24]
 8003b66:	9a02      	ldrlt	r2, [sp, #8]
 8003b68:	9f06      	ldrge	r7, [sp, #24]
 8003b6a:	1a9f      	sublt	r7, r3, r2
 8003b6c:	bfac      	ite	ge
 8003b6e:	9b02      	ldrge	r3, [sp, #8]
 8003b70:	2300      	movlt	r3, #0
 8003b72:	e73e      	b.n	80039f2 <_dtoa_r+0x74a>
 8003b74:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003b76:	9f06      	ldr	r7, [sp, #24]
 8003b78:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8003b7a:	e745      	b.n	8003a08 <_dtoa_r+0x760>
 8003b7c:	3fe00000 	.word	0x3fe00000
 8003b80:	40240000 	.word	0x40240000
 8003b84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003b86:	e76a      	b.n	8003a5e <_dtoa_r+0x7b6>
 8003b88:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	dc19      	bgt.n	8003bc2 <_dtoa_r+0x91a>
 8003b8e:	9b04      	ldr	r3, [sp, #16]
 8003b90:	b9bb      	cbnz	r3, 8003bc2 <_dtoa_r+0x91a>
 8003b92:	9b05      	ldr	r3, [sp, #20]
 8003b94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b98:	b99b      	cbnz	r3, 8003bc2 <_dtoa_r+0x91a>
 8003b9a:	9b05      	ldr	r3, [sp, #20]
 8003b9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003ba0:	0d1b      	lsrs	r3, r3, #20
 8003ba2:	051b      	lsls	r3, r3, #20
 8003ba4:	b183      	cbz	r3, 8003bc8 <_dtoa_r+0x920>
 8003ba6:	f04f 0801 	mov.w	r8, #1
 8003baa:	9b06      	ldr	r3, [sp, #24]
 8003bac:	3301      	adds	r3, #1
 8003bae:	9306      	str	r3, [sp, #24]
 8003bb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	9309      	str	r3, [sp, #36]	; 0x24
 8003bb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	f47f af6a 	bne.w	8003a92 <_dtoa_r+0x7ea>
 8003bbe:	2001      	movs	r0, #1
 8003bc0:	e76f      	b.n	8003aa2 <_dtoa_r+0x7fa>
 8003bc2:	f04f 0800 	mov.w	r8, #0
 8003bc6:	e7f6      	b.n	8003bb6 <_dtoa_r+0x90e>
 8003bc8:	4698      	mov	r8, r3
 8003bca:	e7f4      	b.n	8003bb6 <_dtoa_r+0x90e>
 8003bcc:	f43f af7d 	beq.w	8003aca <_dtoa_r+0x822>
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	301c      	adds	r0, #28
 8003bd4:	e772      	b.n	8003abc <_dtoa_r+0x814>
 8003bd6:	9b02      	ldr	r3, [sp, #8]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	dc36      	bgt.n	8003c4a <_dtoa_r+0x9a2>
 8003bdc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	dd33      	ble.n	8003c4a <_dtoa_r+0x9a2>
 8003be2:	f8dd b008 	ldr.w	fp, [sp, #8]
 8003be6:	f1bb 0f00 	cmp.w	fp, #0
 8003bea:	d10d      	bne.n	8003c08 <_dtoa_r+0x960>
 8003bec:	4621      	mov	r1, r4
 8003bee:	465b      	mov	r3, fp
 8003bf0:	2205      	movs	r2, #5
 8003bf2:	4628      	mov	r0, r5
 8003bf4:	f000 f9d0 	bl	8003f98 <__multadd>
 8003bf8:	4601      	mov	r1, r0
 8003bfa:	4604      	mov	r4, r0
 8003bfc:	4650      	mov	r0, sl
 8003bfe:	f000 fbe3 	bl	80043c8 <__mcmp>
 8003c02:	2800      	cmp	r0, #0
 8003c04:	f73f adb6 	bgt.w	8003774 <_dtoa_r+0x4cc>
 8003c08:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003c0a:	9f08      	ldr	r7, [sp, #32]
 8003c0c:	ea6f 0903 	mvn.w	r9, r3
 8003c10:	f04f 0800 	mov.w	r8, #0
 8003c14:	4621      	mov	r1, r4
 8003c16:	4628      	mov	r0, r5
 8003c18:	f000 f99c 	bl	8003f54 <_Bfree>
 8003c1c:	2e00      	cmp	r6, #0
 8003c1e:	f43f aea4 	beq.w	800396a <_dtoa_r+0x6c2>
 8003c22:	f1b8 0f00 	cmp.w	r8, #0
 8003c26:	d005      	beq.n	8003c34 <_dtoa_r+0x98c>
 8003c28:	45b0      	cmp	r8, r6
 8003c2a:	d003      	beq.n	8003c34 <_dtoa_r+0x98c>
 8003c2c:	4641      	mov	r1, r8
 8003c2e:	4628      	mov	r0, r5
 8003c30:	f000 f990 	bl	8003f54 <_Bfree>
 8003c34:	4631      	mov	r1, r6
 8003c36:	4628      	mov	r0, r5
 8003c38:	f000 f98c 	bl	8003f54 <_Bfree>
 8003c3c:	e695      	b.n	800396a <_dtoa_r+0x6c2>
 8003c3e:	2400      	movs	r4, #0
 8003c40:	4626      	mov	r6, r4
 8003c42:	e7e1      	b.n	8003c08 <_dtoa_r+0x960>
 8003c44:	46c1      	mov	r9, r8
 8003c46:	4626      	mov	r6, r4
 8003c48:	e594      	b.n	8003774 <_dtoa_r+0x4cc>
 8003c4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003c4c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	f000 80fc 	beq.w	8003e4e <_dtoa_r+0xba6>
 8003c56:	2f00      	cmp	r7, #0
 8003c58:	dd05      	ble.n	8003c66 <_dtoa_r+0x9be>
 8003c5a:	4631      	mov	r1, r6
 8003c5c:	463a      	mov	r2, r7
 8003c5e:	4628      	mov	r0, r5
 8003c60:	f000 fb46 	bl	80042f0 <__lshift>
 8003c64:	4606      	mov	r6, r0
 8003c66:	f1b8 0f00 	cmp.w	r8, #0
 8003c6a:	d05c      	beq.n	8003d26 <_dtoa_r+0xa7e>
 8003c6c:	4628      	mov	r0, r5
 8003c6e:	6871      	ldr	r1, [r6, #4]
 8003c70:	f000 f930 	bl	8003ed4 <_Balloc>
 8003c74:	4607      	mov	r7, r0
 8003c76:	b928      	cbnz	r0, 8003c84 <_dtoa_r+0x9dc>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	f240 21ea 	movw	r1, #746	; 0x2ea
 8003c7e:	4b7e      	ldr	r3, [pc, #504]	; (8003e78 <_dtoa_r+0xbd0>)
 8003c80:	f7ff bb26 	b.w	80032d0 <_dtoa_r+0x28>
 8003c84:	6932      	ldr	r2, [r6, #16]
 8003c86:	f106 010c 	add.w	r1, r6, #12
 8003c8a:	3202      	adds	r2, #2
 8003c8c:	0092      	lsls	r2, r2, #2
 8003c8e:	300c      	adds	r0, #12
 8003c90:	f000 f912 	bl	8003eb8 <memcpy>
 8003c94:	2201      	movs	r2, #1
 8003c96:	4639      	mov	r1, r7
 8003c98:	4628      	mov	r0, r5
 8003c9a:	f000 fb29 	bl	80042f0 <__lshift>
 8003c9e:	46b0      	mov	r8, r6
 8003ca0:	4606      	mov	r6, r0
 8003ca2:	9b08      	ldr	r3, [sp, #32]
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	9302      	str	r3, [sp, #8]
 8003ca8:	9b08      	ldr	r3, [sp, #32]
 8003caa:	445b      	add	r3, fp
 8003cac:	930a      	str	r3, [sp, #40]	; 0x28
 8003cae:	9b04      	ldr	r3, [sp, #16]
 8003cb0:	f003 0301 	and.w	r3, r3, #1
 8003cb4:	9309      	str	r3, [sp, #36]	; 0x24
 8003cb6:	9b02      	ldr	r3, [sp, #8]
 8003cb8:	4621      	mov	r1, r4
 8003cba:	4650      	mov	r0, sl
 8003cbc:	f103 3bff 	add.w	fp, r3, #4294967295
 8003cc0:	f7ff fa64 	bl	800318c <quorem>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	4641      	mov	r1, r8
 8003cc8:	3330      	adds	r3, #48	; 0x30
 8003cca:	9004      	str	r0, [sp, #16]
 8003ccc:	4650      	mov	r0, sl
 8003cce:	930b      	str	r3, [sp, #44]	; 0x2c
 8003cd0:	f000 fb7a 	bl	80043c8 <__mcmp>
 8003cd4:	4632      	mov	r2, r6
 8003cd6:	9006      	str	r0, [sp, #24]
 8003cd8:	4621      	mov	r1, r4
 8003cda:	4628      	mov	r0, r5
 8003cdc:	f000 fb90 	bl	8004400 <__mdiff>
 8003ce0:	68c2      	ldr	r2, [r0, #12]
 8003ce2:	4607      	mov	r7, r0
 8003ce4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003ce6:	bb02      	cbnz	r2, 8003d2a <_dtoa_r+0xa82>
 8003ce8:	4601      	mov	r1, r0
 8003cea:	4650      	mov	r0, sl
 8003cec:	f000 fb6c 	bl	80043c8 <__mcmp>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003cf4:	4639      	mov	r1, r7
 8003cf6:	4628      	mov	r0, r5
 8003cf8:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8003cfc:	f000 f92a 	bl	8003f54 <_Bfree>
 8003d00:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003d02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003d04:	9f02      	ldr	r7, [sp, #8]
 8003d06:	ea43 0102 	orr.w	r1, r3, r2
 8003d0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d0c:	430b      	orrs	r3, r1
 8003d0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003d10:	d10d      	bne.n	8003d2e <_dtoa_r+0xa86>
 8003d12:	2b39      	cmp	r3, #57	; 0x39
 8003d14:	d027      	beq.n	8003d66 <_dtoa_r+0xabe>
 8003d16:	9a06      	ldr	r2, [sp, #24]
 8003d18:	2a00      	cmp	r2, #0
 8003d1a:	dd01      	ble.n	8003d20 <_dtoa_r+0xa78>
 8003d1c:	9b04      	ldr	r3, [sp, #16]
 8003d1e:	3331      	adds	r3, #49	; 0x31
 8003d20:	f88b 3000 	strb.w	r3, [fp]
 8003d24:	e776      	b.n	8003c14 <_dtoa_r+0x96c>
 8003d26:	4630      	mov	r0, r6
 8003d28:	e7b9      	b.n	8003c9e <_dtoa_r+0x9f6>
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	e7e2      	b.n	8003cf4 <_dtoa_r+0xa4c>
 8003d2e:	9906      	ldr	r1, [sp, #24]
 8003d30:	2900      	cmp	r1, #0
 8003d32:	db04      	blt.n	8003d3e <_dtoa_r+0xa96>
 8003d34:	9822      	ldr	r0, [sp, #136]	; 0x88
 8003d36:	4301      	orrs	r1, r0
 8003d38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d3a:	4301      	orrs	r1, r0
 8003d3c:	d120      	bne.n	8003d80 <_dtoa_r+0xad8>
 8003d3e:	2a00      	cmp	r2, #0
 8003d40:	ddee      	ble.n	8003d20 <_dtoa_r+0xa78>
 8003d42:	4651      	mov	r1, sl
 8003d44:	2201      	movs	r2, #1
 8003d46:	4628      	mov	r0, r5
 8003d48:	9302      	str	r3, [sp, #8]
 8003d4a:	f000 fad1 	bl	80042f0 <__lshift>
 8003d4e:	4621      	mov	r1, r4
 8003d50:	4682      	mov	sl, r0
 8003d52:	f000 fb39 	bl	80043c8 <__mcmp>
 8003d56:	2800      	cmp	r0, #0
 8003d58:	9b02      	ldr	r3, [sp, #8]
 8003d5a:	dc02      	bgt.n	8003d62 <_dtoa_r+0xaba>
 8003d5c:	d1e0      	bne.n	8003d20 <_dtoa_r+0xa78>
 8003d5e:	07da      	lsls	r2, r3, #31
 8003d60:	d5de      	bpl.n	8003d20 <_dtoa_r+0xa78>
 8003d62:	2b39      	cmp	r3, #57	; 0x39
 8003d64:	d1da      	bne.n	8003d1c <_dtoa_r+0xa74>
 8003d66:	2339      	movs	r3, #57	; 0x39
 8003d68:	f88b 3000 	strb.w	r3, [fp]
 8003d6c:	463b      	mov	r3, r7
 8003d6e:	461f      	mov	r7, r3
 8003d70:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8003d74:	3b01      	subs	r3, #1
 8003d76:	2a39      	cmp	r2, #57	; 0x39
 8003d78:	d050      	beq.n	8003e1c <_dtoa_r+0xb74>
 8003d7a:	3201      	adds	r2, #1
 8003d7c:	701a      	strb	r2, [r3, #0]
 8003d7e:	e749      	b.n	8003c14 <_dtoa_r+0x96c>
 8003d80:	2a00      	cmp	r2, #0
 8003d82:	dd03      	ble.n	8003d8c <_dtoa_r+0xae4>
 8003d84:	2b39      	cmp	r3, #57	; 0x39
 8003d86:	d0ee      	beq.n	8003d66 <_dtoa_r+0xabe>
 8003d88:	3301      	adds	r3, #1
 8003d8a:	e7c9      	b.n	8003d20 <_dtoa_r+0xa78>
 8003d8c:	9a02      	ldr	r2, [sp, #8]
 8003d8e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003d90:	f802 3c01 	strb.w	r3, [r2, #-1]
 8003d94:	428a      	cmp	r2, r1
 8003d96:	d02a      	beq.n	8003dee <_dtoa_r+0xb46>
 8003d98:	4651      	mov	r1, sl
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	220a      	movs	r2, #10
 8003d9e:	4628      	mov	r0, r5
 8003da0:	f000 f8fa 	bl	8003f98 <__multadd>
 8003da4:	45b0      	cmp	r8, r6
 8003da6:	4682      	mov	sl, r0
 8003da8:	f04f 0300 	mov.w	r3, #0
 8003dac:	f04f 020a 	mov.w	r2, #10
 8003db0:	4641      	mov	r1, r8
 8003db2:	4628      	mov	r0, r5
 8003db4:	d107      	bne.n	8003dc6 <_dtoa_r+0xb1e>
 8003db6:	f000 f8ef 	bl	8003f98 <__multadd>
 8003dba:	4680      	mov	r8, r0
 8003dbc:	4606      	mov	r6, r0
 8003dbe:	9b02      	ldr	r3, [sp, #8]
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	9302      	str	r3, [sp, #8]
 8003dc4:	e777      	b.n	8003cb6 <_dtoa_r+0xa0e>
 8003dc6:	f000 f8e7 	bl	8003f98 <__multadd>
 8003dca:	4631      	mov	r1, r6
 8003dcc:	4680      	mov	r8, r0
 8003dce:	2300      	movs	r3, #0
 8003dd0:	220a      	movs	r2, #10
 8003dd2:	4628      	mov	r0, r5
 8003dd4:	f000 f8e0 	bl	8003f98 <__multadd>
 8003dd8:	4606      	mov	r6, r0
 8003dda:	e7f0      	b.n	8003dbe <_dtoa_r+0xb16>
 8003ddc:	f1bb 0f00 	cmp.w	fp, #0
 8003de0:	bfcc      	ite	gt
 8003de2:	465f      	movgt	r7, fp
 8003de4:	2701      	movle	r7, #1
 8003de6:	f04f 0800 	mov.w	r8, #0
 8003dea:	9a08      	ldr	r2, [sp, #32]
 8003dec:	4417      	add	r7, r2
 8003dee:	4651      	mov	r1, sl
 8003df0:	2201      	movs	r2, #1
 8003df2:	4628      	mov	r0, r5
 8003df4:	9302      	str	r3, [sp, #8]
 8003df6:	f000 fa7b 	bl	80042f0 <__lshift>
 8003dfa:	4621      	mov	r1, r4
 8003dfc:	4682      	mov	sl, r0
 8003dfe:	f000 fae3 	bl	80043c8 <__mcmp>
 8003e02:	2800      	cmp	r0, #0
 8003e04:	dcb2      	bgt.n	8003d6c <_dtoa_r+0xac4>
 8003e06:	d102      	bne.n	8003e0e <_dtoa_r+0xb66>
 8003e08:	9b02      	ldr	r3, [sp, #8]
 8003e0a:	07db      	lsls	r3, r3, #31
 8003e0c:	d4ae      	bmi.n	8003d6c <_dtoa_r+0xac4>
 8003e0e:	463b      	mov	r3, r7
 8003e10:	461f      	mov	r7, r3
 8003e12:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003e16:	2a30      	cmp	r2, #48	; 0x30
 8003e18:	d0fa      	beq.n	8003e10 <_dtoa_r+0xb68>
 8003e1a:	e6fb      	b.n	8003c14 <_dtoa_r+0x96c>
 8003e1c:	9a08      	ldr	r2, [sp, #32]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d1a5      	bne.n	8003d6e <_dtoa_r+0xac6>
 8003e22:	2331      	movs	r3, #49	; 0x31
 8003e24:	f109 0901 	add.w	r9, r9, #1
 8003e28:	7013      	strb	r3, [r2, #0]
 8003e2a:	e6f3      	b.n	8003c14 <_dtoa_r+0x96c>
 8003e2c:	4b13      	ldr	r3, [pc, #76]	; (8003e7c <_dtoa_r+0xbd4>)
 8003e2e:	f7ff baa7 	b.w	8003380 <_dtoa_r+0xd8>
 8003e32:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	f47f aa80 	bne.w	800333a <_dtoa_r+0x92>
 8003e3a:	4b11      	ldr	r3, [pc, #68]	; (8003e80 <_dtoa_r+0xbd8>)
 8003e3c:	f7ff baa0 	b.w	8003380 <_dtoa_r+0xd8>
 8003e40:	f1bb 0f00 	cmp.w	fp, #0
 8003e44:	dc03      	bgt.n	8003e4e <_dtoa_r+0xba6>
 8003e46:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	f73f aecc 	bgt.w	8003be6 <_dtoa_r+0x93e>
 8003e4e:	9f08      	ldr	r7, [sp, #32]
 8003e50:	4621      	mov	r1, r4
 8003e52:	4650      	mov	r0, sl
 8003e54:	f7ff f99a 	bl	800318c <quorem>
 8003e58:	9a08      	ldr	r2, [sp, #32]
 8003e5a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8003e5e:	f807 3b01 	strb.w	r3, [r7], #1
 8003e62:	1aba      	subs	r2, r7, r2
 8003e64:	4593      	cmp	fp, r2
 8003e66:	ddb9      	ble.n	8003ddc <_dtoa_r+0xb34>
 8003e68:	4651      	mov	r1, sl
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	220a      	movs	r2, #10
 8003e6e:	4628      	mov	r0, r5
 8003e70:	f000 f892 	bl	8003f98 <__multadd>
 8003e74:	4682      	mov	sl, r0
 8003e76:	e7eb      	b.n	8003e50 <_dtoa_r+0xba8>
 8003e78:	08005713 	.word	0x08005713
 8003e7c:	0800566c 	.word	0x0800566c
 8003e80:	08005690 	.word	0x08005690

08003e84 <_localeconv_r>:
 8003e84:	4800      	ldr	r0, [pc, #0]	; (8003e88 <_localeconv_r+0x4>)
 8003e86:	4770      	bx	lr
 8003e88:	20000160 	.word	0x20000160

08003e8c <malloc>:
 8003e8c:	4b02      	ldr	r3, [pc, #8]	; (8003e98 <malloc+0xc>)
 8003e8e:	4601      	mov	r1, r0
 8003e90:	6818      	ldr	r0, [r3, #0]
 8003e92:	f000 bbfb 	b.w	800468c <_malloc_r>
 8003e96:	bf00      	nop
 8003e98:	2000000c 	.word	0x2000000c

08003e9c <memchr>:
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	b510      	push	{r4, lr}
 8003ea0:	b2c9      	uxtb	r1, r1
 8003ea2:	4402      	add	r2, r0
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	d101      	bne.n	8003eae <memchr+0x12>
 8003eaa:	2000      	movs	r0, #0
 8003eac:	e003      	b.n	8003eb6 <memchr+0x1a>
 8003eae:	7804      	ldrb	r4, [r0, #0]
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	428c      	cmp	r4, r1
 8003eb4:	d1f6      	bne.n	8003ea4 <memchr+0x8>
 8003eb6:	bd10      	pop	{r4, pc}

08003eb8 <memcpy>:
 8003eb8:	440a      	add	r2, r1
 8003eba:	4291      	cmp	r1, r2
 8003ebc:	f100 33ff 	add.w	r3, r0, #4294967295
 8003ec0:	d100      	bne.n	8003ec4 <memcpy+0xc>
 8003ec2:	4770      	bx	lr
 8003ec4:	b510      	push	{r4, lr}
 8003ec6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003eca:	4291      	cmp	r1, r2
 8003ecc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ed0:	d1f9      	bne.n	8003ec6 <memcpy+0xe>
 8003ed2:	bd10      	pop	{r4, pc}

08003ed4 <_Balloc>:
 8003ed4:	b570      	push	{r4, r5, r6, lr}
 8003ed6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003ed8:	4604      	mov	r4, r0
 8003eda:	460d      	mov	r5, r1
 8003edc:	b976      	cbnz	r6, 8003efc <_Balloc+0x28>
 8003ede:	2010      	movs	r0, #16
 8003ee0:	f7ff ffd4 	bl	8003e8c <malloc>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	6260      	str	r0, [r4, #36]	; 0x24
 8003ee8:	b920      	cbnz	r0, 8003ef4 <_Balloc+0x20>
 8003eea:	2166      	movs	r1, #102	; 0x66
 8003eec:	4b17      	ldr	r3, [pc, #92]	; (8003f4c <_Balloc+0x78>)
 8003eee:	4818      	ldr	r0, [pc, #96]	; (8003f50 <_Balloc+0x7c>)
 8003ef0:	f000 fd92 	bl	8004a18 <__assert_func>
 8003ef4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003ef8:	6006      	str	r6, [r0, #0]
 8003efa:	60c6      	str	r6, [r0, #12]
 8003efc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003efe:	68f3      	ldr	r3, [r6, #12]
 8003f00:	b183      	cbz	r3, 8003f24 <_Balloc+0x50>
 8003f02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003f0a:	b9b8      	cbnz	r0, 8003f3c <_Balloc+0x68>
 8003f0c:	2101      	movs	r1, #1
 8003f0e:	fa01 f605 	lsl.w	r6, r1, r5
 8003f12:	1d72      	adds	r2, r6, #5
 8003f14:	4620      	mov	r0, r4
 8003f16:	0092      	lsls	r2, r2, #2
 8003f18:	f000 fb5e 	bl	80045d8 <_calloc_r>
 8003f1c:	b160      	cbz	r0, 8003f38 <_Balloc+0x64>
 8003f1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8003f22:	e00e      	b.n	8003f42 <_Balloc+0x6e>
 8003f24:	2221      	movs	r2, #33	; 0x21
 8003f26:	2104      	movs	r1, #4
 8003f28:	4620      	mov	r0, r4
 8003f2a:	f000 fb55 	bl	80045d8 <_calloc_r>
 8003f2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f30:	60f0      	str	r0, [r6, #12]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d1e4      	bne.n	8003f02 <_Balloc+0x2e>
 8003f38:	2000      	movs	r0, #0
 8003f3a:	bd70      	pop	{r4, r5, r6, pc}
 8003f3c:	6802      	ldr	r2, [r0, #0]
 8003f3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8003f42:	2300      	movs	r3, #0
 8003f44:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8003f48:	e7f7      	b.n	8003f3a <_Balloc+0x66>
 8003f4a:	bf00      	nop
 8003f4c:	0800569d 	.word	0x0800569d
 8003f50:	08005724 	.word	0x08005724

08003f54 <_Bfree>:
 8003f54:	b570      	push	{r4, r5, r6, lr}
 8003f56:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003f58:	4605      	mov	r5, r0
 8003f5a:	460c      	mov	r4, r1
 8003f5c:	b976      	cbnz	r6, 8003f7c <_Bfree+0x28>
 8003f5e:	2010      	movs	r0, #16
 8003f60:	f7ff ff94 	bl	8003e8c <malloc>
 8003f64:	4602      	mov	r2, r0
 8003f66:	6268      	str	r0, [r5, #36]	; 0x24
 8003f68:	b920      	cbnz	r0, 8003f74 <_Bfree+0x20>
 8003f6a:	218a      	movs	r1, #138	; 0x8a
 8003f6c:	4b08      	ldr	r3, [pc, #32]	; (8003f90 <_Bfree+0x3c>)
 8003f6e:	4809      	ldr	r0, [pc, #36]	; (8003f94 <_Bfree+0x40>)
 8003f70:	f000 fd52 	bl	8004a18 <__assert_func>
 8003f74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003f78:	6006      	str	r6, [r0, #0]
 8003f7a:	60c6      	str	r6, [r0, #12]
 8003f7c:	b13c      	cbz	r4, 8003f8e <_Bfree+0x3a>
 8003f7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003f80:	6862      	ldr	r2, [r4, #4]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003f88:	6021      	str	r1, [r4, #0]
 8003f8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8003f8e:	bd70      	pop	{r4, r5, r6, pc}
 8003f90:	0800569d 	.word	0x0800569d
 8003f94:	08005724 	.word	0x08005724

08003f98 <__multadd>:
 8003f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f9c:	4698      	mov	r8, r3
 8003f9e:	460c      	mov	r4, r1
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	690e      	ldr	r6, [r1, #16]
 8003fa4:	4607      	mov	r7, r0
 8003fa6:	f101 0014 	add.w	r0, r1, #20
 8003faa:	6805      	ldr	r5, [r0, #0]
 8003fac:	3301      	adds	r3, #1
 8003fae:	b2a9      	uxth	r1, r5
 8003fb0:	fb02 8101 	mla	r1, r2, r1, r8
 8003fb4:	0c2d      	lsrs	r5, r5, #16
 8003fb6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8003fba:	fb02 c505 	mla	r5, r2, r5, ip
 8003fbe:	b289      	uxth	r1, r1
 8003fc0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8003fc4:	429e      	cmp	r6, r3
 8003fc6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8003fca:	f840 1b04 	str.w	r1, [r0], #4
 8003fce:	dcec      	bgt.n	8003faa <__multadd+0x12>
 8003fd0:	f1b8 0f00 	cmp.w	r8, #0
 8003fd4:	d022      	beq.n	800401c <__multadd+0x84>
 8003fd6:	68a3      	ldr	r3, [r4, #8]
 8003fd8:	42b3      	cmp	r3, r6
 8003fda:	dc19      	bgt.n	8004010 <__multadd+0x78>
 8003fdc:	6861      	ldr	r1, [r4, #4]
 8003fde:	4638      	mov	r0, r7
 8003fe0:	3101      	adds	r1, #1
 8003fe2:	f7ff ff77 	bl	8003ed4 <_Balloc>
 8003fe6:	4605      	mov	r5, r0
 8003fe8:	b928      	cbnz	r0, 8003ff6 <__multadd+0x5e>
 8003fea:	4602      	mov	r2, r0
 8003fec:	21b5      	movs	r1, #181	; 0xb5
 8003fee:	4b0d      	ldr	r3, [pc, #52]	; (8004024 <__multadd+0x8c>)
 8003ff0:	480d      	ldr	r0, [pc, #52]	; (8004028 <__multadd+0x90>)
 8003ff2:	f000 fd11 	bl	8004a18 <__assert_func>
 8003ff6:	6922      	ldr	r2, [r4, #16]
 8003ff8:	f104 010c 	add.w	r1, r4, #12
 8003ffc:	3202      	adds	r2, #2
 8003ffe:	0092      	lsls	r2, r2, #2
 8004000:	300c      	adds	r0, #12
 8004002:	f7ff ff59 	bl	8003eb8 <memcpy>
 8004006:	4621      	mov	r1, r4
 8004008:	4638      	mov	r0, r7
 800400a:	f7ff ffa3 	bl	8003f54 <_Bfree>
 800400e:	462c      	mov	r4, r5
 8004010:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8004014:	3601      	adds	r6, #1
 8004016:	f8c3 8014 	str.w	r8, [r3, #20]
 800401a:	6126      	str	r6, [r4, #16]
 800401c:	4620      	mov	r0, r4
 800401e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004022:	bf00      	nop
 8004024:	08005713 	.word	0x08005713
 8004028:	08005724 	.word	0x08005724

0800402c <__hi0bits>:
 800402c:	0c02      	lsrs	r2, r0, #16
 800402e:	0412      	lsls	r2, r2, #16
 8004030:	4603      	mov	r3, r0
 8004032:	b9ca      	cbnz	r2, 8004068 <__hi0bits+0x3c>
 8004034:	0403      	lsls	r3, r0, #16
 8004036:	2010      	movs	r0, #16
 8004038:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800403c:	bf04      	itt	eq
 800403e:	021b      	lsleq	r3, r3, #8
 8004040:	3008      	addeq	r0, #8
 8004042:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004046:	bf04      	itt	eq
 8004048:	011b      	lsleq	r3, r3, #4
 800404a:	3004      	addeq	r0, #4
 800404c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004050:	bf04      	itt	eq
 8004052:	009b      	lsleq	r3, r3, #2
 8004054:	3002      	addeq	r0, #2
 8004056:	2b00      	cmp	r3, #0
 8004058:	db05      	blt.n	8004066 <__hi0bits+0x3a>
 800405a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800405e:	f100 0001 	add.w	r0, r0, #1
 8004062:	bf08      	it	eq
 8004064:	2020      	moveq	r0, #32
 8004066:	4770      	bx	lr
 8004068:	2000      	movs	r0, #0
 800406a:	e7e5      	b.n	8004038 <__hi0bits+0xc>

0800406c <__lo0bits>:
 800406c:	6803      	ldr	r3, [r0, #0]
 800406e:	4602      	mov	r2, r0
 8004070:	f013 0007 	ands.w	r0, r3, #7
 8004074:	d00b      	beq.n	800408e <__lo0bits+0x22>
 8004076:	07d9      	lsls	r1, r3, #31
 8004078:	d422      	bmi.n	80040c0 <__lo0bits+0x54>
 800407a:	0798      	lsls	r0, r3, #30
 800407c:	bf49      	itett	mi
 800407e:	085b      	lsrmi	r3, r3, #1
 8004080:	089b      	lsrpl	r3, r3, #2
 8004082:	2001      	movmi	r0, #1
 8004084:	6013      	strmi	r3, [r2, #0]
 8004086:	bf5c      	itt	pl
 8004088:	2002      	movpl	r0, #2
 800408a:	6013      	strpl	r3, [r2, #0]
 800408c:	4770      	bx	lr
 800408e:	b299      	uxth	r1, r3
 8004090:	b909      	cbnz	r1, 8004096 <__lo0bits+0x2a>
 8004092:	2010      	movs	r0, #16
 8004094:	0c1b      	lsrs	r3, r3, #16
 8004096:	f013 0fff 	tst.w	r3, #255	; 0xff
 800409a:	bf04      	itt	eq
 800409c:	0a1b      	lsreq	r3, r3, #8
 800409e:	3008      	addeq	r0, #8
 80040a0:	0719      	lsls	r1, r3, #28
 80040a2:	bf04      	itt	eq
 80040a4:	091b      	lsreq	r3, r3, #4
 80040a6:	3004      	addeq	r0, #4
 80040a8:	0799      	lsls	r1, r3, #30
 80040aa:	bf04      	itt	eq
 80040ac:	089b      	lsreq	r3, r3, #2
 80040ae:	3002      	addeq	r0, #2
 80040b0:	07d9      	lsls	r1, r3, #31
 80040b2:	d403      	bmi.n	80040bc <__lo0bits+0x50>
 80040b4:	085b      	lsrs	r3, r3, #1
 80040b6:	f100 0001 	add.w	r0, r0, #1
 80040ba:	d003      	beq.n	80040c4 <__lo0bits+0x58>
 80040bc:	6013      	str	r3, [r2, #0]
 80040be:	4770      	bx	lr
 80040c0:	2000      	movs	r0, #0
 80040c2:	4770      	bx	lr
 80040c4:	2020      	movs	r0, #32
 80040c6:	4770      	bx	lr

080040c8 <__i2b>:
 80040c8:	b510      	push	{r4, lr}
 80040ca:	460c      	mov	r4, r1
 80040cc:	2101      	movs	r1, #1
 80040ce:	f7ff ff01 	bl	8003ed4 <_Balloc>
 80040d2:	4602      	mov	r2, r0
 80040d4:	b928      	cbnz	r0, 80040e2 <__i2b+0x1a>
 80040d6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80040da:	4b04      	ldr	r3, [pc, #16]	; (80040ec <__i2b+0x24>)
 80040dc:	4804      	ldr	r0, [pc, #16]	; (80040f0 <__i2b+0x28>)
 80040de:	f000 fc9b 	bl	8004a18 <__assert_func>
 80040e2:	2301      	movs	r3, #1
 80040e4:	6144      	str	r4, [r0, #20]
 80040e6:	6103      	str	r3, [r0, #16]
 80040e8:	bd10      	pop	{r4, pc}
 80040ea:	bf00      	nop
 80040ec:	08005713 	.word	0x08005713
 80040f0:	08005724 	.word	0x08005724

080040f4 <__multiply>:
 80040f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040f8:	4614      	mov	r4, r2
 80040fa:	690a      	ldr	r2, [r1, #16]
 80040fc:	6923      	ldr	r3, [r4, #16]
 80040fe:	460d      	mov	r5, r1
 8004100:	429a      	cmp	r2, r3
 8004102:	bfbe      	ittt	lt
 8004104:	460b      	movlt	r3, r1
 8004106:	4625      	movlt	r5, r4
 8004108:	461c      	movlt	r4, r3
 800410a:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800410e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8004112:	68ab      	ldr	r3, [r5, #8]
 8004114:	6869      	ldr	r1, [r5, #4]
 8004116:	eb0a 0709 	add.w	r7, sl, r9
 800411a:	42bb      	cmp	r3, r7
 800411c:	b085      	sub	sp, #20
 800411e:	bfb8      	it	lt
 8004120:	3101      	addlt	r1, #1
 8004122:	f7ff fed7 	bl	8003ed4 <_Balloc>
 8004126:	b930      	cbnz	r0, 8004136 <__multiply+0x42>
 8004128:	4602      	mov	r2, r0
 800412a:	f240 115d 	movw	r1, #349	; 0x15d
 800412e:	4b41      	ldr	r3, [pc, #260]	; (8004234 <__multiply+0x140>)
 8004130:	4841      	ldr	r0, [pc, #260]	; (8004238 <__multiply+0x144>)
 8004132:	f000 fc71 	bl	8004a18 <__assert_func>
 8004136:	f100 0614 	add.w	r6, r0, #20
 800413a:	4633      	mov	r3, r6
 800413c:	2200      	movs	r2, #0
 800413e:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8004142:	4543      	cmp	r3, r8
 8004144:	d31e      	bcc.n	8004184 <__multiply+0x90>
 8004146:	f105 0c14 	add.w	ip, r5, #20
 800414a:	f104 0314 	add.w	r3, r4, #20
 800414e:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8004152:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8004156:	9202      	str	r2, [sp, #8]
 8004158:	ebac 0205 	sub.w	r2, ip, r5
 800415c:	3a15      	subs	r2, #21
 800415e:	f022 0203 	bic.w	r2, r2, #3
 8004162:	3204      	adds	r2, #4
 8004164:	f105 0115 	add.w	r1, r5, #21
 8004168:	458c      	cmp	ip, r1
 800416a:	bf38      	it	cc
 800416c:	2204      	movcc	r2, #4
 800416e:	9201      	str	r2, [sp, #4]
 8004170:	9a02      	ldr	r2, [sp, #8]
 8004172:	9303      	str	r3, [sp, #12]
 8004174:	429a      	cmp	r2, r3
 8004176:	d808      	bhi.n	800418a <__multiply+0x96>
 8004178:	2f00      	cmp	r7, #0
 800417a:	dc55      	bgt.n	8004228 <__multiply+0x134>
 800417c:	6107      	str	r7, [r0, #16]
 800417e:	b005      	add	sp, #20
 8004180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004184:	f843 2b04 	str.w	r2, [r3], #4
 8004188:	e7db      	b.n	8004142 <__multiply+0x4e>
 800418a:	f8b3 a000 	ldrh.w	sl, [r3]
 800418e:	f1ba 0f00 	cmp.w	sl, #0
 8004192:	d020      	beq.n	80041d6 <__multiply+0xe2>
 8004194:	46b1      	mov	r9, r6
 8004196:	2200      	movs	r2, #0
 8004198:	f105 0e14 	add.w	lr, r5, #20
 800419c:	f85e 4b04 	ldr.w	r4, [lr], #4
 80041a0:	f8d9 b000 	ldr.w	fp, [r9]
 80041a4:	b2a1      	uxth	r1, r4
 80041a6:	fa1f fb8b 	uxth.w	fp, fp
 80041aa:	fb0a b101 	mla	r1, sl, r1, fp
 80041ae:	4411      	add	r1, r2
 80041b0:	f8d9 2000 	ldr.w	r2, [r9]
 80041b4:	0c24      	lsrs	r4, r4, #16
 80041b6:	0c12      	lsrs	r2, r2, #16
 80041b8:	fb0a 2404 	mla	r4, sl, r4, r2
 80041bc:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80041c0:	b289      	uxth	r1, r1
 80041c2:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80041c6:	45f4      	cmp	ip, lr
 80041c8:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80041cc:	f849 1b04 	str.w	r1, [r9], #4
 80041d0:	d8e4      	bhi.n	800419c <__multiply+0xa8>
 80041d2:	9901      	ldr	r1, [sp, #4]
 80041d4:	5072      	str	r2, [r6, r1]
 80041d6:	9a03      	ldr	r2, [sp, #12]
 80041d8:	3304      	adds	r3, #4
 80041da:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80041de:	f1b9 0f00 	cmp.w	r9, #0
 80041e2:	d01f      	beq.n	8004224 <__multiply+0x130>
 80041e4:	46b6      	mov	lr, r6
 80041e6:	f04f 0a00 	mov.w	sl, #0
 80041ea:	6834      	ldr	r4, [r6, #0]
 80041ec:	f105 0114 	add.w	r1, r5, #20
 80041f0:	880a      	ldrh	r2, [r1, #0]
 80041f2:	f8be b002 	ldrh.w	fp, [lr, #2]
 80041f6:	b2a4      	uxth	r4, r4
 80041f8:	fb09 b202 	mla	r2, r9, r2, fp
 80041fc:	4492      	add	sl, r2
 80041fe:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8004202:	f84e 4b04 	str.w	r4, [lr], #4
 8004206:	f851 4b04 	ldr.w	r4, [r1], #4
 800420a:	f8be 2000 	ldrh.w	r2, [lr]
 800420e:	0c24      	lsrs	r4, r4, #16
 8004210:	fb09 2404 	mla	r4, r9, r4, r2
 8004214:	458c      	cmp	ip, r1
 8004216:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800421a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800421e:	d8e7      	bhi.n	80041f0 <__multiply+0xfc>
 8004220:	9a01      	ldr	r2, [sp, #4]
 8004222:	50b4      	str	r4, [r6, r2]
 8004224:	3604      	adds	r6, #4
 8004226:	e7a3      	b.n	8004170 <__multiply+0x7c>
 8004228:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800422c:	2b00      	cmp	r3, #0
 800422e:	d1a5      	bne.n	800417c <__multiply+0x88>
 8004230:	3f01      	subs	r7, #1
 8004232:	e7a1      	b.n	8004178 <__multiply+0x84>
 8004234:	08005713 	.word	0x08005713
 8004238:	08005724 	.word	0x08005724

0800423c <__pow5mult>:
 800423c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004240:	4615      	mov	r5, r2
 8004242:	f012 0203 	ands.w	r2, r2, #3
 8004246:	4606      	mov	r6, r0
 8004248:	460f      	mov	r7, r1
 800424a:	d007      	beq.n	800425c <__pow5mult+0x20>
 800424c:	4c25      	ldr	r4, [pc, #148]	; (80042e4 <__pow5mult+0xa8>)
 800424e:	3a01      	subs	r2, #1
 8004250:	2300      	movs	r3, #0
 8004252:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004256:	f7ff fe9f 	bl	8003f98 <__multadd>
 800425a:	4607      	mov	r7, r0
 800425c:	10ad      	asrs	r5, r5, #2
 800425e:	d03d      	beq.n	80042dc <__pow5mult+0xa0>
 8004260:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004262:	b97c      	cbnz	r4, 8004284 <__pow5mult+0x48>
 8004264:	2010      	movs	r0, #16
 8004266:	f7ff fe11 	bl	8003e8c <malloc>
 800426a:	4602      	mov	r2, r0
 800426c:	6270      	str	r0, [r6, #36]	; 0x24
 800426e:	b928      	cbnz	r0, 800427c <__pow5mult+0x40>
 8004270:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8004274:	4b1c      	ldr	r3, [pc, #112]	; (80042e8 <__pow5mult+0xac>)
 8004276:	481d      	ldr	r0, [pc, #116]	; (80042ec <__pow5mult+0xb0>)
 8004278:	f000 fbce 	bl	8004a18 <__assert_func>
 800427c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004280:	6004      	str	r4, [r0, #0]
 8004282:	60c4      	str	r4, [r0, #12]
 8004284:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004288:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800428c:	b94c      	cbnz	r4, 80042a2 <__pow5mult+0x66>
 800428e:	f240 2171 	movw	r1, #625	; 0x271
 8004292:	4630      	mov	r0, r6
 8004294:	f7ff ff18 	bl	80040c8 <__i2b>
 8004298:	2300      	movs	r3, #0
 800429a:	4604      	mov	r4, r0
 800429c:	f8c8 0008 	str.w	r0, [r8, #8]
 80042a0:	6003      	str	r3, [r0, #0]
 80042a2:	f04f 0900 	mov.w	r9, #0
 80042a6:	07eb      	lsls	r3, r5, #31
 80042a8:	d50a      	bpl.n	80042c0 <__pow5mult+0x84>
 80042aa:	4639      	mov	r1, r7
 80042ac:	4622      	mov	r2, r4
 80042ae:	4630      	mov	r0, r6
 80042b0:	f7ff ff20 	bl	80040f4 <__multiply>
 80042b4:	4680      	mov	r8, r0
 80042b6:	4639      	mov	r1, r7
 80042b8:	4630      	mov	r0, r6
 80042ba:	f7ff fe4b 	bl	8003f54 <_Bfree>
 80042be:	4647      	mov	r7, r8
 80042c0:	106d      	asrs	r5, r5, #1
 80042c2:	d00b      	beq.n	80042dc <__pow5mult+0xa0>
 80042c4:	6820      	ldr	r0, [r4, #0]
 80042c6:	b938      	cbnz	r0, 80042d8 <__pow5mult+0x9c>
 80042c8:	4622      	mov	r2, r4
 80042ca:	4621      	mov	r1, r4
 80042cc:	4630      	mov	r0, r6
 80042ce:	f7ff ff11 	bl	80040f4 <__multiply>
 80042d2:	6020      	str	r0, [r4, #0]
 80042d4:	f8c0 9000 	str.w	r9, [r0]
 80042d8:	4604      	mov	r4, r0
 80042da:	e7e4      	b.n	80042a6 <__pow5mult+0x6a>
 80042dc:	4638      	mov	r0, r7
 80042de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042e2:	bf00      	nop
 80042e4:	08005878 	.word	0x08005878
 80042e8:	0800569d 	.word	0x0800569d
 80042ec:	08005724 	.word	0x08005724

080042f0 <__lshift>:
 80042f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042f4:	460c      	mov	r4, r1
 80042f6:	4607      	mov	r7, r0
 80042f8:	4691      	mov	r9, r2
 80042fa:	6923      	ldr	r3, [r4, #16]
 80042fc:	6849      	ldr	r1, [r1, #4]
 80042fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004302:	68a3      	ldr	r3, [r4, #8]
 8004304:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004308:	f108 0601 	add.w	r6, r8, #1
 800430c:	42b3      	cmp	r3, r6
 800430e:	db0b      	blt.n	8004328 <__lshift+0x38>
 8004310:	4638      	mov	r0, r7
 8004312:	f7ff fddf 	bl	8003ed4 <_Balloc>
 8004316:	4605      	mov	r5, r0
 8004318:	b948      	cbnz	r0, 800432e <__lshift+0x3e>
 800431a:	4602      	mov	r2, r0
 800431c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004320:	4b27      	ldr	r3, [pc, #156]	; (80043c0 <__lshift+0xd0>)
 8004322:	4828      	ldr	r0, [pc, #160]	; (80043c4 <__lshift+0xd4>)
 8004324:	f000 fb78 	bl	8004a18 <__assert_func>
 8004328:	3101      	adds	r1, #1
 800432a:	005b      	lsls	r3, r3, #1
 800432c:	e7ee      	b.n	800430c <__lshift+0x1c>
 800432e:	2300      	movs	r3, #0
 8004330:	f100 0114 	add.w	r1, r0, #20
 8004334:	f100 0210 	add.w	r2, r0, #16
 8004338:	4618      	mov	r0, r3
 800433a:	4553      	cmp	r3, sl
 800433c:	db33      	blt.n	80043a6 <__lshift+0xb6>
 800433e:	6920      	ldr	r0, [r4, #16]
 8004340:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004344:	f104 0314 	add.w	r3, r4, #20
 8004348:	f019 091f 	ands.w	r9, r9, #31
 800434c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004350:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004354:	d02b      	beq.n	80043ae <__lshift+0xbe>
 8004356:	468a      	mov	sl, r1
 8004358:	2200      	movs	r2, #0
 800435a:	f1c9 0e20 	rsb	lr, r9, #32
 800435e:	6818      	ldr	r0, [r3, #0]
 8004360:	fa00 f009 	lsl.w	r0, r0, r9
 8004364:	4302      	orrs	r2, r0
 8004366:	f84a 2b04 	str.w	r2, [sl], #4
 800436a:	f853 2b04 	ldr.w	r2, [r3], #4
 800436e:	459c      	cmp	ip, r3
 8004370:	fa22 f20e 	lsr.w	r2, r2, lr
 8004374:	d8f3      	bhi.n	800435e <__lshift+0x6e>
 8004376:	ebac 0304 	sub.w	r3, ip, r4
 800437a:	3b15      	subs	r3, #21
 800437c:	f023 0303 	bic.w	r3, r3, #3
 8004380:	3304      	adds	r3, #4
 8004382:	f104 0015 	add.w	r0, r4, #21
 8004386:	4584      	cmp	ip, r0
 8004388:	bf38      	it	cc
 800438a:	2304      	movcc	r3, #4
 800438c:	50ca      	str	r2, [r1, r3]
 800438e:	b10a      	cbz	r2, 8004394 <__lshift+0xa4>
 8004390:	f108 0602 	add.w	r6, r8, #2
 8004394:	3e01      	subs	r6, #1
 8004396:	4638      	mov	r0, r7
 8004398:	4621      	mov	r1, r4
 800439a:	612e      	str	r6, [r5, #16]
 800439c:	f7ff fdda 	bl	8003f54 <_Bfree>
 80043a0:	4628      	mov	r0, r5
 80043a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043a6:	f842 0f04 	str.w	r0, [r2, #4]!
 80043aa:	3301      	adds	r3, #1
 80043ac:	e7c5      	b.n	800433a <__lshift+0x4a>
 80043ae:	3904      	subs	r1, #4
 80043b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80043b4:	459c      	cmp	ip, r3
 80043b6:	f841 2f04 	str.w	r2, [r1, #4]!
 80043ba:	d8f9      	bhi.n	80043b0 <__lshift+0xc0>
 80043bc:	e7ea      	b.n	8004394 <__lshift+0xa4>
 80043be:	bf00      	nop
 80043c0:	08005713 	.word	0x08005713
 80043c4:	08005724 	.word	0x08005724

080043c8 <__mcmp>:
 80043c8:	4603      	mov	r3, r0
 80043ca:	690a      	ldr	r2, [r1, #16]
 80043cc:	6900      	ldr	r0, [r0, #16]
 80043ce:	b530      	push	{r4, r5, lr}
 80043d0:	1a80      	subs	r0, r0, r2
 80043d2:	d10d      	bne.n	80043f0 <__mcmp+0x28>
 80043d4:	3314      	adds	r3, #20
 80043d6:	3114      	adds	r1, #20
 80043d8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80043dc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80043e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80043e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80043e8:	4295      	cmp	r5, r2
 80043ea:	d002      	beq.n	80043f2 <__mcmp+0x2a>
 80043ec:	d304      	bcc.n	80043f8 <__mcmp+0x30>
 80043ee:	2001      	movs	r0, #1
 80043f0:	bd30      	pop	{r4, r5, pc}
 80043f2:	42a3      	cmp	r3, r4
 80043f4:	d3f4      	bcc.n	80043e0 <__mcmp+0x18>
 80043f6:	e7fb      	b.n	80043f0 <__mcmp+0x28>
 80043f8:	f04f 30ff 	mov.w	r0, #4294967295
 80043fc:	e7f8      	b.n	80043f0 <__mcmp+0x28>
	...

08004400 <__mdiff>:
 8004400:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004404:	460c      	mov	r4, r1
 8004406:	4606      	mov	r6, r0
 8004408:	4611      	mov	r1, r2
 800440a:	4620      	mov	r0, r4
 800440c:	4692      	mov	sl, r2
 800440e:	f7ff ffdb 	bl	80043c8 <__mcmp>
 8004412:	1e05      	subs	r5, r0, #0
 8004414:	d111      	bne.n	800443a <__mdiff+0x3a>
 8004416:	4629      	mov	r1, r5
 8004418:	4630      	mov	r0, r6
 800441a:	f7ff fd5b 	bl	8003ed4 <_Balloc>
 800441e:	4602      	mov	r2, r0
 8004420:	b928      	cbnz	r0, 800442e <__mdiff+0x2e>
 8004422:	f240 2132 	movw	r1, #562	; 0x232
 8004426:	4b3c      	ldr	r3, [pc, #240]	; (8004518 <__mdiff+0x118>)
 8004428:	483c      	ldr	r0, [pc, #240]	; (800451c <__mdiff+0x11c>)
 800442a:	f000 faf5 	bl	8004a18 <__assert_func>
 800442e:	2301      	movs	r3, #1
 8004430:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004434:	4610      	mov	r0, r2
 8004436:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800443a:	bfa4      	itt	ge
 800443c:	4653      	movge	r3, sl
 800443e:	46a2      	movge	sl, r4
 8004440:	4630      	mov	r0, r6
 8004442:	f8da 1004 	ldr.w	r1, [sl, #4]
 8004446:	bfa6      	itte	ge
 8004448:	461c      	movge	r4, r3
 800444a:	2500      	movge	r5, #0
 800444c:	2501      	movlt	r5, #1
 800444e:	f7ff fd41 	bl	8003ed4 <_Balloc>
 8004452:	4602      	mov	r2, r0
 8004454:	b918      	cbnz	r0, 800445e <__mdiff+0x5e>
 8004456:	f44f 7110 	mov.w	r1, #576	; 0x240
 800445a:	4b2f      	ldr	r3, [pc, #188]	; (8004518 <__mdiff+0x118>)
 800445c:	e7e4      	b.n	8004428 <__mdiff+0x28>
 800445e:	f100 0814 	add.w	r8, r0, #20
 8004462:	f8da 7010 	ldr.w	r7, [sl, #16]
 8004466:	60c5      	str	r5, [r0, #12]
 8004468:	f04f 0c00 	mov.w	ip, #0
 800446c:	f10a 0514 	add.w	r5, sl, #20
 8004470:	f10a 0010 	add.w	r0, sl, #16
 8004474:	46c2      	mov	sl, r8
 8004476:	6926      	ldr	r6, [r4, #16]
 8004478:	f104 0914 	add.w	r9, r4, #20
 800447c:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8004480:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8004484:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8004488:	f859 3b04 	ldr.w	r3, [r9], #4
 800448c:	fa1f f18b 	uxth.w	r1, fp
 8004490:	4461      	add	r1, ip
 8004492:	fa1f fc83 	uxth.w	ip, r3
 8004496:	0c1b      	lsrs	r3, r3, #16
 8004498:	eba1 010c 	sub.w	r1, r1, ip
 800449c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80044a0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80044a4:	b289      	uxth	r1, r1
 80044a6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80044aa:	454e      	cmp	r6, r9
 80044ac:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80044b0:	f84a 3b04 	str.w	r3, [sl], #4
 80044b4:	d8e6      	bhi.n	8004484 <__mdiff+0x84>
 80044b6:	1b33      	subs	r3, r6, r4
 80044b8:	3b15      	subs	r3, #21
 80044ba:	f023 0303 	bic.w	r3, r3, #3
 80044be:	3415      	adds	r4, #21
 80044c0:	3304      	adds	r3, #4
 80044c2:	42a6      	cmp	r6, r4
 80044c4:	bf38      	it	cc
 80044c6:	2304      	movcc	r3, #4
 80044c8:	441d      	add	r5, r3
 80044ca:	4443      	add	r3, r8
 80044cc:	461e      	mov	r6, r3
 80044ce:	462c      	mov	r4, r5
 80044d0:	4574      	cmp	r4, lr
 80044d2:	d30e      	bcc.n	80044f2 <__mdiff+0xf2>
 80044d4:	f10e 0103 	add.w	r1, lr, #3
 80044d8:	1b49      	subs	r1, r1, r5
 80044da:	f021 0103 	bic.w	r1, r1, #3
 80044de:	3d03      	subs	r5, #3
 80044e0:	45ae      	cmp	lr, r5
 80044e2:	bf38      	it	cc
 80044e4:	2100      	movcc	r1, #0
 80044e6:	4419      	add	r1, r3
 80044e8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80044ec:	b18b      	cbz	r3, 8004512 <__mdiff+0x112>
 80044ee:	6117      	str	r7, [r2, #16]
 80044f0:	e7a0      	b.n	8004434 <__mdiff+0x34>
 80044f2:	f854 8b04 	ldr.w	r8, [r4], #4
 80044f6:	fa1f f188 	uxth.w	r1, r8
 80044fa:	4461      	add	r1, ip
 80044fc:	1408      	asrs	r0, r1, #16
 80044fe:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8004502:	b289      	uxth	r1, r1
 8004504:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8004508:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800450c:	f846 1b04 	str.w	r1, [r6], #4
 8004510:	e7de      	b.n	80044d0 <__mdiff+0xd0>
 8004512:	3f01      	subs	r7, #1
 8004514:	e7e8      	b.n	80044e8 <__mdiff+0xe8>
 8004516:	bf00      	nop
 8004518:	08005713 	.word	0x08005713
 800451c:	08005724 	.word	0x08005724

08004520 <__d2b>:
 8004520:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004524:	2101      	movs	r1, #1
 8004526:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800452a:	4690      	mov	r8, r2
 800452c:	461d      	mov	r5, r3
 800452e:	f7ff fcd1 	bl	8003ed4 <_Balloc>
 8004532:	4604      	mov	r4, r0
 8004534:	b930      	cbnz	r0, 8004544 <__d2b+0x24>
 8004536:	4602      	mov	r2, r0
 8004538:	f240 310a 	movw	r1, #778	; 0x30a
 800453c:	4b24      	ldr	r3, [pc, #144]	; (80045d0 <__d2b+0xb0>)
 800453e:	4825      	ldr	r0, [pc, #148]	; (80045d4 <__d2b+0xb4>)
 8004540:	f000 fa6a 	bl	8004a18 <__assert_func>
 8004544:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8004548:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800454c:	bb2d      	cbnz	r5, 800459a <__d2b+0x7a>
 800454e:	9301      	str	r3, [sp, #4]
 8004550:	f1b8 0300 	subs.w	r3, r8, #0
 8004554:	d026      	beq.n	80045a4 <__d2b+0x84>
 8004556:	4668      	mov	r0, sp
 8004558:	9300      	str	r3, [sp, #0]
 800455a:	f7ff fd87 	bl	800406c <__lo0bits>
 800455e:	9900      	ldr	r1, [sp, #0]
 8004560:	b1f0      	cbz	r0, 80045a0 <__d2b+0x80>
 8004562:	9a01      	ldr	r2, [sp, #4]
 8004564:	f1c0 0320 	rsb	r3, r0, #32
 8004568:	fa02 f303 	lsl.w	r3, r2, r3
 800456c:	430b      	orrs	r3, r1
 800456e:	40c2      	lsrs	r2, r0
 8004570:	6163      	str	r3, [r4, #20]
 8004572:	9201      	str	r2, [sp, #4]
 8004574:	9b01      	ldr	r3, [sp, #4]
 8004576:	2b00      	cmp	r3, #0
 8004578:	bf14      	ite	ne
 800457a:	2102      	movne	r1, #2
 800457c:	2101      	moveq	r1, #1
 800457e:	61a3      	str	r3, [r4, #24]
 8004580:	6121      	str	r1, [r4, #16]
 8004582:	b1c5      	cbz	r5, 80045b6 <__d2b+0x96>
 8004584:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004588:	4405      	add	r5, r0
 800458a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800458e:	603d      	str	r5, [r7, #0]
 8004590:	6030      	str	r0, [r6, #0]
 8004592:	4620      	mov	r0, r4
 8004594:	b002      	add	sp, #8
 8004596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800459a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800459e:	e7d6      	b.n	800454e <__d2b+0x2e>
 80045a0:	6161      	str	r1, [r4, #20]
 80045a2:	e7e7      	b.n	8004574 <__d2b+0x54>
 80045a4:	a801      	add	r0, sp, #4
 80045a6:	f7ff fd61 	bl	800406c <__lo0bits>
 80045aa:	2101      	movs	r1, #1
 80045ac:	9b01      	ldr	r3, [sp, #4]
 80045ae:	6121      	str	r1, [r4, #16]
 80045b0:	6163      	str	r3, [r4, #20]
 80045b2:	3020      	adds	r0, #32
 80045b4:	e7e5      	b.n	8004582 <__d2b+0x62>
 80045b6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80045ba:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80045be:	6038      	str	r0, [r7, #0]
 80045c0:	6918      	ldr	r0, [r3, #16]
 80045c2:	f7ff fd33 	bl	800402c <__hi0bits>
 80045c6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80045ca:	6031      	str	r1, [r6, #0]
 80045cc:	e7e1      	b.n	8004592 <__d2b+0x72>
 80045ce:	bf00      	nop
 80045d0:	08005713 	.word	0x08005713
 80045d4:	08005724 	.word	0x08005724

080045d8 <_calloc_r>:
 80045d8:	b538      	push	{r3, r4, r5, lr}
 80045da:	fb02 f501 	mul.w	r5, r2, r1
 80045de:	4629      	mov	r1, r5
 80045e0:	f000 f854 	bl	800468c <_malloc_r>
 80045e4:	4604      	mov	r4, r0
 80045e6:	b118      	cbz	r0, 80045f0 <_calloc_r+0x18>
 80045e8:	462a      	mov	r2, r5
 80045ea:	2100      	movs	r1, #0
 80045ec:	f7fe f946 	bl	800287c <memset>
 80045f0:	4620      	mov	r0, r4
 80045f2:	bd38      	pop	{r3, r4, r5, pc}

080045f4 <_free_r>:
 80045f4:	b538      	push	{r3, r4, r5, lr}
 80045f6:	4605      	mov	r5, r0
 80045f8:	2900      	cmp	r1, #0
 80045fa:	d043      	beq.n	8004684 <_free_r+0x90>
 80045fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004600:	1f0c      	subs	r4, r1, #4
 8004602:	2b00      	cmp	r3, #0
 8004604:	bfb8      	it	lt
 8004606:	18e4      	addlt	r4, r4, r3
 8004608:	f000 fa62 	bl	8004ad0 <__malloc_lock>
 800460c:	4a1e      	ldr	r2, [pc, #120]	; (8004688 <_free_r+0x94>)
 800460e:	6813      	ldr	r3, [r2, #0]
 8004610:	4610      	mov	r0, r2
 8004612:	b933      	cbnz	r3, 8004622 <_free_r+0x2e>
 8004614:	6063      	str	r3, [r4, #4]
 8004616:	6014      	str	r4, [r2, #0]
 8004618:	4628      	mov	r0, r5
 800461a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800461e:	f000 ba5d 	b.w	8004adc <__malloc_unlock>
 8004622:	42a3      	cmp	r3, r4
 8004624:	d90a      	bls.n	800463c <_free_r+0x48>
 8004626:	6821      	ldr	r1, [r4, #0]
 8004628:	1862      	adds	r2, r4, r1
 800462a:	4293      	cmp	r3, r2
 800462c:	bf01      	itttt	eq
 800462e:	681a      	ldreq	r2, [r3, #0]
 8004630:	685b      	ldreq	r3, [r3, #4]
 8004632:	1852      	addeq	r2, r2, r1
 8004634:	6022      	streq	r2, [r4, #0]
 8004636:	6063      	str	r3, [r4, #4]
 8004638:	6004      	str	r4, [r0, #0]
 800463a:	e7ed      	b.n	8004618 <_free_r+0x24>
 800463c:	461a      	mov	r2, r3
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	b10b      	cbz	r3, 8004646 <_free_r+0x52>
 8004642:	42a3      	cmp	r3, r4
 8004644:	d9fa      	bls.n	800463c <_free_r+0x48>
 8004646:	6811      	ldr	r1, [r2, #0]
 8004648:	1850      	adds	r0, r2, r1
 800464a:	42a0      	cmp	r0, r4
 800464c:	d10b      	bne.n	8004666 <_free_r+0x72>
 800464e:	6820      	ldr	r0, [r4, #0]
 8004650:	4401      	add	r1, r0
 8004652:	1850      	adds	r0, r2, r1
 8004654:	4283      	cmp	r3, r0
 8004656:	6011      	str	r1, [r2, #0]
 8004658:	d1de      	bne.n	8004618 <_free_r+0x24>
 800465a:	6818      	ldr	r0, [r3, #0]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	4401      	add	r1, r0
 8004660:	6011      	str	r1, [r2, #0]
 8004662:	6053      	str	r3, [r2, #4]
 8004664:	e7d8      	b.n	8004618 <_free_r+0x24>
 8004666:	d902      	bls.n	800466e <_free_r+0x7a>
 8004668:	230c      	movs	r3, #12
 800466a:	602b      	str	r3, [r5, #0]
 800466c:	e7d4      	b.n	8004618 <_free_r+0x24>
 800466e:	6820      	ldr	r0, [r4, #0]
 8004670:	1821      	adds	r1, r4, r0
 8004672:	428b      	cmp	r3, r1
 8004674:	bf01      	itttt	eq
 8004676:	6819      	ldreq	r1, [r3, #0]
 8004678:	685b      	ldreq	r3, [r3, #4]
 800467a:	1809      	addeq	r1, r1, r0
 800467c:	6021      	streq	r1, [r4, #0]
 800467e:	6063      	str	r3, [r4, #4]
 8004680:	6054      	str	r4, [r2, #4]
 8004682:	e7c9      	b.n	8004618 <_free_r+0x24>
 8004684:	bd38      	pop	{r3, r4, r5, pc}
 8004686:	bf00      	nop
 8004688:	200001fc 	.word	0x200001fc

0800468c <_malloc_r>:
 800468c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800468e:	1ccd      	adds	r5, r1, #3
 8004690:	f025 0503 	bic.w	r5, r5, #3
 8004694:	3508      	adds	r5, #8
 8004696:	2d0c      	cmp	r5, #12
 8004698:	bf38      	it	cc
 800469a:	250c      	movcc	r5, #12
 800469c:	2d00      	cmp	r5, #0
 800469e:	4606      	mov	r6, r0
 80046a0:	db01      	blt.n	80046a6 <_malloc_r+0x1a>
 80046a2:	42a9      	cmp	r1, r5
 80046a4:	d903      	bls.n	80046ae <_malloc_r+0x22>
 80046a6:	230c      	movs	r3, #12
 80046a8:	6033      	str	r3, [r6, #0]
 80046aa:	2000      	movs	r0, #0
 80046ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046ae:	f000 fa0f 	bl	8004ad0 <__malloc_lock>
 80046b2:	4921      	ldr	r1, [pc, #132]	; (8004738 <_malloc_r+0xac>)
 80046b4:	680a      	ldr	r2, [r1, #0]
 80046b6:	4614      	mov	r4, r2
 80046b8:	b99c      	cbnz	r4, 80046e2 <_malloc_r+0x56>
 80046ba:	4f20      	ldr	r7, [pc, #128]	; (800473c <_malloc_r+0xb0>)
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	b923      	cbnz	r3, 80046ca <_malloc_r+0x3e>
 80046c0:	4621      	mov	r1, r4
 80046c2:	4630      	mov	r0, r6
 80046c4:	f000 f998 	bl	80049f8 <_sbrk_r>
 80046c8:	6038      	str	r0, [r7, #0]
 80046ca:	4629      	mov	r1, r5
 80046cc:	4630      	mov	r0, r6
 80046ce:	f000 f993 	bl	80049f8 <_sbrk_r>
 80046d2:	1c43      	adds	r3, r0, #1
 80046d4:	d123      	bne.n	800471e <_malloc_r+0x92>
 80046d6:	230c      	movs	r3, #12
 80046d8:	4630      	mov	r0, r6
 80046da:	6033      	str	r3, [r6, #0]
 80046dc:	f000 f9fe 	bl	8004adc <__malloc_unlock>
 80046e0:	e7e3      	b.n	80046aa <_malloc_r+0x1e>
 80046e2:	6823      	ldr	r3, [r4, #0]
 80046e4:	1b5b      	subs	r3, r3, r5
 80046e6:	d417      	bmi.n	8004718 <_malloc_r+0x8c>
 80046e8:	2b0b      	cmp	r3, #11
 80046ea:	d903      	bls.n	80046f4 <_malloc_r+0x68>
 80046ec:	6023      	str	r3, [r4, #0]
 80046ee:	441c      	add	r4, r3
 80046f0:	6025      	str	r5, [r4, #0]
 80046f2:	e004      	b.n	80046fe <_malloc_r+0x72>
 80046f4:	6863      	ldr	r3, [r4, #4]
 80046f6:	42a2      	cmp	r2, r4
 80046f8:	bf0c      	ite	eq
 80046fa:	600b      	streq	r3, [r1, #0]
 80046fc:	6053      	strne	r3, [r2, #4]
 80046fe:	4630      	mov	r0, r6
 8004700:	f000 f9ec 	bl	8004adc <__malloc_unlock>
 8004704:	f104 000b 	add.w	r0, r4, #11
 8004708:	1d23      	adds	r3, r4, #4
 800470a:	f020 0007 	bic.w	r0, r0, #7
 800470e:	1ac2      	subs	r2, r0, r3
 8004710:	d0cc      	beq.n	80046ac <_malloc_r+0x20>
 8004712:	1a1b      	subs	r3, r3, r0
 8004714:	50a3      	str	r3, [r4, r2]
 8004716:	e7c9      	b.n	80046ac <_malloc_r+0x20>
 8004718:	4622      	mov	r2, r4
 800471a:	6864      	ldr	r4, [r4, #4]
 800471c:	e7cc      	b.n	80046b8 <_malloc_r+0x2c>
 800471e:	1cc4      	adds	r4, r0, #3
 8004720:	f024 0403 	bic.w	r4, r4, #3
 8004724:	42a0      	cmp	r0, r4
 8004726:	d0e3      	beq.n	80046f0 <_malloc_r+0x64>
 8004728:	1a21      	subs	r1, r4, r0
 800472a:	4630      	mov	r0, r6
 800472c:	f000 f964 	bl	80049f8 <_sbrk_r>
 8004730:	3001      	adds	r0, #1
 8004732:	d1dd      	bne.n	80046f0 <_malloc_r+0x64>
 8004734:	e7cf      	b.n	80046d6 <_malloc_r+0x4a>
 8004736:	bf00      	nop
 8004738:	200001fc 	.word	0x200001fc
 800473c:	20000200 	.word	0x20000200

08004740 <__ssputs_r>:
 8004740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004744:	688e      	ldr	r6, [r1, #8]
 8004746:	4682      	mov	sl, r0
 8004748:	429e      	cmp	r6, r3
 800474a:	460c      	mov	r4, r1
 800474c:	4690      	mov	r8, r2
 800474e:	461f      	mov	r7, r3
 8004750:	d838      	bhi.n	80047c4 <__ssputs_r+0x84>
 8004752:	898a      	ldrh	r2, [r1, #12]
 8004754:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004758:	d032      	beq.n	80047c0 <__ssputs_r+0x80>
 800475a:	6825      	ldr	r5, [r4, #0]
 800475c:	6909      	ldr	r1, [r1, #16]
 800475e:	3301      	adds	r3, #1
 8004760:	eba5 0901 	sub.w	r9, r5, r1
 8004764:	6965      	ldr	r5, [r4, #20]
 8004766:	444b      	add	r3, r9
 8004768:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800476c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004770:	106d      	asrs	r5, r5, #1
 8004772:	429d      	cmp	r5, r3
 8004774:	bf38      	it	cc
 8004776:	461d      	movcc	r5, r3
 8004778:	0553      	lsls	r3, r2, #21
 800477a:	d531      	bpl.n	80047e0 <__ssputs_r+0xa0>
 800477c:	4629      	mov	r1, r5
 800477e:	f7ff ff85 	bl	800468c <_malloc_r>
 8004782:	4606      	mov	r6, r0
 8004784:	b950      	cbnz	r0, 800479c <__ssputs_r+0x5c>
 8004786:	230c      	movs	r3, #12
 8004788:	f04f 30ff 	mov.w	r0, #4294967295
 800478c:	f8ca 3000 	str.w	r3, [sl]
 8004790:	89a3      	ldrh	r3, [r4, #12]
 8004792:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004796:	81a3      	strh	r3, [r4, #12]
 8004798:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800479c:	464a      	mov	r2, r9
 800479e:	6921      	ldr	r1, [r4, #16]
 80047a0:	f7ff fb8a 	bl	8003eb8 <memcpy>
 80047a4:	89a3      	ldrh	r3, [r4, #12]
 80047a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80047aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047ae:	81a3      	strh	r3, [r4, #12]
 80047b0:	6126      	str	r6, [r4, #16]
 80047b2:	444e      	add	r6, r9
 80047b4:	6026      	str	r6, [r4, #0]
 80047b6:	463e      	mov	r6, r7
 80047b8:	6165      	str	r5, [r4, #20]
 80047ba:	eba5 0509 	sub.w	r5, r5, r9
 80047be:	60a5      	str	r5, [r4, #8]
 80047c0:	42be      	cmp	r6, r7
 80047c2:	d900      	bls.n	80047c6 <__ssputs_r+0x86>
 80047c4:	463e      	mov	r6, r7
 80047c6:	4632      	mov	r2, r6
 80047c8:	4641      	mov	r1, r8
 80047ca:	6820      	ldr	r0, [r4, #0]
 80047cc:	f000 f966 	bl	8004a9c <memmove>
 80047d0:	68a3      	ldr	r3, [r4, #8]
 80047d2:	6822      	ldr	r2, [r4, #0]
 80047d4:	1b9b      	subs	r3, r3, r6
 80047d6:	4432      	add	r2, r6
 80047d8:	2000      	movs	r0, #0
 80047da:	60a3      	str	r3, [r4, #8]
 80047dc:	6022      	str	r2, [r4, #0]
 80047de:	e7db      	b.n	8004798 <__ssputs_r+0x58>
 80047e0:	462a      	mov	r2, r5
 80047e2:	f000 f981 	bl	8004ae8 <_realloc_r>
 80047e6:	4606      	mov	r6, r0
 80047e8:	2800      	cmp	r0, #0
 80047ea:	d1e1      	bne.n	80047b0 <__ssputs_r+0x70>
 80047ec:	4650      	mov	r0, sl
 80047ee:	6921      	ldr	r1, [r4, #16]
 80047f0:	f7ff ff00 	bl	80045f4 <_free_r>
 80047f4:	e7c7      	b.n	8004786 <__ssputs_r+0x46>
	...

080047f8 <_svfiprintf_r>:
 80047f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047fc:	4698      	mov	r8, r3
 80047fe:	898b      	ldrh	r3, [r1, #12]
 8004800:	4607      	mov	r7, r0
 8004802:	061b      	lsls	r3, r3, #24
 8004804:	460d      	mov	r5, r1
 8004806:	4614      	mov	r4, r2
 8004808:	b09d      	sub	sp, #116	; 0x74
 800480a:	d50e      	bpl.n	800482a <_svfiprintf_r+0x32>
 800480c:	690b      	ldr	r3, [r1, #16]
 800480e:	b963      	cbnz	r3, 800482a <_svfiprintf_r+0x32>
 8004810:	2140      	movs	r1, #64	; 0x40
 8004812:	f7ff ff3b 	bl	800468c <_malloc_r>
 8004816:	6028      	str	r0, [r5, #0]
 8004818:	6128      	str	r0, [r5, #16]
 800481a:	b920      	cbnz	r0, 8004826 <_svfiprintf_r+0x2e>
 800481c:	230c      	movs	r3, #12
 800481e:	603b      	str	r3, [r7, #0]
 8004820:	f04f 30ff 	mov.w	r0, #4294967295
 8004824:	e0d1      	b.n	80049ca <_svfiprintf_r+0x1d2>
 8004826:	2340      	movs	r3, #64	; 0x40
 8004828:	616b      	str	r3, [r5, #20]
 800482a:	2300      	movs	r3, #0
 800482c:	9309      	str	r3, [sp, #36]	; 0x24
 800482e:	2320      	movs	r3, #32
 8004830:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004834:	2330      	movs	r3, #48	; 0x30
 8004836:	f04f 0901 	mov.w	r9, #1
 800483a:	f8cd 800c 	str.w	r8, [sp, #12]
 800483e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80049e4 <_svfiprintf_r+0x1ec>
 8004842:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004846:	4623      	mov	r3, r4
 8004848:	469a      	mov	sl, r3
 800484a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800484e:	b10a      	cbz	r2, 8004854 <_svfiprintf_r+0x5c>
 8004850:	2a25      	cmp	r2, #37	; 0x25
 8004852:	d1f9      	bne.n	8004848 <_svfiprintf_r+0x50>
 8004854:	ebba 0b04 	subs.w	fp, sl, r4
 8004858:	d00b      	beq.n	8004872 <_svfiprintf_r+0x7a>
 800485a:	465b      	mov	r3, fp
 800485c:	4622      	mov	r2, r4
 800485e:	4629      	mov	r1, r5
 8004860:	4638      	mov	r0, r7
 8004862:	f7ff ff6d 	bl	8004740 <__ssputs_r>
 8004866:	3001      	adds	r0, #1
 8004868:	f000 80aa 	beq.w	80049c0 <_svfiprintf_r+0x1c8>
 800486c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800486e:	445a      	add	r2, fp
 8004870:	9209      	str	r2, [sp, #36]	; 0x24
 8004872:	f89a 3000 	ldrb.w	r3, [sl]
 8004876:	2b00      	cmp	r3, #0
 8004878:	f000 80a2 	beq.w	80049c0 <_svfiprintf_r+0x1c8>
 800487c:	2300      	movs	r3, #0
 800487e:	f04f 32ff 	mov.w	r2, #4294967295
 8004882:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004886:	f10a 0a01 	add.w	sl, sl, #1
 800488a:	9304      	str	r3, [sp, #16]
 800488c:	9307      	str	r3, [sp, #28]
 800488e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004892:	931a      	str	r3, [sp, #104]	; 0x68
 8004894:	4654      	mov	r4, sl
 8004896:	2205      	movs	r2, #5
 8004898:	f814 1b01 	ldrb.w	r1, [r4], #1
 800489c:	4851      	ldr	r0, [pc, #324]	; (80049e4 <_svfiprintf_r+0x1ec>)
 800489e:	f7ff fafd 	bl	8003e9c <memchr>
 80048a2:	9a04      	ldr	r2, [sp, #16]
 80048a4:	b9d8      	cbnz	r0, 80048de <_svfiprintf_r+0xe6>
 80048a6:	06d0      	lsls	r0, r2, #27
 80048a8:	bf44      	itt	mi
 80048aa:	2320      	movmi	r3, #32
 80048ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80048b0:	0711      	lsls	r1, r2, #28
 80048b2:	bf44      	itt	mi
 80048b4:	232b      	movmi	r3, #43	; 0x2b
 80048b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80048ba:	f89a 3000 	ldrb.w	r3, [sl]
 80048be:	2b2a      	cmp	r3, #42	; 0x2a
 80048c0:	d015      	beq.n	80048ee <_svfiprintf_r+0xf6>
 80048c2:	4654      	mov	r4, sl
 80048c4:	2000      	movs	r0, #0
 80048c6:	f04f 0c0a 	mov.w	ip, #10
 80048ca:	9a07      	ldr	r2, [sp, #28]
 80048cc:	4621      	mov	r1, r4
 80048ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80048d2:	3b30      	subs	r3, #48	; 0x30
 80048d4:	2b09      	cmp	r3, #9
 80048d6:	d94e      	bls.n	8004976 <_svfiprintf_r+0x17e>
 80048d8:	b1b0      	cbz	r0, 8004908 <_svfiprintf_r+0x110>
 80048da:	9207      	str	r2, [sp, #28]
 80048dc:	e014      	b.n	8004908 <_svfiprintf_r+0x110>
 80048de:	eba0 0308 	sub.w	r3, r0, r8
 80048e2:	fa09 f303 	lsl.w	r3, r9, r3
 80048e6:	4313      	orrs	r3, r2
 80048e8:	46a2      	mov	sl, r4
 80048ea:	9304      	str	r3, [sp, #16]
 80048ec:	e7d2      	b.n	8004894 <_svfiprintf_r+0x9c>
 80048ee:	9b03      	ldr	r3, [sp, #12]
 80048f0:	1d19      	adds	r1, r3, #4
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	9103      	str	r1, [sp, #12]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	bfbb      	ittet	lt
 80048fa:	425b      	neglt	r3, r3
 80048fc:	f042 0202 	orrlt.w	r2, r2, #2
 8004900:	9307      	strge	r3, [sp, #28]
 8004902:	9307      	strlt	r3, [sp, #28]
 8004904:	bfb8      	it	lt
 8004906:	9204      	strlt	r2, [sp, #16]
 8004908:	7823      	ldrb	r3, [r4, #0]
 800490a:	2b2e      	cmp	r3, #46	; 0x2e
 800490c:	d10c      	bne.n	8004928 <_svfiprintf_r+0x130>
 800490e:	7863      	ldrb	r3, [r4, #1]
 8004910:	2b2a      	cmp	r3, #42	; 0x2a
 8004912:	d135      	bne.n	8004980 <_svfiprintf_r+0x188>
 8004914:	9b03      	ldr	r3, [sp, #12]
 8004916:	3402      	adds	r4, #2
 8004918:	1d1a      	adds	r2, r3, #4
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	9203      	str	r2, [sp, #12]
 800491e:	2b00      	cmp	r3, #0
 8004920:	bfb8      	it	lt
 8004922:	f04f 33ff 	movlt.w	r3, #4294967295
 8004926:	9305      	str	r3, [sp, #20]
 8004928:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80049f4 <_svfiprintf_r+0x1fc>
 800492c:	2203      	movs	r2, #3
 800492e:	4650      	mov	r0, sl
 8004930:	7821      	ldrb	r1, [r4, #0]
 8004932:	f7ff fab3 	bl	8003e9c <memchr>
 8004936:	b140      	cbz	r0, 800494a <_svfiprintf_r+0x152>
 8004938:	2340      	movs	r3, #64	; 0x40
 800493a:	eba0 000a 	sub.w	r0, r0, sl
 800493e:	fa03 f000 	lsl.w	r0, r3, r0
 8004942:	9b04      	ldr	r3, [sp, #16]
 8004944:	3401      	adds	r4, #1
 8004946:	4303      	orrs	r3, r0
 8004948:	9304      	str	r3, [sp, #16]
 800494a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800494e:	2206      	movs	r2, #6
 8004950:	4825      	ldr	r0, [pc, #148]	; (80049e8 <_svfiprintf_r+0x1f0>)
 8004952:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004956:	f7ff faa1 	bl	8003e9c <memchr>
 800495a:	2800      	cmp	r0, #0
 800495c:	d038      	beq.n	80049d0 <_svfiprintf_r+0x1d8>
 800495e:	4b23      	ldr	r3, [pc, #140]	; (80049ec <_svfiprintf_r+0x1f4>)
 8004960:	bb1b      	cbnz	r3, 80049aa <_svfiprintf_r+0x1b2>
 8004962:	9b03      	ldr	r3, [sp, #12]
 8004964:	3307      	adds	r3, #7
 8004966:	f023 0307 	bic.w	r3, r3, #7
 800496a:	3308      	adds	r3, #8
 800496c:	9303      	str	r3, [sp, #12]
 800496e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004970:	4433      	add	r3, r6
 8004972:	9309      	str	r3, [sp, #36]	; 0x24
 8004974:	e767      	b.n	8004846 <_svfiprintf_r+0x4e>
 8004976:	460c      	mov	r4, r1
 8004978:	2001      	movs	r0, #1
 800497a:	fb0c 3202 	mla	r2, ip, r2, r3
 800497e:	e7a5      	b.n	80048cc <_svfiprintf_r+0xd4>
 8004980:	2300      	movs	r3, #0
 8004982:	f04f 0c0a 	mov.w	ip, #10
 8004986:	4619      	mov	r1, r3
 8004988:	3401      	adds	r4, #1
 800498a:	9305      	str	r3, [sp, #20]
 800498c:	4620      	mov	r0, r4
 800498e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004992:	3a30      	subs	r2, #48	; 0x30
 8004994:	2a09      	cmp	r2, #9
 8004996:	d903      	bls.n	80049a0 <_svfiprintf_r+0x1a8>
 8004998:	2b00      	cmp	r3, #0
 800499a:	d0c5      	beq.n	8004928 <_svfiprintf_r+0x130>
 800499c:	9105      	str	r1, [sp, #20]
 800499e:	e7c3      	b.n	8004928 <_svfiprintf_r+0x130>
 80049a0:	4604      	mov	r4, r0
 80049a2:	2301      	movs	r3, #1
 80049a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80049a8:	e7f0      	b.n	800498c <_svfiprintf_r+0x194>
 80049aa:	ab03      	add	r3, sp, #12
 80049ac:	9300      	str	r3, [sp, #0]
 80049ae:	462a      	mov	r2, r5
 80049b0:	4638      	mov	r0, r7
 80049b2:	4b0f      	ldr	r3, [pc, #60]	; (80049f0 <_svfiprintf_r+0x1f8>)
 80049b4:	a904      	add	r1, sp, #16
 80049b6:	f7fe f807 	bl	80029c8 <_printf_float>
 80049ba:	1c42      	adds	r2, r0, #1
 80049bc:	4606      	mov	r6, r0
 80049be:	d1d6      	bne.n	800496e <_svfiprintf_r+0x176>
 80049c0:	89ab      	ldrh	r3, [r5, #12]
 80049c2:	065b      	lsls	r3, r3, #25
 80049c4:	f53f af2c 	bmi.w	8004820 <_svfiprintf_r+0x28>
 80049c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80049ca:	b01d      	add	sp, #116	; 0x74
 80049cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049d0:	ab03      	add	r3, sp, #12
 80049d2:	9300      	str	r3, [sp, #0]
 80049d4:	462a      	mov	r2, r5
 80049d6:	4638      	mov	r0, r7
 80049d8:	4b05      	ldr	r3, [pc, #20]	; (80049f0 <_svfiprintf_r+0x1f8>)
 80049da:	a904      	add	r1, sp, #16
 80049dc:	f7fe fa90 	bl	8002f00 <_printf_i>
 80049e0:	e7eb      	b.n	80049ba <_svfiprintf_r+0x1c2>
 80049e2:	bf00      	nop
 80049e4:	08005884 	.word	0x08005884
 80049e8:	0800588e 	.word	0x0800588e
 80049ec:	080029c9 	.word	0x080029c9
 80049f0:	08004741 	.word	0x08004741
 80049f4:	0800588a 	.word	0x0800588a

080049f8 <_sbrk_r>:
 80049f8:	b538      	push	{r3, r4, r5, lr}
 80049fa:	2300      	movs	r3, #0
 80049fc:	4d05      	ldr	r5, [pc, #20]	; (8004a14 <_sbrk_r+0x1c>)
 80049fe:	4604      	mov	r4, r0
 8004a00:	4608      	mov	r0, r1
 8004a02:	602b      	str	r3, [r5, #0]
 8004a04:	f7fc fce0 	bl	80013c8 <_sbrk>
 8004a08:	1c43      	adds	r3, r0, #1
 8004a0a:	d102      	bne.n	8004a12 <_sbrk_r+0x1a>
 8004a0c:	682b      	ldr	r3, [r5, #0]
 8004a0e:	b103      	cbz	r3, 8004a12 <_sbrk_r+0x1a>
 8004a10:	6023      	str	r3, [r4, #0]
 8004a12:	bd38      	pop	{r3, r4, r5, pc}
 8004a14:	20000264 	.word	0x20000264

08004a18 <__assert_func>:
 8004a18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004a1a:	4614      	mov	r4, r2
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	4b09      	ldr	r3, [pc, #36]	; (8004a44 <__assert_func+0x2c>)
 8004a20:	4605      	mov	r5, r0
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68d8      	ldr	r0, [r3, #12]
 8004a26:	b14c      	cbz	r4, 8004a3c <__assert_func+0x24>
 8004a28:	4b07      	ldr	r3, [pc, #28]	; (8004a48 <__assert_func+0x30>)
 8004a2a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004a2e:	9100      	str	r1, [sp, #0]
 8004a30:	462b      	mov	r3, r5
 8004a32:	4906      	ldr	r1, [pc, #24]	; (8004a4c <__assert_func+0x34>)
 8004a34:	f000 f80e 	bl	8004a54 <fiprintf>
 8004a38:	f000 faa2 	bl	8004f80 <abort>
 8004a3c:	4b04      	ldr	r3, [pc, #16]	; (8004a50 <__assert_func+0x38>)
 8004a3e:	461c      	mov	r4, r3
 8004a40:	e7f3      	b.n	8004a2a <__assert_func+0x12>
 8004a42:	bf00      	nop
 8004a44:	2000000c 	.word	0x2000000c
 8004a48:	08005895 	.word	0x08005895
 8004a4c:	080058a2 	.word	0x080058a2
 8004a50:	080058d0 	.word	0x080058d0

08004a54 <fiprintf>:
 8004a54:	b40e      	push	{r1, r2, r3}
 8004a56:	b503      	push	{r0, r1, lr}
 8004a58:	4601      	mov	r1, r0
 8004a5a:	ab03      	add	r3, sp, #12
 8004a5c:	4805      	ldr	r0, [pc, #20]	; (8004a74 <fiprintf+0x20>)
 8004a5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a62:	6800      	ldr	r0, [r0, #0]
 8004a64:	9301      	str	r3, [sp, #4]
 8004a66:	f000 f88d 	bl	8004b84 <_vfiprintf_r>
 8004a6a:	b002      	add	sp, #8
 8004a6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a70:	b003      	add	sp, #12
 8004a72:	4770      	bx	lr
 8004a74:	2000000c 	.word	0x2000000c

08004a78 <__ascii_mbtowc>:
 8004a78:	b082      	sub	sp, #8
 8004a7a:	b901      	cbnz	r1, 8004a7e <__ascii_mbtowc+0x6>
 8004a7c:	a901      	add	r1, sp, #4
 8004a7e:	b142      	cbz	r2, 8004a92 <__ascii_mbtowc+0x1a>
 8004a80:	b14b      	cbz	r3, 8004a96 <__ascii_mbtowc+0x1e>
 8004a82:	7813      	ldrb	r3, [r2, #0]
 8004a84:	600b      	str	r3, [r1, #0]
 8004a86:	7812      	ldrb	r2, [r2, #0]
 8004a88:	1e10      	subs	r0, r2, #0
 8004a8a:	bf18      	it	ne
 8004a8c:	2001      	movne	r0, #1
 8004a8e:	b002      	add	sp, #8
 8004a90:	4770      	bx	lr
 8004a92:	4610      	mov	r0, r2
 8004a94:	e7fb      	b.n	8004a8e <__ascii_mbtowc+0x16>
 8004a96:	f06f 0001 	mvn.w	r0, #1
 8004a9a:	e7f8      	b.n	8004a8e <__ascii_mbtowc+0x16>

08004a9c <memmove>:
 8004a9c:	4288      	cmp	r0, r1
 8004a9e:	b510      	push	{r4, lr}
 8004aa0:	eb01 0402 	add.w	r4, r1, r2
 8004aa4:	d902      	bls.n	8004aac <memmove+0x10>
 8004aa6:	4284      	cmp	r4, r0
 8004aa8:	4623      	mov	r3, r4
 8004aaa:	d807      	bhi.n	8004abc <memmove+0x20>
 8004aac:	1e43      	subs	r3, r0, #1
 8004aae:	42a1      	cmp	r1, r4
 8004ab0:	d008      	beq.n	8004ac4 <memmove+0x28>
 8004ab2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ab6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004aba:	e7f8      	b.n	8004aae <memmove+0x12>
 8004abc:	4601      	mov	r1, r0
 8004abe:	4402      	add	r2, r0
 8004ac0:	428a      	cmp	r2, r1
 8004ac2:	d100      	bne.n	8004ac6 <memmove+0x2a>
 8004ac4:	bd10      	pop	{r4, pc}
 8004ac6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004aca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004ace:	e7f7      	b.n	8004ac0 <memmove+0x24>

08004ad0 <__malloc_lock>:
 8004ad0:	4801      	ldr	r0, [pc, #4]	; (8004ad8 <__malloc_lock+0x8>)
 8004ad2:	f000 bc15 	b.w	8005300 <__retarget_lock_acquire_recursive>
 8004ad6:	bf00      	nop
 8004ad8:	2000026c 	.word	0x2000026c

08004adc <__malloc_unlock>:
 8004adc:	4801      	ldr	r0, [pc, #4]	; (8004ae4 <__malloc_unlock+0x8>)
 8004ade:	f000 bc10 	b.w	8005302 <__retarget_lock_release_recursive>
 8004ae2:	bf00      	nop
 8004ae4:	2000026c 	.word	0x2000026c

08004ae8 <_realloc_r>:
 8004ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aea:	4607      	mov	r7, r0
 8004aec:	4614      	mov	r4, r2
 8004aee:	460e      	mov	r6, r1
 8004af0:	b921      	cbnz	r1, 8004afc <_realloc_r+0x14>
 8004af2:	4611      	mov	r1, r2
 8004af4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004af8:	f7ff bdc8 	b.w	800468c <_malloc_r>
 8004afc:	b922      	cbnz	r2, 8004b08 <_realloc_r+0x20>
 8004afe:	f7ff fd79 	bl	80045f4 <_free_r>
 8004b02:	4625      	mov	r5, r4
 8004b04:	4628      	mov	r0, r5
 8004b06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b08:	f000 fc60 	bl	80053cc <_malloc_usable_size_r>
 8004b0c:	42a0      	cmp	r0, r4
 8004b0e:	d20f      	bcs.n	8004b30 <_realloc_r+0x48>
 8004b10:	4621      	mov	r1, r4
 8004b12:	4638      	mov	r0, r7
 8004b14:	f7ff fdba 	bl	800468c <_malloc_r>
 8004b18:	4605      	mov	r5, r0
 8004b1a:	2800      	cmp	r0, #0
 8004b1c:	d0f2      	beq.n	8004b04 <_realloc_r+0x1c>
 8004b1e:	4631      	mov	r1, r6
 8004b20:	4622      	mov	r2, r4
 8004b22:	f7ff f9c9 	bl	8003eb8 <memcpy>
 8004b26:	4631      	mov	r1, r6
 8004b28:	4638      	mov	r0, r7
 8004b2a:	f7ff fd63 	bl	80045f4 <_free_r>
 8004b2e:	e7e9      	b.n	8004b04 <_realloc_r+0x1c>
 8004b30:	4635      	mov	r5, r6
 8004b32:	e7e7      	b.n	8004b04 <_realloc_r+0x1c>

08004b34 <__sfputc_r>:
 8004b34:	6893      	ldr	r3, [r2, #8]
 8004b36:	b410      	push	{r4}
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	6093      	str	r3, [r2, #8]
 8004b3e:	da07      	bge.n	8004b50 <__sfputc_r+0x1c>
 8004b40:	6994      	ldr	r4, [r2, #24]
 8004b42:	42a3      	cmp	r3, r4
 8004b44:	db01      	blt.n	8004b4a <__sfputc_r+0x16>
 8004b46:	290a      	cmp	r1, #10
 8004b48:	d102      	bne.n	8004b50 <__sfputc_r+0x1c>
 8004b4a:	bc10      	pop	{r4}
 8004b4c:	f000 b94a 	b.w	8004de4 <__swbuf_r>
 8004b50:	6813      	ldr	r3, [r2, #0]
 8004b52:	1c58      	adds	r0, r3, #1
 8004b54:	6010      	str	r0, [r2, #0]
 8004b56:	7019      	strb	r1, [r3, #0]
 8004b58:	4608      	mov	r0, r1
 8004b5a:	bc10      	pop	{r4}
 8004b5c:	4770      	bx	lr

08004b5e <__sfputs_r>:
 8004b5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b60:	4606      	mov	r6, r0
 8004b62:	460f      	mov	r7, r1
 8004b64:	4614      	mov	r4, r2
 8004b66:	18d5      	adds	r5, r2, r3
 8004b68:	42ac      	cmp	r4, r5
 8004b6a:	d101      	bne.n	8004b70 <__sfputs_r+0x12>
 8004b6c:	2000      	movs	r0, #0
 8004b6e:	e007      	b.n	8004b80 <__sfputs_r+0x22>
 8004b70:	463a      	mov	r2, r7
 8004b72:	4630      	mov	r0, r6
 8004b74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b78:	f7ff ffdc 	bl	8004b34 <__sfputc_r>
 8004b7c:	1c43      	adds	r3, r0, #1
 8004b7e:	d1f3      	bne.n	8004b68 <__sfputs_r+0xa>
 8004b80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004b84 <_vfiprintf_r>:
 8004b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b88:	460d      	mov	r5, r1
 8004b8a:	4614      	mov	r4, r2
 8004b8c:	4698      	mov	r8, r3
 8004b8e:	4606      	mov	r6, r0
 8004b90:	b09d      	sub	sp, #116	; 0x74
 8004b92:	b118      	cbz	r0, 8004b9c <_vfiprintf_r+0x18>
 8004b94:	6983      	ldr	r3, [r0, #24]
 8004b96:	b90b      	cbnz	r3, 8004b9c <_vfiprintf_r+0x18>
 8004b98:	f000 fb14 	bl	80051c4 <__sinit>
 8004b9c:	4b89      	ldr	r3, [pc, #548]	; (8004dc4 <_vfiprintf_r+0x240>)
 8004b9e:	429d      	cmp	r5, r3
 8004ba0:	d11b      	bne.n	8004bda <_vfiprintf_r+0x56>
 8004ba2:	6875      	ldr	r5, [r6, #4]
 8004ba4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ba6:	07d9      	lsls	r1, r3, #31
 8004ba8:	d405      	bmi.n	8004bb6 <_vfiprintf_r+0x32>
 8004baa:	89ab      	ldrh	r3, [r5, #12]
 8004bac:	059a      	lsls	r2, r3, #22
 8004bae:	d402      	bmi.n	8004bb6 <_vfiprintf_r+0x32>
 8004bb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004bb2:	f000 fba5 	bl	8005300 <__retarget_lock_acquire_recursive>
 8004bb6:	89ab      	ldrh	r3, [r5, #12]
 8004bb8:	071b      	lsls	r3, r3, #28
 8004bba:	d501      	bpl.n	8004bc0 <_vfiprintf_r+0x3c>
 8004bbc:	692b      	ldr	r3, [r5, #16]
 8004bbe:	b9eb      	cbnz	r3, 8004bfc <_vfiprintf_r+0x78>
 8004bc0:	4629      	mov	r1, r5
 8004bc2:	4630      	mov	r0, r6
 8004bc4:	f000 f96e 	bl	8004ea4 <__swsetup_r>
 8004bc8:	b1c0      	cbz	r0, 8004bfc <_vfiprintf_r+0x78>
 8004bca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004bcc:	07dc      	lsls	r4, r3, #31
 8004bce:	d50e      	bpl.n	8004bee <_vfiprintf_r+0x6a>
 8004bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8004bd4:	b01d      	add	sp, #116	; 0x74
 8004bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bda:	4b7b      	ldr	r3, [pc, #492]	; (8004dc8 <_vfiprintf_r+0x244>)
 8004bdc:	429d      	cmp	r5, r3
 8004bde:	d101      	bne.n	8004be4 <_vfiprintf_r+0x60>
 8004be0:	68b5      	ldr	r5, [r6, #8]
 8004be2:	e7df      	b.n	8004ba4 <_vfiprintf_r+0x20>
 8004be4:	4b79      	ldr	r3, [pc, #484]	; (8004dcc <_vfiprintf_r+0x248>)
 8004be6:	429d      	cmp	r5, r3
 8004be8:	bf08      	it	eq
 8004bea:	68f5      	ldreq	r5, [r6, #12]
 8004bec:	e7da      	b.n	8004ba4 <_vfiprintf_r+0x20>
 8004bee:	89ab      	ldrh	r3, [r5, #12]
 8004bf0:	0598      	lsls	r0, r3, #22
 8004bf2:	d4ed      	bmi.n	8004bd0 <_vfiprintf_r+0x4c>
 8004bf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004bf6:	f000 fb84 	bl	8005302 <__retarget_lock_release_recursive>
 8004bfa:	e7e9      	b.n	8004bd0 <_vfiprintf_r+0x4c>
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	9309      	str	r3, [sp, #36]	; 0x24
 8004c00:	2320      	movs	r3, #32
 8004c02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004c06:	2330      	movs	r3, #48	; 0x30
 8004c08:	f04f 0901 	mov.w	r9, #1
 8004c0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c10:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8004dd0 <_vfiprintf_r+0x24c>
 8004c14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004c18:	4623      	mov	r3, r4
 8004c1a:	469a      	mov	sl, r3
 8004c1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c20:	b10a      	cbz	r2, 8004c26 <_vfiprintf_r+0xa2>
 8004c22:	2a25      	cmp	r2, #37	; 0x25
 8004c24:	d1f9      	bne.n	8004c1a <_vfiprintf_r+0x96>
 8004c26:	ebba 0b04 	subs.w	fp, sl, r4
 8004c2a:	d00b      	beq.n	8004c44 <_vfiprintf_r+0xc0>
 8004c2c:	465b      	mov	r3, fp
 8004c2e:	4622      	mov	r2, r4
 8004c30:	4629      	mov	r1, r5
 8004c32:	4630      	mov	r0, r6
 8004c34:	f7ff ff93 	bl	8004b5e <__sfputs_r>
 8004c38:	3001      	adds	r0, #1
 8004c3a:	f000 80aa 	beq.w	8004d92 <_vfiprintf_r+0x20e>
 8004c3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c40:	445a      	add	r2, fp
 8004c42:	9209      	str	r2, [sp, #36]	; 0x24
 8004c44:	f89a 3000 	ldrb.w	r3, [sl]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	f000 80a2 	beq.w	8004d92 <_vfiprintf_r+0x20e>
 8004c4e:	2300      	movs	r3, #0
 8004c50:	f04f 32ff 	mov.w	r2, #4294967295
 8004c54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c58:	f10a 0a01 	add.w	sl, sl, #1
 8004c5c:	9304      	str	r3, [sp, #16]
 8004c5e:	9307      	str	r3, [sp, #28]
 8004c60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004c64:	931a      	str	r3, [sp, #104]	; 0x68
 8004c66:	4654      	mov	r4, sl
 8004c68:	2205      	movs	r2, #5
 8004c6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c6e:	4858      	ldr	r0, [pc, #352]	; (8004dd0 <_vfiprintf_r+0x24c>)
 8004c70:	f7ff f914 	bl	8003e9c <memchr>
 8004c74:	9a04      	ldr	r2, [sp, #16]
 8004c76:	b9d8      	cbnz	r0, 8004cb0 <_vfiprintf_r+0x12c>
 8004c78:	06d1      	lsls	r1, r2, #27
 8004c7a:	bf44      	itt	mi
 8004c7c:	2320      	movmi	r3, #32
 8004c7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c82:	0713      	lsls	r3, r2, #28
 8004c84:	bf44      	itt	mi
 8004c86:	232b      	movmi	r3, #43	; 0x2b
 8004c88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c8c:	f89a 3000 	ldrb.w	r3, [sl]
 8004c90:	2b2a      	cmp	r3, #42	; 0x2a
 8004c92:	d015      	beq.n	8004cc0 <_vfiprintf_r+0x13c>
 8004c94:	4654      	mov	r4, sl
 8004c96:	2000      	movs	r0, #0
 8004c98:	f04f 0c0a 	mov.w	ip, #10
 8004c9c:	9a07      	ldr	r2, [sp, #28]
 8004c9e:	4621      	mov	r1, r4
 8004ca0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ca4:	3b30      	subs	r3, #48	; 0x30
 8004ca6:	2b09      	cmp	r3, #9
 8004ca8:	d94e      	bls.n	8004d48 <_vfiprintf_r+0x1c4>
 8004caa:	b1b0      	cbz	r0, 8004cda <_vfiprintf_r+0x156>
 8004cac:	9207      	str	r2, [sp, #28]
 8004cae:	e014      	b.n	8004cda <_vfiprintf_r+0x156>
 8004cb0:	eba0 0308 	sub.w	r3, r0, r8
 8004cb4:	fa09 f303 	lsl.w	r3, r9, r3
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	46a2      	mov	sl, r4
 8004cbc:	9304      	str	r3, [sp, #16]
 8004cbe:	e7d2      	b.n	8004c66 <_vfiprintf_r+0xe2>
 8004cc0:	9b03      	ldr	r3, [sp, #12]
 8004cc2:	1d19      	adds	r1, r3, #4
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	9103      	str	r1, [sp, #12]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	bfbb      	ittet	lt
 8004ccc:	425b      	neglt	r3, r3
 8004cce:	f042 0202 	orrlt.w	r2, r2, #2
 8004cd2:	9307      	strge	r3, [sp, #28]
 8004cd4:	9307      	strlt	r3, [sp, #28]
 8004cd6:	bfb8      	it	lt
 8004cd8:	9204      	strlt	r2, [sp, #16]
 8004cda:	7823      	ldrb	r3, [r4, #0]
 8004cdc:	2b2e      	cmp	r3, #46	; 0x2e
 8004cde:	d10c      	bne.n	8004cfa <_vfiprintf_r+0x176>
 8004ce0:	7863      	ldrb	r3, [r4, #1]
 8004ce2:	2b2a      	cmp	r3, #42	; 0x2a
 8004ce4:	d135      	bne.n	8004d52 <_vfiprintf_r+0x1ce>
 8004ce6:	9b03      	ldr	r3, [sp, #12]
 8004ce8:	3402      	adds	r4, #2
 8004cea:	1d1a      	adds	r2, r3, #4
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	9203      	str	r2, [sp, #12]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	bfb8      	it	lt
 8004cf4:	f04f 33ff 	movlt.w	r3, #4294967295
 8004cf8:	9305      	str	r3, [sp, #20]
 8004cfa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004de0 <_vfiprintf_r+0x25c>
 8004cfe:	2203      	movs	r2, #3
 8004d00:	4650      	mov	r0, sl
 8004d02:	7821      	ldrb	r1, [r4, #0]
 8004d04:	f7ff f8ca 	bl	8003e9c <memchr>
 8004d08:	b140      	cbz	r0, 8004d1c <_vfiprintf_r+0x198>
 8004d0a:	2340      	movs	r3, #64	; 0x40
 8004d0c:	eba0 000a 	sub.w	r0, r0, sl
 8004d10:	fa03 f000 	lsl.w	r0, r3, r0
 8004d14:	9b04      	ldr	r3, [sp, #16]
 8004d16:	3401      	adds	r4, #1
 8004d18:	4303      	orrs	r3, r0
 8004d1a:	9304      	str	r3, [sp, #16]
 8004d1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d20:	2206      	movs	r2, #6
 8004d22:	482c      	ldr	r0, [pc, #176]	; (8004dd4 <_vfiprintf_r+0x250>)
 8004d24:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004d28:	f7ff f8b8 	bl	8003e9c <memchr>
 8004d2c:	2800      	cmp	r0, #0
 8004d2e:	d03f      	beq.n	8004db0 <_vfiprintf_r+0x22c>
 8004d30:	4b29      	ldr	r3, [pc, #164]	; (8004dd8 <_vfiprintf_r+0x254>)
 8004d32:	bb1b      	cbnz	r3, 8004d7c <_vfiprintf_r+0x1f8>
 8004d34:	9b03      	ldr	r3, [sp, #12]
 8004d36:	3307      	adds	r3, #7
 8004d38:	f023 0307 	bic.w	r3, r3, #7
 8004d3c:	3308      	adds	r3, #8
 8004d3e:	9303      	str	r3, [sp, #12]
 8004d40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d42:	443b      	add	r3, r7
 8004d44:	9309      	str	r3, [sp, #36]	; 0x24
 8004d46:	e767      	b.n	8004c18 <_vfiprintf_r+0x94>
 8004d48:	460c      	mov	r4, r1
 8004d4a:	2001      	movs	r0, #1
 8004d4c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d50:	e7a5      	b.n	8004c9e <_vfiprintf_r+0x11a>
 8004d52:	2300      	movs	r3, #0
 8004d54:	f04f 0c0a 	mov.w	ip, #10
 8004d58:	4619      	mov	r1, r3
 8004d5a:	3401      	adds	r4, #1
 8004d5c:	9305      	str	r3, [sp, #20]
 8004d5e:	4620      	mov	r0, r4
 8004d60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d64:	3a30      	subs	r2, #48	; 0x30
 8004d66:	2a09      	cmp	r2, #9
 8004d68:	d903      	bls.n	8004d72 <_vfiprintf_r+0x1ee>
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d0c5      	beq.n	8004cfa <_vfiprintf_r+0x176>
 8004d6e:	9105      	str	r1, [sp, #20]
 8004d70:	e7c3      	b.n	8004cfa <_vfiprintf_r+0x176>
 8004d72:	4604      	mov	r4, r0
 8004d74:	2301      	movs	r3, #1
 8004d76:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d7a:	e7f0      	b.n	8004d5e <_vfiprintf_r+0x1da>
 8004d7c:	ab03      	add	r3, sp, #12
 8004d7e:	9300      	str	r3, [sp, #0]
 8004d80:	462a      	mov	r2, r5
 8004d82:	4630      	mov	r0, r6
 8004d84:	4b15      	ldr	r3, [pc, #84]	; (8004ddc <_vfiprintf_r+0x258>)
 8004d86:	a904      	add	r1, sp, #16
 8004d88:	f7fd fe1e 	bl	80029c8 <_printf_float>
 8004d8c:	4607      	mov	r7, r0
 8004d8e:	1c78      	adds	r0, r7, #1
 8004d90:	d1d6      	bne.n	8004d40 <_vfiprintf_r+0x1bc>
 8004d92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004d94:	07d9      	lsls	r1, r3, #31
 8004d96:	d405      	bmi.n	8004da4 <_vfiprintf_r+0x220>
 8004d98:	89ab      	ldrh	r3, [r5, #12]
 8004d9a:	059a      	lsls	r2, r3, #22
 8004d9c:	d402      	bmi.n	8004da4 <_vfiprintf_r+0x220>
 8004d9e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004da0:	f000 faaf 	bl	8005302 <__retarget_lock_release_recursive>
 8004da4:	89ab      	ldrh	r3, [r5, #12]
 8004da6:	065b      	lsls	r3, r3, #25
 8004da8:	f53f af12 	bmi.w	8004bd0 <_vfiprintf_r+0x4c>
 8004dac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004dae:	e711      	b.n	8004bd4 <_vfiprintf_r+0x50>
 8004db0:	ab03      	add	r3, sp, #12
 8004db2:	9300      	str	r3, [sp, #0]
 8004db4:	462a      	mov	r2, r5
 8004db6:	4630      	mov	r0, r6
 8004db8:	4b08      	ldr	r3, [pc, #32]	; (8004ddc <_vfiprintf_r+0x258>)
 8004dba:	a904      	add	r1, sp, #16
 8004dbc:	f7fe f8a0 	bl	8002f00 <_printf_i>
 8004dc0:	e7e4      	b.n	8004d8c <_vfiprintf_r+0x208>
 8004dc2:	bf00      	nop
 8004dc4:	080059fc 	.word	0x080059fc
 8004dc8:	08005a1c 	.word	0x08005a1c
 8004dcc:	080059dc 	.word	0x080059dc
 8004dd0:	08005884 	.word	0x08005884
 8004dd4:	0800588e 	.word	0x0800588e
 8004dd8:	080029c9 	.word	0x080029c9
 8004ddc:	08004b5f 	.word	0x08004b5f
 8004de0:	0800588a 	.word	0x0800588a

08004de4 <__swbuf_r>:
 8004de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004de6:	460e      	mov	r6, r1
 8004de8:	4614      	mov	r4, r2
 8004dea:	4605      	mov	r5, r0
 8004dec:	b118      	cbz	r0, 8004df6 <__swbuf_r+0x12>
 8004dee:	6983      	ldr	r3, [r0, #24]
 8004df0:	b90b      	cbnz	r3, 8004df6 <__swbuf_r+0x12>
 8004df2:	f000 f9e7 	bl	80051c4 <__sinit>
 8004df6:	4b21      	ldr	r3, [pc, #132]	; (8004e7c <__swbuf_r+0x98>)
 8004df8:	429c      	cmp	r4, r3
 8004dfa:	d12b      	bne.n	8004e54 <__swbuf_r+0x70>
 8004dfc:	686c      	ldr	r4, [r5, #4]
 8004dfe:	69a3      	ldr	r3, [r4, #24]
 8004e00:	60a3      	str	r3, [r4, #8]
 8004e02:	89a3      	ldrh	r3, [r4, #12]
 8004e04:	071a      	lsls	r2, r3, #28
 8004e06:	d52f      	bpl.n	8004e68 <__swbuf_r+0x84>
 8004e08:	6923      	ldr	r3, [r4, #16]
 8004e0a:	b36b      	cbz	r3, 8004e68 <__swbuf_r+0x84>
 8004e0c:	6923      	ldr	r3, [r4, #16]
 8004e0e:	6820      	ldr	r0, [r4, #0]
 8004e10:	b2f6      	uxtb	r6, r6
 8004e12:	1ac0      	subs	r0, r0, r3
 8004e14:	6963      	ldr	r3, [r4, #20]
 8004e16:	4637      	mov	r7, r6
 8004e18:	4283      	cmp	r3, r0
 8004e1a:	dc04      	bgt.n	8004e26 <__swbuf_r+0x42>
 8004e1c:	4621      	mov	r1, r4
 8004e1e:	4628      	mov	r0, r5
 8004e20:	f000 f93c 	bl	800509c <_fflush_r>
 8004e24:	bb30      	cbnz	r0, 8004e74 <__swbuf_r+0x90>
 8004e26:	68a3      	ldr	r3, [r4, #8]
 8004e28:	3001      	adds	r0, #1
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	60a3      	str	r3, [r4, #8]
 8004e2e:	6823      	ldr	r3, [r4, #0]
 8004e30:	1c5a      	adds	r2, r3, #1
 8004e32:	6022      	str	r2, [r4, #0]
 8004e34:	701e      	strb	r6, [r3, #0]
 8004e36:	6963      	ldr	r3, [r4, #20]
 8004e38:	4283      	cmp	r3, r0
 8004e3a:	d004      	beq.n	8004e46 <__swbuf_r+0x62>
 8004e3c:	89a3      	ldrh	r3, [r4, #12]
 8004e3e:	07db      	lsls	r3, r3, #31
 8004e40:	d506      	bpl.n	8004e50 <__swbuf_r+0x6c>
 8004e42:	2e0a      	cmp	r6, #10
 8004e44:	d104      	bne.n	8004e50 <__swbuf_r+0x6c>
 8004e46:	4621      	mov	r1, r4
 8004e48:	4628      	mov	r0, r5
 8004e4a:	f000 f927 	bl	800509c <_fflush_r>
 8004e4e:	b988      	cbnz	r0, 8004e74 <__swbuf_r+0x90>
 8004e50:	4638      	mov	r0, r7
 8004e52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e54:	4b0a      	ldr	r3, [pc, #40]	; (8004e80 <__swbuf_r+0x9c>)
 8004e56:	429c      	cmp	r4, r3
 8004e58:	d101      	bne.n	8004e5e <__swbuf_r+0x7a>
 8004e5a:	68ac      	ldr	r4, [r5, #8]
 8004e5c:	e7cf      	b.n	8004dfe <__swbuf_r+0x1a>
 8004e5e:	4b09      	ldr	r3, [pc, #36]	; (8004e84 <__swbuf_r+0xa0>)
 8004e60:	429c      	cmp	r4, r3
 8004e62:	bf08      	it	eq
 8004e64:	68ec      	ldreq	r4, [r5, #12]
 8004e66:	e7ca      	b.n	8004dfe <__swbuf_r+0x1a>
 8004e68:	4621      	mov	r1, r4
 8004e6a:	4628      	mov	r0, r5
 8004e6c:	f000 f81a 	bl	8004ea4 <__swsetup_r>
 8004e70:	2800      	cmp	r0, #0
 8004e72:	d0cb      	beq.n	8004e0c <__swbuf_r+0x28>
 8004e74:	f04f 37ff 	mov.w	r7, #4294967295
 8004e78:	e7ea      	b.n	8004e50 <__swbuf_r+0x6c>
 8004e7a:	bf00      	nop
 8004e7c:	080059fc 	.word	0x080059fc
 8004e80:	08005a1c 	.word	0x08005a1c
 8004e84:	080059dc 	.word	0x080059dc

08004e88 <__ascii_wctomb>:
 8004e88:	4603      	mov	r3, r0
 8004e8a:	4608      	mov	r0, r1
 8004e8c:	b141      	cbz	r1, 8004ea0 <__ascii_wctomb+0x18>
 8004e8e:	2aff      	cmp	r2, #255	; 0xff
 8004e90:	d904      	bls.n	8004e9c <__ascii_wctomb+0x14>
 8004e92:	228a      	movs	r2, #138	; 0x8a
 8004e94:	f04f 30ff 	mov.w	r0, #4294967295
 8004e98:	601a      	str	r2, [r3, #0]
 8004e9a:	4770      	bx	lr
 8004e9c:	2001      	movs	r0, #1
 8004e9e:	700a      	strb	r2, [r1, #0]
 8004ea0:	4770      	bx	lr
	...

08004ea4 <__swsetup_r>:
 8004ea4:	4b32      	ldr	r3, [pc, #200]	; (8004f70 <__swsetup_r+0xcc>)
 8004ea6:	b570      	push	{r4, r5, r6, lr}
 8004ea8:	681d      	ldr	r5, [r3, #0]
 8004eaa:	4606      	mov	r6, r0
 8004eac:	460c      	mov	r4, r1
 8004eae:	b125      	cbz	r5, 8004eba <__swsetup_r+0x16>
 8004eb0:	69ab      	ldr	r3, [r5, #24]
 8004eb2:	b913      	cbnz	r3, 8004eba <__swsetup_r+0x16>
 8004eb4:	4628      	mov	r0, r5
 8004eb6:	f000 f985 	bl	80051c4 <__sinit>
 8004eba:	4b2e      	ldr	r3, [pc, #184]	; (8004f74 <__swsetup_r+0xd0>)
 8004ebc:	429c      	cmp	r4, r3
 8004ebe:	d10f      	bne.n	8004ee0 <__swsetup_r+0x3c>
 8004ec0:	686c      	ldr	r4, [r5, #4]
 8004ec2:	89a3      	ldrh	r3, [r4, #12]
 8004ec4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004ec8:	0719      	lsls	r1, r3, #28
 8004eca:	d42c      	bmi.n	8004f26 <__swsetup_r+0x82>
 8004ecc:	06dd      	lsls	r5, r3, #27
 8004ece:	d411      	bmi.n	8004ef4 <__swsetup_r+0x50>
 8004ed0:	2309      	movs	r3, #9
 8004ed2:	6033      	str	r3, [r6, #0]
 8004ed4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8004edc:	81a3      	strh	r3, [r4, #12]
 8004ede:	e03e      	b.n	8004f5e <__swsetup_r+0xba>
 8004ee0:	4b25      	ldr	r3, [pc, #148]	; (8004f78 <__swsetup_r+0xd4>)
 8004ee2:	429c      	cmp	r4, r3
 8004ee4:	d101      	bne.n	8004eea <__swsetup_r+0x46>
 8004ee6:	68ac      	ldr	r4, [r5, #8]
 8004ee8:	e7eb      	b.n	8004ec2 <__swsetup_r+0x1e>
 8004eea:	4b24      	ldr	r3, [pc, #144]	; (8004f7c <__swsetup_r+0xd8>)
 8004eec:	429c      	cmp	r4, r3
 8004eee:	bf08      	it	eq
 8004ef0:	68ec      	ldreq	r4, [r5, #12]
 8004ef2:	e7e6      	b.n	8004ec2 <__swsetup_r+0x1e>
 8004ef4:	0758      	lsls	r0, r3, #29
 8004ef6:	d512      	bpl.n	8004f1e <__swsetup_r+0x7a>
 8004ef8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004efa:	b141      	cbz	r1, 8004f0e <__swsetup_r+0x6a>
 8004efc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f00:	4299      	cmp	r1, r3
 8004f02:	d002      	beq.n	8004f0a <__swsetup_r+0x66>
 8004f04:	4630      	mov	r0, r6
 8004f06:	f7ff fb75 	bl	80045f4 <_free_r>
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	6363      	str	r3, [r4, #52]	; 0x34
 8004f0e:	89a3      	ldrh	r3, [r4, #12]
 8004f10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004f14:	81a3      	strh	r3, [r4, #12]
 8004f16:	2300      	movs	r3, #0
 8004f18:	6063      	str	r3, [r4, #4]
 8004f1a:	6923      	ldr	r3, [r4, #16]
 8004f1c:	6023      	str	r3, [r4, #0]
 8004f1e:	89a3      	ldrh	r3, [r4, #12]
 8004f20:	f043 0308 	orr.w	r3, r3, #8
 8004f24:	81a3      	strh	r3, [r4, #12]
 8004f26:	6923      	ldr	r3, [r4, #16]
 8004f28:	b94b      	cbnz	r3, 8004f3e <__swsetup_r+0x9a>
 8004f2a:	89a3      	ldrh	r3, [r4, #12]
 8004f2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004f30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f34:	d003      	beq.n	8004f3e <__swsetup_r+0x9a>
 8004f36:	4621      	mov	r1, r4
 8004f38:	4630      	mov	r0, r6
 8004f3a:	f000 fa07 	bl	800534c <__smakebuf_r>
 8004f3e:	89a0      	ldrh	r0, [r4, #12]
 8004f40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f44:	f010 0301 	ands.w	r3, r0, #1
 8004f48:	d00a      	beq.n	8004f60 <__swsetup_r+0xbc>
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	60a3      	str	r3, [r4, #8]
 8004f4e:	6963      	ldr	r3, [r4, #20]
 8004f50:	425b      	negs	r3, r3
 8004f52:	61a3      	str	r3, [r4, #24]
 8004f54:	6923      	ldr	r3, [r4, #16]
 8004f56:	b943      	cbnz	r3, 8004f6a <__swsetup_r+0xc6>
 8004f58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004f5c:	d1ba      	bne.n	8004ed4 <__swsetup_r+0x30>
 8004f5e:	bd70      	pop	{r4, r5, r6, pc}
 8004f60:	0781      	lsls	r1, r0, #30
 8004f62:	bf58      	it	pl
 8004f64:	6963      	ldrpl	r3, [r4, #20]
 8004f66:	60a3      	str	r3, [r4, #8]
 8004f68:	e7f4      	b.n	8004f54 <__swsetup_r+0xb0>
 8004f6a:	2000      	movs	r0, #0
 8004f6c:	e7f7      	b.n	8004f5e <__swsetup_r+0xba>
 8004f6e:	bf00      	nop
 8004f70:	2000000c 	.word	0x2000000c
 8004f74:	080059fc 	.word	0x080059fc
 8004f78:	08005a1c 	.word	0x08005a1c
 8004f7c:	080059dc 	.word	0x080059dc

08004f80 <abort>:
 8004f80:	2006      	movs	r0, #6
 8004f82:	b508      	push	{r3, lr}
 8004f84:	f000 fa52 	bl	800542c <raise>
 8004f88:	2001      	movs	r0, #1
 8004f8a:	f7fc f9a9 	bl	80012e0 <_exit>
	...

08004f90 <__sflush_r>:
 8004f90:	898a      	ldrh	r2, [r1, #12]
 8004f92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f96:	4605      	mov	r5, r0
 8004f98:	0710      	lsls	r0, r2, #28
 8004f9a:	460c      	mov	r4, r1
 8004f9c:	d458      	bmi.n	8005050 <__sflush_r+0xc0>
 8004f9e:	684b      	ldr	r3, [r1, #4]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	dc05      	bgt.n	8004fb0 <__sflush_r+0x20>
 8004fa4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	dc02      	bgt.n	8004fb0 <__sflush_r+0x20>
 8004faa:	2000      	movs	r0, #0
 8004fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004fb2:	2e00      	cmp	r6, #0
 8004fb4:	d0f9      	beq.n	8004faa <__sflush_r+0x1a>
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004fbc:	682f      	ldr	r7, [r5, #0]
 8004fbe:	602b      	str	r3, [r5, #0]
 8004fc0:	d032      	beq.n	8005028 <__sflush_r+0x98>
 8004fc2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004fc4:	89a3      	ldrh	r3, [r4, #12]
 8004fc6:	075a      	lsls	r2, r3, #29
 8004fc8:	d505      	bpl.n	8004fd6 <__sflush_r+0x46>
 8004fca:	6863      	ldr	r3, [r4, #4]
 8004fcc:	1ac0      	subs	r0, r0, r3
 8004fce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004fd0:	b10b      	cbz	r3, 8004fd6 <__sflush_r+0x46>
 8004fd2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004fd4:	1ac0      	subs	r0, r0, r3
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	4602      	mov	r2, r0
 8004fda:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004fdc:	4628      	mov	r0, r5
 8004fde:	6a21      	ldr	r1, [r4, #32]
 8004fe0:	47b0      	blx	r6
 8004fe2:	1c43      	adds	r3, r0, #1
 8004fe4:	89a3      	ldrh	r3, [r4, #12]
 8004fe6:	d106      	bne.n	8004ff6 <__sflush_r+0x66>
 8004fe8:	6829      	ldr	r1, [r5, #0]
 8004fea:	291d      	cmp	r1, #29
 8004fec:	d82c      	bhi.n	8005048 <__sflush_r+0xb8>
 8004fee:	4a2a      	ldr	r2, [pc, #168]	; (8005098 <__sflush_r+0x108>)
 8004ff0:	40ca      	lsrs	r2, r1
 8004ff2:	07d6      	lsls	r6, r2, #31
 8004ff4:	d528      	bpl.n	8005048 <__sflush_r+0xb8>
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	6062      	str	r2, [r4, #4]
 8004ffa:	6922      	ldr	r2, [r4, #16]
 8004ffc:	04d9      	lsls	r1, r3, #19
 8004ffe:	6022      	str	r2, [r4, #0]
 8005000:	d504      	bpl.n	800500c <__sflush_r+0x7c>
 8005002:	1c42      	adds	r2, r0, #1
 8005004:	d101      	bne.n	800500a <__sflush_r+0x7a>
 8005006:	682b      	ldr	r3, [r5, #0]
 8005008:	b903      	cbnz	r3, 800500c <__sflush_r+0x7c>
 800500a:	6560      	str	r0, [r4, #84]	; 0x54
 800500c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800500e:	602f      	str	r7, [r5, #0]
 8005010:	2900      	cmp	r1, #0
 8005012:	d0ca      	beq.n	8004faa <__sflush_r+0x1a>
 8005014:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005018:	4299      	cmp	r1, r3
 800501a:	d002      	beq.n	8005022 <__sflush_r+0x92>
 800501c:	4628      	mov	r0, r5
 800501e:	f7ff fae9 	bl	80045f4 <_free_r>
 8005022:	2000      	movs	r0, #0
 8005024:	6360      	str	r0, [r4, #52]	; 0x34
 8005026:	e7c1      	b.n	8004fac <__sflush_r+0x1c>
 8005028:	6a21      	ldr	r1, [r4, #32]
 800502a:	2301      	movs	r3, #1
 800502c:	4628      	mov	r0, r5
 800502e:	47b0      	blx	r6
 8005030:	1c41      	adds	r1, r0, #1
 8005032:	d1c7      	bne.n	8004fc4 <__sflush_r+0x34>
 8005034:	682b      	ldr	r3, [r5, #0]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d0c4      	beq.n	8004fc4 <__sflush_r+0x34>
 800503a:	2b1d      	cmp	r3, #29
 800503c:	d001      	beq.n	8005042 <__sflush_r+0xb2>
 800503e:	2b16      	cmp	r3, #22
 8005040:	d101      	bne.n	8005046 <__sflush_r+0xb6>
 8005042:	602f      	str	r7, [r5, #0]
 8005044:	e7b1      	b.n	8004faa <__sflush_r+0x1a>
 8005046:	89a3      	ldrh	r3, [r4, #12]
 8005048:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800504c:	81a3      	strh	r3, [r4, #12]
 800504e:	e7ad      	b.n	8004fac <__sflush_r+0x1c>
 8005050:	690f      	ldr	r7, [r1, #16]
 8005052:	2f00      	cmp	r7, #0
 8005054:	d0a9      	beq.n	8004faa <__sflush_r+0x1a>
 8005056:	0793      	lsls	r3, r2, #30
 8005058:	bf18      	it	ne
 800505a:	2300      	movne	r3, #0
 800505c:	680e      	ldr	r6, [r1, #0]
 800505e:	bf08      	it	eq
 8005060:	694b      	ldreq	r3, [r1, #20]
 8005062:	eba6 0807 	sub.w	r8, r6, r7
 8005066:	600f      	str	r7, [r1, #0]
 8005068:	608b      	str	r3, [r1, #8]
 800506a:	f1b8 0f00 	cmp.w	r8, #0
 800506e:	dd9c      	ble.n	8004faa <__sflush_r+0x1a>
 8005070:	4643      	mov	r3, r8
 8005072:	463a      	mov	r2, r7
 8005074:	4628      	mov	r0, r5
 8005076:	6a21      	ldr	r1, [r4, #32]
 8005078:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800507a:	47b0      	blx	r6
 800507c:	2800      	cmp	r0, #0
 800507e:	dc06      	bgt.n	800508e <__sflush_r+0xfe>
 8005080:	89a3      	ldrh	r3, [r4, #12]
 8005082:	f04f 30ff 	mov.w	r0, #4294967295
 8005086:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800508a:	81a3      	strh	r3, [r4, #12]
 800508c:	e78e      	b.n	8004fac <__sflush_r+0x1c>
 800508e:	4407      	add	r7, r0
 8005090:	eba8 0800 	sub.w	r8, r8, r0
 8005094:	e7e9      	b.n	800506a <__sflush_r+0xda>
 8005096:	bf00      	nop
 8005098:	20400001 	.word	0x20400001

0800509c <_fflush_r>:
 800509c:	b538      	push	{r3, r4, r5, lr}
 800509e:	690b      	ldr	r3, [r1, #16]
 80050a0:	4605      	mov	r5, r0
 80050a2:	460c      	mov	r4, r1
 80050a4:	b913      	cbnz	r3, 80050ac <_fflush_r+0x10>
 80050a6:	2500      	movs	r5, #0
 80050a8:	4628      	mov	r0, r5
 80050aa:	bd38      	pop	{r3, r4, r5, pc}
 80050ac:	b118      	cbz	r0, 80050b6 <_fflush_r+0x1a>
 80050ae:	6983      	ldr	r3, [r0, #24]
 80050b0:	b90b      	cbnz	r3, 80050b6 <_fflush_r+0x1a>
 80050b2:	f000 f887 	bl	80051c4 <__sinit>
 80050b6:	4b14      	ldr	r3, [pc, #80]	; (8005108 <_fflush_r+0x6c>)
 80050b8:	429c      	cmp	r4, r3
 80050ba:	d11b      	bne.n	80050f4 <_fflush_r+0x58>
 80050bc:	686c      	ldr	r4, [r5, #4]
 80050be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d0ef      	beq.n	80050a6 <_fflush_r+0xa>
 80050c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80050c8:	07d0      	lsls	r0, r2, #31
 80050ca:	d404      	bmi.n	80050d6 <_fflush_r+0x3a>
 80050cc:	0599      	lsls	r1, r3, #22
 80050ce:	d402      	bmi.n	80050d6 <_fflush_r+0x3a>
 80050d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80050d2:	f000 f915 	bl	8005300 <__retarget_lock_acquire_recursive>
 80050d6:	4628      	mov	r0, r5
 80050d8:	4621      	mov	r1, r4
 80050da:	f7ff ff59 	bl	8004f90 <__sflush_r>
 80050de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80050e0:	4605      	mov	r5, r0
 80050e2:	07da      	lsls	r2, r3, #31
 80050e4:	d4e0      	bmi.n	80050a8 <_fflush_r+0xc>
 80050e6:	89a3      	ldrh	r3, [r4, #12]
 80050e8:	059b      	lsls	r3, r3, #22
 80050ea:	d4dd      	bmi.n	80050a8 <_fflush_r+0xc>
 80050ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80050ee:	f000 f908 	bl	8005302 <__retarget_lock_release_recursive>
 80050f2:	e7d9      	b.n	80050a8 <_fflush_r+0xc>
 80050f4:	4b05      	ldr	r3, [pc, #20]	; (800510c <_fflush_r+0x70>)
 80050f6:	429c      	cmp	r4, r3
 80050f8:	d101      	bne.n	80050fe <_fflush_r+0x62>
 80050fa:	68ac      	ldr	r4, [r5, #8]
 80050fc:	e7df      	b.n	80050be <_fflush_r+0x22>
 80050fe:	4b04      	ldr	r3, [pc, #16]	; (8005110 <_fflush_r+0x74>)
 8005100:	429c      	cmp	r4, r3
 8005102:	bf08      	it	eq
 8005104:	68ec      	ldreq	r4, [r5, #12]
 8005106:	e7da      	b.n	80050be <_fflush_r+0x22>
 8005108:	080059fc 	.word	0x080059fc
 800510c:	08005a1c 	.word	0x08005a1c
 8005110:	080059dc 	.word	0x080059dc

08005114 <std>:
 8005114:	2300      	movs	r3, #0
 8005116:	b510      	push	{r4, lr}
 8005118:	4604      	mov	r4, r0
 800511a:	e9c0 3300 	strd	r3, r3, [r0]
 800511e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005122:	6083      	str	r3, [r0, #8]
 8005124:	8181      	strh	r1, [r0, #12]
 8005126:	6643      	str	r3, [r0, #100]	; 0x64
 8005128:	81c2      	strh	r2, [r0, #14]
 800512a:	6183      	str	r3, [r0, #24]
 800512c:	4619      	mov	r1, r3
 800512e:	2208      	movs	r2, #8
 8005130:	305c      	adds	r0, #92	; 0x5c
 8005132:	f7fd fba3 	bl	800287c <memset>
 8005136:	4b05      	ldr	r3, [pc, #20]	; (800514c <std+0x38>)
 8005138:	6224      	str	r4, [r4, #32]
 800513a:	6263      	str	r3, [r4, #36]	; 0x24
 800513c:	4b04      	ldr	r3, [pc, #16]	; (8005150 <std+0x3c>)
 800513e:	62a3      	str	r3, [r4, #40]	; 0x28
 8005140:	4b04      	ldr	r3, [pc, #16]	; (8005154 <std+0x40>)
 8005142:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005144:	4b04      	ldr	r3, [pc, #16]	; (8005158 <std+0x44>)
 8005146:	6323      	str	r3, [r4, #48]	; 0x30
 8005148:	bd10      	pop	{r4, pc}
 800514a:	bf00      	nop
 800514c:	08005465 	.word	0x08005465
 8005150:	08005487 	.word	0x08005487
 8005154:	080054bf 	.word	0x080054bf
 8005158:	080054e3 	.word	0x080054e3

0800515c <_cleanup_r>:
 800515c:	4901      	ldr	r1, [pc, #4]	; (8005164 <_cleanup_r+0x8>)
 800515e:	f000 b8af 	b.w	80052c0 <_fwalk_reent>
 8005162:	bf00      	nop
 8005164:	0800509d 	.word	0x0800509d

08005168 <__sfmoreglue>:
 8005168:	b570      	push	{r4, r5, r6, lr}
 800516a:	2568      	movs	r5, #104	; 0x68
 800516c:	1e4a      	subs	r2, r1, #1
 800516e:	4355      	muls	r5, r2
 8005170:	460e      	mov	r6, r1
 8005172:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005176:	f7ff fa89 	bl	800468c <_malloc_r>
 800517a:	4604      	mov	r4, r0
 800517c:	b140      	cbz	r0, 8005190 <__sfmoreglue+0x28>
 800517e:	2100      	movs	r1, #0
 8005180:	e9c0 1600 	strd	r1, r6, [r0]
 8005184:	300c      	adds	r0, #12
 8005186:	60a0      	str	r0, [r4, #8]
 8005188:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800518c:	f7fd fb76 	bl	800287c <memset>
 8005190:	4620      	mov	r0, r4
 8005192:	bd70      	pop	{r4, r5, r6, pc}

08005194 <__sfp_lock_acquire>:
 8005194:	4801      	ldr	r0, [pc, #4]	; (800519c <__sfp_lock_acquire+0x8>)
 8005196:	f000 b8b3 	b.w	8005300 <__retarget_lock_acquire_recursive>
 800519a:	bf00      	nop
 800519c:	20000270 	.word	0x20000270

080051a0 <__sfp_lock_release>:
 80051a0:	4801      	ldr	r0, [pc, #4]	; (80051a8 <__sfp_lock_release+0x8>)
 80051a2:	f000 b8ae 	b.w	8005302 <__retarget_lock_release_recursive>
 80051a6:	bf00      	nop
 80051a8:	20000270 	.word	0x20000270

080051ac <__sinit_lock_acquire>:
 80051ac:	4801      	ldr	r0, [pc, #4]	; (80051b4 <__sinit_lock_acquire+0x8>)
 80051ae:	f000 b8a7 	b.w	8005300 <__retarget_lock_acquire_recursive>
 80051b2:	bf00      	nop
 80051b4:	2000026b 	.word	0x2000026b

080051b8 <__sinit_lock_release>:
 80051b8:	4801      	ldr	r0, [pc, #4]	; (80051c0 <__sinit_lock_release+0x8>)
 80051ba:	f000 b8a2 	b.w	8005302 <__retarget_lock_release_recursive>
 80051be:	bf00      	nop
 80051c0:	2000026b 	.word	0x2000026b

080051c4 <__sinit>:
 80051c4:	b510      	push	{r4, lr}
 80051c6:	4604      	mov	r4, r0
 80051c8:	f7ff fff0 	bl	80051ac <__sinit_lock_acquire>
 80051cc:	69a3      	ldr	r3, [r4, #24]
 80051ce:	b11b      	cbz	r3, 80051d8 <__sinit+0x14>
 80051d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051d4:	f7ff bff0 	b.w	80051b8 <__sinit_lock_release>
 80051d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80051dc:	6523      	str	r3, [r4, #80]	; 0x50
 80051de:	4b13      	ldr	r3, [pc, #76]	; (800522c <__sinit+0x68>)
 80051e0:	4a13      	ldr	r2, [pc, #76]	; (8005230 <__sinit+0x6c>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	62a2      	str	r2, [r4, #40]	; 0x28
 80051e6:	42a3      	cmp	r3, r4
 80051e8:	bf08      	it	eq
 80051ea:	2301      	moveq	r3, #1
 80051ec:	4620      	mov	r0, r4
 80051ee:	bf08      	it	eq
 80051f0:	61a3      	streq	r3, [r4, #24]
 80051f2:	f000 f81f 	bl	8005234 <__sfp>
 80051f6:	6060      	str	r0, [r4, #4]
 80051f8:	4620      	mov	r0, r4
 80051fa:	f000 f81b 	bl	8005234 <__sfp>
 80051fe:	60a0      	str	r0, [r4, #8]
 8005200:	4620      	mov	r0, r4
 8005202:	f000 f817 	bl	8005234 <__sfp>
 8005206:	2200      	movs	r2, #0
 8005208:	2104      	movs	r1, #4
 800520a:	60e0      	str	r0, [r4, #12]
 800520c:	6860      	ldr	r0, [r4, #4]
 800520e:	f7ff ff81 	bl	8005114 <std>
 8005212:	2201      	movs	r2, #1
 8005214:	2109      	movs	r1, #9
 8005216:	68a0      	ldr	r0, [r4, #8]
 8005218:	f7ff ff7c 	bl	8005114 <std>
 800521c:	2202      	movs	r2, #2
 800521e:	2112      	movs	r1, #18
 8005220:	68e0      	ldr	r0, [r4, #12]
 8005222:	f7ff ff77 	bl	8005114 <std>
 8005226:	2301      	movs	r3, #1
 8005228:	61a3      	str	r3, [r4, #24]
 800522a:	e7d1      	b.n	80051d0 <__sinit+0xc>
 800522c:	08005658 	.word	0x08005658
 8005230:	0800515d 	.word	0x0800515d

08005234 <__sfp>:
 8005234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005236:	4607      	mov	r7, r0
 8005238:	f7ff ffac 	bl	8005194 <__sfp_lock_acquire>
 800523c:	4b1e      	ldr	r3, [pc, #120]	; (80052b8 <__sfp+0x84>)
 800523e:	681e      	ldr	r6, [r3, #0]
 8005240:	69b3      	ldr	r3, [r6, #24]
 8005242:	b913      	cbnz	r3, 800524a <__sfp+0x16>
 8005244:	4630      	mov	r0, r6
 8005246:	f7ff ffbd 	bl	80051c4 <__sinit>
 800524a:	3648      	adds	r6, #72	; 0x48
 800524c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005250:	3b01      	subs	r3, #1
 8005252:	d503      	bpl.n	800525c <__sfp+0x28>
 8005254:	6833      	ldr	r3, [r6, #0]
 8005256:	b30b      	cbz	r3, 800529c <__sfp+0x68>
 8005258:	6836      	ldr	r6, [r6, #0]
 800525a:	e7f7      	b.n	800524c <__sfp+0x18>
 800525c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005260:	b9d5      	cbnz	r5, 8005298 <__sfp+0x64>
 8005262:	4b16      	ldr	r3, [pc, #88]	; (80052bc <__sfp+0x88>)
 8005264:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005268:	60e3      	str	r3, [r4, #12]
 800526a:	6665      	str	r5, [r4, #100]	; 0x64
 800526c:	f000 f847 	bl	80052fe <__retarget_lock_init_recursive>
 8005270:	f7ff ff96 	bl	80051a0 <__sfp_lock_release>
 8005274:	2208      	movs	r2, #8
 8005276:	4629      	mov	r1, r5
 8005278:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800527c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005280:	6025      	str	r5, [r4, #0]
 8005282:	61a5      	str	r5, [r4, #24]
 8005284:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005288:	f7fd faf8 	bl	800287c <memset>
 800528c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005290:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005294:	4620      	mov	r0, r4
 8005296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005298:	3468      	adds	r4, #104	; 0x68
 800529a:	e7d9      	b.n	8005250 <__sfp+0x1c>
 800529c:	2104      	movs	r1, #4
 800529e:	4638      	mov	r0, r7
 80052a0:	f7ff ff62 	bl	8005168 <__sfmoreglue>
 80052a4:	4604      	mov	r4, r0
 80052a6:	6030      	str	r0, [r6, #0]
 80052a8:	2800      	cmp	r0, #0
 80052aa:	d1d5      	bne.n	8005258 <__sfp+0x24>
 80052ac:	f7ff ff78 	bl	80051a0 <__sfp_lock_release>
 80052b0:	230c      	movs	r3, #12
 80052b2:	603b      	str	r3, [r7, #0]
 80052b4:	e7ee      	b.n	8005294 <__sfp+0x60>
 80052b6:	bf00      	nop
 80052b8:	08005658 	.word	0x08005658
 80052bc:	ffff0001 	.word	0xffff0001

080052c0 <_fwalk_reent>:
 80052c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052c4:	4606      	mov	r6, r0
 80052c6:	4688      	mov	r8, r1
 80052c8:	2700      	movs	r7, #0
 80052ca:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80052ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80052d2:	f1b9 0901 	subs.w	r9, r9, #1
 80052d6:	d505      	bpl.n	80052e4 <_fwalk_reent+0x24>
 80052d8:	6824      	ldr	r4, [r4, #0]
 80052da:	2c00      	cmp	r4, #0
 80052dc:	d1f7      	bne.n	80052ce <_fwalk_reent+0xe>
 80052de:	4638      	mov	r0, r7
 80052e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052e4:	89ab      	ldrh	r3, [r5, #12]
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d907      	bls.n	80052fa <_fwalk_reent+0x3a>
 80052ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80052ee:	3301      	adds	r3, #1
 80052f0:	d003      	beq.n	80052fa <_fwalk_reent+0x3a>
 80052f2:	4629      	mov	r1, r5
 80052f4:	4630      	mov	r0, r6
 80052f6:	47c0      	blx	r8
 80052f8:	4307      	orrs	r7, r0
 80052fa:	3568      	adds	r5, #104	; 0x68
 80052fc:	e7e9      	b.n	80052d2 <_fwalk_reent+0x12>

080052fe <__retarget_lock_init_recursive>:
 80052fe:	4770      	bx	lr

08005300 <__retarget_lock_acquire_recursive>:
 8005300:	4770      	bx	lr

08005302 <__retarget_lock_release_recursive>:
 8005302:	4770      	bx	lr

08005304 <__swhatbuf_r>:
 8005304:	b570      	push	{r4, r5, r6, lr}
 8005306:	460e      	mov	r6, r1
 8005308:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800530c:	4614      	mov	r4, r2
 800530e:	2900      	cmp	r1, #0
 8005310:	461d      	mov	r5, r3
 8005312:	b096      	sub	sp, #88	; 0x58
 8005314:	da07      	bge.n	8005326 <__swhatbuf_r+0x22>
 8005316:	2300      	movs	r3, #0
 8005318:	602b      	str	r3, [r5, #0]
 800531a:	89b3      	ldrh	r3, [r6, #12]
 800531c:	061a      	lsls	r2, r3, #24
 800531e:	d410      	bmi.n	8005342 <__swhatbuf_r+0x3e>
 8005320:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005324:	e00e      	b.n	8005344 <__swhatbuf_r+0x40>
 8005326:	466a      	mov	r2, sp
 8005328:	f000 f902 	bl	8005530 <_fstat_r>
 800532c:	2800      	cmp	r0, #0
 800532e:	dbf2      	blt.n	8005316 <__swhatbuf_r+0x12>
 8005330:	9a01      	ldr	r2, [sp, #4]
 8005332:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005336:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800533a:	425a      	negs	r2, r3
 800533c:	415a      	adcs	r2, r3
 800533e:	602a      	str	r2, [r5, #0]
 8005340:	e7ee      	b.n	8005320 <__swhatbuf_r+0x1c>
 8005342:	2340      	movs	r3, #64	; 0x40
 8005344:	2000      	movs	r0, #0
 8005346:	6023      	str	r3, [r4, #0]
 8005348:	b016      	add	sp, #88	; 0x58
 800534a:	bd70      	pop	{r4, r5, r6, pc}

0800534c <__smakebuf_r>:
 800534c:	898b      	ldrh	r3, [r1, #12]
 800534e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005350:	079d      	lsls	r5, r3, #30
 8005352:	4606      	mov	r6, r0
 8005354:	460c      	mov	r4, r1
 8005356:	d507      	bpl.n	8005368 <__smakebuf_r+0x1c>
 8005358:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800535c:	6023      	str	r3, [r4, #0]
 800535e:	6123      	str	r3, [r4, #16]
 8005360:	2301      	movs	r3, #1
 8005362:	6163      	str	r3, [r4, #20]
 8005364:	b002      	add	sp, #8
 8005366:	bd70      	pop	{r4, r5, r6, pc}
 8005368:	466a      	mov	r2, sp
 800536a:	ab01      	add	r3, sp, #4
 800536c:	f7ff ffca 	bl	8005304 <__swhatbuf_r>
 8005370:	9900      	ldr	r1, [sp, #0]
 8005372:	4605      	mov	r5, r0
 8005374:	4630      	mov	r0, r6
 8005376:	f7ff f989 	bl	800468c <_malloc_r>
 800537a:	b948      	cbnz	r0, 8005390 <__smakebuf_r+0x44>
 800537c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005380:	059a      	lsls	r2, r3, #22
 8005382:	d4ef      	bmi.n	8005364 <__smakebuf_r+0x18>
 8005384:	f023 0303 	bic.w	r3, r3, #3
 8005388:	f043 0302 	orr.w	r3, r3, #2
 800538c:	81a3      	strh	r3, [r4, #12]
 800538e:	e7e3      	b.n	8005358 <__smakebuf_r+0xc>
 8005390:	4b0d      	ldr	r3, [pc, #52]	; (80053c8 <__smakebuf_r+0x7c>)
 8005392:	62b3      	str	r3, [r6, #40]	; 0x28
 8005394:	89a3      	ldrh	r3, [r4, #12]
 8005396:	6020      	str	r0, [r4, #0]
 8005398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800539c:	81a3      	strh	r3, [r4, #12]
 800539e:	9b00      	ldr	r3, [sp, #0]
 80053a0:	6120      	str	r0, [r4, #16]
 80053a2:	6163      	str	r3, [r4, #20]
 80053a4:	9b01      	ldr	r3, [sp, #4]
 80053a6:	b15b      	cbz	r3, 80053c0 <__smakebuf_r+0x74>
 80053a8:	4630      	mov	r0, r6
 80053aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80053ae:	f000 f8d1 	bl	8005554 <_isatty_r>
 80053b2:	b128      	cbz	r0, 80053c0 <__smakebuf_r+0x74>
 80053b4:	89a3      	ldrh	r3, [r4, #12]
 80053b6:	f023 0303 	bic.w	r3, r3, #3
 80053ba:	f043 0301 	orr.w	r3, r3, #1
 80053be:	81a3      	strh	r3, [r4, #12]
 80053c0:	89a0      	ldrh	r0, [r4, #12]
 80053c2:	4305      	orrs	r5, r0
 80053c4:	81a5      	strh	r5, [r4, #12]
 80053c6:	e7cd      	b.n	8005364 <__smakebuf_r+0x18>
 80053c8:	0800515d 	.word	0x0800515d

080053cc <_malloc_usable_size_r>:
 80053cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053d0:	1f18      	subs	r0, r3, #4
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	bfbc      	itt	lt
 80053d6:	580b      	ldrlt	r3, [r1, r0]
 80053d8:	18c0      	addlt	r0, r0, r3
 80053da:	4770      	bx	lr

080053dc <_raise_r>:
 80053dc:	291f      	cmp	r1, #31
 80053de:	b538      	push	{r3, r4, r5, lr}
 80053e0:	4604      	mov	r4, r0
 80053e2:	460d      	mov	r5, r1
 80053e4:	d904      	bls.n	80053f0 <_raise_r+0x14>
 80053e6:	2316      	movs	r3, #22
 80053e8:	6003      	str	r3, [r0, #0]
 80053ea:	f04f 30ff 	mov.w	r0, #4294967295
 80053ee:	bd38      	pop	{r3, r4, r5, pc}
 80053f0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80053f2:	b112      	cbz	r2, 80053fa <_raise_r+0x1e>
 80053f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80053f8:	b94b      	cbnz	r3, 800540e <_raise_r+0x32>
 80053fa:	4620      	mov	r0, r4
 80053fc:	f000 f830 	bl	8005460 <_getpid_r>
 8005400:	462a      	mov	r2, r5
 8005402:	4601      	mov	r1, r0
 8005404:	4620      	mov	r0, r4
 8005406:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800540a:	f000 b817 	b.w	800543c <_kill_r>
 800540e:	2b01      	cmp	r3, #1
 8005410:	d00a      	beq.n	8005428 <_raise_r+0x4c>
 8005412:	1c59      	adds	r1, r3, #1
 8005414:	d103      	bne.n	800541e <_raise_r+0x42>
 8005416:	2316      	movs	r3, #22
 8005418:	6003      	str	r3, [r0, #0]
 800541a:	2001      	movs	r0, #1
 800541c:	e7e7      	b.n	80053ee <_raise_r+0x12>
 800541e:	2400      	movs	r4, #0
 8005420:	4628      	mov	r0, r5
 8005422:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005426:	4798      	blx	r3
 8005428:	2000      	movs	r0, #0
 800542a:	e7e0      	b.n	80053ee <_raise_r+0x12>

0800542c <raise>:
 800542c:	4b02      	ldr	r3, [pc, #8]	; (8005438 <raise+0xc>)
 800542e:	4601      	mov	r1, r0
 8005430:	6818      	ldr	r0, [r3, #0]
 8005432:	f7ff bfd3 	b.w	80053dc <_raise_r>
 8005436:	bf00      	nop
 8005438:	2000000c 	.word	0x2000000c

0800543c <_kill_r>:
 800543c:	b538      	push	{r3, r4, r5, lr}
 800543e:	2300      	movs	r3, #0
 8005440:	4d06      	ldr	r5, [pc, #24]	; (800545c <_kill_r+0x20>)
 8005442:	4604      	mov	r4, r0
 8005444:	4608      	mov	r0, r1
 8005446:	4611      	mov	r1, r2
 8005448:	602b      	str	r3, [r5, #0]
 800544a:	f7fb ff39 	bl	80012c0 <_kill>
 800544e:	1c43      	adds	r3, r0, #1
 8005450:	d102      	bne.n	8005458 <_kill_r+0x1c>
 8005452:	682b      	ldr	r3, [r5, #0]
 8005454:	b103      	cbz	r3, 8005458 <_kill_r+0x1c>
 8005456:	6023      	str	r3, [r4, #0]
 8005458:	bd38      	pop	{r3, r4, r5, pc}
 800545a:	bf00      	nop
 800545c:	20000264 	.word	0x20000264

08005460 <_getpid_r>:
 8005460:	f7fb bf27 	b.w	80012b2 <_getpid>

08005464 <__sread>:
 8005464:	b510      	push	{r4, lr}
 8005466:	460c      	mov	r4, r1
 8005468:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800546c:	f000 f894 	bl	8005598 <_read_r>
 8005470:	2800      	cmp	r0, #0
 8005472:	bfab      	itete	ge
 8005474:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005476:	89a3      	ldrhlt	r3, [r4, #12]
 8005478:	181b      	addge	r3, r3, r0
 800547a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800547e:	bfac      	ite	ge
 8005480:	6563      	strge	r3, [r4, #84]	; 0x54
 8005482:	81a3      	strhlt	r3, [r4, #12]
 8005484:	bd10      	pop	{r4, pc}

08005486 <__swrite>:
 8005486:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800548a:	461f      	mov	r7, r3
 800548c:	898b      	ldrh	r3, [r1, #12]
 800548e:	4605      	mov	r5, r0
 8005490:	05db      	lsls	r3, r3, #23
 8005492:	460c      	mov	r4, r1
 8005494:	4616      	mov	r6, r2
 8005496:	d505      	bpl.n	80054a4 <__swrite+0x1e>
 8005498:	2302      	movs	r3, #2
 800549a:	2200      	movs	r2, #0
 800549c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054a0:	f000 f868 	bl	8005574 <_lseek_r>
 80054a4:	89a3      	ldrh	r3, [r4, #12]
 80054a6:	4632      	mov	r2, r6
 80054a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054ac:	81a3      	strh	r3, [r4, #12]
 80054ae:	4628      	mov	r0, r5
 80054b0:	463b      	mov	r3, r7
 80054b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054ba:	f000 b817 	b.w	80054ec <_write_r>

080054be <__sseek>:
 80054be:	b510      	push	{r4, lr}
 80054c0:	460c      	mov	r4, r1
 80054c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054c6:	f000 f855 	bl	8005574 <_lseek_r>
 80054ca:	1c43      	adds	r3, r0, #1
 80054cc:	89a3      	ldrh	r3, [r4, #12]
 80054ce:	bf15      	itete	ne
 80054d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80054d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80054d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80054da:	81a3      	strheq	r3, [r4, #12]
 80054dc:	bf18      	it	ne
 80054de:	81a3      	strhne	r3, [r4, #12]
 80054e0:	bd10      	pop	{r4, pc}

080054e2 <__sclose>:
 80054e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054e6:	f000 b813 	b.w	8005510 <_close_r>
	...

080054ec <_write_r>:
 80054ec:	b538      	push	{r3, r4, r5, lr}
 80054ee:	4604      	mov	r4, r0
 80054f0:	4608      	mov	r0, r1
 80054f2:	4611      	mov	r1, r2
 80054f4:	2200      	movs	r2, #0
 80054f6:	4d05      	ldr	r5, [pc, #20]	; (800550c <_write_r+0x20>)
 80054f8:	602a      	str	r2, [r5, #0]
 80054fa:	461a      	mov	r2, r3
 80054fc:	f7fb ff17 	bl	800132e <_write>
 8005500:	1c43      	adds	r3, r0, #1
 8005502:	d102      	bne.n	800550a <_write_r+0x1e>
 8005504:	682b      	ldr	r3, [r5, #0]
 8005506:	b103      	cbz	r3, 800550a <_write_r+0x1e>
 8005508:	6023      	str	r3, [r4, #0]
 800550a:	bd38      	pop	{r3, r4, r5, pc}
 800550c:	20000264 	.word	0x20000264

08005510 <_close_r>:
 8005510:	b538      	push	{r3, r4, r5, lr}
 8005512:	2300      	movs	r3, #0
 8005514:	4d05      	ldr	r5, [pc, #20]	; (800552c <_close_r+0x1c>)
 8005516:	4604      	mov	r4, r0
 8005518:	4608      	mov	r0, r1
 800551a:	602b      	str	r3, [r5, #0]
 800551c:	f7fb ff23 	bl	8001366 <_close>
 8005520:	1c43      	adds	r3, r0, #1
 8005522:	d102      	bne.n	800552a <_close_r+0x1a>
 8005524:	682b      	ldr	r3, [r5, #0]
 8005526:	b103      	cbz	r3, 800552a <_close_r+0x1a>
 8005528:	6023      	str	r3, [r4, #0]
 800552a:	bd38      	pop	{r3, r4, r5, pc}
 800552c:	20000264 	.word	0x20000264

08005530 <_fstat_r>:
 8005530:	b538      	push	{r3, r4, r5, lr}
 8005532:	2300      	movs	r3, #0
 8005534:	4d06      	ldr	r5, [pc, #24]	; (8005550 <_fstat_r+0x20>)
 8005536:	4604      	mov	r4, r0
 8005538:	4608      	mov	r0, r1
 800553a:	4611      	mov	r1, r2
 800553c:	602b      	str	r3, [r5, #0]
 800553e:	f7fb ff1d 	bl	800137c <_fstat>
 8005542:	1c43      	adds	r3, r0, #1
 8005544:	d102      	bne.n	800554c <_fstat_r+0x1c>
 8005546:	682b      	ldr	r3, [r5, #0]
 8005548:	b103      	cbz	r3, 800554c <_fstat_r+0x1c>
 800554a:	6023      	str	r3, [r4, #0]
 800554c:	bd38      	pop	{r3, r4, r5, pc}
 800554e:	bf00      	nop
 8005550:	20000264 	.word	0x20000264

08005554 <_isatty_r>:
 8005554:	b538      	push	{r3, r4, r5, lr}
 8005556:	2300      	movs	r3, #0
 8005558:	4d05      	ldr	r5, [pc, #20]	; (8005570 <_isatty_r+0x1c>)
 800555a:	4604      	mov	r4, r0
 800555c:	4608      	mov	r0, r1
 800555e:	602b      	str	r3, [r5, #0]
 8005560:	f7fb ff1b 	bl	800139a <_isatty>
 8005564:	1c43      	adds	r3, r0, #1
 8005566:	d102      	bne.n	800556e <_isatty_r+0x1a>
 8005568:	682b      	ldr	r3, [r5, #0]
 800556a:	b103      	cbz	r3, 800556e <_isatty_r+0x1a>
 800556c:	6023      	str	r3, [r4, #0]
 800556e:	bd38      	pop	{r3, r4, r5, pc}
 8005570:	20000264 	.word	0x20000264

08005574 <_lseek_r>:
 8005574:	b538      	push	{r3, r4, r5, lr}
 8005576:	4604      	mov	r4, r0
 8005578:	4608      	mov	r0, r1
 800557a:	4611      	mov	r1, r2
 800557c:	2200      	movs	r2, #0
 800557e:	4d05      	ldr	r5, [pc, #20]	; (8005594 <_lseek_r+0x20>)
 8005580:	602a      	str	r2, [r5, #0]
 8005582:	461a      	mov	r2, r3
 8005584:	f7fb ff13 	bl	80013ae <_lseek>
 8005588:	1c43      	adds	r3, r0, #1
 800558a:	d102      	bne.n	8005592 <_lseek_r+0x1e>
 800558c:	682b      	ldr	r3, [r5, #0]
 800558e:	b103      	cbz	r3, 8005592 <_lseek_r+0x1e>
 8005590:	6023      	str	r3, [r4, #0]
 8005592:	bd38      	pop	{r3, r4, r5, pc}
 8005594:	20000264 	.word	0x20000264

08005598 <_read_r>:
 8005598:	b538      	push	{r3, r4, r5, lr}
 800559a:	4604      	mov	r4, r0
 800559c:	4608      	mov	r0, r1
 800559e:	4611      	mov	r1, r2
 80055a0:	2200      	movs	r2, #0
 80055a2:	4d05      	ldr	r5, [pc, #20]	; (80055b8 <_read_r+0x20>)
 80055a4:	602a      	str	r2, [r5, #0]
 80055a6:	461a      	mov	r2, r3
 80055a8:	f7fb fea4 	bl	80012f4 <_read>
 80055ac:	1c43      	adds	r3, r0, #1
 80055ae:	d102      	bne.n	80055b6 <_read_r+0x1e>
 80055b0:	682b      	ldr	r3, [r5, #0]
 80055b2:	b103      	cbz	r3, 80055b6 <_read_r+0x1e>
 80055b4:	6023      	str	r3, [r4, #0]
 80055b6:	bd38      	pop	{r3, r4, r5, pc}
 80055b8:	20000264 	.word	0x20000264

080055bc <_init>:
 80055bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055be:	bf00      	nop
 80055c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055c2:	bc08      	pop	{r3}
 80055c4:	469e      	mov	lr, r3
 80055c6:	4770      	bx	lr

080055c8 <_fini>:
 80055c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ca:	bf00      	nop
 80055cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055ce:	bc08      	pop	{r3}
 80055d0:	469e      	mov	lr, r3
 80055d2:	4770      	bx	lr
