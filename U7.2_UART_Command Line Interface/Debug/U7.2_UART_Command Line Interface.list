
U7.2_UART_Command Line Interface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000375c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000304  08003868  08003868  00013868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b6c  08003b6c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003b6c  08003b6c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b6c  08003b6c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b6c  08003b6c  00013b6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b70  08003b70  00013b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003b74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  20000070  08003be4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000160  08003be4  00020160  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bc53  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002314  00000000  00000000  0002bcec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007f0  00000000  00000000  0002e000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000700  00000000  00000000  0002e7f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000190ea  00000000  00000000  0002eef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a9b2  00000000  00000000  00047fda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083d1d  00000000  00000000  0005298c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d66a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002948  00000000  00000000  000d66fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003850 	.word	0x08003850

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003850 	.word	0x08003850

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static uint8_t Rx_Buffer;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart1.Instance){
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	681a      	ldr	r2, [r3, #0]
 800017c:	4b08      	ldr	r3, [pc, #32]	; (80001a0 <HAL_UART_RxCpltCallback+0x30>)
 800017e:	681b      	ldr	r3, [r3, #0]
 8000180:	429a      	cmp	r2, r3
 8000182:	d109      	bne.n	8000198 <HAL_UART_RxCpltCallback+0x28>
		UART_Receive(Rx_Buffer);
 8000184:	4b07      	ldr	r3, [pc, #28]	; (80001a4 <HAL_UART_RxCpltCallback+0x34>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4618      	mov	r0, r3
 800018a:	f002 f85b 	bl	8002244 <UART_Receive>
		HAL_UART_Receive_IT(&huart1, &Rx_Buffer, 1);
 800018e:	2201      	movs	r2, #1
 8000190:	4904      	ldr	r1, [pc, #16]	; (80001a4 <HAL_UART_RxCpltCallback+0x34>)
 8000192:	4803      	ldr	r0, [pc, #12]	; (80001a0 <HAL_UART_RxCpltCallback+0x30>)
 8000194:	f001 fb2d 	bl	80017f2 <HAL_UART_Receive_IT>
	}
}
 8000198:	bf00      	nop
 800019a:	3708      	adds	r7, #8
 800019c:	46bd      	mov	sp, r7
 800019e:	bd80      	pop	{r7, pc}
 80001a0:	20000108 	.word	0x20000108
 80001a4:	2000008c 	.word	0x2000008c

080001a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ac:	f000 fa6c 	bl	8000688 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001b0:	f000 f814 	bl	80001dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001b4:	f000 f87e 	bl	80002b4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80001b8:	f000 f852 	bl	8000260 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart1, &Rx_Buffer, 1);
 80001bc:	2201      	movs	r2, #1
 80001be:	4905      	ldr	r1, [pc, #20]	; (80001d4 <main+0x2c>)
 80001c0:	4805      	ldr	r0, [pc, #20]	; (80001d8 <main+0x30>)
 80001c2:	f001 fb16 	bl	80017f2 <HAL_UART_Receive_IT>
  response_init(&huart1);
 80001c6:	4804      	ldr	r0, [pc, #16]	; (80001d8 <main+0x30>)
 80001c8:	f002 f80a 	bl	80021e0 <response_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  UART_Handle();
 80001cc:	f002 f866 	bl	800229c <UART_Handle>
 80001d0:	e7fc      	b.n	80001cc <main+0x24>
 80001d2:	bf00      	nop
 80001d4:	2000008c 	.word	0x2000008c
 80001d8:	20000108 	.word	0x20000108

080001dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	b090      	sub	sp, #64	; 0x40
 80001e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001e2:	f107 0318 	add.w	r3, r7, #24
 80001e6:	2228      	movs	r2, #40	; 0x28
 80001e8:	2100      	movs	r1, #0
 80001ea:	4618      	mov	r0, r3
 80001ec:	f002 f89e 	bl	800232c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001f0:	1d3b      	adds	r3, r7, #4
 80001f2:	2200      	movs	r2, #0
 80001f4:	601a      	str	r2, [r3, #0]
 80001f6:	605a      	str	r2, [r3, #4]
 80001f8:	609a      	str	r2, [r3, #8]
 80001fa:	60da      	str	r2, [r3, #12]
 80001fc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001fe:	2302      	movs	r3, #2
 8000200:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000202:	2301      	movs	r3, #1
 8000204:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000206:	2310      	movs	r3, #16
 8000208:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800020a:	2302      	movs	r3, #2
 800020c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800020e:	2300      	movs	r3, #0
 8000210:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000212:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000216:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000218:	f107 0318 	add.w	r3, r7, #24
 800021c:	4618      	mov	r0, r3
 800021e:	f000 fdef 	bl	8000e00 <HAL_RCC_OscConfig>
 8000222:	4603      	mov	r3, r0
 8000224:	2b00      	cmp	r3, #0
 8000226:	d001      	beq.n	800022c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000228:	f000 f884 	bl	8000334 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800022c:	230f      	movs	r3, #15
 800022e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000230:	2302      	movs	r3, #2
 8000232:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000234:	2300      	movs	r3, #0
 8000236:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000238:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800023c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800023e:	2300      	movs	r3, #0
 8000240:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000242:	1d3b      	adds	r3, r7, #4
 8000244:	2102      	movs	r1, #2
 8000246:	4618      	mov	r0, r3
 8000248:	f001 f85a 	bl	8001300 <HAL_RCC_ClockConfig>
 800024c:	4603      	mov	r3, r0
 800024e:	2b00      	cmp	r3, #0
 8000250:	d001      	beq.n	8000256 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000252:	f000 f86f 	bl	8000334 <Error_Handler>
  }
}
 8000256:	bf00      	nop
 8000258:	3740      	adds	r7, #64	; 0x40
 800025a:	46bd      	mov	sp, r7
 800025c:	bd80      	pop	{r7, pc}
	...

08000260 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000264:	4b11      	ldr	r3, [pc, #68]	; (80002ac <MX_USART1_UART_Init+0x4c>)
 8000266:	4a12      	ldr	r2, [pc, #72]	; (80002b0 <MX_USART1_UART_Init+0x50>)
 8000268:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800026a:	4b10      	ldr	r3, [pc, #64]	; (80002ac <MX_USART1_UART_Init+0x4c>)
 800026c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000270:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000272:	4b0e      	ldr	r3, [pc, #56]	; (80002ac <MX_USART1_UART_Init+0x4c>)
 8000274:	2200      	movs	r2, #0
 8000276:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000278:	4b0c      	ldr	r3, [pc, #48]	; (80002ac <MX_USART1_UART_Init+0x4c>)
 800027a:	2200      	movs	r2, #0
 800027c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800027e:	4b0b      	ldr	r3, [pc, #44]	; (80002ac <MX_USART1_UART_Init+0x4c>)
 8000280:	2200      	movs	r2, #0
 8000282:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000284:	4b09      	ldr	r3, [pc, #36]	; (80002ac <MX_USART1_UART_Init+0x4c>)
 8000286:	220c      	movs	r2, #12
 8000288:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800028a:	4b08      	ldr	r3, [pc, #32]	; (80002ac <MX_USART1_UART_Init+0x4c>)
 800028c:	2200      	movs	r2, #0
 800028e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000290:	4b06      	ldr	r3, [pc, #24]	; (80002ac <MX_USART1_UART_Init+0x4c>)
 8000292:	2200      	movs	r2, #0
 8000294:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000296:	4805      	ldr	r0, [pc, #20]	; (80002ac <MX_USART1_UART_Init+0x4c>)
 8000298:	f001 f9cc 	bl	8001634 <HAL_UART_Init>
 800029c:	4603      	mov	r3, r0
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d001      	beq.n	80002a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80002a2:	f000 f847 	bl	8000334 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80002a6:	bf00      	nop
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	20000108 	.word	0x20000108
 80002b0:	40013800 	.word	0x40013800

080002b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b086      	sub	sp, #24
 80002b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ba:	f107 0308 	add.w	r3, r7, #8
 80002be:	2200      	movs	r2, #0
 80002c0:	601a      	str	r2, [r3, #0]
 80002c2:	605a      	str	r2, [r3, #4]
 80002c4:	609a      	str	r2, [r3, #8]
 80002c6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002c8:	4b18      	ldr	r3, [pc, #96]	; (800032c <MX_GPIO_Init+0x78>)
 80002ca:	699b      	ldr	r3, [r3, #24]
 80002cc:	4a17      	ldr	r2, [pc, #92]	; (800032c <MX_GPIO_Init+0x78>)
 80002ce:	f043 0310 	orr.w	r3, r3, #16
 80002d2:	6193      	str	r3, [r2, #24]
 80002d4:	4b15      	ldr	r3, [pc, #84]	; (800032c <MX_GPIO_Init+0x78>)
 80002d6:	699b      	ldr	r3, [r3, #24]
 80002d8:	f003 0310 	and.w	r3, r3, #16
 80002dc:	607b      	str	r3, [r7, #4]
 80002de:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002e0:	4b12      	ldr	r3, [pc, #72]	; (800032c <MX_GPIO_Init+0x78>)
 80002e2:	699b      	ldr	r3, [r3, #24]
 80002e4:	4a11      	ldr	r2, [pc, #68]	; (800032c <MX_GPIO_Init+0x78>)
 80002e6:	f043 0304 	orr.w	r3, r3, #4
 80002ea:	6193      	str	r3, [r2, #24]
 80002ec:	4b0f      	ldr	r3, [pc, #60]	; (800032c <MX_GPIO_Init+0x78>)
 80002ee:	699b      	ldr	r3, [r3, #24]
 80002f0:	f003 0304 	and.w	r3, r3, #4
 80002f4:	603b      	str	r3, [r7, #0]
 80002f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80002f8:	2200      	movs	r2, #0
 80002fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002fe:	480c      	ldr	r0, [pc, #48]	; (8000330 <MX_GPIO_Init+0x7c>)
 8000300:	f000 fd66 	bl	8000dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000304:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000308:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800030a:	2301      	movs	r3, #1
 800030c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800030e:	2300      	movs	r3, #0
 8000310:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000312:	2302      	movs	r3, #2
 8000314:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000316:	f107 0308 	add.w	r3, r7, #8
 800031a:	4619      	mov	r1, r3
 800031c:	4804      	ldr	r0, [pc, #16]	; (8000330 <MX_GPIO_Init+0x7c>)
 800031e:	f000 fbd3 	bl	8000ac8 <HAL_GPIO_Init>

}
 8000322:	bf00      	nop
 8000324:	3718      	adds	r7, #24
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	40021000 	.word	0x40021000
 8000330:	40011000 	.word	0x40011000

08000334 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000338:	b672      	cpsid	i
}
 800033a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800033c:	e7fe      	b.n	800033c <Error_Handler+0x8>
	...

08000340 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000340:	b480      	push	{r7}
 8000342:	b085      	sub	sp, #20
 8000344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000346:	4b15      	ldr	r3, [pc, #84]	; (800039c <HAL_MspInit+0x5c>)
 8000348:	699b      	ldr	r3, [r3, #24]
 800034a:	4a14      	ldr	r2, [pc, #80]	; (800039c <HAL_MspInit+0x5c>)
 800034c:	f043 0301 	orr.w	r3, r3, #1
 8000350:	6193      	str	r3, [r2, #24]
 8000352:	4b12      	ldr	r3, [pc, #72]	; (800039c <HAL_MspInit+0x5c>)
 8000354:	699b      	ldr	r3, [r3, #24]
 8000356:	f003 0301 	and.w	r3, r3, #1
 800035a:	60bb      	str	r3, [r7, #8]
 800035c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800035e:	4b0f      	ldr	r3, [pc, #60]	; (800039c <HAL_MspInit+0x5c>)
 8000360:	69db      	ldr	r3, [r3, #28]
 8000362:	4a0e      	ldr	r2, [pc, #56]	; (800039c <HAL_MspInit+0x5c>)
 8000364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000368:	61d3      	str	r3, [r2, #28]
 800036a:	4b0c      	ldr	r3, [pc, #48]	; (800039c <HAL_MspInit+0x5c>)
 800036c:	69db      	ldr	r3, [r3, #28]
 800036e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000372:	607b      	str	r3, [r7, #4]
 8000374:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000376:	4b0a      	ldr	r3, [pc, #40]	; (80003a0 <HAL_MspInit+0x60>)
 8000378:	685b      	ldr	r3, [r3, #4]
 800037a:	60fb      	str	r3, [r7, #12]
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000382:	60fb      	str	r3, [r7, #12]
 8000384:	68fb      	ldr	r3, [r7, #12]
 8000386:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800038a:	60fb      	str	r3, [r7, #12]
 800038c:	4a04      	ldr	r2, [pc, #16]	; (80003a0 <HAL_MspInit+0x60>)
 800038e:	68fb      	ldr	r3, [r7, #12]
 8000390:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000392:	bf00      	nop
 8000394:	3714      	adds	r7, #20
 8000396:	46bd      	mov	sp, r7
 8000398:	bc80      	pop	{r7}
 800039a:	4770      	bx	lr
 800039c:	40021000 	.word	0x40021000
 80003a0:	40010000 	.word	0x40010000

080003a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b088      	sub	sp, #32
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ac:	f107 0310 	add.w	r3, r7, #16
 80003b0:	2200      	movs	r2, #0
 80003b2:	601a      	str	r2, [r3, #0]
 80003b4:	605a      	str	r2, [r3, #4]
 80003b6:	609a      	str	r2, [r3, #8]
 80003b8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	4a20      	ldr	r2, [pc, #128]	; (8000440 <HAL_UART_MspInit+0x9c>)
 80003c0:	4293      	cmp	r3, r2
 80003c2:	d139      	bne.n	8000438 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80003c4:	4b1f      	ldr	r3, [pc, #124]	; (8000444 <HAL_UART_MspInit+0xa0>)
 80003c6:	699b      	ldr	r3, [r3, #24]
 80003c8:	4a1e      	ldr	r2, [pc, #120]	; (8000444 <HAL_UART_MspInit+0xa0>)
 80003ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ce:	6193      	str	r3, [r2, #24]
 80003d0:	4b1c      	ldr	r3, [pc, #112]	; (8000444 <HAL_UART_MspInit+0xa0>)
 80003d2:	699b      	ldr	r3, [r3, #24]
 80003d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80003d8:	60fb      	str	r3, [r7, #12]
 80003da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003dc:	4b19      	ldr	r3, [pc, #100]	; (8000444 <HAL_UART_MspInit+0xa0>)
 80003de:	699b      	ldr	r3, [r3, #24]
 80003e0:	4a18      	ldr	r2, [pc, #96]	; (8000444 <HAL_UART_MspInit+0xa0>)
 80003e2:	f043 0304 	orr.w	r3, r3, #4
 80003e6:	6193      	str	r3, [r2, #24]
 80003e8:	4b16      	ldr	r3, [pc, #88]	; (8000444 <HAL_UART_MspInit+0xa0>)
 80003ea:	699b      	ldr	r3, [r3, #24]
 80003ec:	f003 0304 	and.w	r3, r3, #4
 80003f0:	60bb      	str	r3, [r7, #8]
 80003f2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80003f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80003f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003fa:	2302      	movs	r3, #2
 80003fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003fe:	2303      	movs	r3, #3
 8000400:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000402:	f107 0310 	add.w	r3, r7, #16
 8000406:	4619      	mov	r1, r3
 8000408:	480f      	ldr	r0, [pc, #60]	; (8000448 <HAL_UART_MspInit+0xa4>)
 800040a:	f000 fb5d 	bl	8000ac8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800040e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000412:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000414:	2300      	movs	r3, #0
 8000416:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000418:	2300      	movs	r3, #0
 800041a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800041c:	f107 0310 	add.w	r3, r7, #16
 8000420:	4619      	mov	r1, r3
 8000422:	4809      	ldr	r0, [pc, #36]	; (8000448 <HAL_UART_MspInit+0xa4>)
 8000424:	f000 fb50 	bl	8000ac8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8000428:	2200      	movs	r2, #0
 800042a:	2101      	movs	r1, #1
 800042c:	2025      	movs	r0, #37	; 0x25
 800042e:	f000 fa64 	bl	80008fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000432:	2025      	movs	r0, #37	; 0x25
 8000434:	f000 fa7d 	bl	8000932 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000438:	bf00      	nop
 800043a:	3720      	adds	r7, #32
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}
 8000440:	40013800 	.word	0x40013800
 8000444:	40021000 	.word	0x40021000
 8000448:	40010800 	.word	0x40010800

0800044c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000450:	e7fe      	b.n	8000450 <NMI_Handler+0x4>

08000452 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000452:	b480      	push	{r7}
 8000454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000456:	e7fe      	b.n	8000456 <HardFault_Handler+0x4>

08000458 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800045c:	e7fe      	b.n	800045c <MemManage_Handler+0x4>

0800045e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800045e:	b480      	push	{r7}
 8000460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000462:	e7fe      	b.n	8000462 <BusFault_Handler+0x4>

08000464 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000468:	e7fe      	b.n	8000468 <UsageFault_Handler+0x4>

0800046a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800046a:	b480      	push	{r7}
 800046c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800046e:	bf00      	nop
 8000470:	46bd      	mov	sp, r7
 8000472:	bc80      	pop	{r7}
 8000474:	4770      	bx	lr

08000476 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000476:	b480      	push	{r7}
 8000478:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800047a:	bf00      	nop
 800047c:	46bd      	mov	sp, r7
 800047e:	bc80      	pop	{r7}
 8000480:	4770      	bx	lr

08000482 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000482:	b480      	push	{r7}
 8000484:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000486:	bf00      	nop
 8000488:	46bd      	mov	sp, r7
 800048a:	bc80      	pop	{r7}
 800048c:	4770      	bx	lr

0800048e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800048e:	b580      	push	{r7, lr}
 8000490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000492:	f000 f93f 	bl	8000714 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000496:	bf00      	nop
 8000498:	bd80      	pop	{r7, pc}
	...

0800049c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80004a0:	4802      	ldr	r0, [pc, #8]	; (80004ac <USART1_IRQHandler+0x10>)
 80004a2:	f001 f9d7 	bl	8001854 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80004a6:	bf00      	nop
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	20000108 	.word	0x20000108

080004b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
	return 1;
 80004b4:	2301      	movs	r3, #1
}
 80004b6:	4618      	mov	r0, r3
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bc80      	pop	{r7}
 80004bc:	4770      	bx	lr

080004be <_kill>:

int _kill(int pid, int sig)
{
 80004be:	b580      	push	{r7, lr}
 80004c0:	b082      	sub	sp, #8
 80004c2:	af00      	add	r7, sp, #0
 80004c4:	6078      	str	r0, [r7, #4]
 80004c6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80004c8:	f001 ff06 	bl	80022d8 <__errno>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2216      	movs	r2, #22
 80004d0:	601a      	str	r2, [r3, #0]
	return -1;
 80004d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80004d6:	4618      	mov	r0, r3
 80004d8:	3708      	adds	r7, #8
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}

080004de <_exit>:

void _exit (int status)
{
 80004de:	b580      	push	{r7, lr}
 80004e0:	b082      	sub	sp, #8
 80004e2:	af00      	add	r7, sp, #0
 80004e4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80004e6:	f04f 31ff 	mov.w	r1, #4294967295
 80004ea:	6878      	ldr	r0, [r7, #4]
 80004ec:	f7ff ffe7 	bl	80004be <_kill>
	while (1) {}		/* Make sure we hang here */
 80004f0:	e7fe      	b.n	80004f0 <_exit+0x12>

080004f2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004f2:	b580      	push	{r7, lr}
 80004f4:	b086      	sub	sp, #24
 80004f6:	af00      	add	r7, sp, #0
 80004f8:	60f8      	str	r0, [r7, #12]
 80004fa:	60b9      	str	r1, [r7, #8]
 80004fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004fe:	2300      	movs	r3, #0
 8000500:	617b      	str	r3, [r7, #20]
 8000502:	e00a      	b.n	800051a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000504:	f3af 8000 	nop.w
 8000508:	4601      	mov	r1, r0
 800050a:	68bb      	ldr	r3, [r7, #8]
 800050c:	1c5a      	adds	r2, r3, #1
 800050e:	60ba      	str	r2, [r7, #8]
 8000510:	b2ca      	uxtb	r2, r1
 8000512:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000514:	697b      	ldr	r3, [r7, #20]
 8000516:	3301      	adds	r3, #1
 8000518:	617b      	str	r3, [r7, #20]
 800051a:	697a      	ldr	r2, [r7, #20]
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	429a      	cmp	r2, r3
 8000520:	dbf0      	blt.n	8000504 <_read+0x12>
	}

return len;
 8000522:	687b      	ldr	r3, [r7, #4]
}
 8000524:	4618      	mov	r0, r3
 8000526:	3718      	adds	r7, #24
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}

0800052c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b086      	sub	sp, #24
 8000530:	af00      	add	r7, sp, #0
 8000532:	60f8      	str	r0, [r7, #12]
 8000534:	60b9      	str	r1, [r7, #8]
 8000536:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000538:	2300      	movs	r3, #0
 800053a:	617b      	str	r3, [r7, #20]
 800053c:	e009      	b.n	8000552 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800053e:	68bb      	ldr	r3, [r7, #8]
 8000540:	1c5a      	adds	r2, r3, #1
 8000542:	60ba      	str	r2, [r7, #8]
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	4618      	mov	r0, r3
 8000548:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800054c:	697b      	ldr	r3, [r7, #20]
 800054e:	3301      	adds	r3, #1
 8000550:	617b      	str	r3, [r7, #20]
 8000552:	697a      	ldr	r2, [r7, #20]
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	429a      	cmp	r2, r3
 8000558:	dbf1      	blt.n	800053e <_write+0x12>
	}
	return len;
 800055a:	687b      	ldr	r3, [r7, #4]
}
 800055c:	4618      	mov	r0, r3
 800055e:	3718      	adds	r7, #24
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}

08000564 <_close>:

int _close(int file)
{
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
	return -1;
 800056c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000570:	4618      	mov	r0, r3
 8000572:	370c      	adds	r7, #12
 8000574:	46bd      	mov	sp, r7
 8000576:	bc80      	pop	{r7}
 8000578:	4770      	bx	lr

0800057a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800057a:	b480      	push	{r7}
 800057c:	b083      	sub	sp, #12
 800057e:	af00      	add	r7, sp, #0
 8000580:	6078      	str	r0, [r7, #4]
 8000582:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000584:	683b      	ldr	r3, [r7, #0]
 8000586:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800058a:	605a      	str	r2, [r3, #4]
	return 0;
 800058c:	2300      	movs	r3, #0
}
 800058e:	4618      	mov	r0, r3
 8000590:	370c      	adds	r7, #12
 8000592:	46bd      	mov	sp, r7
 8000594:	bc80      	pop	{r7}
 8000596:	4770      	bx	lr

08000598 <_isatty>:

int _isatty(int file)
{
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	return 1;
 80005a0:	2301      	movs	r3, #1
}
 80005a2:	4618      	mov	r0, r3
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bc80      	pop	{r7}
 80005aa:	4770      	bx	lr

080005ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
	return 0;
 80005b8:	2300      	movs	r3, #0
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	3714      	adds	r7, #20
 80005be:	46bd      	mov	sp, r7
 80005c0:	bc80      	pop	{r7}
 80005c2:	4770      	bx	lr

080005c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b086      	sub	sp, #24
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005cc:	4a14      	ldr	r2, [pc, #80]	; (8000620 <_sbrk+0x5c>)
 80005ce:	4b15      	ldr	r3, [pc, #84]	; (8000624 <_sbrk+0x60>)
 80005d0:	1ad3      	subs	r3, r2, r3
 80005d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005d4:	697b      	ldr	r3, [r7, #20]
 80005d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005d8:	4b13      	ldr	r3, [pc, #76]	; (8000628 <_sbrk+0x64>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d102      	bne.n	80005e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005e0:	4b11      	ldr	r3, [pc, #68]	; (8000628 <_sbrk+0x64>)
 80005e2:	4a12      	ldr	r2, [pc, #72]	; (800062c <_sbrk+0x68>)
 80005e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005e6:	4b10      	ldr	r3, [pc, #64]	; (8000628 <_sbrk+0x64>)
 80005e8:	681a      	ldr	r2, [r3, #0]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	4413      	add	r3, r2
 80005ee:	693a      	ldr	r2, [r7, #16]
 80005f0:	429a      	cmp	r2, r3
 80005f2:	d207      	bcs.n	8000604 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005f4:	f001 fe70 	bl	80022d8 <__errno>
 80005f8:	4603      	mov	r3, r0
 80005fa:	220c      	movs	r2, #12
 80005fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000602:	e009      	b.n	8000618 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000604:	4b08      	ldr	r3, [pc, #32]	; (8000628 <_sbrk+0x64>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800060a:	4b07      	ldr	r3, [pc, #28]	; (8000628 <_sbrk+0x64>)
 800060c:	681a      	ldr	r2, [r3, #0]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	4413      	add	r3, r2
 8000612:	4a05      	ldr	r2, [pc, #20]	; (8000628 <_sbrk+0x64>)
 8000614:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000616:	68fb      	ldr	r3, [r7, #12]
}
 8000618:	4618      	mov	r0, r3
 800061a:	3718      	adds	r7, #24
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	20005000 	.word	0x20005000
 8000624:	00000400 	.word	0x00000400
 8000628:	20000090 	.word	0x20000090
 800062c:	20000160 	.word	0x20000160

08000630 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000634:	bf00      	nop
 8000636:	46bd      	mov	sp, r7
 8000638:	bc80      	pop	{r7}
 800063a:	4770      	bx	lr

0800063c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800063c:	480c      	ldr	r0, [pc, #48]	; (8000670 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800063e:	490d      	ldr	r1, [pc, #52]	; (8000674 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000640:	4a0d      	ldr	r2, [pc, #52]	; (8000678 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000642:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000644:	e002      	b.n	800064c <LoopCopyDataInit>

08000646 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000646:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000648:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800064a:	3304      	adds	r3, #4

0800064c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800064c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800064e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000650:	d3f9      	bcc.n	8000646 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000652:	4a0a      	ldr	r2, [pc, #40]	; (800067c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000654:	4c0a      	ldr	r4, [pc, #40]	; (8000680 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000656:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000658:	e001      	b.n	800065e <LoopFillZerobss>

0800065a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800065a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800065c:	3204      	adds	r2, #4

0800065e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800065e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000660:	d3fb      	bcc.n	800065a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000662:	f7ff ffe5 	bl	8000630 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000666:	f001 fe3d 	bl	80022e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800066a:	f7ff fd9d 	bl	80001a8 <main>
  bx lr
 800066e:	4770      	bx	lr
  ldr r0, =_sdata
 8000670:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000674:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000678:	08003b74 	.word	0x08003b74
  ldr r2, =_sbss
 800067c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000680:	20000160 	.word	0x20000160

08000684 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000684:	e7fe      	b.n	8000684 <ADC1_2_IRQHandler>
	...

08000688 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800068c:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <HAL_Init+0x28>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a07      	ldr	r2, [pc, #28]	; (80006b0 <HAL_Init+0x28>)
 8000692:	f043 0310 	orr.w	r3, r3, #16
 8000696:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000698:	2003      	movs	r0, #3
 800069a:	f000 f923 	bl	80008e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800069e:	200f      	movs	r0, #15
 80006a0:	f000 f808 	bl	80006b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006a4:	f7ff fe4c 	bl	8000340 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006a8:	2300      	movs	r3, #0
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40022000 	.word	0x40022000

080006b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006bc:	4b12      	ldr	r3, [pc, #72]	; (8000708 <HAL_InitTick+0x54>)
 80006be:	681a      	ldr	r2, [r3, #0]
 80006c0:	4b12      	ldr	r3, [pc, #72]	; (800070c <HAL_InitTick+0x58>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	4619      	mov	r1, r3
 80006c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80006ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80006d2:	4618      	mov	r0, r3
 80006d4:	f000 f93b 	bl	800094e <HAL_SYSTICK_Config>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006de:	2301      	movs	r3, #1
 80006e0:	e00e      	b.n	8000700 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	2b0f      	cmp	r3, #15
 80006e6:	d80a      	bhi.n	80006fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006e8:	2200      	movs	r2, #0
 80006ea:	6879      	ldr	r1, [r7, #4]
 80006ec:	f04f 30ff 	mov.w	r0, #4294967295
 80006f0:	f000 f903 	bl	80008fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006f4:	4a06      	ldr	r2, [pc, #24]	; (8000710 <HAL_InitTick+0x5c>)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006fa:	2300      	movs	r3, #0
 80006fc:	e000      	b.n	8000700 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006fe:	2301      	movs	r3, #1
}
 8000700:	4618      	mov	r0, r3
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	20000000 	.word	0x20000000
 800070c:	20000008 	.word	0x20000008
 8000710:	20000004 	.word	0x20000004

08000714 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000718:	4b05      	ldr	r3, [pc, #20]	; (8000730 <HAL_IncTick+0x1c>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	461a      	mov	r2, r3
 800071e:	4b05      	ldr	r3, [pc, #20]	; (8000734 <HAL_IncTick+0x20>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	4413      	add	r3, r2
 8000724:	4a03      	ldr	r2, [pc, #12]	; (8000734 <HAL_IncTick+0x20>)
 8000726:	6013      	str	r3, [r2, #0]
}
 8000728:	bf00      	nop
 800072a:	46bd      	mov	sp, r7
 800072c:	bc80      	pop	{r7}
 800072e:	4770      	bx	lr
 8000730:	20000008 	.word	0x20000008
 8000734:	2000014c 	.word	0x2000014c

08000738 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  return uwTick;
 800073c:	4b02      	ldr	r3, [pc, #8]	; (8000748 <HAL_GetTick+0x10>)
 800073e:	681b      	ldr	r3, [r3, #0]
}
 8000740:	4618      	mov	r0, r3
 8000742:	46bd      	mov	sp, r7
 8000744:	bc80      	pop	{r7}
 8000746:	4770      	bx	lr
 8000748:	2000014c 	.word	0x2000014c

0800074c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800074c:	b480      	push	{r7}
 800074e:	b085      	sub	sp, #20
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	f003 0307 	and.w	r3, r3, #7
 800075a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800075c:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <__NVIC_SetPriorityGrouping+0x44>)
 800075e:	68db      	ldr	r3, [r3, #12]
 8000760:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000762:	68ba      	ldr	r2, [r7, #8]
 8000764:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000768:	4013      	ands	r3, r2
 800076a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000774:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000778:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800077c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800077e:	4a04      	ldr	r2, [pc, #16]	; (8000790 <__NVIC_SetPriorityGrouping+0x44>)
 8000780:	68bb      	ldr	r3, [r7, #8]
 8000782:	60d3      	str	r3, [r2, #12]
}
 8000784:	bf00      	nop
 8000786:	3714      	adds	r7, #20
 8000788:	46bd      	mov	sp, r7
 800078a:	bc80      	pop	{r7}
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	e000ed00 	.word	0xe000ed00

08000794 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000798:	4b04      	ldr	r3, [pc, #16]	; (80007ac <__NVIC_GetPriorityGrouping+0x18>)
 800079a:	68db      	ldr	r3, [r3, #12]
 800079c:	0a1b      	lsrs	r3, r3, #8
 800079e:	f003 0307 	and.w	r3, r3, #7
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bc80      	pop	{r7}
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	e000ed00 	.word	0xe000ed00

080007b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	4603      	mov	r3, r0
 80007b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	db0b      	blt.n	80007da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	f003 021f 	and.w	r2, r3, #31
 80007c8:	4906      	ldr	r1, [pc, #24]	; (80007e4 <__NVIC_EnableIRQ+0x34>)
 80007ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ce:	095b      	lsrs	r3, r3, #5
 80007d0:	2001      	movs	r0, #1
 80007d2:	fa00 f202 	lsl.w	r2, r0, r2
 80007d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007da:	bf00      	nop
 80007dc:	370c      	adds	r7, #12
 80007de:	46bd      	mov	sp, r7
 80007e0:	bc80      	pop	{r7}
 80007e2:	4770      	bx	lr
 80007e4:	e000e100 	.word	0xe000e100

080007e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	4603      	mov	r3, r0
 80007f0:	6039      	str	r1, [r7, #0]
 80007f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	db0a      	blt.n	8000812 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	b2da      	uxtb	r2, r3
 8000800:	490c      	ldr	r1, [pc, #48]	; (8000834 <__NVIC_SetPriority+0x4c>)
 8000802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000806:	0112      	lsls	r2, r2, #4
 8000808:	b2d2      	uxtb	r2, r2
 800080a:	440b      	add	r3, r1
 800080c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000810:	e00a      	b.n	8000828 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	b2da      	uxtb	r2, r3
 8000816:	4908      	ldr	r1, [pc, #32]	; (8000838 <__NVIC_SetPriority+0x50>)
 8000818:	79fb      	ldrb	r3, [r7, #7]
 800081a:	f003 030f 	and.w	r3, r3, #15
 800081e:	3b04      	subs	r3, #4
 8000820:	0112      	lsls	r2, r2, #4
 8000822:	b2d2      	uxtb	r2, r2
 8000824:	440b      	add	r3, r1
 8000826:	761a      	strb	r2, [r3, #24]
}
 8000828:	bf00      	nop
 800082a:	370c      	adds	r7, #12
 800082c:	46bd      	mov	sp, r7
 800082e:	bc80      	pop	{r7}
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	e000e100 	.word	0xe000e100
 8000838:	e000ed00 	.word	0xe000ed00

0800083c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800083c:	b480      	push	{r7}
 800083e:	b089      	sub	sp, #36	; 0x24
 8000840:	af00      	add	r7, sp, #0
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	60b9      	str	r1, [r7, #8]
 8000846:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	f003 0307 	and.w	r3, r3, #7
 800084e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000850:	69fb      	ldr	r3, [r7, #28]
 8000852:	f1c3 0307 	rsb	r3, r3, #7
 8000856:	2b04      	cmp	r3, #4
 8000858:	bf28      	it	cs
 800085a:	2304      	movcs	r3, #4
 800085c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800085e:	69fb      	ldr	r3, [r7, #28]
 8000860:	3304      	adds	r3, #4
 8000862:	2b06      	cmp	r3, #6
 8000864:	d902      	bls.n	800086c <NVIC_EncodePriority+0x30>
 8000866:	69fb      	ldr	r3, [r7, #28]
 8000868:	3b03      	subs	r3, #3
 800086a:	e000      	b.n	800086e <NVIC_EncodePriority+0x32>
 800086c:	2300      	movs	r3, #0
 800086e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000870:	f04f 32ff 	mov.w	r2, #4294967295
 8000874:	69bb      	ldr	r3, [r7, #24]
 8000876:	fa02 f303 	lsl.w	r3, r2, r3
 800087a:	43da      	mvns	r2, r3
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	401a      	ands	r2, r3
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000884:	f04f 31ff 	mov.w	r1, #4294967295
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	fa01 f303 	lsl.w	r3, r1, r3
 800088e:	43d9      	mvns	r1, r3
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000894:	4313      	orrs	r3, r2
         );
}
 8000896:	4618      	mov	r0, r3
 8000898:	3724      	adds	r7, #36	; 0x24
 800089a:	46bd      	mov	sp, r7
 800089c:	bc80      	pop	{r7}
 800089e:	4770      	bx	lr

080008a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	3b01      	subs	r3, #1
 80008ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008b0:	d301      	bcc.n	80008b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008b2:	2301      	movs	r3, #1
 80008b4:	e00f      	b.n	80008d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008b6:	4a0a      	ldr	r2, [pc, #40]	; (80008e0 <SysTick_Config+0x40>)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	3b01      	subs	r3, #1
 80008bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008be:	210f      	movs	r1, #15
 80008c0:	f04f 30ff 	mov.w	r0, #4294967295
 80008c4:	f7ff ff90 	bl	80007e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008c8:	4b05      	ldr	r3, [pc, #20]	; (80008e0 <SysTick_Config+0x40>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008ce:	4b04      	ldr	r3, [pc, #16]	; (80008e0 <SysTick_Config+0x40>)
 80008d0:	2207      	movs	r2, #7
 80008d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008d4:	2300      	movs	r3, #0
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	e000e010 	.word	0xe000e010

080008e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008ec:	6878      	ldr	r0, [r7, #4]
 80008ee:	f7ff ff2d 	bl	800074c <__NVIC_SetPriorityGrouping>
}
 80008f2:	bf00      	nop
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}

080008fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008fa:	b580      	push	{r7, lr}
 80008fc:	b086      	sub	sp, #24
 80008fe:	af00      	add	r7, sp, #0
 8000900:	4603      	mov	r3, r0
 8000902:	60b9      	str	r1, [r7, #8]
 8000904:	607a      	str	r2, [r7, #4]
 8000906:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000908:	2300      	movs	r3, #0
 800090a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800090c:	f7ff ff42 	bl	8000794 <__NVIC_GetPriorityGrouping>
 8000910:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000912:	687a      	ldr	r2, [r7, #4]
 8000914:	68b9      	ldr	r1, [r7, #8]
 8000916:	6978      	ldr	r0, [r7, #20]
 8000918:	f7ff ff90 	bl	800083c <NVIC_EncodePriority>
 800091c:	4602      	mov	r2, r0
 800091e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000922:	4611      	mov	r1, r2
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff ff5f 	bl	80007e8 <__NVIC_SetPriority>
}
 800092a:	bf00      	nop
 800092c:	3718      	adds	r7, #24
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}

08000932 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000932:	b580      	push	{r7, lr}
 8000934:	b082      	sub	sp, #8
 8000936:	af00      	add	r7, sp, #0
 8000938:	4603      	mov	r3, r0
 800093a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800093c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000940:	4618      	mov	r0, r3
 8000942:	f7ff ff35 	bl	80007b0 <__NVIC_EnableIRQ>
}
 8000946:	bf00      	nop
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}

0800094e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	b082      	sub	sp, #8
 8000952:	af00      	add	r7, sp, #0
 8000954:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000956:	6878      	ldr	r0, [r7, #4]
 8000958:	f7ff ffa2 	bl	80008a0 <SysTick_Config>
 800095c:	4603      	mov	r3, r0
}
 800095e:	4618      	mov	r0, r3
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}

08000966 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000966:	b480      	push	{r7}
 8000968:	b085      	sub	sp, #20
 800096a:	af00      	add	r7, sp, #0
 800096c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800096e:	2300      	movs	r3, #0
 8000970:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000978:	2b02      	cmp	r3, #2
 800097a:	d008      	beq.n	800098e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2204      	movs	r2, #4
 8000980:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2200      	movs	r2, #0
 8000986:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800098a:	2301      	movs	r3, #1
 800098c:	e020      	b.n	80009d0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	681a      	ldr	r2, [r3, #0]
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	f022 020e 	bic.w	r2, r2, #14
 800099c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	f022 0201 	bic.w	r2, r2, #1
 80009ac:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009b6:	2101      	movs	r1, #1
 80009b8:	fa01 f202 	lsl.w	r2, r1, r2
 80009bc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	2201      	movs	r2, #1
 80009c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	2200      	movs	r2, #0
 80009ca:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80009ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	3714      	adds	r7, #20
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bc80      	pop	{r7}
 80009d8:	4770      	bx	lr
	...

080009dc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80009e4:	2300      	movs	r3, #0
 80009e6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80009ee:	2b02      	cmp	r3, #2
 80009f0:	d005      	beq.n	80009fe <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2204      	movs	r2, #4
 80009f6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80009f8:	2301      	movs	r3, #1
 80009fa:	73fb      	strb	r3, [r7, #15]
 80009fc:	e051      	b.n	8000aa2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	681a      	ldr	r2, [r3, #0]
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f022 020e 	bic.w	r2, r2, #14
 8000a0c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	681a      	ldr	r2, [r3, #0]
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f022 0201 	bic.w	r2, r2, #1
 8000a1c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4a22      	ldr	r2, [pc, #136]	; (8000aac <HAL_DMA_Abort_IT+0xd0>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d029      	beq.n	8000a7c <HAL_DMA_Abort_IT+0xa0>
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a20      	ldr	r2, [pc, #128]	; (8000ab0 <HAL_DMA_Abort_IT+0xd4>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d022      	beq.n	8000a78 <HAL_DMA_Abort_IT+0x9c>
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4a1f      	ldr	r2, [pc, #124]	; (8000ab4 <HAL_DMA_Abort_IT+0xd8>)
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d01a      	beq.n	8000a72 <HAL_DMA_Abort_IT+0x96>
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a1d      	ldr	r2, [pc, #116]	; (8000ab8 <HAL_DMA_Abort_IT+0xdc>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d012      	beq.n	8000a6c <HAL_DMA_Abort_IT+0x90>
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4a1c      	ldr	r2, [pc, #112]	; (8000abc <HAL_DMA_Abort_IT+0xe0>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d00a      	beq.n	8000a66 <HAL_DMA_Abort_IT+0x8a>
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a1a      	ldr	r2, [pc, #104]	; (8000ac0 <HAL_DMA_Abort_IT+0xe4>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d102      	bne.n	8000a60 <HAL_DMA_Abort_IT+0x84>
 8000a5a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000a5e:	e00e      	b.n	8000a7e <HAL_DMA_Abort_IT+0xa2>
 8000a60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a64:	e00b      	b.n	8000a7e <HAL_DMA_Abort_IT+0xa2>
 8000a66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a6a:	e008      	b.n	8000a7e <HAL_DMA_Abort_IT+0xa2>
 8000a6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a70:	e005      	b.n	8000a7e <HAL_DMA_Abort_IT+0xa2>
 8000a72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a76:	e002      	b.n	8000a7e <HAL_DMA_Abort_IT+0xa2>
 8000a78:	2310      	movs	r3, #16
 8000a7a:	e000      	b.n	8000a7e <HAL_DMA_Abort_IT+0xa2>
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	4a11      	ldr	r2, [pc, #68]	; (8000ac4 <HAL_DMA_Abort_IT+0xe8>)
 8000a80:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2201      	movs	r2, #1
 8000a86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d003      	beq.n	8000aa2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a9e:	6878      	ldr	r0, [r7, #4]
 8000aa0:	4798      	blx	r3
    } 
  }
  return status;
 8000aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3710      	adds	r7, #16
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	40020008 	.word	0x40020008
 8000ab0:	4002001c 	.word	0x4002001c
 8000ab4:	40020030 	.word	0x40020030
 8000ab8:	40020044 	.word	0x40020044
 8000abc:	40020058 	.word	0x40020058
 8000ac0:	4002006c 	.word	0x4002006c
 8000ac4:	40020000 	.word	0x40020000

08000ac8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b08b      	sub	sp, #44	; 0x2c
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ada:	e169      	b.n	8000db0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000adc:	2201      	movs	r2, #1
 8000ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	69fa      	ldr	r2, [r7, #28]
 8000aec:	4013      	ands	r3, r2
 8000aee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000af0:	69ba      	ldr	r2, [r7, #24]
 8000af2:	69fb      	ldr	r3, [r7, #28]
 8000af4:	429a      	cmp	r2, r3
 8000af6:	f040 8158 	bne.w	8000daa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	4a9a      	ldr	r2, [pc, #616]	; (8000d68 <HAL_GPIO_Init+0x2a0>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d05e      	beq.n	8000bc2 <HAL_GPIO_Init+0xfa>
 8000b04:	4a98      	ldr	r2, [pc, #608]	; (8000d68 <HAL_GPIO_Init+0x2a0>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d875      	bhi.n	8000bf6 <HAL_GPIO_Init+0x12e>
 8000b0a:	4a98      	ldr	r2, [pc, #608]	; (8000d6c <HAL_GPIO_Init+0x2a4>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d058      	beq.n	8000bc2 <HAL_GPIO_Init+0xfa>
 8000b10:	4a96      	ldr	r2, [pc, #600]	; (8000d6c <HAL_GPIO_Init+0x2a4>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d86f      	bhi.n	8000bf6 <HAL_GPIO_Init+0x12e>
 8000b16:	4a96      	ldr	r2, [pc, #600]	; (8000d70 <HAL_GPIO_Init+0x2a8>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d052      	beq.n	8000bc2 <HAL_GPIO_Init+0xfa>
 8000b1c:	4a94      	ldr	r2, [pc, #592]	; (8000d70 <HAL_GPIO_Init+0x2a8>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d869      	bhi.n	8000bf6 <HAL_GPIO_Init+0x12e>
 8000b22:	4a94      	ldr	r2, [pc, #592]	; (8000d74 <HAL_GPIO_Init+0x2ac>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d04c      	beq.n	8000bc2 <HAL_GPIO_Init+0xfa>
 8000b28:	4a92      	ldr	r2, [pc, #584]	; (8000d74 <HAL_GPIO_Init+0x2ac>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d863      	bhi.n	8000bf6 <HAL_GPIO_Init+0x12e>
 8000b2e:	4a92      	ldr	r2, [pc, #584]	; (8000d78 <HAL_GPIO_Init+0x2b0>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d046      	beq.n	8000bc2 <HAL_GPIO_Init+0xfa>
 8000b34:	4a90      	ldr	r2, [pc, #576]	; (8000d78 <HAL_GPIO_Init+0x2b0>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d85d      	bhi.n	8000bf6 <HAL_GPIO_Init+0x12e>
 8000b3a:	2b12      	cmp	r3, #18
 8000b3c:	d82a      	bhi.n	8000b94 <HAL_GPIO_Init+0xcc>
 8000b3e:	2b12      	cmp	r3, #18
 8000b40:	d859      	bhi.n	8000bf6 <HAL_GPIO_Init+0x12e>
 8000b42:	a201      	add	r2, pc, #4	; (adr r2, 8000b48 <HAL_GPIO_Init+0x80>)
 8000b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b48:	08000bc3 	.word	0x08000bc3
 8000b4c:	08000b9d 	.word	0x08000b9d
 8000b50:	08000baf 	.word	0x08000baf
 8000b54:	08000bf1 	.word	0x08000bf1
 8000b58:	08000bf7 	.word	0x08000bf7
 8000b5c:	08000bf7 	.word	0x08000bf7
 8000b60:	08000bf7 	.word	0x08000bf7
 8000b64:	08000bf7 	.word	0x08000bf7
 8000b68:	08000bf7 	.word	0x08000bf7
 8000b6c:	08000bf7 	.word	0x08000bf7
 8000b70:	08000bf7 	.word	0x08000bf7
 8000b74:	08000bf7 	.word	0x08000bf7
 8000b78:	08000bf7 	.word	0x08000bf7
 8000b7c:	08000bf7 	.word	0x08000bf7
 8000b80:	08000bf7 	.word	0x08000bf7
 8000b84:	08000bf7 	.word	0x08000bf7
 8000b88:	08000bf7 	.word	0x08000bf7
 8000b8c:	08000ba5 	.word	0x08000ba5
 8000b90:	08000bb9 	.word	0x08000bb9
 8000b94:	4a79      	ldr	r2, [pc, #484]	; (8000d7c <HAL_GPIO_Init+0x2b4>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d013      	beq.n	8000bc2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b9a:	e02c      	b.n	8000bf6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	623b      	str	r3, [r7, #32]
          break;
 8000ba2:	e029      	b.n	8000bf8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	3304      	adds	r3, #4
 8000baa:	623b      	str	r3, [r7, #32]
          break;
 8000bac:	e024      	b.n	8000bf8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	68db      	ldr	r3, [r3, #12]
 8000bb2:	3308      	adds	r3, #8
 8000bb4:	623b      	str	r3, [r7, #32]
          break;
 8000bb6:	e01f      	b.n	8000bf8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	330c      	adds	r3, #12
 8000bbe:	623b      	str	r3, [r7, #32]
          break;
 8000bc0:	e01a      	b.n	8000bf8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	689b      	ldr	r3, [r3, #8]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d102      	bne.n	8000bd0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000bca:	2304      	movs	r3, #4
 8000bcc:	623b      	str	r3, [r7, #32]
          break;
 8000bce:	e013      	b.n	8000bf8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	689b      	ldr	r3, [r3, #8]
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d105      	bne.n	8000be4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bd8:	2308      	movs	r3, #8
 8000bda:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	69fa      	ldr	r2, [r7, #28]
 8000be0:	611a      	str	r2, [r3, #16]
          break;
 8000be2:	e009      	b.n	8000bf8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000be4:	2308      	movs	r3, #8
 8000be6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	69fa      	ldr	r2, [r7, #28]
 8000bec:	615a      	str	r2, [r3, #20]
          break;
 8000bee:	e003      	b.n	8000bf8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	623b      	str	r3, [r7, #32]
          break;
 8000bf4:	e000      	b.n	8000bf8 <HAL_GPIO_Init+0x130>
          break;
 8000bf6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000bf8:	69bb      	ldr	r3, [r7, #24]
 8000bfa:	2bff      	cmp	r3, #255	; 0xff
 8000bfc:	d801      	bhi.n	8000c02 <HAL_GPIO_Init+0x13a>
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	e001      	b.n	8000c06 <HAL_GPIO_Init+0x13e>
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	3304      	adds	r3, #4
 8000c06:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c08:	69bb      	ldr	r3, [r7, #24]
 8000c0a:	2bff      	cmp	r3, #255	; 0xff
 8000c0c:	d802      	bhi.n	8000c14 <HAL_GPIO_Init+0x14c>
 8000c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	e002      	b.n	8000c1a <HAL_GPIO_Init+0x152>
 8000c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c16:	3b08      	subs	r3, #8
 8000c18:	009b      	lsls	r3, r3, #2
 8000c1a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	210f      	movs	r1, #15
 8000c22:	693b      	ldr	r3, [r7, #16]
 8000c24:	fa01 f303 	lsl.w	r3, r1, r3
 8000c28:	43db      	mvns	r3, r3
 8000c2a:	401a      	ands	r2, r3
 8000c2c:	6a39      	ldr	r1, [r7, #32]
 8000c2e:	693b      	ldr	r3, [r7, #16]
 8000c30:	fa01 f303 	lsl.w	r3, r1, r3
 8000c34:	431a      	orrs	r2, r3
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	f000 80b1 	beq.w	8000daa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c48:	4b4d      	ldr	r3, [pc, #308]	; (8000d80 <HAL_GPIO_Init+0x2b8>)
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	4a4c      	ldr	r2, [pc, #304]	; (8000d80 <HAL_GPIO_Init+0x2b8>)
 8000c4e:	f043 0301 	orr.w	r3, r3, #1
 8000c52:	6193      	str	r3, [r2, #24]
 8000c54:	4b4a      	ldr	r3, [pc, #296]	; (8000d80 <HAL_GPIO_Init+0x2b8>)
 8000c56:	699b      	ldr	r3, [r3, #24]
 8000c58:	f003 0301 	and.w	r3, r3, #1
 8000c5c:	60bb      	str	r3, [r7, #8]
 8000c5e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c60:	4a48      	ldr	r2, [pc, #288]	; (8000d84 <HAL_GPIO_Init+0x2bc>)
 8000c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c64:	089b      	lsrs	r3, r3, #2
 8000c66:	3302      	adds	r3, #2
 8000c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c6c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c70:	f003 0303 	and.w	r3, r3, #3
 8000c74:	009b      	lsls	r3, r3, #2
 8000c76:	220f      	movs	r2, #15
 8000c78:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7c:	43db      	mvns	r3, r3
 8000c7e:	68fa      	ldr	r2, [r7, #12]
 8000c80:	4013      	ands	r3, r2
 8000c82:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	4a40      	ldr	r2, [pc, #256]	; (8000d88 <HAL_GPIO_Init+0x2c0>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d013      	beq.n	8000cb4 <HAL_GPIO_Init+0x1ec>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	4a3f      	ldr	r2, [pc, #252]	; (8000d8c <HAL_GPIO_Init+0x2c4>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d00d      	beq.n	8000cb0 <HAL_GPIO_Init+0x1e8>
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	4a3e      	ldr	r2, [pc, #248]	; (8000d90 <HAL_GPIO_Init+0x2c8>)
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d007      	beq.n	8000cac <HAL_GPIO_Init+0x1e4>
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	4a3d      	ldr	r2, [pc, #244]	; (8000d94 <HAL_GPIO_Init+0x2cc>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d101      	bne.n	8000ca8 <HAL_GPIO_Init+0x1e0>
 8000ca4:	2303      	movs	r3, #3
 8000ca6:	e006      	b.n	8000cb6 <HAL_GPIO_Init+0x1ee>
 8000ca8:	2304      	movs	r3, #4
 8000caa:	e004      	b.n	8000cb6 <HAL_GPIO_Init+0x1ee>
 8000cac:	2302      	movs	r3, #2
 8000cae:	e002      	b.n	8000cb6 <HAL_GPIO_Init+0x1ee>
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	e000      	b.n	8000cb6 <HAL_GPIO_Init+0x1ee>
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cb8:	f002 0203 	and.w	r2, r2, #3
 8000cbc:	0092      	lsls	r2, r2, #2
 8000cbe:	4093      	lsls	r3, r2
 8000cc0:	68fa      	ldr	r2, [r7, #12]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000cc6:	492f      	ldr	r1, [pc, #188]	; (8000d84 <HAL_GPIO_Init+0x2bc>)
 8000cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cca:	089b      	lsrs	r3, r3, #2
 8000ccc:	3302      	adds	r3, #2
 8000cce:	68fa      	ldr	r2, [r7, #12]
 8000cd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d006      	beq.n	8000cee <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ce0:	4b2d      	ldr	r3, [pc, #180]	; (8000d98 <HAL_GPIO_Init+0x2d0>)
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	492c      	ldr	r1, [pc, #176]	; (8000d98 <HAL_GPIO_Init+0x2d0>)
 8000ce6:	69bb      	ldr	r3, [r7, #24]
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	600b      	str	r3, [r1, #0]
 8000cec:	e006      	b.n	8000cfc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000cee:	4b2a      	ldr	r3, [pc, #168]	; (8000d98 <HAL_GPIO_Init+0x2d0>)
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	69bb      	ldr	r3, [r7, #24]
 8000cf4:	43db      	mvns	r3, r3
 8000cf6:	4928      	ldr	r1, [pc, #160]	; (8000d98 <HAL_GPIO_Init+0x2d0>)
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d006      	beq.n	8000d16 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d08:	4b23      	ldr	r3, [pc, #140]	; (8000d98 <HAL_GPIO_Init+0x2d0>)
 8000d0a:	685a      	ldr	r2, [r3, #4]
 8000d0c:	4922      	ldr	r1, [pc, #136]	; (8000d98 <HAL_GPIO_Init+0x2d0>)
 8000d0e:	69bb      	ldr	r3, [r7, #24]
 8000d10:	4313      	orrs	r3, r2
 8000d12:	604b      	str	r3, [r1, #4]
 8000d14:	e006      	b.n	8000d24 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d16:	4b20      	ldr	r3, [pc, #128]	; (8000d98 <HAL_GPIO_Init+0x2d0>)
 8000d18:	685a      	ldr	r2, [r3, #4]
 8000d1a:	69bb      	ldr	r3, [r7, #24]
 8000d1c:	43db      	mvns	r3, r3
 8000d1e:	491e      	ldr	r1, [pc, #120]	; (8000d98 <HAL_GPIO_Init+0x2d0>)
 8000d20:	4013      	ands	r3, r2
 8000d22:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d006      	beq.n	8000d3e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d30:	4b19      	ldr	r3, [pc, #100]	; (8000d98 <HAL_GPIO_Init+0x2d0>)
 8000d32:	689a      	ldr	r2, [r3, #8]
 8000d34:	4918      	ldr	r1, [pc, #96]	; (8000d98 <HAL_GPIO_Init+0x2d0>)
 8000d36:	69bb      	ldr	r3, [r7, #24]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	608b      	str	r3, [r1, #8]
 8000d3c:	e006      	b.n	8000d4c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d3e:	4b16      	ldr	r3, [pc, #88]	; (8000d98 <HAL_GPIO_Init+0x2d0>)
 8000d40:	689a      	ldr	r2, [r3, #8]
 8000d42:	69bb      	ldr	r3, [r7, #24]
 8000d44:	43db      	mvns	r3, r3
 8000d46:	4914      	ldr	r1, [pc, #80]	; (8000d98 <HAL_GPIO_Init+0x2d0>)
 8000d48:	4013      	ands	r3, r2
 8000d4a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d021      	beq.n	8000d9c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d58:	4b0f      	ldr	r3, [pc, #60]	; (8000d98 <HAL_GPIO_Init+0x2d0>)
 8000d5a:	68da      	ldr	r2, [r3, #12]
 8000d5c:	490e      	ldr	r1, [pc, #56]	; (8000d98 <HAL_GPIO_Init+0x2d0>)
 8000d5e:	69bb      	ldr	r3, [r7, #24]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	60cb      	str	r3, [r1, #12]
 8000d64:	e021      	b.n	8000daa <HAL_GPIO_Init+0x2e2>
 8000d66:	bf00      	nop
 8000d68:	10320000 	.word	0x10320000
 8000d6c:	10310000 	.word	0x10310000
 8000d70:	10220000 	.word	0x10220000
 8000d74:	10210000 	.word	0x10210000
 8000d78:	10120000 	.word	0x10120000
 8000d7c:	10110000 	.word	0x10110000
 8000d80:	40021000 	.word	0x40021000
 8000d84:	40010000 	.word	0x40010000
 8000d88:	40010800 	.word	0x40010800
 8000d8c:	40010c00 	.word	0x40010c00
 8000d90:	40011000 	.word	0x40011000
 8000d94:	40011400 	.word	0x40011400
 8000d98:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d9c:	4b0b      	ldr	r3, [pc, #44]	; (8000dcc <HAL_GPIO_Init+0x304>)
 8000d9e:	68da      	ldr	r2, [r3, #12]
 8000da0:	69bb      	ldr	r3, [r7, #24]
 8000da2:	43db      	mvns	r3, r3
 8000da4:	4909      	ldr	r1, [pc, #36]	; (8000dcc <HAL_GPIO_Init+0x304>)
 8000da6:	4013      	ands	r3, r2
 8000da8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dac:	3301      	adds	r3, #1
 8000dae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db6:	fa22 f303 	lsr.w	r3, r2, r3
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	f47f ae8e 	bne.w	8000adc <HAL_GPIO_Init+0x14>
  }
}
 8000dc0:	bf00      	nop
 8000dc2:	bf00      	nop
 8000dc4:	372c      	adds	r7, #44	; 0x2c
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bc80      	pop	{r7}
 8000dca:	4770      	bx	lr
 8000dcc:	40010400 	.word	0x40010400

08000dd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	460b      	mov	r3, r1
 8000dda:	807b      	strh	r3, [r7, #2]
 8000ddc:	4613      	mov	r3, r2
 8000dde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000de0:	787b      	ldrb	r3, [r7, #1]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d003      	beq.n	8000dee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000de6:	887a      	ldrh	r2, [r7, #2]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000dec:	e003      	b.n	8000df6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000dee:	887b      	ldrh	r3, [r7, #2]
 8000df0:	041a      	lsls	r2, r3, #16
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	611a      	str	r2, [r3, #16]
}
 8000df6:	bf00      	nop
 8000df8:	370c      	adds	r7, #12
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bc80      	pop	{r7}
 8000dfe:	4770      	bx	lr

08000e00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b086      	sub	sp, #24
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d101      	bne.n	8000e12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e26c      	b.n	80012ec <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f003 0301 	and.w	r3, r3, #1
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	f000 8087 	beq.w	8000f2e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e20:	4b92      	ldr	r3, [pc, #584]	; (800106c <HAL_RCC_OscConfig+0x26c>)
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f003 030c 	and.w	r3, r3, #12
 8000e28:	2b04      	cmp	r3, #4
 8000e2a:	d00c      	beq.n	8000e46 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e2c:	4b8f      	ldr	r3, [pc, #572]	; (800106c <HAL_RCC_OscConfig+0x26c>)
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f003 030c 	and.w	r3, r3, #12
 8000e34:	2b08      	cmp	r3, #8
 8000e36:	d112      	bne.n	8000e5e <HAL_RCC_OscConfig+0x5e>
 8000e38:	4b8c      	ldr	r3, [pc, #560]	; (800106c <HAL_RCC_OscConfig+0x26c>)
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e44:	d10b      	bne.n	8000e5e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e46:	4b89      	ldr	r3, [pc, #548]	; (800106c <HAL_RCC_OscConfig+0x26c>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d06c      	beq.n	8000f2c <HAL_RCC_OscConfig+0x12c>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d168      	bne.n	8000f2c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e246      	b.n	80012ec <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e66:	d106      	bne.n	8000e76 <HAL_RCC_OscConfig+0x76>
 8000e68:	4b80      	ldr	r3, [pc, #512]	; (800106c <HAL_RCC_OscConfig+0x26c>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a7f      	ldr	r2, [pc, #508]	; (800106c <HAL_RCC_OscConfig+0x26c>)
 8000e6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e72:	6013      	str	r3, [r2, #0]
 8000e74:	e02e      	b.n	8000ed4 <HAL_RCC_OscConfig+0xd4>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d10c      	bne.n	8000e98 <HAL_RCC_OscConfig+0x98>
 8000e7e:	4b7b      	ldr	r3, [pc, #492]	; (800106c <HAL_RCC_OscConfig+0x26c>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a7a      	ldr	r2, [pc, #488]	; (800106c <HAL_RCC_OscConfig+0x26c>)
 8000e84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e88:	6013      	str	r3, [r2, #0]
 8000e8a:	4b78      	ldr	r3, [pc, #480]	; (800106c <HAL_RCC_OscConfig+0x26c>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a77      	ldr	r2, [pc, #476]	; (800106c <HAL_RCC_OscConfig+0x26c>)
 8000e90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e94:	6013      	str	r3, [r2, #0]
 8000e96:	e01d      	b.n	8000ed4 <HAL_RCC_OscConfig+0xd4>
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ea0:	d10c      	bne.n	8000ebc <HAL_RCC_OscConfig+0xbc>
 8000ea2:	4b72      	ldr	r3, [pc, #456]	; (800106c <HAL_RCC_OscConfig+0x26c>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a71      	ldr	r2, [pc, #452]	; (800106c <HAL_RCC_OscConfig+0x26c>)
 8000ea8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000eac:	6013      	str	r3, [r2, #0]
 8000eae:	4b6f      	ldr	r3, [pc, #444]	; (800106c <HAL_RCC_OscConfig+0x26c>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a6e      	ldr	r2, [pc, #440]	; (800106c <HAL_RCC_OscConfig+0x26c>)
 8000eb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eb8:	6013      	str	r3, [r2, #0]
 8000eba:	e00b      	b.n	8000ed4 <HAL_RCC_OscConfig+0xd4>
 8000ebc:	4b6b      	ldr	r3, [pc, #428]	; (800106c <HAL_RCC_OscConfig+0x26c>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a6a      	ldr	r2, [pc, #424]	; (800106c <HAL_RCC_OscConfig+0x26c>)
 8000ec2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ec6:	6013      	str	r3, [r2, #0]
 8000ec8:	4b68      	ldr	r3, [pc, #416]	; (800106c <HAL_RCC_OscConfig+0x26c>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a67      	ldr	r2, [pc, #412]	; (800106c <HAL_RCC_OscConfig+0x26c>)
 8000ece:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ed2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d013      	beq.n	8000f04 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000edc:	f7ff fc2c 	bl	8000738 <HAL_GetTick>
 8000ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ee2:	e008      	b.n	8000ef6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ee4:	f7ff fc28 	bl	8000738 <HAL_GetTick>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	2b64      	cmp	r3, #100	; 0x64
 8000ef0:	d901      	bls.n	8000ef6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	e1fa      	b.n	80012ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ef6:	4b5d      	ldr	r3, [pc, #372]	; (800106c <HAL_RCC_OscConfig+0x26c>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d0f0      	beq.n	8000ee4 <HAL_RCC_OscConfig+0xe4>
 8000f02:	e014      	b.n	8000f2e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f04:	f7ff fc18 	bl	8000738 <HAL_GetTick>
 8000f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f0a:	e008      	b.n	8000f1e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f0c:	f7ff fc14 	bl	8000738 <HAL_GetTick>
 8000f10:	4602      	mov	r2, r0
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	2b64      	cmp	r3, #100	; 0x64
 8000f18:	d901      	bls.n	8000f1e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	e1e6      	b.n	80012ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f1e:	4b53      	ldr	r3, [pc, #332]	; (800106c <HAL_RCC_OscConfig+0x26c>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d1f0      	bne.n	8000f0c <HAL_RCC_OscConfig+0x10c>
 8000f2a:	e000      	b.n	8000f2e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f003 0302 	and.w	r3, r3, #2
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d063      	beq.n	8001002 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f3a:	4b4c      	ldr	r3, [pc, #304]	; (800106c <HAL_RCC_OscConfig+0x26c>)
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	f003 030c 	and.w	r3, r3, #12
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d00b      	beq.n	8000f5e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f46:	4b49      	ldr	r3, [pc, #292]	; (800106c <HAL_RCC_OscConfig+0x26c>)
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f003 030c 	and.w	r3, r3, #12
 8000f4e:	2b08      	cmp	r3, #8
 8000f50:	d11c      	bne.n	8000f8c <HAL_RCC_OscConfig+0x18c>
 8000f52:	4b46      	ldr	r3, [pc, #280]	; (800106c <HAL_RCC_OscConfig+0x26c>)
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d116      	bne.n	8000f8c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f5e:	4b43      	ldr	r3, [pc, #268]	; (800106c <HAL_RCC_OscConfig+0x26c>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f003 0302 	and.w	r3, r3, #2
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d005      	beq.n	8000f76 <HAL_RCC_OscConfig+0x176>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	691b      	ldr	r3, [r3, #16]
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d001      	beq.n	8000f76 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e1ba      	b.n	80012ec <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f76:	4b3d      	ldr	r3, [pc, #244]	; (800106c <HAL_RCC_OscConfig+0x26c>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	695b      	ldr	r3, [r3, #20]
 8000f82:	00db      	lsls	r3, r3, #3
 8000f84:	4939      	ldr	r1, [pc, #228]	; (800106c <HAL_RCC_OscConfig+0x26c>)
 8000f86:	4313      	orrs	r3, r2
 8000f88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f8a:	e03a      	b.n	8001002 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	691b      	ldr	r3, [r3, #16]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d020      	beq.n	8000fd6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f94:	4b36      	ldr	r3, [pc, #216]	; (8001070 <HAL_RCC_OscConfig+0x270>)
 8000f96:	2201      	movs	r2, #1
 8000f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f9a:	f7ff fbcd 	bl	8000738 <HAL_GetTick>
 8000f9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fa0:	e008      	b.n	8000fb4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fa2:	f7ff fbc9 	bl	8000738 <HAL_GetTick>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	1ad3      	subs	r3, r2, r3
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d901      	bls.n	8000fb4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	e19b      	b.n	80012ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fb4:	4b2d      	ldr	r3, [pc, #180]	; (800106c <HAL_RCC_OscConfig+0x26c>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f003 0302 	and.w	r3, r3, #2
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d0f0      	beq.n	8000fa2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fc0:	4b2a      	ldr	r3, [pc, #168]	; (800106c <HAL_RCC_OscConfig+0x26c>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	695b      	ldr	r3, [r3, #20]
 8000fcc:	00db      	lsls	r3, r3, #3
 8000fce:	4927      	ldr	r1, [pc, #156]	; (800106c <HAL_RCC_OscConfig+0x26c>)
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	600b      	str	r3, [r1, #0]
 8000fd4:	e015      	b.n	8001002 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fd6:	4b26      	ldr	r3, [pc, #152]	; (8001070 <HAL_RCC_OscConfig+0x270>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fdc:	f7ff fbac 	bl	8000738 <HAL_GetTick>
 8000fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fe2:	e008      	b.n	8000ff6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fe4:	f7ff fba8 	bl	8000738 <HAL_GetTick>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	2b02      	cmp	r3, #2
 8000ff0:	d901      	bls.n	8000ff6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	e17a      	b.n	80012ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ff6:	4b1d      	ldr	r3, [pc, #116]	; (800106c <HAL_RCC_OscConfig+0x26c>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f003 0302 	and.w	r3, r3, #2
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d1f0      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f003 0308 	and.w	r3, r3, #8
 800100a:	2b00      	cmp	r3, #0
 800100c:	d03a      	beq.n	8001084 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	699b      	ldr	r3, [r3, #24]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d019      	beq.n	800104a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001016:	4b17      	ldr	r3, [pc, #92]	; (8001074 <HAL_RCC_OscConfig+0x274>)
 8001018:	2201      	movs	r2, #1
 800101a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800101c:	f7ff fb8c 	bl	8000738 <HAL_GetTick>
 8001020:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001022:	e008      	b.n	8001036 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001024:	f7ff fb88 	bl	8000738 <HAL_GetTick>
 8001028:	4602      	mov	r2, r0
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	2b02      	cmp	r3, #2
 8001030:	d901      	bls.n	8001036 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001032:	2303      	movs	r3, #3
 8001034:	e15a      	b.n	80012ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001036:	4b0d      	ldr	r3, [pc, #52]	; (800106c <HAL_RCC_OscConfig+0x26c>)
 8001038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800103a:	f003 0302 	and.w	r3, r3, #2
 800103e:	2b00      	cmp	r3, #0
 8001040:	d0f0      	beq.n	8001024 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001042:	2001      	movs	r0, #1
 8001044:	f000 fad8 	bl	80015f8 <RCC_Delay>
 8001048:	e01c      	b.n	8001084 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800104a:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <HAL_RCC_OscConfig+0x274>)
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001050:	f7ff fb72 	bl	8000738 <HAL_GetTick>
 8001054:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001056:	e00f      	b.n	8001078 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001058:	f7ff fb6e 	bl	8000738 <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	2b02      	cmp	r3, #2
 8001064:	d908      	bls.n	8001078 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001066:	2303      	movs	r3, #3
 8001068:	e140      	b.n	80012ec <HAL_RCC_OscConfig+0x4ec>
 800106a:	bf00      	nop
 800106c:	40021000 	.word	0x40021000
 8001070:	42420000 	.word	0x42420000
 8001074:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001078:	4b9e      	ldr	r3, [pc, #632]	; (80012f4 <HAL_RCC_OscConfig+0x4f4>)
 800107a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800107c:	f003 0302 	and.w	r3, r3, #2
 8001080:	2b00      	cmp	r3, #0
 8001082:	d1e9      	bne.n	8001058 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f003 0304 	and.w	r3, r3, #4
 800108c:	2b00      	cmp	r3, #0
 800108e:	f000 80a6 	beq.w	80011de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001092:	2300      	movs	r3, #0
 8001094:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001096:	4b97      	ldr	r3, [pc, #604]	; (80012f4 <HAL_RCC_OscConfig+0x4f4>)
 8001098:	69db      	ldr	r3, [r3, #28]
 800109a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d10d      	bne.n	80010be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010a2:	4b94      	ldr	r3, [pc, #592]	; (80012f4 <HAL_RCC_OscConfig+0x4f4>)
 80010a4:	69db      	ldr	r3, [r3, #28]
 80010a6:	4a93      	ldr	r2, [pc, #588]	; (80012f4 <HAL_RCC_OscConfig+0x4f4>)
 80010a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ac:	61d3      	str	r3, [r2, #28]
 80010ae:	4b91      	ldr	r3, [pc, #580]	; (80012f4 <HAL_RCC_OscConfig+0x4f4>)
 80010b0:	69db      	ldr	r3, [r3, #28]
 80010b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b6:	60bb      	str	r3, [r7, #8]
 80010b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010ba:	2301      	movs	r3, #1
 80010bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010be:	4b8e      	ldr	r3, [pc, #568]	; (80012f8 <HAL_RCC_OscConfig+0x4f8>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d118      	bne.n	80010fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010ca:	4b8b      	ldr	r3, [pc, #556]	; (80012f8 <HAL_RCC_OscConfig+0x4f8>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a8a      	ldr	r2, [pc, #552]	; (80012f8 <HAL_RCC_OscConfig+0x4f8>)
 80010d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010d6:	f7ff fb2f 	bl	8000738 <HAL_GetTick>
 80010da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010dc:	e008      	b.n	80010f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010de:	f7ff fb2b 	bl	8000738 <HAL_GetTick>
 80010e2:	4602      	mov	r2, r0
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	2b64      	cmp	r3, #100	; 0x64
 80010ea:	d901      	bls.n	80010f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80010ec:	2303      	movs	r3, #3
 80010ee:	e0fd      	b.n	80012ec <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010f0:	4b81      	ldr	r3, [pc, #516]	; (80012f8 <HAL_RCC_OscConfig+0x4f8>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d0f0      	beq.n	80010de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	2b01      	cmp	r3, #1
 8001102:	d106      	bne.n	8001112 <HAL_RCC_OscConfig+0x312>
 8001104:	4b7b      	ldr	r3, [pc, #492]	; (80012f4 <HAL_RCC_OscConfig+0x4f4>)
 8001106:	6a1b      	ldr	r3, [r3, #32]
 8001108:	4a7a      	ldr	r2, [pc, #488]	; (80012f4 <HAL_RCC_OscConfig+0x4f4>)
 800110a:	f043 0301 	orr.w	r3, r3, #1
 800110e:	6213      	str	r3, [r2, #32]
 8001110:	e02d      	b.n	800116e <HAL_RCC_OscConfig+0x36e>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	68db      	ldr	r3, [r3, #12]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d10c      	bne.n	8001134 <HAL_RCC_OscConfig+0x334>
 800111a:	4b76      	ldr	r3, [pc, #472]	; (80012f4 <HAL_RCC_OscConfig+0x4f4>)
 800111c:	6a1b      	ldr	r3, [r3, #32]
 800111e:	4a75      	ldr	r2, [pc, #468]	; (80012f4 <HAL_RCC_OscConfig+0x4f4>)
 8001120:	f023 0301 	bic.w	r3, r3, #1
 8001124:	6213      	str	r3, [r2, #32]
 8001126:	4b73      	ldr	r3, [pc, #460]	; (80012f4 <HAL_RCC_OscConfig+0x4f4>)
 8001128:	6a1b      	ldr	r3, [r3, #32]
 800112a:	4a72      	ldr	r2, [pc, #456]	; (80012f4 <HAL_RCC_OscConfig+0x4f4>)
 800112c:	f023 0304 	bic.w	r3, r3, #4
 8001130:	6213      	str	r3, [r2, #32]
 8001132:	e01c      	b.n	800116e <HAL_RCC_OscConfig+0x36e>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	2b05      	cmp	r3, #5
 800113a:	d10c      	bne.n	8001156 <HAL_RCC_OscConfig+0x356>
 800113c:	4b6d      	ldr	r3, [pc, #436]	; (80012f4 <HAL_RCC_OscConfig+0x4f4>)
 800113e:	6a1b      	ldr	r3, [r3, #32]
 8001140:	4a6c      	ldr	r2, [pc, #432]	; (80012f4 <HAL_RCC_OscConfig+0x4f4>)
 8001142:	f043 0304 	orr.w	r3, r3, #4
 8001146:	6213      	str	r3, [r2, #32]
 8001148:	4b6a      	ldr	r3, [pc, #424]	; (80012f4 <HAL_RCC_OscConfig+0x4f4>)
 800114a:	6a1b      	ldr	r3, [r3, #32]
 800114c:	4a69      	ldr	r2, [pc, #420]	; (80012f4 <HAL_RCC_OscConfig+0x4f4>)
 800114e:	f043 0301 	orr.w	r3, r3, #1
 8001152:	6213      	str	r3, [r2, #32]
 8001154:	e00b      	b.n	800116e <HAL_RCC_OscConfig+0x36e>
 8001156:	4b67      	ldr	r3, [pc, #412]	; (80012f4 <HAL_RCC_OscConfig+0x4f4>)
 8001158:	6a1b      	ldr	r3, [r3, #32]
 800115a:	4a66      	ldr	r2, [pc, #408]	; (80012f4 <HAL_RCC_OscConfig+0x4f4>)
 800115c:	f023 0301 	bic.w	r3, r3, #1
 8001160:	6213      	str	r3, [r2, #32]
 8001162:	4b64      	ldr	r3, [pc, #400]	; (80012f4 <HAL_RCC_OscConfig+0x4f4>)
 8001164:	6a1b      	ldr	r3, [r3, #32]
 8001166:	4a63      	ldr	r2, [pc, #396]	; (80012f4 <HAL_RCC_OscConfig+0x4f4>)
 8001168:	f023 0304 	bic.w	r3, r3, #4
 800116c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	68db      	ldr	r3, [r3, #12]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d015      	beq.n	80011a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001176:	f7ff fadf 	bl	8000738 <HAL_GetTick>
 800117a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800117c:	e00a      	b.n	8001194 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800117e:	f7ff fadb 	bl	8000738 <HAL_GetTick>
 8001182:	4602      	mov	r2, r0
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	1ad3      	subs	r3, r2, r3
 8001188:	f241 3288 	movw	r2, #5000	; 0x1388
 800118c:	4293      	cmp	r3, r2
 800118e:	d901      	bls.n	8001194 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001190:	2303      	movs	r3, #3
 8001192:	e0ab      	b.n	80012ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001194:	4b57      	ldr	r3, [pc, #348]	; (80012f4 <HAL_RCC_OscConfig+0x4f4>)
 8001196:	6a1b      	ldr	r3, [r3, #32]
 8001198:	f003 0302 	and.w	r3, r3, #2
 800119c:	2b00      	cmp	r3, #0
 800119e:	d0ee      	beq.n	800117e <HAL_RCC_OscConfig+0x37e>
 80011a0:	e014      	b.n	80011cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011a2:	f7ff fac9 	bl	8000738 <HAL_GetTick>
 80011a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011a8:	e00a      	b.n	80011c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011aa:	f7ff fac5 	bl	8000738 <HAL_GetTick>
 80011ae:	4602      	mov	r2, r0
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d901      	bls.n	80011c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80011bc:	2303      	movs	r3, #3
 80011be:	e095      	b.n	80012ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011c0:	4b4c      	ldr	r3, [pc, #304]	; (80012f4 <HAL_RCC_OscConfig+0x4f4>)
 80011c2:	6a1b      	ldr	r3, [r3, #32]
 80011c4:	f003 0302 	and.w	r3, r3, #2
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d1ee      	bne.n	80011aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80011cc:	7dfb      	ldrb	r3, [r7, #23]
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d105      	bne.n	80011de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011d2:	4b48      	ldr	r3, [pc, #288]	; (80012f4 <HAL_RCC_OscConfig+0x4f4>)
 80011d4:	69db      	ldr	r3, [r3, #28]
 80011d6:	4a47      	ldr	r2, [pc, #284]	; (80012f4 <HAL_RCC_OscConfig+0x4f4>)
 80011d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	69db      	ldr	r3, [r3, #28]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	f000 8081 	beq.w	80012ea <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011e8:	4b42      	ldr	r3, [pc, #264]	; (80012f4 <HAL_RCC_OscConfig+0x4f4>)
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f003 030c 	and.w	r3, r3, #12
 80011f0:	2b08      	cmp	r3, #8
 80011f2:	d061      	beq.n	80012b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	69db      	ldr	r3, [r3, #28]
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d146      	bne.n	800128a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011fc:	4b3f      	ldr	r3, [pc, #252]	; (80012fc <HAL_RCC_OscConfig+0x4fc>)
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001202:	f7ff fa99 	bl	8000738 <HAL_GetTick>
 8001206:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001208:	e008      	b.n	800121c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800120a:	f7ff fa95 	bl	8000738 <HAL_GetTick>
 800120e:	4602      	mov	r2, r0
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	2b02      	cmp	r3, #2
 8001216:	d901      	bls.n	800121c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001218:	2303      	movs	r3, #3
 800121a:	e067      	b.n	80012ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800121c:	4b35      	ldr	r3, [pc, #212]	; (80012f4 <HAL_RCC_OscConfig+0x4f4>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001224:	2b00      	cmp	r3, #0
 8001226:	d1f0      	bne.n	800120a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6a1b      	ldr	r3, [r3, #32]
 800122c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001230:	d108      	bne.n	8001244 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001232:	4b30      	ldr	r3, [pc, #192]	; (80012f4 <HAL_RCC_OscConfig+0x4f4>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	492d      	ldr	r1, [pc, #180]	; (80012f4 <HAL_RCC_OscConfig+0x4f4>)
 8001240:	4313      	orrs	r3, r2
 8001242:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001244:	4b2b      	ldr	r3, [pc, #172]	; (80012f4 <HAL_RCC_OscConfig+0x4f4>)
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6a19      	ldr	r1, [r3, #32]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001254:	430b      	orrs	r3, r1
 8001256:	4927      	ldr	r1, [pc, #156]	; (80012f4 <HAL_RCC_OscConfig+0x4f4>)
 8001258:	4313      	orrs	r3, r2
 800125a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800125c:	4b27      	ldr	r3, [pc, #156]	; (80012fc <HAL_RCC_OscConfig+0x4fc>)
 800125e:	2201      	movs	r2, #1
 8001260:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001262:	f7ff fa69 	bl	8000738 <HAL_GetTick>
 8001266:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001268:	e008      	b.n	800127c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800126a:	f7ff fa65 	bl	8000738 <HAL_GetTick>
 800126e:	4602      	mov	r2, r0
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	2b02      	cmp	r3, #2
 8001276:	d901      	bls.n	800127c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001278:	2303      	movs	r3, #3
 800127a:	e037      	b.n	80012ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800127c:	4b1d      	ldr	r3, [pc, #116]	; (80012f4 <HAL_RCC_OscConfig+0x4f4>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d0f0      	beq.n	800126a <HAL_RCC_OscConfig+0x46a>
 8001288:	e02f      	b.n	80012ea <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800128a:	4b1c      	ldr	r3, [pc, #112]	; (80012fc <HAL_RCC_OscConfig+0x4fc>)
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001290:	f7ff fa52 	bl	8000738 <HAL_GetTick>
 8001294:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001296:	e008      	b.n	80012aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001298:	f7ff fa4e 	bl	8000738 <HAL_GetTick>
 800129c:	4602      	mov	r2, r0
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d901      	bls.n	80012aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e020      	b.n	80012ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012aa:	4b12      	ldr	r3, [pc, #72]	; (80012f4 <HAL_RCC_OscConfig+0x4f4>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d1f0      	bne.n	8001298 <HAL_RCC_OscConfig+0x498>
 80012b6:	e018      	b.n	80012ea <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	69db      	ldr	r3, [r3, #28]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d101      	bne.n	80012c4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	e013      	b.n	80012ec <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80012c4:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <HAL_RCC_OscConfig+0x4f4>)
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6a1b      	ldr	r3, [r3, #32]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d106      	bne.n	80012e6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d001      	beq.n	80012ea <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e000      	b.n	80012ec <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80012ea:	2300      	movs	r3, #0
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3718      	adds	r7, #24
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	40021000 	.word	0x40021000
 80012f8:	40007000 	.word	0x40007000
 80012fc:	42420060 	.word	0x42420060

08001300 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d101      	bne.n	8001314 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	e0d0      	b.n	80014b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001314:	4b6a      	ldr	r3, [pc, #424]	; (80014c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 0307 	and.w	r3, r3, #7
 800131c:	683a      	ldr	r2, [r7, #0]
 800131e:	429a      	cmp	r2, r3
 8001320:	d910      	bls.n	8001344 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001322:	4b67      	ldr	r3, [pc, #412]	; (80014c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f023 0207 	bic.w	r2, r3, #7
 800132a:	4965      	ldr	r1, [pc, #404]	; (80014c0 <HAL_RCC_ClockConfig+0x1c0>)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	4313      	orrs	r3, r2
 8001330:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001332:	4b63      	ldr	r3, [pc, #396]	; (80014c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 0307 	and.w	r3, r3, #7
 800133a:	683a      	ldr	r2, [r7, #0]
 800133c:	429a      	cmp	r2, r3
 800133e:	d001      	beq.n	8001344 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	e0b8      	b.n	80014b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 0302 	and.w	r3, r3, #2
 800134c:	2b00      	cmp	r3, #0
 800134e:	d020      	beq.n	8001392 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f003 0304 	and.w	r3, r3, #4
 8001358:	2b00      	cmp	r3, #0
 800135a:	d005      	beq.n	8001368 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800135c:	4b59      	ldr	r3, [pc, #356]	; (80014c4 <HAL_RCC_ClockConfig+0x1c4>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	4a58      	ldr	r2, [pc, #352]	; (80014c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001362:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001366:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 0308 	and.w	r3, r3, #8
 8001370:	2b00      	cmp	r3, #0
 8001372:	d005      	beq.n	8001380 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001374:	4b53      	ldr	r3, [pc, #332]	; (80014c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	4a52      	ldr	r2, [pc, #328]	; (80014c4 <HAL_RCC_ClockConfig+0x1c4>)
 800137a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800137e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001380:	4b50      	ldr	r3, [pc, #320]	; (80014c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	494d      	ldr	r1, [pc, #308]	; (80014c4 <HAL_RCC_ClockConfig+0x1c4>)
 800138e:	4313      	orrs	r3, r2
 8001390:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	2b00      	cmp	r3, #0
 800139c:	d040      	beq.n	8001420 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d107      	bne.n	80013b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013a6:	4b47      	ldr	r3, [pc, #284]	; (80014c4 <HAL_RCC_ClockConfig+0x1c4>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d115      	bne.n	80013de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e07f      	b.n	80014b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d107      	bne.n	80013ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013be:	4b41      	ldr	r3, [pc, #260]	; (80014c4 <HAL_RCC_ClockConfig+0x1c4>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d109      	bne.n	80013de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e073      	b.n	80014b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ce:	4b3d      	ldr	r3, [pc, #244]	; (80014c4 <HAL_RCC_ClockConfig+0x1c4>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d101      	bne.n	80013de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e06b      	b.n	80014b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013de:	4b39      	ldr	r3, [pc, #228]	; (80014c4 <HAL_RCC_ClockConfig+0x1c4>)
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f023 0203 	bic.w	r2, r3, #3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	4936      	ldr	r1, [pc, #216]	; (80014c4 <HAL_RCC_ClockConfig+0x1c4>)
 80013ec:	4313      	orrs	r3, r2
 80013ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013f0:	f7ff f9a2 	bl	8000738 <HAL_GetTick>
 80013f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013f6:	e00a      	b.n	800140e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013f8:	f7ff f99e 	bl	8000738 <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	f241 3288 	movw	r2, #5000	; 0x1388
 8001406:	4293      	cmp	r3, r2
 8001408:	d901      	bls.n	800140e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e053      	b.n	80014b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800140e:	4b2d      	ldr	r3, [pc, #180]	; (80014c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f003 020c 	and.w	r2, r3, #12
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	429a      	cmp	r2, r3
 800141e:	d1eb      	bne.n	80013f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001420:	4b27      	ldr	r3, [pc, #156]	; (80014c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 0307 	and.w	r3, r3, #7
 8001428:	683a      	ldr	r2, [r7, #0]
 800142a:	429a      	cmp	r2, r3
 800142c:	d210      	bcs.n	8001450 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800142e:	4b24      	ldr	r3, [pc, #144]	; (80014c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f023 0207 	bic.w	r2, r3, #7
 8001436:	4922      	ldr	r1, [pc, #136]	; (80014c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	4313      	orrs	r3, r2
 800143c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800143e:	4b20      	ldr	r3, [pc, #128]	; (80014c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0307 	and.w	r3, r3, #7
 8001446:	683a      	ldr	r2, [r7, #0]
 8001448:	429a      	cmp	r2, r3
 800144a:	d001      	beq.n	8001450 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e032      	b.n	80014b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 0304 	and.w	r3, r3, #4
 8001458:	2b00      	cmp	r3, #0
 800145a:	d008      	beq.n	800146e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800145c:	4b19      	ldr	r3, [pc, #100]	; (80014c4 <HAL_RCC_ClockConfig+0x1c4>)
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	4916      	ldr	r1, [pc, #88]	; (80014c4 <HAL_RCC_ClockConfig+0x1c4>)
 800146a:	4313      	orrs	r3, r2
 800146c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0308 	and.w	r3, r3, #8
 8001476:	2b00      	cmp	r3, #0
 8001478:	d009      	beq.n	800148e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800147a:	4b12      	ldr	r3, [pc, #72]	; (80014c4 <HAL_RCC_ClockConfig+0x1c4>)
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	691b      	ldr	r3, [r3, #16]
 8001486:	00db      	lsls	r3, r3, #3
 8001488:	490e      	ldr	r1, [pc, #56]	; (80014c4 <HAL_RCC_ClockConfig+0x1c4>)
 800148a:	4313      	orrs	r3, r2
 800148c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800148e:	f000 f821 	bl	80014d4 <HAL_RCC_GetSysClockFreq>
 8001492:	4602      	mov	r2, r0
 8001494:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	091b      	lsrs	r3, r3, #4
 800149a:	f003 030f 	and.w	r3, r3, #15
 800149e:	490a      	ldr	r1, [pc, #40]	; (80014c8 <HAL_RCC_ClockConfig+0x1c8>)
 80014a0:	5ccb      	ldrb	r3, [r1, r3]
 80014a2:	fa22 f303 	lsr.w	r3, r2, r3
 80014a6:	4a09      	ldr	r2, [pc, #36]	; (80014cc <HAL_RCC_ClockConfig+0x1cc>)
 80014a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80014aa:	4b09      	ldr	r3, [pc, #36]	; (80014d0 <HAL_RCC_ClockConfig+0x1d0>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff f900 	bl	80006b4 <HAL_InitTick>

  return HAL_OK;
 80014b4:	2300      	movs	r3, #0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3710      	adds	r7, #16
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40022000 	.word	0x40022000
 80014c4:	40021000 	.word	0x40021000
 80014c8:	080038f0 	.word	0x080038f0
 80014cc:	20000000 	.word	0x20000000
 80014d0:	20000004 	.word	0x20000004

080014d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014d4:	b490      	push	{r4, r7}
 80014d6:	b08a      	sub	sp, #40	; 0x28
 80014d8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80014da:	4b2a      	ldr	r3, [pc, #168]	; (8001584 <HAL_RCC_GetSysClockFreq+0xb0>)
 80014dc:	1d3c      	adds	r4, r7, #4
 80014de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80014e4:	f240 2301 	movw	r3, #513	; 0x201
 80014e8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80014ea:	2300      	movs	r3, #0
 80014ec:	61fb      	str	r3, [r7, #28]
 80014ee:	2300      	movs	r3, #0
 80014f0:	61bb      	str	r3, [r7, #24]
 80014f2:	2300      	movs	r3, #0
 80014f4:	627b      	str	r3, [r7, #36]	; 0x24
 80014f6:	2300      	movs	r3, #0
 80014f8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80014fa:	2300      	movs	r3, #0
 80014fc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80014fe:	4b22      	ldr	r3, [pc, #136]	; (8001588 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	f003 030c 	and.w	r3, r3, #12
 800150a:	2b04      	cmp	r3, #4
 800150c:	d002      	beq.n	8001514 <HAL_RCC_GetSysClockFreq+0x40>
 800150e:	2b08      	cmp	r3, #8
 8001510:	d003      	beq.n	800151a <HAL_RCC_GetSysClockFreq+0x46>
 8001512:	e02d      	b.n	8001570 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001514:	4b1d      	ldr	r3, [pc, #116]	; (800158c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001516:	623b      	str	r3, [r7, #32]
      break;
 8001518:	e02d      	b.n	8001576 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	0c9b      	lsrs	r3, r3, #18
 800151e:	f003 030f 	and.w	r3, r3, #15
 8001522:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001526:	4413      	add	r3, r2
 8001528:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800152c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d013      	beq.n	8001560 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001538:	4b13      	ldr	r3, [pc, #76]	; (8001588 <HAL_RCC_GetSysClockFreq+0xb4>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	0c5b      	lsrs	r3, r3, #17
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001546:	4413      	add	r3, r2
 8001548:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800154c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	4a0e      	ldr	r2, [pc, #56]	; (800158c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001552:	fb02 f203 	mul.w	r2, r2, r3
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	fbb2 f3f3 	udiv	r3, r2, r3
 800155c:	627b      	str	r3, [r7, #36]	; 0x24
 800155e:	e004      	b.n	800156a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	4a0b      	ldr	r2, [pc, #44]	; (8001590 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001564:	fb02 f303 	mul.w	r3, r2, r3
 8001568:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800156a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156c:	623b      	str	r3, [r7, #32]
      break;
 800156e:	e002      	b.n	8001576 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001570:	4b06      	ldr	r3, [pc, #24]	; (800158c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001572:	623b      	str	r3, [r7, #32]
      break;
 8001574:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001576:	6a3b      	ldr	r3, [r7, #32]
}
 8001578:	4618      	mov	r0, r3
 800157a:	3728      	adds	r7, #40	; 0x28
 800157c:	46bd      	mov	sp, r7
 800157e:	bc90      	pop	{r4, r7}
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	08003868 	.word	0x08003868
 8001588:	40021000 	.word	0x40021000
 800158c:	007a1200 	.word	0x007a1200
 8001590:	003d0900 	.word	0x003d0900

08001594 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001598:	4b02      	ldr	r3, [pc, #8]	; (80015a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800159a:	681b      	ldr	r3, [r3, #0]
}
 800159c:	4618      	mov	r0, r3
 800159e:	46bd      	mov	sp, r7
 80015a0:	bc80      	pop	{r7}
 80015a2:	4770      	bx	lr
 80015a4:	20000000 	.word	0x20000000

080015a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80015ac:	f7ff fff2 	bl	8001594 <HAL_RCC_GetHCLKFreq>
 80015b0:	4602      	mov	r2, r0
 80015b2:	4b05      	ldr	r3, [pc, #20]	; (80015c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	0a1b      	lsrs	r3, r3, #8
 80015b8:	f003 0307 	and.w	r3, r3, #7
 80015bc:	4903      	ldr	r1, [pc, #12]	; (80015cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80015be:	5ccb      	ldrb	r3, [r1, r3]
 80015c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40021000 	.word	0x40021000
 80015cc:	08003900 	.word	0x08003900

080015d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80015d4:	f7ff ffde 	bl	8001594 <HAL_RCC_GetHCLKFreq>
 80015d8:	4602      	mov	r2, r0
 80015da:	4b05      	ldr	r3, [pc, #20]	; (80015f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	0adb      	lsrs	r3, r3, #11
 80015e0:	f003 0307 	and.w	r3, r3, #7
 80015e4:	4903      	ldr	r1, [pc, #12]	; (80015f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80015e6:	5ccb      	ldrb	r3, [r1, r3]
 80015e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	40021000 	.word	0x40021000
 80015f4:	08003900 	.word	0x08003900

080015f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001600:	4b0a      	ldr	r3, [pc, #40]	; (800162c <RCC_Delay+0x34>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a0a      	ldr	r2, [pc, #40]	; (8001630 <RCC_Delay+0x38>)
 8001606:	fba2 2303 	umull	r2, r3, r2, r3
 800160a:	0a5b      	lsrs	r3, r3, #9
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	fb02 f303 	mul.w	r3, r2, r3
 8001612:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001614:	bf00      	nop
  }
  while (Delay --);
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	1e5a      	subs	r2, r3, #1
 800161a:	60fa      	str	r2, [r7, #12]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d1f9      	bne.n	8001614 <RCC_Delay+0x1c>
}
 8001620:	bf00      	nop
 8001622:	bf00      	nop
 8001624:	3714      	adds	r7, #20
 8001626:	46bd      	mov	sp, r7
 8001628:	bc80      	pop	{r7}
 800162a:	4770      	bx	lr
 800162c:	20000000 	.word	0x20000000
 8001630:	10624dd3 	.word	0x10624dd3

08001634 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d101      	bne.n	8001646 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e03f      	b.n	80016c6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800164c:	b2db      	uxtb	r3, r3
 800164e:	2b00      	cmp	r3, #0
 8001650:	d106      	bne.n	8001660 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f7fe fea2 	bl	80003a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2224      	movs	r2, #36	; 0x24
 8001664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	68da      	ldr	r2, [r3, #12]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001676:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f000 fc85 	bl	8001f88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	691a      	ldr	r2, [r3, #16]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800168c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	695a      	ldr	r2, [r3, #20]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800169c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	68da      	ldr	r2, [r3, #12]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80016ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2200      	movs	r2, #0
 80016b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2220      	movs	r2, #32
 80016b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2220      	movs	r2, #32
 80016c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b08a      	sub	sp, #40	; 0x28
 80016d2:	af02      	add	r7, sp, #8
 80016d4:	60f8      	str	r0, [r7, #12]
 80016d6:	60b9      	str	r1, [r7, #8]
 80016d8:	603b      	str	r3, [r7, #0]
 80016da:	4613      	mov	r3, r2
 80016dc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80016de:	2300      	movs	r3, #0
 80016e0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	2b20      	cmp	r3, #32
 80016ec:	d17c      	bne.n	80017e8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d002      	beq.n	80016fa <HAL_UART_Transmit+0x2c>
 80016f4:	88fb      	ldrh	r3, [r7, #6]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d101      	bne.n	80016fe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e075      	b.n	80017ea <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001704:	2b01      	cmp	r3, #1
 8001706:	d101      	bne.n	800170c <HAL_UART_Transmit+0x3e>
 8001708:	2302      	movs	r3, #2
 800170a:	e06e      	b.n	80017ea <HAL_UART_Transmit+0x11c>
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	2201      	movs	r2, #1
 8001710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2200      	movs	r2, #0
 8001718:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	2221      	movs	r2, #33	; 0x21
 800171e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001722:	f7ff f809 	bl	8000738 <HAL_GetTick>
 8001726:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	88fa      	ldrh	r2, [r7, #6]
 800172c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	88fa      	ldrh	r2, [r7, #6]
 8001732:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800173c:	d108      	bne.n	8001750 <HAL_UART_Transmit+0x82>
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	691b      	ldr	r3, [r3, #16]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d104      	bne.n	8001750 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001746:	2300      	movs	r3, #0
 8001748:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	61bb      	str	r3, [r7, #24]
 800174e:	e003      	b.n	8001758 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001754:	2300      	movs	r3, #0
 8001756:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	2200      	movs	r2, #0
 800175c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001760:	e02a      	b.n	80017b8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	9300      	str	r3, [sp, #0]
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	2200      	movs	r2, #0
 800176a:	2180      	movs	r1, #128	; 0x80
 800176c:	68f8      	ldr	r0, [r7, #12]
 800176e:	f000 fa38 	bl	8001be2 <UART_WaitOnFlagUntilTimeout>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e036      	b.n	80017ea <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d10b      	bne.n	800179a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	881b      	ldrh	r3, [r3, #0]
 8001786:	461a      	mov	r2, r3
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001790:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	3302      	adds	r3, #2
 8001796:	61bb      	str	r3, [r7, #24]
 8001798:	e007      	b.n	80017aa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	781a      	ldrb	r2, [r3, #0]
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	3301      	adds	r3, #1
 80017a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	3b01      	subs	r3, #1
 80017b2:	b29a      	uxth	r2, r3
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80017bc:	b29b      	uxth	r3, r3
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d1cf      	bne.n	8001762 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	9300      	str	r3, [sp, #0]
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	2200      	movs	r2, #0
 80017ca:	2140      	movs	r1, #64	; 0x40
 80017cc:	68f8      	ldr	r0, [r7, #12]
 80017ce:	f000 fa08 	bl	8001be2 <UART_WaitOnFlagUntilTimeout>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e006      	b.n	80017ea <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2220      	movs	r2, #32
 80017e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80017e4:	2300      	movs	r3, #0
 80017e6:	e000      	b.n	80017ea <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80017e8:	2302      	movs	r3, #2
  }
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3720      	adds	r7, #32
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b084      	sub	sp, #16
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	60f8      	str	r0, [r7, #12]
 80017fa:	60b9      	str	r1, [r7, #8]
 80017fc:	4613      	mov	r3, r2
 80017fe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001806:	b2db      	uxtb	r3, r3
 8001808:	2b20      	cmp	r3, #32
 800180a:	d11d      	bne.n	8001848 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d002      	beq.n	8001818 <HAL_UART_Receive_IT+0x26>
 8001812:	88fb      	ldrh	r3, [r7, #6]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d101      	bne.n	800181c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e016      	b.n	800184a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001822:	2b01      	cmp	r3, #1
 8001824:	d101      	bne.n	800182a <HAL_UART_Receive_IT+0x38>
 8001826:	2302      	movs	r3, #2
 8001828:	e00f      	b.n	800184a <HAL_UART_Receive_IT+0x58>
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	2201      	movs	r2, #1
 800182e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	2200      	movs	r2, #0
 8001836:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8001838:	88fb      	ldrh	r3, [r7, #6]
 800183a:	461a      	mov	r2, r3
 800183c:	68b9      	ldr	r1, [r7, #8]
 800183e:	68f8      	ldr	r0, [r7, #12]
 8001840:	f000 fa19 	bl	8001c76 <UART_Start_Receive_IT>
 8001844:	4603      	mov	r3, r0
 8001846:	e000      	b.n	800184a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8001848:	2302      	movs	r3, #2
  }
}
 800184a:	4618      	mov	r0, r3
 800184c:	3710      	adds	r7, #16
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
	...

08001854 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b08a      	sub	sp, #40	; 0x28
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	695b      	ldr	r3, [r3, #20]
 8001872:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8001874:	2300      	movs	r3, #0
 8001876:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8001878:	2300      	movs	r3, #0
 800187a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800187c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187e:	f003 030f 	and.w	r3, r3, #15
 8001882:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d10d      	bne.n	80018a6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800188a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188c:	f003 0320 	and.w	r3, r3, #32
 8001890:	2b00      	cmp	r3, #0
 8001892:	d008      	beq.n	80018a6 <HAL_UART_IRQHandler+0x52>
 8001894:	6a3b      	ldr	r3, [r7, #32]
 8001896:	f003 0320 	and.w	r3, r3, #32
 800189a:	2b00      	cmp	r3, #0
 800189c:	d003      	beq.n	80018a6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f000 fac9 	bl	8001e36 <UART_Receive_IT>
      return;
 80018a4:	e17b      	b.n	8001b9e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	f000 80b1 	beq.w	8001a10 <HAL_UART_IRQHandler+0x1bc>
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	f003 0301 	and.w	r3, r3, #1
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d105      	bne.n	80018c4 <HAL_UART_IRQHandler+0x70>
 80018b8:	6a3b      	ldr	r3, [r7, #32]
 80018ba:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80018be:	2b00      	cmp	r3, #0
 80018c0:	f000 80a6 	beq.w	8001a10 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80018c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d00a      	beq.n	80018e4 <HAL_UART_IRQHandler+0x90>
 80018ce:	6a3b      	ldr	r3, [r7, #32]
 80018d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d005      	beq.n	80018e4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018dc:	f043 0201 	orr.w	r2, r3, #1
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80018e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e6:	f003 0304 	and.w	r3, r3, #4
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d00a      	beq.n	8001904 <HAL_UART_IRQHandler+0xb0>
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	f003 0301 	and.w	r3, r3, #1
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d005      	beq.n	8001904 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fc:	f043 0202 	orr.w	r2, r3, #2
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	2b00      	cmp	r3, #0
 800190c:	d00a      	beq.n	8001924 <HAL_UART_IRQHandler+0xd0>
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	f003 0301 	and.w	r3, r3, #1
 8001914:	2b00      	cmp	r3, #0
 8001916:	d005      	beq.n	8001924 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191c:	f043 0204 	orr.w	r2, r3, #4
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001926:	f003 0308 	and.w	r3, r3, #8
 800192a:	2b00      	cmp	r3, #0
 800192c:	d00f      	beq.n	800194e <HAL_UART_IRQHandler+0xfa>
 800192e:	6a3b      	ldr	r3, [r7, #32]
 8001930:	f003 0320 	and.w	r3, r3, #32
 8001934:	2b00      	cmp	r3, #0
 8001936:	d104      	bne.n	8001942 <HAL_UART_IRQHandler+0xee>
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	2b00      	cmp	r3, #0
 8001940:	d005      	beq.n	800194e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001946:	f043 0208 	orr.w	r2, r3, #8
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001952:	2b00      	cmp	r3, #0
 8001954:	f000 811e 	beq.w	8001b94 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195a:	f003 0320 	and.w	r3, r3, #32
 800195e:	2b00      	cmp	r3, #0
 8001960:	d007      	beq.n	8001972 <HAL_UART_IRQHandler+0x11e>
 8001962:	6a3b      	ldr	r3, [r7, #32]
 8001964:	f003 0320 	and.w	r3, r3, #32
 8001968:	2b00      	cmp	r3, #0
 800196a:	d002      	beq.n	8001972 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f000 fa62 	bl	8001e36 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	695b      	ldr	r3, [r3, #20]
 8001978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800197c:	2b00      	cmp	r3, #0
 800197e:	bf14      	ite	ne
 8001980:	2301      	movne	r3, #1
 8001982:	2300      	moveq	r3, #0
 8001984:	b2db      	uxtb	r3, r3
 8001986:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198c:	f003 0308 	and.w	r3, r3, #8
 8001990:	2b00      	cmp	r3, #0
 8001992:	d102      	bne.n	800199a <HAL_UART_IRQHandler+0x146>
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d031      	beq.n	80019fe <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f000 f9a4 	bl	8001ce8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	695b      	ldr	r3, [r3, #20]
 80019a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d023      	beq.n	80019f6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	695a      	ldr	r2, [r3, #20]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019bc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d013      	beq.n	80019ee <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019ca:	4a76      	ldr	r2, [pc, #472]	; (8001ba4 <HAL_UART_IRQHandler+0x350>)
 80019cc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff f802 	bl	80009dc <HAL_DMA_Abort_IT>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d016      	beq.n	8001a0c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80019e8:	4610      	mov	r0, r2
 80019ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80019ec:	e00e      	b.n	8001a0c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f000 f8e3 	bl	8001bba <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80019f4:	e00a      	b.n	8001a0c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f000 f8df 	bl	8001bba <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80019fc:	e006      	b.n	8001a0c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f000 f8db 	bl	8001bba <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8001a0a:	e0c3      	b.n	8001b94 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001a0c:	bf00      	nop
    return;
 8001a0e:	e0c1      	b.n	8001b94 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	f040 80a1 	bne.w	8001b5c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1c:	f003 0310 	and.w	r3, r3, #16
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	f000 809b 	beq.w	8001b5c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8001a26:	6a3b      	ldr	r3, [r7, #32]
 8001a28:	f003 0310 	and.w	r3, r3, #16
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	f000 8095 	beq.w	8001b5c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001a32:	2300      	movs	r3, #0
 8001a34:	60fb      	str	r3, [r7, #12]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	60fb      	str	r3, [r7, #12]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	60fb      	str	r3, [r7, #12]
 8001a46:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	695b      	ldr	r3, [r3, #20]
 8001a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d04e      	beq.n	8001af4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8001a60:	8a3b      	ldrh	r3, [r7, #16]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	f000 8098 	beq.w	8001b98 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001a6c:	8a3a      	ldrh	r2, [r7, #16]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	f080 8092 	bcs.w	8001b98 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	8a3a      	ldrh	r2, [r7, #16]
 8001a78:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	2b20      	cmp	r3, #32
 8001a82:	d02b      	beq.n	8001adc <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	68da      	ldr	r2, [r3, #12]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a92:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	695a      	ldr	r2, [r3, #20]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f022 0201 	bic.w	r2, r2, #1
 8001aa2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	695a      	ldr	r2, [r3, #20]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ab2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2220      	movs	r2, #32
 8001ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	68da      	ldr	r2, [r3, #12]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f022 0210 	bic.w	r2, r2, #16
 8001ad0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7fe ff45 	bl	8000966 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	4619      	mov	r1, r3
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f000 f86d 	bl	8001bcc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8001af2:	e051      	b.n	8001b98 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d047      	beq.n	8001b9c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8001b0c:	8a7b      	ldrh	r3, [r7, #18]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d044      	beq.n	8001b9c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	68da      	ldr	r2, [r3, #12]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001b20:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	695a      	ldr	r2, [r3, #20]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f022 0201 	bic.w	r2, r2, #1
 8001b30:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2220      	movs	r2, #32
 8001b36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	68da      	ldr	r2, [r3, #12]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f022 0210 	bic.w	r2, r2, #16
 8001b4e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001b50:	8a7b      	ldrh	r3, [r7, #18]
 8001b52:	4619      	mov	r1, r3
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f000 f839 	bl	8001bcc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8001b5a:	e01f      	b.n	8001b9c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d008      	beq.n	8001b78 <HAL_UART_IRQHandler+0x324>
 8001b66:	6a3b      	ldr	r3, [r7, #32]
 8001b68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d003      	beq.n	8001b78 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f000 f8f9 	bl	8001d68 <UART_Transmit_IT>
    return;
 8001b76:	e012      	b.n	8001b9e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d00d      	beq.n	8001b9e <HAL_UART_IRQHandler+0x34a>
 8001b82:	6a3b      	ldr	r3, [r7, #32]
 8001b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d008      	beq.n	8001b9e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f000 f93a 	bl	8001e06 <UART_EndTransmit_IT>
    return;
 8001b92:	e004      	b.n	8001b9e <HAL_UART_IRQHandler+0x34a>
    return;
 8001b94:	bf00      	nop
 8001b96:	e002      	b.n	8001b9e <HAL_UART_IRQHandler+0x34a>
      return;
 8001b98:	bf00      	nop
 8001b9a:	e000      	b.n	8001b9e <HAL_UART_IRQHandler+0x34a>
      return;
 8001b9c:	bf00      	nop
  }
}
 8001b9e:	3728      	adds	r7, #40	; 0x28
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	08001d41 	.word	0x08001d41

08001ba8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bc80      	pop	{r7}
 8001bb8:	4770      	bx	lr

08001bba <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	b083      	sub	sp, #12
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001bc2:	bf00      	nop
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bc80      	pop	{r7}
 8001bca:	4770      	bx	lr

08001bcc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bc80      	pop	{r7}
 8001be0:	4770      	bx	lr

08001be2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b084      	sub	sp, #16
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	60f8      	str	r0, [r7, #12]
 8001bea:	60b9      	str	r1, [r7, #8]
 8001bec:	603b      	str	r3, [r7, #0]
 8001bee:	4613      	mov	r3, r2
 8001bf0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001bf2:	e02c      	b.n	8001c4e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bfa:	d028      	beq.n	8001c4e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d007      	beq.n	8001c12 <UART_WaitOnFlagUntilTimeout+0x30>
 8001c02:	f7fe fd99 	bl	8000738 <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d21d      	bcs.n	8001c4e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	68da      	ldr	r2, [r3, #12]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001c20:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	695a      	ldr	r2, [r3, #20]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f022 0201 	bic.w	r2, r2, #1
 8001c30:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2220      	movs	r2, #32
 8001c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2220      	movs	r2, #32
 8001c3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2200      	movs	r2, #0
 8001c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e00f      	b.n	8001c6e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	4013      	ands	r3, r2
 8001c58:	68ba      	ldr	r2, [r7, #8]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	bf0c      	ite	eq
 8001c5e:	2301      	moveq	r3, #1
 8001c60:	2300      	movne	r3, #0
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	461a      	mov	r2, r3
 8001c66:	79fb      	ldrb	r3, [r7, #7]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d0c3      	beq.n	8001bf4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001c76:	b480      	push	{r7}
 8001c78:	b085      	sub	sp, #20
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	60f8      	str	r0, [r7, #12]
 8001c7e:	60b9      	str	r1, [r7, #8]
 8001c80:	4613      	mov	r3, r2
 8001c82:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	68ba      	ldr	r2, [r7, #8]
 8001c88:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	88fa      	ldrh	r2, [r7, #6]
 8001c8e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	88fa      	ldrh	r2, [r7, #6]
 8001c94:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2222      	movs	r2, #34	; 0x22
 8001ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	68da      	ldr	r2, [r3, #12]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cba:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	695a      	ldr	r2, [r3, #20]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f042 0201 	orr.w	r2, r2, #1
 8001cca:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	68da      	ldr	r2, [r3, #12]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f042 0220 	orr.w	r2, r2, #32
 8001cda:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3714      	adds	r7, #20
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bc80      	pop	{r7}
 8001ce6:	4770      	bx	lr

08001ce8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	68da      	ldr	r2, [r3, #12]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001cfe:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	695a      	ldr	r2, [r3, #20]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f022 0201 	bic.w	r2, r2, #1
 8001d0e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d107      	bne.n	8001d28 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	68da      	ldr	r2, [r3, #12]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f022 0210 	bic.w	r2, r2, #16
 8001d26:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2220      	movs	r2, #32
 8001d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001d36:	bf00      	nop
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bc80      	pop	{r7}
 8001d3e:	4770      	bx	lr

08001d40 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2200      	movs	r2, #0
 8001d52:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2200      	movs	r2, #0
 8001d58:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001d5a:	68f8      	ldr	r0, [r7, #12]
 8001d5c:	f7ff ff2d 	bl	8001bba <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001d60:	bf00      	nop
 8001d62:	3710      	adds	r7, #16
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	2b21      	cmp	r3, #33	; 0x21
 8001d7a:	d13e      	bne.n	8001dfa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d84:	d114      	bne.n	8001db0 <UART_Transmit_IT+0x48>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d110      	bne.n	8001db0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6a1b      	ldr	r3, [r3, #32]
 8001d92:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	881b      	ldrh	r3, [r3, #0]
 8001d98:	461a      	mov	r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001da2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a1b      	ldr	r3, [r3, #32]
 8001da8:	1c9a      	adds	r2, r3, #2
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	621a      	str	r2, [r3, #32]
 8001dae:	e008      	b.n	8001dc2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a1b      	ldr	r3, [r3, #32]
 8001db4:	1c59      	adds	r1, r3, #1
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	6211      	str	r1, [r2, #32]
 8001dba:	781a      	ldrb	r2, [r3, #0]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	4619      	mov	r1, r3
 8001dd0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d10f      	bne.n	8001df6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	68da      	ldr	r2, [r3, #12]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001de4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	68da      	ldr	r2, [r3, #12]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001df4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001df6:	2300      	movs	r3, #0
 8001df8:	e000      	b.n	8001dfc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8001dfa:	2302      	movs	r3, #2
  }
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3714      	adds	r7, #20
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bc80      	pop	{r7}
 8001e04:	4770      	bx	lr

08001e06 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b082      	sub	sp, #8
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68da      	ldr	r2, [r3, #12]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e1c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2220      	movs	r2, #32
 8001e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7ff febe 	bl	8001ba8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b086      	sub	sp, #24
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b22      	cmp	r3, #34	; 0x22
 8001e48:	f040 8099 	bne.w	8001f7e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e54:	d117      	bne.n	8001e86 <UART_Receive_IT+0x50>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	691b      	ldr	r3, [r3, #16]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d113      	bne.n	8001e86 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e66:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e74:	b29a      	uxth	r2, r3
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e7e:	1c9a      	adds	r2, r3, #2
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	629a      	str	r2, [r3, #40]	; 0x28
 8001e84:	e026      	b.n	8001ed4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e8a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e98:	d007      	beq.n	8001eaa <UART_Receive_IT+0x74>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d10a      	bne.n	8001eb8 <UART_Receive_IT+0x82>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d106      	bne.n	8001eb8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	b2da      	uxtb	r2, r3
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	701a      	strb	r2, [r3, #0]
 8001eb6:	e008      	b.n	8001eca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ec4:	b2da      	uxtb	r2, r3
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ece:	1c5a      	adds	r2, r3, #1
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	3b01      	subs	r3, #1
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d148      	bne.n	8001f7a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	68da      	ldr	r2, [r3, #12]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f022 0220 	bic.w	r2, r2, #32
 8001ef6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	68da      	ldr	r2, [r3, #12]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	695a      	ldr	r2, [r3, #20]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f022 0201 	bic.w	r2, r2, #1
 8001f16:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2220      	movs	r2, #32
 8001f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d123      	bne.n	8001f70 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68da      	ldr	r2, [r3, #12]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f022 0210 	bic.w	r2, r2, #16
 8001f3c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0310 	and.w	r3, r3, #16
 8001f48:	2b10      	cmp	r3, #16
 8001f4a:	d10a      	bne.n	8001f62 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	60fb      	str	r3, [r7, #12]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	60fb      	str	r3, [r7, #12]
 8001f60:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001f66:	4619      	mov	r1, r3
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f7ff fe2f 	bl	8001bcc <HAL_UARTEx_RxEventCallback>
 8001f6e:	e002      	b.n	8001f76 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f7fe f8fd 	bl	8000170 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8001f76:	2300      	movs	r3, #0
 8001f78:	e002      	b.n	8001f80 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	e000      	b.n	8001f80 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8001f7e:	2302      	movs	r3, #2
  }
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3718      	adds	r7, #24
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	691b      	ldr	r3, [r3, #16]
 8001f96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	68da      	ldr	r2, [r3, #12]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	689a      	ldr	r2, [r3, #8]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	431a      	orrs	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	695b      	ldr	r3, [r3, #20]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001fc2:	f023 030c 	bic.w	r3, r3, #12
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	6812      	ldr	r2, [r2, #0]
 8001fca:	68b9      	ldr	r1, [r7, #8]
 8001fcc:	430b      	orrs	r3, r1
 8001fce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	695b      	ldr	r3, [r3, #20]
 8001fd6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	699a      	ldr	r2, [r3, #24]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a2c      	ldr	r2, [pc, #176]	; (800209c <UART_SetConfig+0x114>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d103      	bne.n	8001ff8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001ff0:	f7ff faee 	bl	80015d0 <HAL_RCC_GetPCLK2Freq>
 8001ff4:	60f8      	str	r0, [r7, #12]
 8001ff6:	e002      	b.n	8001ffe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001ff8:	f7ff fad6 	bl	80015a8 <HAL_RCC_GetPCLK1Freq>
 8001ffc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	4613      	mov	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	4413      	add	r3, r2
 8002006:	009a      	lsls	r2, r3, #2
 8002008:	441a      	add	r2, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	fbb2 f3f3 	udiv	r3, r2, r3
 8002014:	4a22      	ldr	r2, [pc, #136]	; (80020a0 <UART_SetConfig+0x118>)
 8002016:	fba2 2303 	umull	r2, r3, r2, r3
 800201a:	095b      	lsrs	r3, r3, #5
 800201c:	0119      	lsls	r1, r3, #4
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	4613      	mov	r3, r2
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	4413      	add	r3, r2
 8002026:	009a      	lsls	r2, r3, #2
 8002028:	441a      	add	r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	fbb2 f2f3 	udiv	r2, r2, r3
 8002034:	4b1a      	ldr	r3, [pc, #104]	; (80020a0 <UART_SetConfig+0x118>)
 8002036:	fba3 0302 	umull	r0, r3, r3, r2
 800203a:	095b      	lsrs	r3, r3, #5
 800203c:	2064      	movs	r0, #100	; 0x64
 800203e:	fb00 f303 	mul.w	r3, r0, r3
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	011b      	lsls	r3, r3, #4
 8002046:	3332      	adds	r3, #50	; 0x32
 8002048:	4a15      	ldr	r2, [pc, #84]	; (80020a0 <UART_SetConfig+0x118>)
 800204a:	fba2 2303 	umull	r2, r3, r2, r3
 800204e:	095b      	lsrs	r3, r3, #5
 8002050:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002054:	4419      	add	r1, r3
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	4613      	mov	r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	4413      	add	r3, r2
 800205e:	009a      	lsls	r2, r3, #2
 8002060:	441a      	add	r2, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	fbb2 f2f3 	udiv	r2, r2, r3
 800206c:	4b0c      	ldr	r3, [pc, #48]	; (80020a0 <UART_SetConfig+0x118>)
 800206e:	fba3 0302 	umull	r0, r3, r3, r2
 8002072:	095b      	lsrs	r3, r3, #5
 8002074:	2064      	movs	r0, #100	; 0x64
 8002076:	fb00 f303 	mul.w	r3, r0, r3
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	011b      	lsls	r3, r3, #4
 800207e:	3332      	adds	r3, #50	; 0x32
 8002080:	4a07      	ldr	r2, [pc, #28]	; (80020a0 <UART_SetConfig+0x118>)
 8002082:	fba2 2303 	umull	r2, r3, r2, r3
 8002086:	095b      	lsrs	r3, r3, #5
 8002088:	f003 020f 	and.w	r2, r3, #15
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	440a      	add	r2, r1
 8002092:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002094:	bf00      	nop
 8002096:	3710      	adds	r7, #16
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40013800 	.word	0x40013800
 80020a0:	51eb851f 	.word	0x51eb851f

080020a4 <find_command_info>:
#include "cli_command.h"

extern const cli_command_entry_t command_entry_table[];

const cli_command_info_t *find_command_info(char *cmd){
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
	const cli_command_entry_t *command_entry = command_entry_table;
 80020ac:	4b0d      	ldr	r3, [pc, #52]	; (80020e4 <find_command_info+0x40>)
 80020ae:	60fb      	str	r3, [r7, #12]

	while(command_entry->name != NULL){
 80020b0:	e00e      	b.n	80020d0 <find_command_info+0x2c>
		if(strcmp(command_entry->name, cmd) == 0){
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	6879      	ldr	r1, [r7, #4]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7fe f847 	bl	800014c <strcmp>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d102      	bne.n	80020ca <find_command_info+0x26>
			return command_entry->command_info;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	e007      	b.n	80020da <find_command_info+0x36>
		}
		command_entry++;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	3308      	adds	r3, #8
 80020ce:	60fb      	str	r3, [r7, #12]
	while(command_entry->name != NULL){
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d1ec      	bne.n	80020b2 <find_command_info+0xe>
	}
	return NULL;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	08003910 	.word	0x08003910

080020e8 <cli_command_execute>:

void cli_command_execute(char *uart_buffer, uint8_t len){
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b090      	sub	sp, #64	; 0x40
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	460b      	mov	r3, r1
 80020f2:	70fb      	strb	r3, [r7, #3]
	char *arg_value[10];
	uint8_t arg_num = 0;
 80020f4:	2300      	movs	r3, #0
 80020f6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	char *token = strtok((char *)uart_buffer, " ");
 80020fa:	4919      	ldr	r1, [pc, #100]	; (8002160 <cli_command_execute+0x78>)
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f000 f91d 	bl	800233c <strtok>
 8002102:	63b8      	str	r0, [r7, #56]	; 0x38
	while(token != NULL){
 8002104:	e010      	b.n	8002128 <cli_command_execute+0x40>
		arg_value[arg_num++] = token;
 8002106:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800210a:	1c5a      	adds	r2, r3, #1
 800210c:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002116:	4413      	add	r3, r2
 8002118:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800211a:	f843 2c34 	str.w	r2, [r3, #-52]
		token = strtok(NULL, " ");
 800211e:	4910      	ldr	r1, [pc, #64]	; (8002160 <cli_command_execute+0x78>)
 8002120:	2000      	movs	r0, #0
 8002122:	f000 f90b 	bl	800233c <strtok>
 8002126:	63b8      	str	r0, [r7, #56]	; 0x38
	while(token != NULL){
 8002128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1eb      	bne.n	8002106 <cli_command_execute+0x1e>
	}

	const cli_command_info_t *command_info = find_command_info(arg_value[0]);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff ffb7 	bl	80020a4 <find_command_info>
 8002136:	6378      	str	r0, [r7, #52]	; 0x34
	if(command_info != NULL){
 8002138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800213a:	2b00      	cmp	r3, #0
 800213c:	d008      	beq.n	8002150 <cli_command_execute+0x68>
		command_info->function(arg_value, arg_num);
 800213e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8002146:	f107 020c 	add.w	r2, r7, #12
 800214a:	4610      	mov	r0, r2
 800214c:	4798      	blx	r3
	} else{
		response_print("Cannot find command.");
	}
}
 800214e:	e002      	b.n	8002156 <cli_command_execute+0x6e>
		response_print("Cannot find command.");
 8002150:	4804      	ldr	r0, [pc, #16]	; (8002164 <cli_command_execute+0x7c>)
 8002152:	f000 f853 	bl	80021fc <response_print>
}
 8002156:	bf00      	nop
 8002158:	3740      	adds	r7, #64	; 0x40
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	08003878 	.word	0x08003878
 8002164:	0800387c 	.word	0x0800387c

08002168 <read_time>:
#include "read_time.h"

void read_time(char **arg_value, uint8_t arg_num){
 8002168:	b5b0      	push	{r4, r5, r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	460b      	mov	r3, r1
 8002172:	70fb      	strb	r3, [r7, #3]
	if(arg_num > 4){
 8002174:	78fb      	ldrb	r3, [r7, #3]
 8002176:	2b04      	cmp	r3, #4
 8002178:	d905      	bls.n	8002186 <read_time+0x1e>
		response_print("Too much arguments [%d]", arg_num);
 800217a:	78fb      	ldrb	r3, [r7, #3]
 800217c:	4619      	mov	r1, r3
 800217e:	4815      	ldr	r0, [pc, #84]	; (80021d4 <read_time+0x6c>)
 8002180:	f000 f83c 	bl	80021fc <response_print>
		return;
 8002184:	e022      	b.n	80021cc <read_time+0x64>
	} else if(arg_num < 4){
 8002186:	78fb      	ldrb	r3, [r7, #3]
 8002188:	2b03      	cmp	r3, #3
 800218a:	d805      	bhi.n	8002198 <read_time+0x30>
		response_print("Don't enough arguments [%d]", arg_num);
 800218c:	78fb      	ldrb	r3, [r7, #3]
 800218e:	4619      	mov	r1, r3
 8002190:	4811      	ldr	r0, [pc, #68]	; (80021d8 <read_time+0x70>)
 8002192:	f000 f833 	bl	80021fc <response_print>
		return;
 8002196:	e019      	b.n	80021cc <read_time+0x64>
	}
	response_print("%dh : %dm %d day\n", atoi((const char *)arg_value[1]), atoi((const char *)arg_value[2]), atoi((const char *)arg_value[3]));
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	3304      	adds	r3, #4
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4618      	mov	r0, r3
 80021a0:	f000 f896 	bl	80022d0 <atoi>
 80021a4:	4604      	mov	r4, r0
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	3308      	adds	r3, #8
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f000 f88f 	bl	80022d0 <atoi>
 80021b2:	4605      	mov	r5, r0
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	330c      	adds	r3, #12
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f000 f888 	bl	80022d0 <atoi>
 80021c0:	4603      	mov	r3, r0
 80021c2:	462a      	mov	r2, r5
 80021c4:	4621      	mov	r1, r4
 80021c6:	4805      	ldr	r0, [pc, #20]	; (80021dc <read_time+0x74>)
 80021c8:	f000 f818 	bl	80021fc <response_print>
}
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bdb0      	pop	{r4, r5, r7, pc}
 80021d2:	bf00      	nop
 80021d4:	080038a8 	.word	0x080038a8
 80021d8:	080038c0 	.word	0x080038c0
 80021dc:	080038dc 	.word	0x080038dc

080021e0 <response_init>:
#include "response.h"

static UART_HandleTypeDef *huart;

void response_init(UART_HandleTypeDef *_huart){
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
	huart = _huart;
 80021e8:	4a03      	ldr	r2, [pc, #12]	; (80021f8 <response_init+0x18>)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6013      	str	r3, [r2, #0]
}
 80021ee:	bf00      	nop
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bc80      	pop	{r7}
 80021f6:	4770      	bx	lr
 80021f8:	20000094 	.word	0x20000094

080021fc <response_print>:

void response_print(const char *str, ...){
 80021fc:	b40f      	push	{r0, r1, r2, r3}
 80021fe:	b590      	push	{r4, r7, lr}
 8002200:	b08f      	sub	sp, #60	; 0x3c
 8002202:	af00      	add	r7, sp, #0
	char stringArray[50];

	va_list args;
	va_start(args, str);
 8002204:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002208:	603b      	str	r3, [r7, #0]
	vsprintf(stringArray, str, args);
 800220a:	1d3b      	adds	r3, r7, #4
 800220c:	683a      	ldr	r2, [r7, #0]
 800220e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002210:	4618      	mov	r0, r3
 8002212:	f000 f995 	bl	8002540 <vsiprintf>
	va_end(args);

	HAL_UART_Transmit(huart, (uint8_t *)stringArray, strlen(stringArray), 100);
 8002216:	4b0a      	ldr	r3, [pc, #40]	; (8002240 <response_print+0x44>)
 8002218:	681c      	ldr	r4, [r3, #0]
 800221a:	1d3b      	adds	r3, r7, #4
 800221c:	4618      	mov	r0, r3
 800221e:	f7fd ff9f 	bl	8000160 <strlen>
 8002222:	4603      	mov	r3, r0
 8002224:	b29a      	uxth	r2, r3
 8002226:	1d39      	adds	r1, r7, #4
 8002228:	2364      	movs	r3, #100	; 0x64
 800222a:	4620      	mov	r0, r4
 800222c:	f7ff fa4f 	bl	80016ce <HAL_UART_Transmit>
}
 8002230:	bf00      	nop
 8002232:	373c      	adds	r7, #60	; 0x3c
 8002234:	46bd      	mov	sp, r7
 8002236:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800223a:	b004      	add	sp, #16
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	20000094 	.word	0x20000094

08002244 <UART_Receive>:

static uint8_t uart_buffer[UART_MAX_LEN];
static uint8_t uart_pointer = 0;
static uint8_t uart_flag = 0;

void UART_Receive(uint8_t Rx_Buffer){
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	4603      	mov	r3, r0
 800224c:	71fb      	strb	r3, [r7, #7]
	if(Rx_Buffer == '\n'){
 800224e:	79fb      	ldrb	r3, [r7, #7]
 8002250:	2b0a      	cmp	r3, #10
 8002252:	d10d      	bne.n	8002270 <UART_Receive+0x2c>
		uart_buffer[uart_pointer++] = '\0';
 8002254:	4b0e      	ldr	r3, [pc, #56]	; (8002290 <UART_Receive+0x4c>)
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	1c5a      	adds	r2, r3, #1
 800225a:	b2d1      	uxtb	r1, r2
 800225c:	4a0c      	ldr	r2, [pc, #48]	; (8002290 <UART_Receive+0x4c>)
 800225e:	7011      	strb	r1, [r2, #0]
 8002260:	461a      	mov	r2, r3
 8002262:	4b0c      	ldr	r3, [pc, #48]	; (8002294 <UART_Receive+0x50>)
 8002264:	2100      	movs	r1, #0
 8002266:	5499      	strb	r1, [r3, r2]
		uart_flag = 1;
 8002268:	4b0b      	ldr	r3, [pc, #44]	; (8002298 <UART_Receive+0x54>)
 800226a:	2201      	movs	r2, #1
 800226c:	701a      	strb	r2, [r3, #0]
	} else{
		uart_buffer[uart_pointer++] = Rx_Buffer;
	}
}
 800226e:	e009      	b.n	8002284 <UART_Receive+0x40>
		uart_buffer[uart_pointer++] = Rx_Buffer;
 8002270:	4b07      	ldr	r3, [pc, #28]	; (8002290 <UART_Receive+0x4c>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	1c5a      	adds	r2, r3, #1
 8002276:	b2d1      	uxtb	r1, r2
 8002278:	4a05      	ldr	r2, [pc, #20]	; (8002290 <UART_Receive+0x4c>)
 800227a:	7011      	strb	r1, [r2, #0]
 800227c:	4619      	mov	r1, r3
 800227e:	4a05      	ldr	r2, [pc, #20]	; (8002294 <UART_Receive+0x50>)
 8002280:	79fb      	ldrb	r3, [r7, #7]
 8002282:	5453      	strb	r3, [r2, r1]
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	bc80      	pop	{r7}
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	200000fc 	.word	0x200000fc
 8002294:	20000098 	.word	0x20000098
 8002298:	200000fd 	.word	0x200000fd

0800229c <UART_Handle>:

void UART_Handle(){
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
	if(uart_flag){
 80022a0:	4b08      	ldr	r3, [pc, #32]	; (80022c4 <UART_Handle+0x28>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d00b      	beq.n	80022c0 <UART_Handle+0x24>
		cli_command_execute((char *)uart_buffer, uart_pointer);
 80022a8:	4b07      	ldr	r3, [pc, #28]	; (80022c8 <UART_Handle+0x2c>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	4619      	mov	r1, r3
 80022ae:	4807      	ldr	r0, [pc, #28]	; (80022cc <UART_Handle+0x30>)
 80022b0:	f7ff ff1a 	bl	80020e8 <cli_command_execute>
		uart_pointer = 0;
 80022b4:	4b04      	ldr	r3, [pc, #16]	; (80022c8 <UART_Handle+0x2c>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	701a      	strb	r2, [r3, #0]
		uart_flag = 0;
 80022ba:	4b02      	ldr	r3, [pc, #8]	; (80022c4 <UART_Handle+0x28>)
 80022bc:	2200      	movs	r2, #0
 80022be:	701a      	strb	r2, [r3, #0]
	}
}
 80022c0:	bf00      	nop
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	200000fd 	.word	0x200000fd
 80022c8:	200000fc 	.word	0x200000fc
 80022cc:	20000098 	.word	0x20000098

080022d0 <atoi>:
 80022d0:	220a      	movs	r2, #10
 80022d2:	2100      	movs	r1, #0
 80022d4:	f000 b914 	b.w	8002500 <strtol>

080022d8 <__errno>:
 80022d8:	4b01      	ldr	r3, [pc, #4]	; (80022e0 <__errno+0x8>)
 80022da:	6818      	ldr	r0, [r3, #0]
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	2000000c 	.word	0x2000000c

080022e4 <__libc_init_array>:
 80022e4:	b570      	push	{r4, r5, r6, lr}
 80022e6:	2600      	movs	r6, #0
 80022e8:	4d0c      	ldr	r5, [pc, #48]	; (800231c <__libc_init_array+0x38>)
 80022ea:	4c0d      	ldr	r4, [pc, #52]	; (8002320 <__libc_init_array+0x3c>)
 80022ec:	1b64      	subs	r4, r4, r5
 80022ee:	10a4      	asrs	r4, r4, #2
 80022f0:	42a6      	cmp	r6, r4
 80022f2:	d109      	bne.n	8002308 <__libc_init_array+0x24>
 80022f4:	f001 faac 	bl	8003850 <_init>
 80022f8:	2600      	movs	r6, #0
 80022fa:	4d0a      	ldr	r5, [pc, #40]	; (8002324 <__libc_init_array+0x40>)
 80022fc:	4c0a      	ldr	r4, [pc, #40]	; (8002328 <__libc_init_array+0x44>)
 80022fe:	1b64      	subs	r4, r4, r5
 8002300:	10a4      	asrs	r4, r4, #2
 8002302:	42a6      	cmp	r6, r4
 8002304:	d105      	bne.n	8002312 <__libc_init_array+0x2e>
 8002306:	bd70      	pop	{r4, r5, r6, pc}
 8002308:	f855 3b04 	ldr.w	r3, [r5], #4
 800230c:	4798      	blx	r3
 800230e:	3601      	adds	r6, #1
 8002310:	e7ee      	b.n	80022f0 <__libc_init_array+0xc>
 8002312:	f855 3b04 	ldr.w	r3, [r5], #4
 8002316:	4798      	blx	r3
 8002318:	3601      	adds	r6, #1
 800231a:	e7f2      	b.n	8002302 <__libc_init_array+0x1e>
 800231c:	08003b6c 	.word	0x08003b6c
 8002320:	08003b6c 	.word	0x08003b6c
 8002324:	08003b6c 	.word	0x08003b6c
 8002328:	08003b70 	.word	0x08003b70

0800232c <memset>:
 800232c:	4603      	mov	r3, r0
 800232e:	4402      	add	r2, r0
 8002330:	4293      	cmp	r3, r2
 8002332:	d100      	bne.n	8002336 <memset+0xa>
 8002334:	4770      	bx	lr
 8002336:	f803 1b01 	strb.w	r1, [r3], #1
 800233a:	e7f9      	b.n	8002330 <memset+0x4>

0800233c <strtok>:
 800233c:	4b16      	ldr	r3, [pc, #88]	; (8002398 <strtok+0x5c>)
 800233e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002342:	681f      	ldr	r7, [r3, #0]
 8002344:	4605      	mov	r5, r0
 8002346:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8002348:	460e      	mov	r6, r1
 800234a:	b9ec      	cbnz	r4, 8002388 <strtok+0x4c>
 800234c:	2050      	movs	r0, #80	; 0x50
 800234e:	f000 f931 	bl	80025b4 <malloc>
 8002352:	4602      	mov	r2, r0
 8002354:	65b8      	str	r0, [r7, #88]	; 0x58
 8002356:	b920      	cbnz	r0, 8002362 <strtok+0x26>
 8002358:	2157      	movs	r1, #87	; 0x57
 800235a:	4b10      	ldr	r3, [pc, #64]	; (800239c <strtok+0x60>)
 800235c:	4810      	ldr	r0, [pc, #64]	; (80023a0 <strtok+0x64>)
 800235e:	f000 f8f9 	bl	8002554 <__assert_func>
 8002362:	e9c0 4400 	strd	r4, r4, [r0]
 8002366:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800236a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800236e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8002372:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8002376:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800237a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800237e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8002382:	6184      	str	r4, [r0, #24]
 8002384:	7704      	strb	r4, [r0, #28]
 8002386:	6244      	str	r4, [r0, #36]	; 0x24
 8002388:	4631      	mov	r1, r6
 800238a:	4628      	mov	r0, r5
 800238c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800238e:	2301      	movs	r3, #1
 8002390:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002394:	f000 b806 	b.w	80023a4 <__strtok_r>
 8002398:	2000000c 	.word	0x2000000c
 800239c:	08003924 	.word	0x08003924
 80023a0:	0800393b 	.word	0x0800393b

080023a4 <__strtok_r>:
 80023a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023a6:	b908      	cbnz	r0, 80023ac <__strtok_r+0x8>
 80023a8:	6810      	ldr	r0, [r2, #0]
 80023aa:	b188      	cbz	r0, 80023d0 <__strtok_r+0x2c>
 80023ac:	4604      	mov	r4, r0
 80023ae:	460f      	mov	r7, r1
 80023b0:	4620      	mov	r0, r4
 80023b2:	f814 5b01 	ldrb.w	r5, [r4], #1
 80023b6:	f817 6b01 	ldrb.w	r6, [r7], #1
 80023ba:	b91e      	cbnz	r6, 80023c4 <__strtok_r+0x20>
 80023bc:	b965      	cbnz	r5, 80023d8 <__strtok_r+0x34>
 80023be:	4628      	mov	r0, r5
 80023c0:	6015      	str	r5, [r2, #0]
 80023c2:	e005      	b.n	80023d0 <__strtok_r+0x2c>
 80023c4:	42b5      	cmp	r5, r6
 80023c6:	d1f6      	bne.n	80023b6 <__strtok_r+0x12>
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d1f0      	bne.n	80023ae <__strtok_r+0xa>
 80023cc:	6014      	str	r4, [r2, #0]
 80023ce:	7003      	strb	r3, [r0, #0]
 80023d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023d2:	461c      	mov	r4, r3
 80023d4:	e00c      	b.n	80023f0 <__strtok_r+0x4c>
 80023d6:	b915      	cbnz	r5, 80023de <__strtok_r+0x3a>
 80023d8:	460e      	mov	r6, r1
 80023da:	f814 3b01 	ldrb.w	r3, [r4], #1
 80023de:	f816 5b01 	ldrb.w	r5, [r6], #1
 80023e2:	42ab      	cmp	r3, r5
 80023e4:	d1f7      	bne.n	80023d6 <__strtok_r+0x32>
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d0f3      	beq.n	80023d2 <__strtok_r+0x2e>
 80023ea:	2300      	movs	r3, #0
 80023ec:	f804 3c01 	strb.w	r3, [r4, #-1]
 80023f0:	6014      	str	r4, [r2, #0]
 80023f2:	e7ed      	b.n	80023d0 <__strtok_r+0x2c>

080023f4 <_strtol_l.isra.0>:
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80023fa:	4686      	mov	lr, r0
 80023fc:	d001      	beq.n	8002402 <_strtol_l.isra.0+0xe>
 80023fe:	2b24      	cmp	r3, #36	; 0x24
 8002400:	d906      	bls.n	8002410 <_strtol_l.isra.0+0x1c>
 8002402:	f7ff ff69 	bl	80022d8 <__errno>
 8002406:	2316      	movs	r3, #22
 8002408:	6003      	str	r3, [r0, #0]
 800240a:	2000      	movs	r0, #0
 800240c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002410:	468c      	mov	ip, r1
 8002412:	4e3a      	ldr	r6, [pc, #232]	; (80024fc <_strtol_l.isra.0+0x108>)
 8002414:	4660      	mov	r0, ip
 8002416:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800241a:	5da5      	ldrb	r5, [r4, r6]
 800241c:	f015 0508 	ands.w	r5, r5, #8
 8002420:	d1f8      	bne.n	8002414 <_strtol_l.isra.0+0x20>
 8002422:	2c2d      	cmp	r4, #45	; 0x2d
 8002424:	d133      	bne.n	800248e <_strtol_l.isra.0+0x9a>
 8002426:	f04f 0801 	mov.w	r8, #1
 800242a:	f89c 4000 	ldrb.w	r4, [ip]
 800242e:	f100 0c02 	add.w	ip, r0, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d05d      	beq.n	80024f2 <_strtol_l.isra.0+0xfe>
 8002436:	2b10      	cmp	r3, #16
 8002438:	d10c      	bne.n	8002454 <_strtol_l.isra.0+0x60>
 800243a:	2c30      	cmp	r4, #48	; 0x30
 800243c:	d10a      	bne.n	8002454 <_strtol_l.isra.0+0x60>
 800243e:	f89c 0000 	ldrb.w	r0, [ip]
 8002442:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8002446:	2858      	cmp	r0, #88	; 0x58
 8002448:	d14e      	bne.n	80024e8 <_strtol_l.isra.0+0xf4>
 800244a:	2310      	movs	r3, #16
 800244c:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8002450:	f10c 0c02 	add.w	ip, ip, #2
 8002454:	2500      	movs	r5, #0
 8002456:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 800245a:	3f01      	subs	r7, #1
 800245c:	fbb7 f9f3 	udiv	r9, r7, r3
 8002460:	4628      	mov	r0, r5
 8002462:	fb03 7a19 	mls	sl, r3, r9, r7
 8002466:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800246a:	2e09      	cmp	r6, #9
 800246c:	d818      	bhi.n	80024a0 <_strtol_l.isra.0+0xac>
 800246e:	4634      	mov	r4, r6
 8002470:	42a3      	cmp	r3, r4
 8002472:	dd24      	ble.n	80024be <_strtol_l.isra.0+0xca>
 8002474:	2d00      	cmp	r5, #0
 8002476:	db1f      	blt.n	80024b8 <_strtol_l.isra.0+0xc4>
 8002478:	4581      	cmp	r9, r0
 800247a:	d31d      	bcc.n	80024b8 <_strtol_l.isra.0+0xc4>
 800247c:	d101      	bne.n	8002482 <_strtol_l.isra.0+0x8e>
 800247e:	45a2      	cmp	sl, r4
 8002480:	db1a      	blt.n	80024b8 <_strtol_l.isra.0+0xc4>
 8002482:	2501      	movs	r5, #1
 8002484:	fb00 4003 	mla	r0, r0, r3, r4
 8002488:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800248c:	e7eb      	b.n	8002466 <_strtol_l.isra.0+0x72>
 800248e:	2c2b      	cmp	r4, #43	; 0x2b
 8002490:	bf08      	it	eq
 8002492:	f89c 4000 	ldrbeq.w	r4, [ip]
 8002496:	46a8      	mov	r8, r5
 8002498:	bf08      	it	eq
 800249a:	f100 0c02 	addeq.w	ip, r0, #2
 800249e:	e7c8      	b.n	8002432 <_strtol_l.isra.0+0x3e>
 80024a0:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80024a4:	2e19      	cmp	r6, #25
 80024a6:	d801      	bhi.n	80024ac <_strtol_l.isra.0+0xb8>
 80024a8:	3c37      	subs	r4, #55	; 0x37
 80024aa:	e7e1      	b.n	8002470 <_strtol_l.isra.0+0x7c>
 80024ac:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80024b0:	2e19      	cmp	r6, #25
 80024b2:	d804      	bhi.n	80024be <_strtol_l.isra.0+0xca>
 80024b4:	3c57      	subs	r4, #87	; 0x57
 80024b6:	e7db      	b.n	8002470 <_strtol_l.isra.0+0x7c>
 80024b8:	f04f 35ff 	mov.w	r5, #4294967295
 80024bc:	e7e4      	b.n	8002488 <_strtol_l.isra.0+0x94>
 80024be:	2d00      	cmp	r5, #0
 80024c0:	da08      	bge.n	80024d4 <_strtol_l.isra.0+0xe0>
 80024c2:	2322      	movs	r3, #34	; 0x22
 80024c4:	4638      	mov	r0, r7
 80024c6:	f8ce 3000 	str.w	r3, [lr]
 80024ca:	2a00      	cmp	r2, #0
 80024cc:	d09e      	beq.n	800240c <_strtol_l.isra.0+0x18>
 80024ce:	f10c 31ff 	add.w	r1, ip, #4294967295
 80024d2:	e007      	b.n	80024e4 <_strtol_l.isra.0+0xf0>
 80024d4:	f1b8 0f00 	cmp.w	r8, #0
 80024d8:	d000      	beq.n	80024dc <_strtol_l.isra.0+0xe8>
 80024da:	4240      	negs	r0, r0
 80024dc:	2a00      	cmp	r2, #0
 80024de:	d095      	beq.n	800240c <_strtol_l.isra.0+0x18>
 80024e0:	2d00      	cmp	r5, #0
 80024e2:	d1f4      	bne.n	80024ce <_strtol_l.isra.0+0xda>
 80024e4:	6011      	str	r1, [r2, #0]
 80024e6:	e791      	b.n	800240c <_strtol_l.isra.0+0x18>
 80024e8:	2430      	movs	r4, #48	; 0x30
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1b2      	bne.n	8002454 <_strtol_l.isra.0+0x60>
 80024ee:	2308      	movs	r3, #8
 80024f0:	e7b0      	b.n	8002454 <_strtol_l.isra.0+0x60>
 80024f2:	2c30      	cmp	r4, #48	; 0x30
 80024f4:	d0a3      	beq.n	800243e <_strtol_l.isra.0+0x4a>
 80024f6:	230a      	movs	r3, #10
 80024f8:	e7ac      	b.n	8002454 <_strtol_l.isra.0+0x60>
 80024fa:	bf00      	nop
 80024fc:	080039d9 	.word	0x080039d9

08002500 <strtol>:
 8002500:	4613      	mov	r3, r2
 8002502:	460a      	mov	r2, r1
 8002504:	4601      	mov	r1, r0
 8002506:	4802      	ldr	r0, [pc, #8]	; (8002510 <strtol+0x10>)
 8002508:	6800      	ldr	r0, [r0, #0]
 800250a:	f7ff bf73 	b.w	80023f4 <_strtol_l.isra.0>
 800250e:	bf00      	nop
 8002510:	2000000c 	.word	0x2000000c

08002514 <_vsiprintf_r>:
 8002514:	b500      	push	{lr}
 8002516:	b09b      	sub	sp, #108	; 0x6c
 8002518:	9100      	str	r1, [sp, #0]
 800251a:	9104      	str	r1, [sp, #16]
 800251c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002520:	9105      	str	r1, [sp, #20]
 8002522:	9102      	str	r1, [sp, #8]
 8002524:	4905      	ldr	r1, [pc, #20]	; (800253c <_vsiprintf_r+0x28>)
 8002526:	9103      	str	r1, [sp, #12]
 8002528:	4669      	mov	r1, sp
 800252a:	f000 f94d 	bl	80027c8 <_svfiprintf_r>
 800252e:	2200      	movs	r2, #0
 8002530:	9b00      	ldr	r3, [sp, #0]
 8002532:	701a      	strb	r2, [r3, #0]
 8002534:	b01b      	add	sp, #108	; 0x6c
 8002536:	f85d fb04 	ldr.w	pc, [sp], #4
 800253a:	bf00      	nop
 800253c:	ffff0208 	.word	0xffff0208

08002540 <vsiprintf>:
 8002540:	4613      	mov	r3, r2
 8002542:	460a      	mov	r2, r1
 8002544:	4601      	mov	r1, r0
 8002546:	4802      	ldr	r0, [pc, #8]	; (8002550 <vsiprintf+0x10>)
 8002548:	6800      	ldr	r0, [r0, #0]
 800254a:	f7ff bfe3 	b.w	8002514 <_vsiprintf_r>
 800254e:	bf00      	nop
 8002550:	2000000c 	.word	0x2000000c

08002554 <__assert_func>:
 8002554:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002556:	4614      	mov	r4, r2
 8002558:	461a      	mov	r2, r3
 800255a:	4b09      	ldr	r3, [pc, #36]	; (8002580 <__assert_func+0x2c>)
 800255c:	4605      	mov	r5, r0
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	68d8      	ldr	r0, [r3, #12]
 8002562:	b14c      	cbz	r4, 8002578 <__assert_func+0x24>
 8002564:	4b07      	ldr	r3, [pc, #28]	; (8002584 <__assert_func+0x30>)
 8002566:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800256a:	9100      	str	r1, [sp, #0]
 800256c:	462b      	mov	r3, r5
 800256e:	4906      	ldr	r1, [pc, #24]	; (8002588 <__assert_func+0x34>)
 8002570:	f000 f80e 	bl	8002590 <fiprintf>
 8002574:	f000 fde6 	bl	8003144 <abort>
 8002578:	4b04      	ldr	r3, [pc, #16]	; (800258c <__assert_func+0x38>)
 800257a:	461c      	mov	r4, r3
 800257c:	e7f3      	b.n	8002566 <__assert_func+0x12>
 800257e:	bf00      	nop
 8002580:	2000000c 	.word	0x2000000c
 8002584:	0800399c 	.word	0x0800399c
 8002588:	080039a9 	.word	0x080039a9
 800258c:	080039d7 	.word	0x080039d7

08002590 <fiprintf>:
 8002590:	b40e      	push	{r1, r2, r3}
 8002592:	b503      	push	{r0, r1, lr}
 8002594:	4601      	mov	r1, r0
 8002596:	ab03      	add	r3, sp, #12
 8002598:	4805      	ldr	r0, [pc, #20]	; (80025b0 <fiprintf+0x20>)
 800259a:	f853 2b04 	ldr.w	r2, [r3], #4
 800259e:	6800      	ldr	r0, [r0, #0]
 80025a0:	9301      	str	r3, [sp, #4]
 80025a2:	f000 fa39 	bl	8002a18 <_vfiprintf_r>
 80025a6:	b002      	add	sp, #8
 80025a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80025ac:	b003      	add	sp, #12
 80025ae:	4770      	bx	lr
 80025b0:	2000000c 	.word	0x2000000c

080025b4 <malloc>:
 80025b4:	4b02      	ldr	r3, [pc, #8]	; (80025c0 <malloc+0xc>)
 80025b6:	4601      	mov	r1, r0
 80025b8:	6818      	ldr	r0, [r3, #0]
 80025ba:	f000 b84f 	b.w	800265c <_malloc_r>
 80025be:	bf00      	nop
 80025c0:	2000000c 	.word	0x2000000c

080025c4 <_free_r>:
 80025c4:	b538      	push	{r3, r4, r5, lr}
 80025c6:	4605      	mov	r5, r0
 80025c8:	2900      	cmp	r1, #0
 80025ca:	d043      	beq.n	8002654 <_free_r+0x90>
 80025cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80025d0:	1f0c      	subs	r4, r1, #4
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	bfb8      	it	lt
 80025d6:	18e4      	addlt	r4, r4, r3
 80025d8:	f001 f810 	bl	80035fc <__malloc_lock>
 80025dc:	4a1e      	ldr	r2, [pc, #120]	; (8002658 <_free_r+0x94>)
 80025de:	6813      	ldr	r3, [r2, #0]
 80025e0:	4610      	mov	r0, r2
 80025e2:	b933      	cbnz	r3, 80025f2 <_free_r+0x2e>
 80025e4:	6063      	str	r3, [r4, #4]
 80025e6:	6014      	str	r4, [r2, #0]
 80025e8:	4628      	mov	r0, r5
 80025ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80025ee:	f001 b80b 	b.w	8003608 <__malloc_unlock>
 80025f2:	42a3      	cmp	r3, r4
 80025f4:	d90a      	bls.n	800260c <_free_r+0x48>
 80025f6:	6821      	ldr	r1, [r4, #0]
 80025f8:	1862      	adds	r2, r4, r1
 80025fa:	4293      	cmp	r3, r2
 80025fc:	bf01      	itttt	eq
 80025fe:	681a      	ldreq	r2, [r3, #0]
 8002600:	685b      	ldreq	r3, [r3, #4]
 8002602:	1852      	addeq	r2, r2, r1
 8002604:	6022      	streq	r2, [r4, #0]
 8002606:	6063      	str	r3, [r4, #4]
 8002608:	6004      	str	r4, [r0, #0]
 800260a:	e7ed      	b.n	80025e8 <_free_r+0x24>
 800260c:	461a      	mov	r2, r3
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	b10b      	cbz	r3, 8002616 <_free_r+0x52>
 8002612:	42a3      	cmp	r3, r4
 8002614:	d9fa      	bls.n	800260c <_free_r+0x48>
 8002616:	6811      	ldr	r1, [r2, #0]
 8002618:	1850      	adds	r0, r2, r1
 800261a:	42a0      	cmp	r0, r4
 800261c:	d10b      	bne.n	8002636 <_free_r+0x72>
 800261e:	6820      	ldr	r0, [r4, #0]
 8002620:	4401      	add	r1, r0
 8002622:	1850      	adds	r0, r2, r1
 8002624:	4283      	cmp	r3, r0
 8002626:	6011      	str	r1, [r2, #0]
 8002628:	d1de      	bne.n	80025e8 <_free_r+0x24>
 800262a:	6818      	ldr	r0, [r3, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	4401      	add	r1, r0
 8002630:	6011      	str	r1, [r2, #0]
 8002632:	6053      	str	r3, [r2, #4]
 8002634:	e7d8      	b.n	80025e8 <_free_r+0x24>
 8002636:	d902      	bls.n	800263e <_free_r+0x7a>
 8002638:	230c      	movs	r3, #12
 800263a:	602b      	str	r3, [r5, #0]
 800263c:	e7d4      	b.n	80025e8 <_free_r+0x24>
 800263e:	6820      	ldr	r0, [r4, #0]
 8002640:	1821      	adds	r1, r4, r0
 8002642:	428b      	cmp	r3, r1
 8002644:	bf01      	itttt	eq
 8002646:	6819      	ldreq	r1, [r3, #0]
 8002648:	685b      	ldreq	r3, [r3, #4]
 800264a:	1809      	addeq	r1, r1, r0
 800264c:	6021      	streq	r1, [r4, #0]
 800264e:	6063      	str	r3, [r4, #4]
 8002650:	6054      	str	r4, [r2, #4]
 8002652:	e7c9      	b.n	80025e8 <_free_r+0x24>
 8002654:	bd38      	pop	{r3, r4, r5, pc}
 8002656:	bf00      	nop
 8002658:	20000100 	.word	0x20000100

0800265c <_malloc_r>:
 800265c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800265e:	1ccd      	adds	r5, r1, #3
 8002660:	f025 0503 	bic.w	r5, r5, #3
 8002664:	3508      	adds	r5, #8
 8002666:	2d0c      	cmp	r5, #12
 8002668:	bf38      	it	cc
 800266a:	250c      	movcc	r5, #12
 800266c:	2d00      	cmp	r5, #0
 800266e:	4606      	mov	r6, r0
 8002670:	db01      	blt.n	8002676 <_malloc_r+0x1a>
 8002672:	42a9      	cmp	r1, r5
 8002674:	d903      	bls.n	800267e <_malloc_r+0x22>
 8002676:	230c      	movs	r3, #12
 8002678:	6033      	str	r3, [r6, #0]
 800267a:	2000      	movs	r0, #0
 800267c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800267e:	f000 ffbd 	bl	80035fc <__malloc_lock>
 8002682:	4921      	ldr	r1, [pc, #132]	; (8002708 <_malloc_r+0xac>)
 8002684:	680a      	ldr	r2, [r1, #0]
 8002686:	4614      	mov	r4, r2
 8002688:	b99c      	cbnz	r4, 80026b2 <_malloc_r+0x56>
 800268a:	4f20      	ldr	r7, [pc, #128]	; (800270c <_malloc_r+0xb0>)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	b923      	cbnz	r3, 800269a <_malloc_r+0x3e>
 8002690:	4621      	mov	r1, r4
 8002692:	4630      	mov	r0, r6
 8002694:	f000 fc86 	bl	8002fa4 <_sbrk_r>
 8002698:	6038      	str	r0, [r7, #0]
 800269a:	4629      	mov	r1, r5
 800269c:	4630      	mov	r0, r6
 800269e:	f000 fc81 	bl	8002fa4 <_sbrk_r>
 80026a2:	1c43      	adds	r3, r0, #1
 80026a4:	d123      	bne.n	80026ee <_malloc_r+0x92>
 80026a6:	230c      	movs	r3, #12
 80026a8:	4630      	mov	r0, r6
 80026aa:	6033      	str	r3, [r6, #0]
 80026ac:	f000 ffac 	bl	8003608 <__malloc_unlock>
 80026b0:	e7e3      	b.n	800267a <_malloc_r+0x1e>
 80026b2:	6823      	ldr	r3, [r4, #0]
 80026b4:	1b5b      	subs	r3, r3, r5
 80026b6:	d417      	bmi.n	80026e8 <_malloc_r+0x8c>
 80026b8:	2b0b      	cmp	r3, #11
 80026ba:	d903      	bls.n	80026c4 <_malloc_r+0x68>
 80026bc:	6023      	str	r3, [r4, #0]
 80026be:	441c      	add	r4, r3
 80026c0:	6025      	str	r5, [r4, #0]
 80026c2:	e004      	b.n	80026ce <_malloc_r+0x72>
 80026c4:	6863      	ldr	r3, [r4, #4]
 80026c6:	42a2      	cmp	r2, r4
 80026c8:	bf0c      	ite	eq
 80026ca:	600b      	streq	r3, [r1, #0]
 80026cc:	6053      	strne	r3, [r2, #4]
 80026ce:	4630      	mov	r0, r6
 80026d0:	f000 ff9a 	bl	8003608 <__malloc_unlock>
 80026d4:	f104 000b 	add.w	r0, r4, #11
 80026d8:	1d23      	adds	r3, r4, #4
 80026da:	f020 0007 	bic.w	r0, r0, #7
 80026de:	1ac2      	subs	r2, r0, r3
 80026e0:	d0cc      	beq.n	800267c <_malloc_r+0x20>
 80026e2:	1a1b      	subs	r3, r3, r0
 80026e4:	50a3      	str	r3, [r4, r2]
 80026e6:	e7c9      	b.n	800267c <_malloc_r+0x20>
 80026e8:	4622      	mov	r2, r4
 80026ea:	6864      	ldr	r4, [r4, #4]
 80026ec:	e7cc      	b.n	8002688 <_malloc_r+0x2c>
 80026ee:	1cc4      	adds	r4, r0, #3
 80026f0:	f024 0403 	bic.w	r4, r4, #3
 80026f4:	42a0      	cmp	r0, r4
 80026f6:	d0e3      	beq.n	80026c0 <_malloc_r+0x64>
 80026f8:	1a21      	subs	r1, r4, r0
 80026fa:	4630      	mov	r0, r6
 80026fc:	f000 fc52 	bl	8002fa4 <_sbrk_r>
 8002700:	3001      	adds	r0, #1
 8002702:	d1dd      	bne.n	80026c0 <_malloc_r+0x64>
 8002704:	e7cf      	b.n	80026a6 <_malloc_r+0x4a>
 8002706:	bf00      	nop
 8002708:	20000100 	.word	0x20000100
 800270c:	20000104 	.word	0x20000104

08002710 <__ssputs_r>:
 8002710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002714:	688e      	ldr	r6, [r1, #8]
 8002716:	4682      	mov	sl, r0
 8002718:	429e      	cmp	r6, r3
 800271a:	460c      	mov	r4, r1
 800271c:	4690      	mov	r8, r2
 800271e:	461f      	mov	r7, r3
 8002720:	d838      	bhi.n	8002794 <__ssputs_r+0x84>
 8002722:	898a      	ldrh	r2, [r1, #12]
 8002724:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002728:	d032      	beq.n	8002790 <__ssputs_r+0x80>
 800272a:	6825      	ldr	r5, [r4, #0]
 800272c:	6909      	ldr	r1, [r1, #16]
 800272e:	3301      	adds	r3, #1
 8002730:	eba5 0901 	sub.w	r9, r5, r1
 8002734:	6965      	ldr	r5, [r4, #20]
 8002736:	444b      	add	r3, r9
 8002738:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800273c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002740:	106d      	asrs	r5, r5, #1
 8002742:	429d      	cmp	r5, r3
 8002744:	bf38      	it	cc
 8002746:	461d      	movcc	r5, r3
 8002748:	0553      	lsls	r3, r2, #21
 800274a:	d531      	bpl.n	80027b0 <__ssputs_r+0xa0>
 800274c:	4629      	mov	r1, r5
 800274e:	f7ff ff85 	bl	800265c <_malloc_r>
 8002752:	4606      	mov	r6, r0
 8002754:	b950      	cbnz	r0, 800276c <__ssputs_r+0x5c>
 8002756:	230c      	movs	r3, #12
 8002758:	f04f 30ff 	mov.w	r0, #4294967295
 800275c:	f8ca 3000 	str.w	r3, [sl]
 8002760:	89a3      	ldrh	r3, [r4, #12]
 8002762:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002766:	81a3      	strh	r3, [r4, #12]
 8002768:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800276c:	464a      	mov	r2, r9
 800276e:	6921      	ldr	r1, [r4, #16]
 8002770:	f000 ff1c 	bl	80035ac <memcpy>
 8002774:	89a3      	ldrh	r3, [r4, #12]
 8002776:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800277a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800277e:	81a3      	strh	r3, [r4, #12]
 8002780:	6126      	str	r6, [r4, #16]
 8002782:	444e      	add	r6, r9
 8002784:	6026      	str	r6, [r4, #0]
 8002786:	463e      	mov	r6, r7
 8002788:	6165      	str	r5, [r4, #20]
 800278a:	eba5 0509 	sub.w	r5, r5, r9
 800278e:	60a5      	str	r5, [r4, #8]
 8002790:	42be      	cmp	r6, r7
 8002792:	d900      	bls.n	8002796 <__ssputs_r+0x86>
 8002794:	463e      	mov	r6, r7
 8002796:	4632      	mov	r2, r6
 8002798:	4641      	mov	r1, r8
 800279a:	6820      	ldr	r0, [r4, #0]
 800279c:	f000 ff14 	bl	80035c8 <memmove>
 80027a0:	68a3      	ldr	r3, [r4, #8]
 80027a2:	6822      	ldr	r2, [r4, #0]
 80027a4:	1b9b      	subs	r3, r3, r6
 80027a6:	4432      	add	r2, r6
 80027a8:	2000      	movs	r0, #0
 80027aa:	60a3      	str	r3, [r4, #8]
 80027ac:	6022      	str	r2, [r4, #0]
 80027ae:	e7db      	b.n	8002768 <__ssputs_r+0x58>
 80027b0:	462a      	mov	r2, r5
 80027b2:	f000 ff2f 	bl	8003614 <_realloc_r>
 80027b6:	4606      	mov	r6, r0
 80027b8:	2800      	cmp	r0, #0
 80027ba:	d1e1      	bne.n	8002780 <__ssputs_r+0x70>
 80027bc:	4650      	mov	r0, sl
 80027be:	6921      	ldr	r1, [r4, #16]
 80027c0:	f7ff ff00 	bl	80025c4 <_free_r>
 80027c4:	e7c7      	b.n	8002756 <__ssputs_r+0x46>
	...

080027c8 <_svfiprintf_r>:
 80027c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027cc:	4698      	mov	r8, r3
 80027ce:	898b      	ldrh	r3, [r1, #12]
 80027d0:	4607      	mov	r7, r0
 80027d2:	061b      	lsls	r3, r3, #24
 80027d4:	460d      	mov	r5, r1
 80027d6:	4614      	mov	r4, r2
 80027d8:	b09d      	sub	sp, #116	; 0x74
 80027da:	d50e      	bpl.n	80027fa <_svfiprintf_r+0x32>
 80027dc:	690b      	ldr	r3, [r1, #16]
 80027de:	b963      	cbnz	r3, 80027fa <_svfiprintf_r+0x32>
 80027e0:	2140      	movs	r1, #64	; 0x40
 80027e2:	f7ff ff3b 	bl	800265c <_malloc_r>
 80027e6:	6028      	str	r0, [r5, #0]
 80027e8:	6128      	str	r0, [r5, #16]
 80027ea:	b920      	cbnz	r0, 80027f6 <_svfiprintf_r+0x2e>
 80027ec:	230c      	movs	r3, #12
 80027ee:	603b      	str	r3, [r7, #0]
 80027f0:	f04f 30ff 	mov.w	r0, #4294967295
 80027f4:	e0d1      	b.n	800299a <_svfiprintf_r+0x1d2>
 80027f6:	2340      	movs	r3, #64	; 0x40
 80027f8:	616b      	str	r3, [r5, #20]
 80027fa:	2300      	movs	r3, #0
 80027fc:	9309      	str	r3, [sp, #36]	; 0x24
 80027fe:	2320      	movs	r3, #32
 8002800:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002804:	2330      	movs	r3, #48	; 0x30
 8002806:	f04f 0901 	mov.w	r9, #1
 800280a:	f8cd 800c 	str.w	r8, [sp, #12]
 800280e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80029b4 <_svfiprintf_r+0x1ec>
 8002812:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002816:	4623      	mov	r3, r4
 8002818:	469a      	mov	sl, r3
 800281a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800281e:	b10a      	cbz	r2, 8002824 <_svfiprintf_r+0x5c>
 8002820:	2a25      	cmp	r2, #37	; 0x25
 8002822:	d1f9      	bne.n	8002818 <_svfiprintf_r+0x50>
 8002824:	ebba 0b04 	subs.w	fp, sl, r4
 8002828:	d00b      	beq.n	8002842 <_svfiprintf_r+0x7a>
 800282a:	465b      	mov	r3, fp
 800282c:	4622      	mov	r2, r4
 800282e:	4629      	mov	r1, r5
 8002830:	4638      	mov	r0, r7
 8002832:	f7ff ff6d 	bl	8002710 <__ssputs_r>
 8002836:	3001      	adds	r0, #1
 8002838:	f000 80aa 	beq.w	8002990 <_svfiprintf_r+0x1c8>
 800283c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800283e:	445a      	add	r2, fp
 8002840:	9209      	str	r2, [sp, #36]	; 0x24
 8002842:	f89a 3000 	ldrb.w	r3, [sl]
 8002846:	2b00      	cmp	r3, #0
 8002848:	f000 80a2 	beq.w	8002990 <_svfiprintf_r+0x1c8>
 800284c:	2300      	movs	r3, #0
 800284e:	f04f 32ff 	mov.w	r2, #4294967295
 8002852:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002856:	f10a 0a01 	add.w	sl, sl, #1
 800285a:	9304      	str	r3, [sp, #16]
 800285c:	9307      	str	r3, [sp, #28]
 800285e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002862:	931a      	str	r3, [sp, #104]	; 0x68
 8002864:	4654      	mov	r4, sl
 8002866:	2205      	movs	r2, #5
 8002868:	f814 1b01 	ldrb.w	r1, [r4], #1
 800286c:	4851      	ldr	r0, [pc, #324]	; (80029b4 <_svfiprintf_r+0x1ec>)
 800286e:	f000 fe8f 	bl	8003590 <memchr>
 8002872:	9a04      	ldr	r2, [sp, #16]
 8002874:	b9d8      	cbnz	r0, 80028ae <_svfiprintf_r+0xe6>
 8002876:	06d0      	lsls	r0, r2, #27
 8002878:	bf44      	itt	mi
 800287a:	2320      	movmi	r3, #32
 800287c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002880:	0711      	lsls	r1, r2, #28
 8002882:	bf44      	itt	mi
 8002884:	232b      	movmi	r3, #43	; 0x2b
 8002886:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800288a:	f89a 3000 	ldrb.w	r3, [sl]
 800288e:	2b2a      	cmp	r3, #42	; 0x2a
 8002890:	d015      	beq.n	80028be <_svfiprintf_r+0xf6>
 8002892:	4654      	mov	r4, sl
 8002894:	2000      	movs	r0, #0
 8002896:	f04f 0c0a 	mov.w	ip, #10
 800289a:	9a07      	ldr	r2, [sp, #28]
 800289c:	4621      	mov	r1, r4
 800289e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80028a2:	3b30      	subs	r3, #48	; 0x30
 80028a4:	2b09      	cmp	r3, #9
 80028a6:	d94e      	bls.n	8002946 <_svfiprintf_r+0x17e>
 80028a8:	b1b0      	cbz	r0, 80028d8 <_svfiprintf_r+0x110>
 80028aa:	9207      	str	r2, [sp, #28]
 80028ac:	e014      	b.n	80028d8 <_svfiprintf_r+0x110>
 80028ae:	eba0 0308 	sub.w	r3, r0, r8
 80028b2:	fa09 f303 	lsl.w	r3, r9, r3
 80028b6:	4313      	orrs	r3, r2
 80028b8:	46a2      	mov	sl, r4
 80028ba:	9304      	str	r3, [sp, #16]
 80028bc:	e7d2      	b.n	8002864 <_svfiprintf_r+0x9c>
 80028be:	9b03      	ldr	r3, [sp, #12]
 80028c0:	1d19      	adds	r1, r3, #4
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	9103      	str	r1, [sp, #12]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	bfbb      	ittet	lt
 80028ca:	425b      	neglt	r3, r3
 80028cc:	f042 0202 	orrlt.w	r2, r2, #2
 80028d0:	9307      	strge	r3, [sp, #28]
 80028d2:	9307      	strlt	r3, [sp, #28]
 80028d4:	bfb8      	it	lt
 80028d6:	9204      	strlt	r2, [sp, #16]
 80028d8:	7823      	ldrb	r3, [r4, #0]
 80028da:	2b2e      	cmp	r3, #46	; 0x2e
 80028dc:	d10c      	bne.n	80028f8 <_svfiprintf_r+0x130>
 80028de:	7863      	ldrb	r3, [r4, #1]
 80028e0:	2b2a      	cmp	r3, #42	; 0x2a
 80028e2:	d135      	bne.n	8002950 <_svfiprintf_r+0x188>
 80028e4:	9b03      	ldr	r3, [sp, #12]
 80028e6:	3402      	adds	r4, #2
 80028e8:	1d1a      	adds	r2, r3, #4
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	9203      	str	r2, [sp, #12]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	bfb8      	it	lt
 80028f2:	f04f 33ff 	movlt.w	r3, #4294967295
 80028f6:	9305      	str	r3, [sp, #20]
 80028f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80029c4 <_svfiprintf_r+0x1fc>
 80028fc:	2203      	movs	r2, #3
 80028fe:	4650      	mov	r0, sl
 8002900:	7821      	ldrb	r1, [r4, #0]
 8002902:	f000 fe45 	bl	8003590 <memchr>
 8002906:	b140      	cbz	r0, 800291a <_svfiprintf_r+0x152>
 8002908:	2340      	movs	r3, #64	; 0x40
 800290a:	eba0 000a 	sub.w	r0, r0, sl
 800290e:	fa03 f000 	lsl.w	r0, r3, r0
 8002912:	9b04      	ldr	r3, [sp, #16]
 8002914:	3401      	adds	r4, #1
 8002916:	4303      	orrs	r3, r0
 8002918:	9304      	str	r3, [sp, #16]
 800291a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800291e:	2206      	movs	r2, #6
 8002920:	4825      	ldr	r0, [pc, #148]	; (80029b8 <_svfiprintf_r+0x1f0>)
 8002922:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002926:	f000 fe33 	bl	8003590 <memchr>
 800292a:	2800      	cmp	r0, #0
 800292c:	d038      	beq.n	80029a0 <_svfiprintf_r+0x1d8>
 800292e:	4b23      	ldr	r3, [pc, #140]	; (80029bc <_svfiprintf_r+0x1f4>)
 8002930:	bb1b      	cbnz	r3, 800297a <_svfiprintf_r+0x1b2>
 8002932:	9b03      	ldr	r3, [sp, #12]
 8002934:	3307      	adds	r3, #7
 8002936:	f023 0307 	bic.w	r3, r3, #7
 800293a:	3308      	adds	r3, #8
 800293c:	9303      	str	r3, [sp, #12]
 800293e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002940:	4433      	add	r3, r6
 8002942:	9309      	str	r3, [sp, #36]	; 0x24
 8002944:	e767      	b.n	8002816 <_svfiprintf_r+0x4e>
 8002946:	460c      	mov	r4, r1
 8002948:	2001      	movs	r0, #1
 800294a:	fb0c 3202 	mla	r2, ip, r2, r3
 800294e:	e7a5      	b.n	800289c <_svfiprintf_r+0xd4>
 8002950:	2300      	movs	r3, #0
 8002952:	f04f 0c0a 	mov.w	ip, #10
 8002956:	4619      	mov	r1, r3
 8002958:	3401      	adds	r4, #1
 800295a:	9305      	str	r3, [sp, #20]
 800295c:	4620      	mov	r0, r4
 800295e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002962:	3a30      	subs	r2, #48	; 0x30
 8002964:	2a09      	cmp	r2, #9
 8002966:	d903      	bls.n	8002970 <_svfiprintf_r+0x1a8>
 8002968:	2b00      	cmp	r3, #0
 800296a:	d0c5      	beq.n	80028f8 <_svfiprintf_r+0x130>
 800296c:	9105      	str	r1, [sp, #20]
 800296e:	e7c3      	b.n	80028f8 <_svfiprintf_r+0x130>
 8002970:	4604      	mov	r4, r0
 8002972:	2301      	movs	r3, #1
 8002974:	fb0c 2101 	mla	r1, ip, r1, r2
 8002978:	e7f0      	b.n	800295c <_svfiprintf_r+0x194>
 800297a:	ab03      	add	r3, sp, #12
 800297c:	9300      	str	r3, [sp, #0]
 800297e:	462a      	mov	r2, r5
 8002980:	4638      	mov	r0, r7
 8002982:	4b0f      	ldr	r3, [pc, #60]	; (80029c0 <_svfiprintf_r+0x1f8>)
 8002984:	a904      	add	r1, sp, #16
 8002986:	f3af 8000 	nop.w
 800298a:	1c42      	adds	r2, r0, #1
 800298c:	4606      	mov	r6, r0
 800298e:	d1d6      	bne.n	800293e <_svfiprintf_r+0x176>
 8002990:	89ab      	ldrh	r3, [r5, #12]
 8002992:	065b      	lsls	r3, r3, #25
 8002994:	f53f af2c 	bmi.w	80027f0 <_svfiprintf_r+0x28>
 8002998:	9809      	ldr	r0, [sp, #36]	; 0x24
 800299a:	b01d      	add	sp, #116	; 0x74
 800299c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029a0:	ab03      	add	r3, sp, #12
 80029a2:	9300      	str	r3, [sp, #0]
 80029a4:	462a      	mov	r2, r5
 80029a6:	4638      	mov	r0, r7
 80029a8:	4b05      	ldr	r3, [pc, #20]	; (80029c0 <_svfiprintf_r+0x1f8>)
 80029aa:	a904      	add	r1, sp, #16
 80029ac:	f000 f9d4 	bl	8002d58 <_printf_i>
 80029b0:	e7eb      	b.n	800298a <_svfiprintf_r+0x1c2>
 80029b2:	bf00      	nop
 80029b4:	08003ad9 	.word	0x08003ad9
 80029b8:	08003ae3 	.word	0x08003ae3
 80029bc:	00000000 	.word	0x00000000
 80029c0:	08002711 	.word	0x08002711
 80029c4:	08003adf 	.word	0x08003adf

080029c8 <__sfputc_r>:
 80029c8:	6893      	ldr	r3, [r2, #8]
 80029ca:	b410      	push	{r4}
 80029cc:	3b01      	subs	r3, #1
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	6093      	str	r3, [r2, #8]
 80029d2:	da07      	bge.n	80029e4 <__sfputc_r+0x1c>
 80029d4:	6994      	ldr	r4, [r2, #24]
 80029d6:	42a3      	cmp	r3, r4
 80029d8:	db01      	blt.n	80029de <__sfputc_r+0x16>
 80029da:	290a      	cmp	r1, #10
 80029dc:	d102      	bne.n	80029e4 <__sfputc_r+0x1c>
 80029de:	bc10      	pop	{r4}
 80029e0:	f000 baf0 	b.w	8002fc4 <__swbuf_r>
 80029e4:	6813      	ldr	r3, [r2, #0]
 80029e6:	1c58      	adds	r0, r3, #1
 80029e8:	6010      	str	r0, [r2, #0]
 80029ea:	7019      	strb	r1, [r3, #0]
 80029ec:	4608      	mov	r0, r1
 80029ee:	bc10      	pop	{r4}
 80029f0:	4770      	bx	lr

080029f2 <__sfputs_r>:
 80029f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029f4:	4606      	mov	r6, r0
 80029f6:	460f      	mov	r7, r1
 80029f8:	4614      	mov	r4, r2
 80029fa:	18d5      	adds	r5, r2, r3
 80029fc:	42ac      	cmp	r4, r5
 80029fe:	d101      	bne.n	8002a04 <__sfputs_r+0x12>
 8002a00:	2000      	movs	r0, #0
 8002a02:	e007      	b.n	8002a14 <__sfputs_r+0x22>
 8002a04:	463a      	mov	r2, r7
 8002a06:	4630      	mov	r0, r6
 8002a08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a0c:	f7ff ffdc 	bl	80029c8 <__sfputc_r>
 8002a10:	1c43      	adds	r3, r0, #1
 8002a12:	d1f3      	bne.n	80029fc <__sfputs_r+0xa>
 8002a14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002a18 <_vfiprintf_r>:
 8002a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a1c:	460d      	mov	r5, r1
 8002a1e:	4614      	mov	r4, r2
 8002a20:	4698      	mov	r8, r3
 8002a22:	4606      	mov	r6, r0
 8002a24:	b09d      	sub	sp, #116	; 0x74
 8002a26:	b118      	cbz	r0, 8002a30 <_vfiprintf_r+0x18>
 8002a28:	6983      	ldr	r3, [r0, #24]
 8002a2a:	b90b      	cbnz	r3, 8002a30 <_vfiprintf_r+0x18>
 8002a2c:	f000 fcac 	bl	8003388 <__sinit>
 8002a30:	4b89      	ldr	r3, [pc, #548]	; (8002c58 <_vfiprintf_r+0x240>)
 8002a32:	429d      	cmp	r5, r3
 8002a34:	d11b      	bne.n	8002a6e <_vfiprintf_r+0x56>
 8002a36:	6875      	ldr	r5, [r6, #4]
 8002a38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002a3a:	07d9      	lsls	r1, r3, #31
 8002a3c:	d405      	bmi.n	8002a4a <_vfiprintf_r+0x32>
 8002a3e:	89ab      	ldrh	r3, [r5, #12]
 8002a40:	059a      	lsls	r2, r3, #22
 8002a42:	d402      	bmi.n	8002a4a <_vfiprintf_r+0x32>
 8002a44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002a46:	f000 fd3d 	bl	80034c4 <__retarget_lock_acquire_recursive>
 8002a4a:	89ab      	ldrh	r3, [r5, #12]
 8002a4c:	071b      	lsls	r3, r3, #28
 8002a4e:	d501      	bpl.n	8002a54 <_vfiprintf_r+0x3c>
 8002a50:	692b      	ldr	r3, [r5, #16]
 8002a52:	b9eb      	cbnz	r3, 8002a90 <_vfiprintf_r+0x78>
 8002a54:	4629      	mov	r1, r5
 8002a56:	4630      	mov	r0, r6
 8002a58:	f000 fb06 	bl	8003068 <__swsetup_r>
 8002a5c:	b1c0      	cbz	r0, 8002a90 <_vfiprintf_r+0x78>
 8002a5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002a60:	07dc      	lsls	r4, r3, #31
 8002a62:	d50e      	bpl.n	8002a82 <_vfiprintf_r+0x6a>
 8002a64:	f04f 30ff 	mov.w	r0, #4294967295
 8002a68:	b01d      	add	sp, #116	; 0x74
 8002a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a6e:	4b7b      	ldr	r3, [pc, #492]	; (8002c5c <_vfiprintf_r+0x244>)
 8002a70:	429d      	cmp	r5, r3
 8002a72:	d101      	bne.n	8002a78 <_vfiprintf_r+0x60>
 8002a74:	68b5      	ldr	r5, [r6, #8]
 8002a76:	e7df      	b.n	8002a38 <_vfiprintf_r+0x20>
 8002a78:	4b79      	ldr	r3, [pc, #484]	; (8002c60 <_vfiprintf_r+0x248>)
 8002a7a:	429d      	cmp	r5, r3
 8002a7c:	bf08      	it	eq
 8002a7e:	68f5      	ldreq	r5, [r6, #12]
 8002a80:	e7da      	b.n	8002a38 <_vfiprintf_r+0x20>
 8002a82:	89ab      	ldrh	r3, [r5, #12]
 8002a84:	0598      	lsls	r0, r3, #22
 8002a86:	d4ed      	bmi.n	8002a64 <_vfiprintf_r+0x4c>
 8002a88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002a8a:	f000 fd1c 	bl	80034c6 <__retarget_lock_release_recursive>
 8002a8e:	e7e9      	b.n	8002a64 <_vfiprintf_r+0x4c>
 8002a90:	2300      	movs	r3, #0
 8002a92:	9309      	str	r3, [sp, #36]	; 0x24
 8002a94:	2320      	movs	r3, #32
 8002a96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002a9a:	2330      	movs	r3, #48	; 0x30
 8002a9c:	f04f 0901 	mov.w	r9, #1
 8002aa0:	f8cd 800c 	str.w	r8, [sp, #12]
 8002aa4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002c64 <_vfiprintf_r+0x24c>
 8002aa8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002aac:	4623      	mov	r3, r4
 8002aae:	469a      	mov	sl, r3
 8002ab0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002ab4:	b10a      	cbz	r2, 8002aba <_vfiprintf_r+0xa2>
 8002ab6:	2a25      	cmp	r2, #37	; 0x25
 8002ab8:	d1f9      	bne.n	8002aae <_vfiprintf_r+0x96>
 8002aba:	ebba 0b04 	subs.w	fp, sl, r4
 8002abe:	d00b      	beq.n	8002ad8 <_vfiprintf_r+0xc0>
 8002ac0:	465b      	mov	r3, fp
 8002ac2:	4622      	mov	r2, r4
 8002ac4:	4629      	mov	r1, r5
 8002ac6:	4630      	mov	r0, r6
 8002ac8:	f7ff ff93 	bl	80029f2 <__sfputs_r>
 8002acc:	3001      	adds	r0, #1
 8002ace:	f000 80aa 	beq.w	8002c26 <_vfiprintf_r+0x20e>
 8002ad2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002ad4:	445a      	add	r2, fp
 8002ad6:	9209      	str	r2, [sp, #36]	; 0x24
 8002ad8:	f89a 3000 	ldrb.w	r3, [sl]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f000 80a2 	beq.w	8002c26 <_vfiprintf_r+0x20e>
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ae8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002aec:	f10a 0a01 	add.w	sl, sl, #1
 8002af0:	9304      	str	r3, [sp, #16]
 8002af2:	9307      	str	r3, [sp, #28]
 8002af4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002af8:	931a      	str	r3, [sp, #104]	; 0x68
 8002afa:	4654      	mov	r4, sl
 8002afc:	2205      	movs	r2, #5
 8002afe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b02:	4858      	ldr	r0, [pc, #352]	; (8002c64 <_vfiprintf_r+0x24c>)
 8002b04:	f000 fd44 	bl	8003590 <memchr>
 8002b08:	9a04      	ldr	r2, [sp, #16]
 8002b0a:	b9d8      	cbnz	r0, 8002b44 <_vfiprintf_r+0x12c>
 8002b0c:	06d1      	lsls	r1, r2, #27
 8002b0e:	bf44      	itt	mi
 8002b10:	2320      	movmi	r3, #32
 8002b12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002b16:	0713      	lsls	r3, r2, #28
 8002b18:	bf44      	itt	mi
 8002b1a:	232b      	movmi	r3, #43	; 0x2b
 8002b1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002b20:	f89a 3000 	ldrb.w	r3, [sl]
 8002b24:	2b2a      	cmp	r3, #42	; 0x2a
 8002b26:	d015      	beq.n	8002b54 <_vfiprintf_r+0x13c>
 8002b28:	4654      	mov	r4, sl
 8002b2a:	2000      	movs	r0, #0
 8002b2c:	f04f 0c0a 	mov.w	ip, #10
 8002b30:	9a07      	ldr	r2, [sp, #28]
 8002b32:	4621      	mov	r1, r4
 8002b34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002b38:	3b30      	subs	r3, #48	; 0x30
 8002b3a:	2b09      	cmp	r3, #9
 8002b3c:	d94e      	bls.n	8002bdc <_vfiprintf_r+0x1c4>
 8002b3e:	b1b0      	cbz	r0, 8002b6e <_vfiprintf_r+0x156>
 8002b40:	9207      	str	r2, [sp, #28]
 8002b42:	e014      	b.n	8002b6e <_vfiprintf_r+0x156>
 8002b44:	eba0 0308 	sub.w	r3, r0, r8
 8002b48:	fa09 f303 	lsl.w	r3, r9, r3
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	46a2      	mov	sl, r4
 8002b50:	9304      	str	r3, [sp, #16]
 8002b52:	e7d2      	b.n	8002afa <_vfiprintf_r+0xe2>
 8002b54:	9b03      	ldr	r3, [sp, #12]
 8002b56:	1d19      	adds	r1, r3, #4
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	9103      	str	r1, [sp, #12]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	bfbb      	ittet	lt
 8002b60:	425b      	neglt	r3, r3
 8002b62:	f042 0202 	orrlt.w	r2, r2, #2
 8002b66:	9307      	strge	r3, [sp, #28]
 8002b68:	9307      	strlt	r3, [sp, #28]
 8002b6a:	bfb8      	it	lt
 8002b6c:	9204      	strlt	r2, [sp, #16]
 8002b6e:	7823      	ldrb	r3, [r4, #0]
 8002b70:	2b2e      	cmp	r3, #46	; 0x2e
 8002b72:	d10c      	bne.n	8002b8e <_vfiprintf_r+0x176>
 8002b74:	7863      	ldrb	r3, [r4, #1]
 8002b76:	2b2a      	cmp	r3, #42	; 0x2a
 8002b78:	d135      	bne.n	8002be6 <_vfiprintf_r+0x1ce>
 8002b7a:	9b03      	ldr	r3, [sp, #12]
 8002b7c:	3402      	adds	r4, #2
 8002b7e:	1d1a      	adds	r2, r3, #4
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	9203      	str	r2, [sp, #12]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	bfb8      	it	lt
 8002b88:	f04f 33ff 	movlt.w	r3, #4294967295
 8002b8c:	9305      	str	r3, [sp, #20]
 8002b8e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002c74 <_vfiprintf_r+0x25c>
 8002b92:	2203      	movs	r2, #3
 8002b94:	4650      	mov	r0, sl
 8002b96:	7821      	ldrb	r1, [r4, #0]
 8002b98:	f000 fcfa 	bl	8003590 <memchr>
 8002b9c:	b140      	cbz	r0, 8002bb0 <_vfiprintf_r+0x198>
 8002b9e:	2340      	movs	r3, #64	; 0x40
 8002ba0:	eba0 000a 	sub.w	r0, r0, sl
 8002ba4:	fa03 f000 	lsl.w	r0, r3, r0
 8002ba8:	9b04      	ldr	r3, [sp, #16]
 8002baa:	3401      	adds	r4, #1
 8002bac:	4303      	orrs	r3, r0
 8002bae:	9304      	str	r3, [sp, #16]
 8002bb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002bb4:	2206      	movs	r2, #6
 8002bb6:	482c      	ldr	r0, [pc, #176]	; (8002c68 <_vfiprintf_r+0x250>)
 8002bb8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002bbc:	f000 fce8 	bl	8003590 <memchr>
 8002bc0:	2800      	cmp	r0, #0
 8002bc2:	d03f      	beq.n	8002c44 <_vfiprintf_r+0x22c>
 8002bc4:	4b29      	ldr	r3, [pc, #164]	; (8002c6c <_vfiprintf_r+0x254>)
 8002bc6:	bb1b      	cbnz	r3, 8002c10 <_vfiprintf_r+0x1f8>
 8002bc8:	9b03      	ldr	r3, [sp, #12]
 8002bca:	3307      	adds	r3, #7
 8002bcc:	f023 0307 	bic.w	r3, r3, #7
 8002bd0:	3308      	adds	r3, #8
 8002bd2:	9303      	str	r3, [sp, #12]
 8002bd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002bd6:	443b      	add	r3, r7
 8002bd8:	9309      	str	r3, [sp, #36]	; 0x24
 8002bda:	e767      	b.n	8002aac <_vfiprintf_r+0x94>
 8002bdc:	460c      	mov	r4, r1
 8002bde:	2001      	movs	r0, #1
 8002be0:	fb0c 3202 	mla	r2, ip, r2, r3
 8002be4:	e7a5      	b.n	8002b32 <_vfiprintf_r+0x11a>
 8002be6:	2300      	movs	r3, #0
 8002be8:	f04f 0c0a 	mov.w	ip, #10
 8002bec:	4619      	mov	r1, r3
 8002bee:	3401      	adds	r4, #1
 8002bf0:	9305      	str	r3, [sp, #20]
 8002bf2:	4620      	mov	r0, r4
 8002bf4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002bf8:	3a30      	subs	r2, #48	; 0x30
 8002bfa:	2a09      	cmp	r2, #9
 8002bfc:	d903      	bls.n	8002c06 <_vfiprintf_r+0x1ee>
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d0c5      	beq.n	8002b8e <_vfiprintf_r+0x176>
 8002c02:	9105      	str	r1, [sp, #20]
 8002c04:	e7c3      	b.n	8002b8e <_vfiprintf_r+0x176>
 8002c06:	4604      	mov	r4, r0
 8002c08:	2301      	movs	r3, #1
 8002c0a:	fb0c 2101 	mla	r1, ip, r1, r2
 8002c0e:	e7f0      	b.n	8002bf2 <_vfiprintf_r+0x1da>
 8002c10:	ab03      	add	r3, sp, #12
 8002c12:	9300      	str	r3, [sp, #0]
 8002c14:	462a      	mov	r2, r5
 8002c16:	4630      	mov	r0, r6
 8002c18:	4b15      	ldr	r3, [pc, #84]	; (8002c70 <_vfiprintf_r+0x258>)
 8002c1a:	a904      	add	r1, sp, #16
 8002c1c:	f3af 8000 	nop.w
 8002c20:	4607      	mov	r7, r0
 8002c22:	1c78      	adds	r0, r7, #1
 8002c24:	d1d6      	bne.n	8002bd4 <_vfiprintf_r+0x1bc>
 8002c26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002c28:	07d9      	lsls	r1, r3, #31
 8002c2a:	d405      	bmi.n	8002c38 <_vfiprintf_r+0x220>
 8002c2c:	89ab      	ldrh	r3, [r5, #12]
 8002c2e:	059a      	lsls	r2, r3, #22
 8002c30:	d402      	bmi.n	8002c38 <_vfiprintf_r+0x220>
 8002c32:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002c34:	f000 fc47 	bl	80034c6 <__retarget_lock_release_recursive>
 8002c38:	89ab      	ldrh	r3, [r5, #12]
 8002c3a:	065b      	lsls	r3, r3, #25
 8002c3c:	f53f af12 	bmi.w	8002a64 <_vfiprintf_r+0x4c>
 8002c40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002c42:	e711      	b.n	8002a68 <_vfiprintf_r+0x50>
 8002c44:	ab03      	add	r3, sp, #12
 8002c46:	9300      	str	r3, [sp, #0]
 8002c48:	462a      	mov	r2, r5
 8002c4a:	4630      	mov	r0, r6
 8002c4c:	4b08      	ldr	r3, [pc, #32]	; (8002c70 <_vfiprintf_r+0x258>)
 8002c4e:	a904      	add	r1, sp, #16
 8002c50:	f000 f882 	bl	8002d58 <_printf_i>
 8002c54:	e7e4      	b.n	8002c20 <_vfiprintf_r+0x208>
 8002c56:	bf00      	nop
 8002c58:	08003b2c 	.word	0x08003b2c
 8002c5c:	08003b4c 	.word	0x08003b4c
 8002c60:	08003b0c 	.word	0x08003b0c
 8002c64:	08003ad9 	.word	0x08003ad9
 8002c68:	08003ae3 	.word	0x08003ae3
 8002c6c:	00000000 	.word	0x00000000
 8002c70:	080029f3 	.word	0x080029f3
 8002c74:	08003adf 	.word	0x08003adf

08002c78 <_printf_common>:
 8002c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c7c:	4616      	mov	r6, r2
 8002c7e:	4699      	mov	r9, r3
 8002c80:	688a      	ldr	r2, [r1, #8]
 8002c82:	690b      	ldr	r3, [r1, #16]
 8002c84:	4607      	mov	r7, r0
 8002c86:	4293      	cmp	r3, r2
 8002c88:	bfb8      	it	lt
 8002c8a:	4613      	movlt	r3, r2
 8002c8c:	6033      	str	r3, [r6, #0]
 8002c8e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002c92:	460c      	mov	r4, r1
 8002c94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002c98:	b10a      	cbz	r2, 8002c9e <_printf_common+0x26>
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	6033      	str	r3, [r6, #0]
 8002c9e:	6823      	ldr	r3, [r4, #0]
 8002ca0:	0699      	lsls	r1, r3, #26
 8002ca2:	bf42      	ittt	mi
 8002ca4:	6833      	ldrmi	r3, [r6, #0]
 8002ca6:	3302      	addmi	r3, #2
 8002ca8:	6033      	strmi	r3, [r6, #0]
 8002caa:	6825      	ldr	r5, [r4, #0]
 8002cac:	f015 0506 	ands.w	r5, r5, #6
 8002cb0:	d106      	bne.n	8002cc0 <_printf_common+0x48>
 8002cb2:	f104 0a19 	add.w	sl, r4, #25
 8002cb6:	68e3      	ldr	r3, [r4, #12]
 8002cb8:	6832      	ldr	r2, [r6, #0]
 8002cba:	1a9b      	subs	r3, r3, r2
 8002cbc:	42ab      	cmp	r3, r5
 8002cbe:	dc28      	bgt.n	8002d12 <_printf_common+0x9a>
 8002cc0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002cc4:	1e13      	subs	r3, r2, #0
 8002cc6:	6822      	ldr	r2, [r4, #0]
 8002cc8:	bf18      	it	ne
 8002cca:	2301      	movne	r3, #1
 8002ccc:	0692      	lsls	r2, r2, #26
 8002cce:	d42d      	bmi.n	8002d2c <_printf_common+0xb4>
 8002cd0:	4649      	mov	r1, r9
 8002cd2:	4638      	mov	r0, r7
 8002cd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002cd8:	47c0      	blx	r8
 8002cda:	3001      	adds	r0, #1
 8002cdc:	d020      	beq.n	8002d20 <_printf_common+0xa8>
 8002cde:	6823      	ldr	r3, [r4, #0]
 8002ce0:	68e5      	ldr	r5, [r4, #12]
 8002ce2:	f003 0306 	and.w	r3, r3, #6
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	bf18      	it	ne
 8002cea:	2500      	movne	r5, #0
 8002cec:	6832      	ldr	r2, [r6, #0]
 8002cee:	f04f 0600 	mov.w	r6, #0
 8002cf2:	68a3      	ldr	r3, [r4, #8]
 8002cf4:	bf08      	it	eq
 8002cf6:	1aad      	subeq	r5, r5, r2
 8002cf8:	6922      	ldr	r2, [r4, #16]
 8002cfa:	bf08      	it	eq
 8002cfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002d00:	4293      	cmp	r3, r2
 8002d02:	bfc4      	itt	gt
 8002d04:	1a9b      	subgt	r3, r3, r2
 8002d06:	18ed      	addgt	r5, r5, r3
 8002d08:	341a      	adds	r4, #26
 8002d0a:	42b5      	cmp	r5, r6
 8002d0c:	d11a      	bne.n	8002d44 <_printf_common+0xcc>
 8002d0e:	2000      	movs	r0, #0
 8002d10:	e008      	b.n	8002d24 <_printf_common+0xac>
 8002d12:	2301      	movs	r3, #1
 8002d14:	4652      	mov	r2, sl
 8002d16:	4649      	mov	r1, r9
 8002d18:	4638      	mov	r0, r7
 8002d1a:	47c0      	blx	r8
 8002d1c:	3001      	adds	r0, #1
 8002d1e:	d103      	bne.n	8002d28 <_printf_common+0xb0>
 8002d20:	f04f 30ff 	mov.w	r0, #4294967295
 8002d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d28:	3501      	adds	r5, #1
 8002d2a:	e7c4      	b.n	8002cb6 <_printf_common+0x3e>
 8002d2c:	2030      	movs	r0, #48	; 0x30
 8002d2e:	18e1      	adds	r1, r4, r3
 8002d30:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002d34:	1c5a      	adds	r2, r3, #1
 8002d36:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002d3a:	4422      	add	r2, r4
 8002d3c:	3302      	adds	r3, #2
 8002d3e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002d42:	e7c5      	b.n	8002cd0 <_printf_common+0x58>
 8002d44:	2301      	movs	r3, #1
 8002d46:	4622      	mov	r2, r4
 8002d48:	4649      	mov	r1, r9
 8002d4a:	4638      	mov	r0, r7
 8002d4c:	47c0      	blx	r8
 8002d4e:	3001      	adds	r0, #1
 8002d50:	d0e6      	beq.n	8002d20 <_printf_common+0xa8>
 8002d52:	3601      	adds	r6, #1
 8002d54:	e7d9      	b.n	8002d0a <_printf_common+0x92>
	...

08002d58 <_printf_i>:
 8002d58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002d5c:	460c      	mov	r4, r1
 8002d5e:	7e27      	ldrb	r7, [r4, #24]
 8002d60:	4691      	mov	r9, r2
 8002d62:	2f78      	cmp	r7, #120	; 0x78
 8002d64:	4680      	mov	r8, r0
 8002d66:	469a      	mov	sl, r3
 8002d68:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002d6a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002d6e:	d807      	bhi.n	8002d80 <_printf_i+0x28>
 8002d70:	2f62      	cmp	r7, #98	; 0x62
 8002d72:	d80a      	bhi.n	8002d8a <_printf_i+0x32>
 8002d74:	2f00      	cmp	r7, #0
 8002d76:	f000 80d9 	beq.w	8002f2c <_printf_i+0x1d4>
 8002d7a:	2f58      	cmp	r7, #88	; 0x58
 8002d7c:	f000 80a4 	beq.w	8002ec8 <_printf_i+0x170>
 8002d80:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002d84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002d88:	e03a      	b.n	8002e00 <_printf_i+0xa8>
 8002d8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002d8e:	2b15      	cmp	r3, #21
 8002d90:	d8f6      	bhi.n	8002d80 <_printf_i+0x28>
 8002d92:	a001      	add	r0, pc, #4	; (adr r0, 8002d98 <_printf_i+0x40>)
 8002d94:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002d98:	08002df1 	.word	0x08002df1
 8002d9c:	08002e05 	.word	0x08002e05
 8002da0:	08002d81 	.word	0x08002d81
 8002da4:	08002d81 	.word	0x08002d81
 8002da8:	08002d81 	.word	0x08002d81
 8002dac:	08002d81 	.word	0x08002d81
 8002db0:	08002e05 	.word	0x08002e05
 8002db4:	08002d81 	.word	0x08002d81
 8002db8:	08002d81 	.word	0x08002d81
 8002dbc:	08002d81 	.word	0x08002d81
 8002dc0:	08002d81 	.word	0x08002d81
 8002dc4:	08002f13 	.word	0x08002f13
 8002dc8:	08002e35 	.word	0x08002e35
 8002dcc:	08002ef5 	.word	0x08002ef5
 8002dd0:	08002d81 	.word	0x08002d81
 8002dd4:	08002d81 	.word	0x08002d81
 8002dd8:	08002f35 	.word	0x08002f35
 8002ddc:	08002d81 	.word	0x08002d81
 8002de0:	08002e35 	.word	0x08002e35
 8002de4:	08002d81 	.word	0x08002d81
 8002de8:	08002d81 	.word	0x08002d81
 8002dec:	08002efd 	.word	0x08002efd
 8002df0:	680b      	ldr	r3, [r1, #0]
 8002df2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002df6:	1d1a      	adds	r2, r3, #4
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	600a      	str	r2, [r1, #0]
 8002dfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002e00:	2301      	movs	r3, #1
 8002e02:	e0a4      	b.n	8002f4e <_printf_i+0x1f6>
 8002e04:	6825      	ldr	r5, [r4, #0]
 8002e06:	6808      	ldr	r0, [r1, #0]
 8002e08:	062e      	lsls	r6, r5, #24
 8002e0a:	f100 0304 	add.w	r3, r0, #4
 8002e0e:	d50a      	bpl.n	8002e26 <_printf_i+0xce>
 8002e10:	6805      	ldr	r5, [r0, #0]
 8002e12:	600b      	str	r3, [r1, #0]
 8002e14:	2d00      	cmp	r5, #0
 8002e16:	da03      	bge.n	8002e20 <_printf_i+0xc8>
 8002e18:	232d      	movs	r3, #45	; 0x2d
 8002e1a:	426d      	negs	r5, r5
 8002e1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e20:	230a      	movs	r3, #10
 8002e22:	485e      	ldr	r0, [pc, #376]	; (8002f9c <_printf_i+0x244>)
 8002e24:	e019      	b.n	8002e5a <_printf_i+0x102>
 8002e26:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002e2a:	6805      	ldr	r5, [r0, #0]
 8002e2c:	600b      	str	r3, [r1, #0]
 8002e2e:	bf18      	it	ne
 8002e30:	b22d      	sxthne	r5, r5
 8002e32:	e7ef      	b.n	8002e14 <_printf_i+0xbc>
 8002e34:	680b      	ldr	r3, [r1, #0]
 8002e36:	6825      	ldr	r5, [r4, #0]
 8002e38:	1d18      	adds	r0, r3, #4
 8002e3a:	6008      	str	r0, [r1, #0]
 8002e3c:	0628      	lsls	r0, r5, #24
 8002e3e:	d501      	bpl.n	8002e44 <_printf_i+0xec>
 8002e40:	681d      	ldr	r5, [r3, #0]
 8002e42:	e002      	b.n	8002e4a <_printf_i+0xf2>
 8002e44:	0669      	lsls	r1, r5, #25
 8002e46:	d5fb      	bpl.n	8002e40 <_printf_i+0xe8>
 8002e48:	881d      	ldrh	r5, [r3, #0]
 8002e4a:	2f6f      	cmp	r7, #111	; 0x6f
 8002e4c:	bf0c      	ite	eq
 8002e4e:	2308      	moveq	r3, #8
 8002e50:	230a      	movne	r3, #10
 8002e52:	4852      	ldr	r0, [pc, #328]	; (8002f9c <_printf_i+0x244>)
 8002e54:	2100      	movs	r1, #0
 8002e56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002e5a:	6866      	ldr	r6, [r4, #4]
 8002e5c:	2e00      	cmp	r6, #0
 8002e5e:	bfa8      	it	ge
 8002e60:	6821      	ldrge	r1, [r4, #0]
 8002e62:	60a6      	str	r6, [r4, #8]
 8002e64:	bfa4      	itt	ge
 8002e66:	f021 0104 	bicge.w	r1, r1, #4
 8002e6a:	6021      	strge	r1, [r4, #0]
 8002e6c:	b90d      	cbnz	r5, 8002e72 <_printf_i+0x11a>
 8002e6e:	2e00      	cmp	r6, #0
 8002e70:	d04d      	beq.n	8002f0e <_printf_i+0x1b6>
 8002e72:	4616      	mov	r6, r2
 8002e74:	fbb5 f1f3 	udiv	r1, r5, r3
 8002e78:	fb03 5711 	mls	r7, r3, r1, r5
 8002e7c:	5dc7      	ldrb	r7, [r0, r7]
 8002e7e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002e82:	462f      	mov	r7, r5
 8002e84:	42bb      	cmp	r3, r7
 8002e86:	460d      	mov	r5, r1
 8002e88:	d9f4      	bls.n	8002e74 <_printf_i+0x11c>
 8002e8a:	2b08      	cmp	r3, #8
 8002e8c:	d10b      	bne.n	8002ea6 <_printf_i+0x14e>
 8002e8e:	6823      	ldr	r3, [r4, #0]
 8002e90:	07df      	lsls	r7, r3, #31
 8002e92:	d508      	bpl.n	8002ea6 <_printf_i+0x14e>
 8002e94:	6923      	ldr	r3, [r4, #16]
 8002e96:	6861      	ldr	r1, [r4, #4]
 8002e98:	4299      	cmp	r1, r3
 8002e9a:	bfde      	ittt	le
 8002e9c:	2330      	movle	r3, #48	; 0x30
 8002e9e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002ea2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002ea6:	1b92      	subs	r2, r2, r6
 8002ea8:	6122      	str	r2, [r4, #16]
 8002eaa:	464b      	mov	r3, r9
 8002eac:	4621      	mov	r1, r4
 8002eae:	4640      	mov	r0, r8
 8002eb0:	f8cd a000 	str.w	sl, [sp]
 8002eb4:	aa03      	add	r2, sp, #12
 8002eb6:	f7ff fedf 	bl	8002c78 <_printf_common>
 8002eba:	3001      	adds	r0, #1
 8002ebc:	d14c      	bne.n	8002f58 <_printf_i+0x200>
 8002ebe:	f04f 30ff 	mov.w	r0, #4294967295
 8002ec2:	b004      	add	sp, #16
 8002ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ec8:	4834      	ldr	r0, [pc, #208]	; (8002f9c <_printf_i+0x244>)
 8002eca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002ece:	680e      	ldr	r6, [r1, #0]
 8002ed0:	6823      	ldr	r3, [r4, #0]
 8002ed2:	f856 5b04 	ldr.w	r5, [r6], #4
 8002ed6:	061f      	lsls	r7, r3, #24
 8002ed8:	600e      	str	r6, [r1, #0]
 8002eda:	d514      	bpl.n	8002f06 <_printf_i+0x1ae>
 8002edc:	07d9      	lsls	r1, r3, #31
 8002ede:	bf44      	itt	mi
 8002ee0:	f043 0320 	orrmi.w	r3, r3, #32
 8002ee4:	6023      	strmi	r3, [r4, #0]
 8002ee6:	b91d      	cbnz	r5, 8002ef0 <_printf_i+0x198>
 8002ee8:	6823      	ldr	r3, [r4, #0]
 8002eea:	f023 0320 	bic.w	r3, r3, #32
 8002eee:	6023      	str	r3, [r4, #0]
 8002ef0:	2310      	movs	r3, #16
 8002ef2:	e7af      	b.n	8002e54 <_printf_i+0xfc>
 8002ef4:	6823      	ldr	r3, [r4, #0]
 8002ef6:	f043 0320 	orr.w	r3, r3, #32
 8002efa:	6023      	str	r3, [r4, #0]
 8002efc:	2378      	movs	r3, #120	; 0x78
 8002efe:	4828      	ldr	r0, [pc, #160]	; (8002fa0 <_printf_i+0x248>)
 8002f00:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002f04:	e7e3      	b.n	8002ece <_printf_i+0x176>
 8002f06:	065e      	lsls	r6, r3, #25
 8002f08:	bf48      	it	mi
 8002f0a:	b2ad      	uxthmi	r5, r5
 8002f0c:	e7e6      	b.n	8002edc <_printf_i+0x184>
 8002f0e:	4616      	mov	r6, r2
 8002f10:	e7bb      	b.n	8002e8a <_printf_i+0x132>
 8002f12:	680b      	ldr	r3, [r1, #0]
 8002f14:	6826      	ldr	r6, [r4, #0]
 8002f16:	1d1d      	adds	r5, r3, #4
 8002f18:	6960      	ldr	r0, [r4, #20]
 8002f1a:	600d      	str	r5, [r1, #0]
 8002f1c:	0635      	lsls	r5, r6, #24
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	d501      	bpl.n	8002f26 <_printf_i+0x1ce>
 8002f22:	6018      	str	r0, [r3, #0]
 8002f24:	e002      	b.n	8002f2c <_printf_i+0x1d4>
 8002f26:	0671      	lsls	r1, r6, #25
 8002f28:	d5fb      	bpl.n	8002f22 <_printf_i+0x1ca>
 8002f2a:	8018      	strh	r0, [r3, #0]
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	4616      	mov	r6, r2
 8002f30:	6123      	str	r3, [r4, #16]
 8002f32:	e7ba      	b.n	8002eaa <_printf_i+0x152>
 8002f34:	680b      	ldr	r3, [r1, #0]
 8002f36:	1d1a      	adds	r2, r3, #4
 8002f38:	600a      	str	r2, [r1, #0]
 8002f3a:	681e      	ldr	r6, [r3, #0]
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	4630      	mov	r0, r6
 8002f40:	6862      	ldr	r2, [r4, #4]
 8002f42:	f000 fb25 	bl	8003590 <memchr>
 8002f46:	b108      	cbz	r0, 8002f4c <_printf_i+0x1f4>
 8002f48:	1b80      	subs	r0, r0, r6
 8002f4a:	6060      	str	r0, [r4, #4]
 8002f4c:	6863      	ldr	r3, [r4, #4]
 8002f4e:	6123      	str	r3, [r4, #16]
 8002f50:	2300      	movs	r3, #0
 8002f52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f56:	e7a8      	b.n	8002eaa <_printf_i+0x152>
 8002f58:	4632      	mov	r2, r6
 8002f5a:	4649      	mov	r1, r9
 8002f5c:	4640      	mov	r0, r8
 8002f5e:	6923      	ldr	r3, [r4, #16]
 8002f60:	47d0      	blx	sl
 8002f62:	3001      	adds	r0, #1
 8002f64:	d0ab      	beq.n	8002ebe <_printf_i+0x166>
 8002f66:	6823      	ldr	r3, [r4, #0]
 8002f68:	079b      	lsls	r3, r3, #30
 8002f6a:	d413      	bmi.n	8002f94 <_printf_i+0x23c>
 8002f6c:	68e0      	ldr	r0, [r4, #12]
 8002f6e:	9b03      	ldr	r3, [sp, #12]
 8002f70:	4298      	cmp	r0, r3
 8002f72:	bfb8      	it	lt
 8002f74:	4618      	movlt	r0, r3
 8002f76:	e7a4      	b.n	8002ec2 <_printf_i+0x16a>
 8002f78:	2301      	movs	r3, #1
 8002f7a:	4632      	mov	r2, r6
 8002f7c:	4649      	mov	r1, r9
 8002f7e:	4640      	mov	r0, r8
 8002f80:	47d0      	blx	sl
 8002f82:	3001      	adds	r0, #1
 8002f84:	d09b      	beq.n	8002ebe <_printf_i+0x166>
 8002f86:	3501      	adds	r5, #1
 8002f88:	68e3      	ldr	r3, [r4, #12]
 8002f8a:	9903      	ldr	r1, [sp, #12]
 8002f8c:	1a5b      	subs	r3, r3, r1
 8002f8e:	42ab      	cmp	r3, r5
 8002f90:	dcf2      	bgt.n	8002f78 <_printf_i+0x220>
 8002f92:	e7eb      	b.n	8002f6c <_printf_i+0x214>
 8002f94:	2500      	movs	r5, #0
 8002f96:	f104 0619 	add.w	r6, r4, #25
 8002f9a:	e7f5      	b.n	8002f88 <_printf_i+0x230>
 8002f9c:	08003aea 	.word	0x08003aea
 8002fa0:	08003afb 	.word	0x08003afb

08002fa4 <_sbrk_r>:
 8002fa4:	b538      	push	{r3, r4, r5, lr}
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	4d05      	ldr	r5, [pc, #20]	; (8002fc0 <_sbrk_r+0x1c>)
 8002faa:	4604      	mov	r4, r0
 8002fac:	4608      	mov	r0, r1
 8002fae:	602b      	str	r3, [r5, #0]
 8002fb0:	f7fd fb08 	bl	80005c4 <_sbrk>
 8002fb4:	1c43      	adds	r3, r0, #1
 8002fb6:	d102      	bne.n	8002fbe <_sbrk_r+0x1a>
 8002fb8:	682b      	ldr	r3, [r5, #0]
 8002fba:	b103      	cbz	r3, 8002fbe <_sbrk_r+0x1a>
 8002fbc:	6023      	str	r3, [r4, #0]
 8002fbe:	bd38      	pop	{r3, r4, r5, pc}
 8002fc0:	2000015c 	.word	0x2000015c

08002fc4 <__swbuf_r>:
 8002fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fc6:	460e      	mov	r6, r1
 8002fc8:	4614      	mov	r4, r2
 8002fca:	4605      	mov	r5, r0
 8002fcc:	b118      	cbz	r0, 8002fd6 <__swbuf_r+0x12>
 8002fce:	6983      	ldr	r3, [r0, #24]
 8002fd0:	b90b      	cbnz	r3, 8002fd6 <__swbuf_r+0x12>
 8002fd2:	f000 f9d9 	bl	8003388 <__sinit>
 8002fd6:	4b21      	ldr	r3, [pc, #132]	; (800305c <__swbuf_r+0x98>)
 8002fd8:	429c      	cmp	r4, r3
 8002fda:	d12b      	bne.n	8003034 <__swbuf_r+0x70>
 8002fdc:	686c      	ldr	r4, [r5, #4]
 8002fde:	69a3      	ldr	r3, [r4, #24]
 8002fe0:	60a3      	str	r3, [r4, #8]
 8002fe2:	89a3      	ldrh	r3, [r4, #12]
 8002fe4:	071a      	lsls	r2, r3, #28
 8002fe6:	d52f      	bpl.n	8003048 <__swbuf_r+0x84>
 8002fe8:	6923      	ldr	r3, [r4, #16]
 8002fea:	b36b      	cbz	r3, 8003048 <__swbuf_r+0x84>
 8002fec:	6923      	ldr	r3, [r4, #16]
 8002fee:	6820      	ldr	r0, [r4, #0]
 8002ff0:	b2f6      	uxtb	r6, r6
 8002ff2:	1ac0      	subs	r0, r0, r3
 8002ff4:	6963      	ldr	r3, [r4, #20]
 8002ff6:	4637      	mov	r7, r6
 8002ff8:	4283      	cmp	r3, r0
 8002ffa:	dc04      	bgt.n	8003006 <__swbuf_r+0x42>
 8002ffc:	4621      	mov	r1, r4
 8002ffe:	4628      	mov	r0, r5
 8003000:	f000 f92e 	bl	8003260 <_fflush_r>
 8003004:	bb30      	cbnz	r0, 8003054 <__swbuf_r+0x90>
 8003006:	68a3      	ldr	r3, [r4, #8]
 8003008:	3001      	adds	r0, #1
 800300a:	3b01      	subs	r3, #1
 800300c:	60a3      	str	r3, [r4, #8]
 800300e:	6823      	ldr	r3, [r4, #0]
 8003010:	1c5a      	adds	r2, r3, #1
 8003012:	6022      	str	r2, [r4, #0]
 8003014:	701e      	strb	r6, [r3, #0]
 8003016:	6963      	ldr	r3, [r4, #20]
 8003018:	4283      	cmp	r3, r0
 800301a:	d004      	beq.n	8003026 <__swbuf_r+0x62>
 800301c:	89a3      	ldrh	r3, [r4, #12]
 800301e:	07db      	lsls	r3, r3, #31
 8003020:	d506      	bpl.n	8003030 <__swbuf_r+0x6c>
 8003022:	2e0a      	cmp	r6, #10
 8003024:	d104      	bne.n	8003030 <__swbuf_r+0x6c>
 8003026:	4621      	mov	r1, r4
 8003028:	4628      	mov	r0, r5
 800302a:	f000 f919 	bl	8003260 <_fflush_r>
 800302e:	b988      	cbnz	r0, 8003054 <__swbuf_r+0x90>
 8003030:	4638      	mov	r0, r7
 8003032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003034:	4b0a      	ldr	r3, [pc, #40]	; (8003060 <__swbuf_r+0x9c>)
 8003036:	429c      	cmp	r4, r3
 8003038:	d101      	bne.n	800303e <__swbuf_r+0x7a>
 800303a:	68ac      	ldr	r4, [r5, #8]
 800303c:	e7cf      	b.n	8002fde <__swbuf_r+0x1a>
 800303e:	4b09      	ldr	r3, [pc, #36]	; (8003064 <__swbuf_r+0xa0>)
 8003040:	429c      	cmp	r4, r3
 8003042:	bf08      	it	eq
 8003044:	68ec      	ldreq	r4, [r5, #12]
 8003046:	e7ca      	b.n	8002fde <__swbuf_r+0x1a>
 8003048:	4621      	mov	r1, r4
 800304a:	4628      	mov	r0, r5
 800304c:	f000 f80c 	bl	8003068 <__swsetup_r>
 8003050:	2800      	cmp	r0, #0
 8003052:	d0cb      	beq.n	8002fec <__swbuf_r+0x28>
 8003054:	f04f 37ff 	mov.w	r7, #4294967295
 8003058:	e7ea      	b.n	8003030 <__swbuf_r+0x6c>
 800305a:	bf00      	nop
 800305c:	08003b2c 	.word	0x08003b2c
 8003060:	08003b4c 	.word	0x08003b4c
 8003064:	08003b0c 	.word	0x08003b0c

08003068 <__swsetup_r>:
 8003068:	4b32      	ldr	r3, [pc, #200]	; (8003134 <__swsetup_r+0xcc>)
 800306a:	b570      	push	{r4, r5, r6, lr}
 800306c:	681d      	ldr	r5, [r3, #0]
 800306e:	4606      	mov	r6, r0
 8003070:	460c      	mov	r4, r1
 8003072:	b125      	cbz	r5, 800307e <__swsetup_r+0x16>
 8003074:	69ab      	ldr	r3, [r5, #24]
 8003076:	b913      	cbnz	r3, 800307e <__swsetup_r+0x16>
 8003078:	4628      	mov	r0, r5
 800307a:	f000 f985 	bl	8003388 <__sinit>
 800307e:	4b2e      	ldr	r3, [pc, #184]	; (8003138 <__swsetup_r+0xd0>)
 8003080:	429c      	cmp	r4, r3
 8003082:	d10f      	bne.n	80030a4 <__swsetup_r+0x3c>
 8003084:	686c      	ldr	r4, [r5, #4]
 8003086:	89a3      	ldrh	r3, [r4, #12]
 8003088:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800308c:	0719      	lsls	r1, r3, #28
 800308e:	d42c      	bmi.n	80030ea <__swsetup_r+0x82>
 8003090:	06dd      	lsls	r5, r3, #27
 8003092:	d411      	bmi.n	80030b8 <__swsetup_r+0x50>
 8003094:	2309      	movs	r3, #9
 8003096:	6033      	str	r3, [r6, #0]
 8003098:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800309c:	f04f 30ff 	mov.w	r0, #4294967295
 80030a0:	81a3      	strh	r3, [r4, #12]
 80030a2:	e03e      	b.n	8003122 <__swsetup_r+0xba>
 80030a4:	4b25      	ldr	r3, [pc, #148]	; (800313c <__swsetup_r+0xd4>)
 80030a6:	429c      	cmp	r4, r3
 80030a8:	d101      	bne.n	80030ae <__swsetup_r+0x46>
 80030aa:	68ac      	ldr	r4, [r5, #8]
 80030ac:	e7eb      	b.n	8003086 <__swsetup_r+0x1e>
 80030ae:	4b24      	ldr	r3, [pc, #144]	; (8003140 <__swsetup_r+0xd8>)
 80030b0:	429c      	cmp	r4, r3
 80030b2:	bf08      	it	eq
 80030b4:	68ec      	ldreq	r4, [r5, #12]
 80030b6:	e7e6      	b.n	8003086 <__swsetup_r+0x1e>
 80030b8:	0758      	lsls	r0, r3, #29
 80030ba:	d512      	bpl.n	80030e2 <__swsetup_r+0x7a>
 80030bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80030be:	b141      	cbz	r1, 80030d2 <__swsetup_r+0x6a>
 80030c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80030c4:	4299      	cmp	r1, r3
 80030c6:	d002      	beq.n	80030ce <__swsetup_r+0x66>
 80030c8:	4630      	mov	r0, r6
 80030ca:	f7ff fa7b 	bl	80025c4 <_free_r>
 80030ce:	2300      	movs	r3, #0
 80030d0:	6363      	str	r3, [r4, #52]	; 0x34
 80030d2:	89a3      	ldrh	r3, [r4, #12]
 80030d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80030d8:	81a3      	strh	r3, [r4, #12]
 80030da:	2300      	movs	r3, #0
 80030dc:	6063      	str	r3, [r4, #4]
 80030de:	6923      	ldr	r3, [r4, #16]
 80030e0:	6023      	str	r3, [r4, #0]
 80030e2:	89a3      	ldrh	r3, [r4, #12]
 80030e4:	f043 0308 	orr.w	r3, r3, #8
 80030e8:	81a3      	strh	r3, [r4, #12]
 80030ea:	6923      	ldr	r3, [r4, #16]
 80030ec:	b94b      	cbnz	r3, 8003102 <__swsetup_r+0x9a>
 80030ee:	89a3      	ldrh	r3, [r4, #12]
 80030f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80030f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030f8:	d003      	beq.n	8003102 <__swsetup_r+0x9a>
 80030fa:	4621      	mov	r1, r4
 80030fc:	4630      	mov	r0, r6
 80030fe:	f000 fa07 	bl	8003510 <__smakebuf_r>
 8003102:	89a0      	ldrh	r0, [r4, #12]
 8003104:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003108:	f010 0301 	ands.w	r3, r0, #1
 800310c:	d00a      	beq.n	8003124 <__swsetup_r+0xbc>
 800310e:	2300      	movs	r3, #0
 8003110:	60a3      	str	r3, [r4, #8]
 8003112:	6963      	ldr	r3, [r4, #20]
 8003114:	425b      	negs	r3, r3
 8003116:	61a3      	str	r3, [r4, #24]
 8003118:	6923      	ldr	r3, [r4, #16]
 800311a:	b943      	cbnz	r3, 800312e <__swsetup_r+0xc6>
 800311c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003120:	d1ba      	bne.n	8003098 <__swsetup_r+0x30>
 8003122:	bd70      	pop	{r4, r5, r6, pc}
 8003124:	0781      	lsls	r1, r0, #30
 8003126:	bf58      	it	pl
 8003128:	6963      	ldrpl	r3, [r4, #20]
 800312a:	60a3      	str	r3, [r4, #8]
 800312c:	e7f4      	b.n	8003118 <__swsetup_r+0xb0>
 800312e:	2000      	movs	r0, #0
 8003130:	e7f7      	b.n	8003122 <__swsetup_r+0xba>
 8003132:	bf00      	nop
 8003134:	2000000c 	.word	0x2000000c
 8003138:	08003b2c 	.word	0x08003b2c
 800313c:	08003b4c 	.word	0x08003b4c
 8003140:	08003b0c 	.word	0x08003b0c

08003144 <abort>:
 8003144:	2006      	movs	r0, #6
 8003146:	b508      	push	{r3, lr}
 8003148:	f000 fab2 	bl	80036b0 <raise>
 800314c:	2001      	movs	r0, #1
 800314e:	f7fd f9c6 	bl	80004de <_exit>
	...

08003154 <__sflush_r>:
 8003154:	898a      	ldrh	r2, [r1, #12]
 8003156:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800315a:	4605      	mov	r5, r0
 800315c:	0710      	lsls	r0, r2, #28
 800315e:	460c      	mov	r4, r1
 8003160:	d458      	bmi.n	8003214 <__sflush_r+0xc0>
 8003162:	684b      	ldr	r3, [r1, #4]
 8003164:	2b00      	cmp	r3, #0
 8003166:	dc05      	bgt.n	8003174 <__sflush_r+0x20>
 8003168:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800316a:	2b00      	cmp	r3, #0
 800316c:	dc02      	bgt.n	8003174 <__sflush_r+0x20>
 800316e:	2000      	movs	r0, #0
 8003170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003174:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003176:	2e00      	cmp	r6, #0
 8003178:	d0f9      	beq.n	800316e <__sflush_r+0x1a>
 800317a:	2300      	movs	r3, #0
 800317c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003180:	682f      	ldr	r7, [r5, #0]
 8003182:	602b      	str	r3, [r5, #0]
 8003184:	d032      	beq.n	80031ec <__sflush_r+0x98>
 8003186:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003188:	89a3      	ldrh	r3, [r4, #12]
 800318a:	075a      	lsls	r2, r3, #29
 800318c:	d505      	bpl.n	800319a <__sflush_r+0x46>
 800318e:	6863      	ldr	r3, [r4, #4]
 8003190:	1ac0      	subs	r0, r0, r3
 8003192:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003194:	b10b      	cbz	r3, 800319a <__sflush_r+0x46>
 8003196:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003198:	1ac0      	subs	r0, r0, r3
 800319a:	2300      	movs	r3, #0
 800319c:	4602      	mov	r2, r0
 800319e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80031a0:	4628      	mov	r0, r5
 80031a2:	6a21      	ldr	r1, [r4, #32]
 80031a4:	47b0      	blx	r6
 80031a6:	1c43      	adds	r3, r0, #1
 80031a8:	89a3      	ldrh	r3, [r4, #12]
 80031aa:	d106      	bne.n	80031ba <__sflush_r+0x66>
 80031ac:	6829      	ldr	r1, [r5, #0]
 80031ae:	291d      	cmp	r1, #29
 80031b0:	d82c      	bhi.n	800320c <__sflush_r+0xb8>
 80031b2:	4a2a      	ldr	r2, [pc, #168]	; (800325c <__sflush_r+0x108>)
 80031b4:	40ca      	lsrs	r2, r1
 80031b6:	07d6      	lsls	r6, r2, #31
 80031b8:	d528      	bpl.n	800320c <__sflush_r+0xb8>
 80031ba:	2200      	movs	r2, #0
 80031bc:	6062      	str	r2, [r4, #4]
 80031be:	6922      	ldr	r2, [r4, #16]
 80031c0:	04d9      	lsls	r1, r3, #19
 80031c2:	6022      	str	r2, [r4, #0]
 80031c4:	d504      	bpl.n	80031d0 <__sflush_r+0x7c>
 80031c6:	1c42      	adds	r2, r0, #1
 80031c8:	d101      	bne.n	80031ce <__sflush_r+0x7a>
 80031ca:	682b      	ldr	r3, [r5, #0]
 80031cc:	b903      	cbnz	r3, 80031d0 <__sflush_r+0x7c>
 80031ce:	6560      	str	r0, [r4, #84]	; 0x54
 80031d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80031d2:	602f      	str	r7, [r5, #0]
 80031d4:	2900      	cmp	r1, #0
 80031d6:	d0ca      	beq.n	800316e <__sflush_r+0x1a>
 80031d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80031dc:	4299      	cmp	r1, r3
 80031de:	d002      	beq.n	80031e6 <__sflush_r+0x92>
 80031e0:	4628      	mov	r0, r5
 80031e2:	f7ff f9ef 	bl	80025c4 <_free_r>
 80031e6:	2000      	movs	r0, #0
 80031e8:	6360      	str	r0, [r4, #52]	; 0x34
 80031ea:	e7c1      	b.n	8003170 <__sflush_r+0x1c>
 80031ec:	6a21      	ldr	r1, [r4, #32]
 80031ee:	2301      	movs	r3, #1
 80031f0:	4628      	mov	r0, r5
 80031f2:	47b0      	blx	r6
 80031f4:	1c41      	adds	r1, r0, #1
 80031f6:	d1c7      	bne.n	8003188 <__sflush_r+0x34>
 80031f8:	682b      	ldr	r3, [r5, #0]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d0c4      	beq.n	8003188 <__sflush_r+0x34>
 80031fe:	2b1d      	cmp	r3, #29
 8003200:	d001      	beq.n	8003206 <__sflush_r+0xb2>
 8003202:	2b16      	cmp	r3, #22
 8003204:	d101      	bne.n	800320a <__sflush_r+0xb6>
 8003206:	602f      	str	r7, [r5, #0]
 8003208:	e7b1      	b.n	800316e <__sflush_r+0x1a>
 800320a:	89a3      	ldrh	r3, [r4, #12]
 800320c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003210:	81a3      	strh	r3, [r4, #12]
 8003212:	e7ad      	b.n	8003170 <__sflush_r+0x1c>
 8003214:	690f      	ldr	r7, [r1, #16]
 8003216:	2f00      	cmp	r7, #0
 8003218:	d0a9      	beq.n	800316e <__sflush_r+0x1a>
 800321a:	0793      	lsls	r3, r2, #30
 800321c:	bf18      	it	ne
 800321e:	2300      	movne	r3, #0
 8003220:	680e      	ldr	r6, [r1, #0]
 8003222:	bf08      	it	eq
 8003224:	694b      	ldreq	r3, [r1, #20]
 8003226:	eba6 0807 	sub.w	r8, r6, r7
 800322a:	600f      	str	r7, [r1, #0]
 800322c:	608b      	str	r3, [r1, #8]
 800322e:	f1b8 0f00 	cmp.w	r8, #0
 8003232:	dd9c      	ble.n	800316e <__sflush_r+0x1a>
 8003234:	4643      	mov	r3, r8
 8003236:	463a      	mov	r2, r7
 8003238:	4628      	mov	r0, r5
 800323a:	6a21      	ldr	r1, [r4, #32]
 800323c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800323e:	47b0      	blx	r6
 8003240:	2800      	cmp	r0, #0
 8003242:	dc06      	bgt.n	8003252 <__sflush_r+0xfe>
 8003244:	89a3      	ldrh	r3, [r4, #12]
 8003246:	f04f 30ff 	mov.w	r0, #4294967295
 800324a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800324e:	81a3      	strh	r3, [r4, #12]
 8003250:	e78e      	b.n	8003170 <__sflush_r+0x1c>
 8003252:	4407      	add	r7, r0
 8003254:	eba8 0800 	sub.w	r8, r8, r0
 8003258:	e7e9      	b.n	800322e <__sflush_r+0xda>
 800325a:	bf00      	nop
 800325c:	20400001 	.word	0x20400001

08003260 <_fflush_r>:
 8003260:	b538      	push	{r3, r4, r5, lr}
 8003262:	690b      	ldr	r3, [r1, #16]
 8003264:	4605      	mov	r5, r0
 8003266:	460c      	mov	r4, r1
 8003268:	b913      	cbnz	r3, 8003270 <_fflush_r+0x10>
 800326a:	2500      	movs	r5, #0
 800326c:	4628      	mov	r0, r5
 800326e:	bd38      	pop	{r3, r4, r5, pc}
 8003270:	b118      	cbz	r0, 800327a <_fflush_r+0x1a>
 8003272:	6983      	ldr	r3, [r0, #24]
 8003274:	b90b      	cbnz	r3, 800327a <_fflush_r+0x1a>
 8003276:	f000 f887 	bl	8003388 <__sinit>
 800327a:	4b14      	ldr	r3, [pc, #80]	; (80032cc <_fflush_r+0x6c>)
 800327c:	429c      	cmp	r4, r3
 800327e:	d11b      	bne.n	80032b8 <_fflush_r+0x58>
 8003280:	686c      	ldr	r4, [r5, #4]
 8003282:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d0ef      	beq.n	800326a <_fflush_r+0xa>
 800328a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800328c:	07d0      	lsls	r0, r2, #31
 800328e:	d404      	bmi.n	800329a <_fflush_r+0x3a>
 8003290:	0599      	lsls	r1, r3, #22
 8003292:	d402      	bmi.n	800329a <_fflush_r+0x3a>
 8003294:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003296:	f000 f915 	bl	80034c4 <__retarget_lock_acquire_recursive>
 800329a:	4628      	mov	r0, r5
 800329c:	4621      	mov	r1, r4
 800329e:	f7ff ff59 	bl	8003154 <__sflush_r>
 80032a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80032a4:	4605      	mov	r5, r0
 80032a6:	07da      	lsls	r2, r3, #31
 80032a8:	d4e0      	bmi.n	800326c <_fflush_r+0xc>
 80032aa:	89a3      	ldrh	r3, [r4, #12]
 80032ac:	059b      	lsls	r3, r3, #22
 80032ae:	d4dd      	bmi.n	800326c <_fflush_r+0xc>
 80032b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80032b2:	f000 f908 	bl	80034c6 <__retarget_lock_release_recursive>
 80032b6:	e7d9      	b.n	800326c <_fflush_r+0xc>
 80032b8:	4b05      	ldr	r3, [pc, #20]	; (80032d0 <_fflush_r+0x70>)
 80032ba:	429c      	cmp	r4, r3
 80032bc:	d101      	bne.n	80032c2 <_fflush_r+0x62>
 80032be:	68ac      	ldr	r4, [r5, #8]
 80032c0:	e7df      	b.n	8003282 <_fflush_r+0x22>
 80032c2:	4b04      	ldr	r3, [pc, #16]	; (80032d4 <_fflush_r+0x74>)
 80032c4:	429c      	cmp	r4, r3
 80032c6:	bf08      	it	eq
 80032c8:	68ec      	ldreq	r4, [r5, #12]
 80032ca:	e7da      	b.n	8003282 <_fflush_r+0x22>
 80032cc:	08003b2c 	.word	0x08003b2c
 80032d0:	08003b4c 	.word	0x08003b4c
 80032d4:	08003b0c 	.word	0x08003b0c

080032d8 <std>:
 80032d8:	2300      	movs	r3, #0
 80032da:	b510      	push	{r4, lr}
 80032dc:	4604      	mov	r4, r0
 80032de:	e9c0 3300 	strd	r3, r3, [r0]
 80032e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80032e6:	6083      	str	r3, [r0, #8]
 80032e8:	8181      	strh	r1, [r0, #12]
 80032ea:	6643      	str	r3, [r0, #100]	; 0x64
 80032ec:	81c2      	strh	r2, [r0, #14]
 80032ee:	6183      	str	r3, [r0, #24]
 80032f0:	4619      	mov	r1, r3
 80032f2:	2208      	movs	r2, #8
 80032f4:	305c      	adds	r0, #92	; 0x5c
 80032f6:	f7ff f819 	bl	800232c <memset>
 80032fa:	4b05      	ldr	r3, [pc, #20]	; (8003310 <std+0x38>)
 80032fc:	6224      	str	r4, [r4, #32]
 80032fe:	6263      	str	r3, [r4, #36]	; 0x24
 8003300:	4b04      	ldr	r3, [pc, #16]	; (8003314 <std+0x3c>)
 8003302:	62a3      	str	r3, [r4, #40]	; 0x28
 8003304:	4b04      	ldr	r3, [pc, #16]	; (8003318 <std+0x40>)
 8003306:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003308:	4b04      	ldr	r3, [pc, #16]	; (800331c <std+0x44>)
 800330a:	6323      	str	r3, [r4, #48]	; 0x30
 800330c:	bd10      	pop	{r4, pc}
 800330e:	bf00      	nop
 8003310:	080036e9 	.word	0x080036e9
 8003314:	0800370b 	.word	0x0800370b
 8003318:	08003743 	.word	0x08003743
 800331c:	08003767 	.word	0x08003767

08003320 <_cleanup_r>:
 8003320:	4901      	ldr	r1, [pc, #4]	; (8003328 <_cleanup_r+0x8>)
 8003322:	f000 b8af 	b.w	8003484 <_fwalk_reent>
 8003326:	bf00      	nop
 8003328:	08003261 	.word	0x08003261

0800332c <__sfmoreglue>:
 800332c:	b570      	push	{r4, r5, r6, lr}
 800332e:	2568      	movs	r5, #104	; 0x68
 8003330:	1e4a      	subs	r2, r1, #1
 8003332:	4355      	muls	r5, r2
 8003334:	460e      	mov	r6, r1
 8003336:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800333a:	f7ff f98f 	bl	800265c <_malloc_r>
 800333e:	4604      	mov	r4, r0
 8003340:	b140      	cbz	r0, 8003354 <__sfmoreglue+0x28>
 8003342:	2100      	movs	r1, #0
 8003344:	e9c0 1600 	strd	r1, r6, [r0]
 8003348:	300c      	adds	r0, #12
 800334a:	60a0      	str	r0, [r4, #8]
 800334c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003350:	f7fe ffec 	bl	800232c <memset>
 8003354:	4620      	mov	r0, r4
 8003356:	bd70      	pop	{r4, r5, r6, pc}

08003358 <__sfp_lock_acquire>:
 8003358:	4801      	ldr	r0, [pc, #4]	; (8003360 <__sfp_lock_acquire+0x8>)
 800335a:	f000 b8b3 	b.w	80034c4 <__retarget_lock_acquire_recursive>
 800335e:	bf00      	nop
 8003360:	20000158 	.word	0x20000158

08003364 <__sfp_lock_release>:
 8003364:	4801      	ldr	r0, [pc, #4]	; (800336c <__sfp_lock_release+0x8>)
 8003366:	f000 b8ae 	b.w	80034c6 <__retarget_lock_release_recursive>
 800336a:	bf00      	nop
 800336c:	20000158 	.word	0x20000158

08003370 <__sinit_lock_acquire>:
 8003370:	4801      	ldr	r0, [pc, #4]	; (8003378 <__sinit_lock_acquire+0x8>)
 8003372:	f000 b8a7 	b.w	80034c4 <__retarget_lock_acquire_recursive>
 8003376:	bf00      	nop
 8003378:	20000153 	.word	0x20000153

0800337c <__sinit_lock_release>:
 800337c:	4801      	ldr	r0, [pc, #4]	; (8003384 <__sinit_lock_release+0x8>)
 800337e:	f000 b8a2 	b.w	80034c6 <__retarget_lock_release_recursive>
 8003382:	bf00      	nop
 8003384:	20000153 	.word	0x20000153

08003388 <__sinit>:
 8003388:	b510      	push	{r4, lr}
 800338a:	4604      	mov	r4, r0
 800338c:	f7ff fff0 	bl	8003370 <__sinit_lock_acquire>
 8003390:	69a3      	ldr	r3, [r4, #24]
 8003392:	b11b      	cbz	r3, 800339c <__sinit+0x14>
 8003394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003398:	f7ff bff0 	b.w	800337c <__sinit_lock_release>
 800339c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80033a0:	6523      	str	r3, [r4, #80]	; 0x50
 80033a2:	4b13      	ldr	r3, [pc, #76]	; (80033f0 <__sinit+0x68>)
 80033a4:	4a13      	ldr	r2, [pc, #76]	; (80033f4 <__sinit+0x6c>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80033aa:	42a3      	cmp	r3, r4
 80033ac:	bf08      	it	eq
 80033ae:	2301      	moveq	r3, #1
 80033b0:	4620      	mov	r0, r4
 80033b2:	bf08      	it	eq
 80033b4:	61a3      	streq	r3, [r4, #24]
 80033b6:	f000 f81f 	bl	80033f8 <__sfp>
 80033ba:	6060      	str	r0, [r4, #4]
 80033bc:	4620      	mov	r0, r4
 80033be:	f000 f81b 	bl	80033f8 <__sfp>
 80033c2:	60a0      	str	r0, [r4, #8]
 80033c4:	4620      	mov	r0, r4
 80033c6:	f000 f817 	bl	80033f8 <__sfp>
 80033ca:	2200      	movs	r2, #0
 80033cc:	2104      	movs	r1, #4
 80033ce:	60e0      	str	r0, [r4, #12]
 80033d0:	6860      	ldr	r0, [r4, #4]
 80033d2:	f7ff ff81 	bl	80032d8 <std>
 80033d6:	2201      	movs	r2, #1
 80033d8:	2109      	movs	r1, #9
 80033da:	68a0      	ldr	r0, [r4, #8]
 80033dc:	f7ff ff7c 	bl	80032d8 <std>
 80033e0:	2202      	movs	r2, #2
 80033e2:	2112      	movs	r1, #18
 80033e4:	68e0      	ldr	r0, [r4, #12]
 80033e6:	f7ff ff77 	bl	80032d8 <std>
 80033ea:	2301      	movs	r3, #1
 80033ec:	61a3      	str	r3, [r4, #24]
 80033ee:	e7d1      	b.n	8003394 <__sinit+0xc>
 80033f0:	08003920 	.word	0x08003920
 80033f4:	08003321 	.word	0x08003321

080033f8 <__sfp>:
 80033f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033fa:	4607      	mov	r7, r0
 80033fc:	f7ff ffac 	bl	8003358 <__sfp_lock_acquire>
 8003400:	4b1e      	ldr	r3, [pc, #120]	; (800347c <__sfp+0x84>)
 8003402:	681e      	ldr	r6, [r3, #0]
 8003404:	69b3      	ldr	r3, [r6, #24]
 8003406:	b913      	cbnz	r3, 800340e <__sfp+0x16>
 8003408:	4630      	mov	r0, r6
 800340a:	f7ff ffbd 	bl	8003388 <__sinit>
 800340e:	3648      	adds	r6, #72	; 0x48
 8003410:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003414:	3b01      	subs	r3, #1
 8003416:	d503      	bpl.n	8003420 <__sfp+0x28>
 8003418:	6833      	ldr	r3, [r6, #0]
 800341a:	b30b      	cbz	r3, 8003460 <__sfp+0x68>
 800341c:	6836      	ldr	r6, [r6, #0]
 800341e:	e7f7      	b.n	8003410 <__sfp+0x18>
 8003420:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003424:	b9d5      	cbnz	r5, 800345c <__sfp+0x64>
 8003426:	4b16      	ldr	r3, [pc, #88]	; (8003480 <__sfp+0x88>)
 8003428:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800342c:	60e3      	str	r3, [r4, #12]
 800342e:	6665      	str	r5, [r4, #100]	; 0x64
 8003430:	f000 f847 	bl	80034c2 <__retarget_lock_init_recursive>
 8003434:	f7ff ff96 	bl	8003364 <__sfp_lock_release>
 8003438:	2208      	movs	r2, #8
 800343a:	4629      	mov	r1, r5
 800343c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003440:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003444:	6025      	str	r5, [r4, #0]
 8003446:	61a5      	str	r5, [r4, #24]
 8003448:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800344c:	f7fe ff6e 	bl	800232c <memset>
 8003450:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003454:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003458:	4620      	mov	r0, r4
 800345a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800345c:	3468      	adds	r4, #104	; 0x68
 800345e:	e7d9      	b.n	8003414 <__sfp+0x1c>
 8003460:	2104      	movs	r1, #4
 8003462:	4638      	mov	r0, r7
 8003464:	f7ff ff62 	bl	800332c <__sfmoreglue>
 8003468:	4604      	mov	r4, r0
 800346a:	6030      	str	r0, [r6, #0]
 800346c:	2800      	cmp	r0, #0
 800346e:	d1d5      	bne.n	800341c <__sfp+0x24>
 8003470:	f7ff ff78 	bl	8003364 <__sfp_lock_release>
 8003474:	230c      	movs	r3, #12
 8003476:	603b      	str	r3, [r7, #0]
 8003478:	e7ee      	b.n	8003458 <__sfp+0x60>
 800347a:	bf00      	nop
 800347c:	08003920 	.word	0x08003920
 8003480:	ffff0001 	.word	0xffff0001

08003484 <_fwalk_reent>:
 8003484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003488:	4606      	mov	r6, r0
 800348a:	4688      	mov	r8, r1
 800348c:	2700      	movs	r7, #0
 800348e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003492:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003496:	f1b9 0901 	subs.w	r9, r9, #1
 800349a:	d505      	bpl.n	80034a8 <_fwalk_reent+0x24>
 800349c:	6824      	ldr	r4, [r4, #0]
 800349e:	2c00      	cmp	r4, #0
 80034a0:	d1f7      	bne.n	8003492 <_fwalk_reent+0xe>
 80034a2:	4638      	mov	r0, r7
 80034a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034a8:	89ab      	ldrh	r3, [r5, #12]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d907      	bls.n	80034be <_fwalk_reent+0x3a>
 80034ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80034b2:	3301      	adds	r3, #1
 80034b4:	d003      	beq.n	80034be <_fwalk_reent+0x3a>
 80034b6:	4629      	mov	r1, r5
 80034b8:	4630      	mov	r0, r6
 80034ba:	47c0      	blx	r8
 80034bc:	4307      	orrs	r7, r0
 80034be:	3568      	adds	r5, #104	; 0x68
 80034c0:	e7e9      	b.n	8003496 <_fwalk_reent+0x12>

080034c2 <__retarget_lock_init_recursive>:
 80034c2:	4770      	bx	lr

080034c4 <__retarget_lock_acquire_recursive>:
 80034c4:	4770      	bx	lr

080034c6 <__retarget_lock_release_recursive>:
 80034c6:	4770      	bx	lr

080034c8 <__swhatbuf_r>:
 80034c8:	b570      	push	{r4, r5, r6, lr}
 80034ca:	460e      	mov	r6, r1
 80034cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034d0:	4614      	mov	r4, r2
 80034d2:	2900      	cmp	r1, #0
 80034d4:	461d      	mov	r5, r3
 80034d6:	b096      	sub	sp, #88	; 0x58
 80034d8:	da07      	bge.n	80034ea <__swhatbuf_r+0x22>
 80034da:	2300      	movs	r3, #0
 80034dc:	602b      	str	r3, [r5, #0]
 80034de:	89b3      	ldrh	r3, [r6, #12]
 80034e0:	061a      	lsls	r2, r3, #24
 80034e2:	d410      	bmi.n	8003506 <__swhatbuf_r+0x3e>
 80034e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034e8:	e00e      	b.n	8003508 <__swhatbuf_r+0x40>
 80034ea:	466a      	mov	r2, sp
 80034ec:	f000 f962 	bl	80037b4 <_fstat_r>
 80034f0:	2800      	cmp	r0, #0
 80034f2:	dbf2      	blt.n	80034da <__swhatbuf_r+0x12>
 80034f4:	9a01      	ldr	r2, [sp, #4]
 80034f6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80034fa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80034fe:	425a      	negs	r2, r3
 8003500:	415a      	adcs	r2, r3
 8003502:	602a      	str	r2, [r5, #0]
 8003504:	e7ee      	b.n	80034e4 <__swhatbuf_r+0x1c>
 8003506:	2340      	movs	r3, #64	; 0x40
 8003508:	2000      	movs	r0, #0
 800350a:	6023      	str	r3, [r4, #0]
 800350c:	b016      	add	sp, #88	; 0x58
 800350e:	bd70      	pop	{r4, r5, r6, pc}

08003510 <__smakebuf_r>:
 8003510:	898b      	ldrh	r3, [r1, #12]
 8003512:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003514:	079d      	lsls	r5, r3, #30
 8003516:	4606      	mov	r6, r0
 8003518:	460c      	mov	r4, r1
 800351a:	d507      	bpl.n	800352c <__smakebuf_r+0x1c>
 800351c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003520:	6023      	str	r3, [r4, #0]
 8003522:	6123      	str	r3, [r4, #16]
 8003524:	2301      	movs	r3, #1
 8003526:	6163      	str	r3, [r4, #20]
 8003528:	b002      	add	sp, #8
 800352a:	bd70      	pop	{r4, r5, r6, pc}
 800352c:	466a      	mov	r2, sp
 800352e:	ab01      	add	r3, sp, #4
 8003530:	f7ff ffca 	bl	80034c8 <__swhatbuf_r>
 8003534:	9900      	ldr	r1, [sp, #0]
 8003536:	4605      	mov	r5, r0
 8003538:	4630      	mov	r0, r6
 800353a:	f7ff f88f 	bl	800265c <_malloc_r>
 800353e:	b948      	cbnz	r0, 8003554 <__smakebuf_r+0x44>
 8003540:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003544:	059a      	lsls	r2, r3, #22
 8003546:	d4ef      	bmi.n	8003528 <__smakebuf_r+0x18>
 8003548:	f023 0303 	bic.w	r3, r3, #3
 800354c:	f043 0302 	orr.w	r3, r3, #2
 8003550:	81a3      	strh	r3, [r4, #12]
 8003552:	e7e3      	b.n	800351c <__smakebuf_r+0xc>
 8003554:	4b0d      	ldr	r3, [pc, #52]	; (800358c <__smakebuf_r+0x7c>)
 8003556:	62b3      	str	r3, [r6, #40]	; 0x28
 8003558:	89a3      	ldrh	r3, [r4, #12]
 800355a:	6020      	str	r0, [r4, #0]
 800355c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003560:	81a3      	strh	r3, [r4, #12]
 8003562:	9b00      	ldr	r3, [sp, #0]
 8003564:	6120      	str	r0, [r4, #16]
 8003566:	6163      	str	r3, [r4, #20]
 8003568:	9b01      	ldr	r3, [sp, #4]
 800356a:	b15b      	cbz	r3, 8003584 <__smakebuf_r+0x74>
 800356c:	4630      	mov	r0, r6
 800356e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003572:	f000 f931 	bl	80037d8 <_isatty_r>
 8003576:	b128      	cbz	r0, 8003584 <__smakebuf_r+0x74>
 8003578:	89a3      	ldrh	r3, [r4, #12]
 800357a:	f023 0303 	bic.w	r3, r3, #3
 800357e:	f043 0301 	orr.w	r3, r3, #1
 8003582:	81a3      	strh	r3, [r4, #12]
 8003584:	89a0      	ldrh	r0, [r4, #12]
 8003586:	4305      	orrs	r5, r0
 8003588:	81a5      	strh	r5, [r4, #12]
 800358a:	e7cd      	b.n	8003528 <__smakebuf_r+0x18>
 800358c:	08003321 	.word	0x08003321

08003590 <memchr>:
 8003590:	4603      	mov	r3, r0
 8003592:	b510      	push	{r4, lr}
 8003594:	b2c9      	uxtb	r1, r1
 8003596:	4402      	add	r2, r0
 8003598:	4293      	cmp	r3, r2
 800359a:	4618      	mov	r0, r3
 800359c:	d101      	bne.n	80035a2 <memchr+0x12>
 800359e:	2000      	movs	r0, #0
 80035a0:	e003      	b.n	80035aa <memchr+0x1a>
 80035a2:	7804      	ldrb	r4, [r0, #0]
 80035a4:	3301      	adds	r3, #1
 80035a6:	428c      	cmp	r4, r1
 80035a8:	d1f6      	bne.n	8003598 <memchr+0x8>
 80035aa:	bd10      	pop	{r4, pc}

080035ac <memcpy>:
 80035ac:	440a      	add	r2, r1
 80035ae:	4291      	cmp	r1, r2
 80035b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80035b4:	d100      	bne.n	80035b8 <memcpy+0xc>
 80035b6:	4770      	bx	lr
 80035b8:	b510      	push	{r4, lr}
 80035ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80035be:	4291      	cmp	r1, r2
 80035c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80035c4:	d1f9      	bne.n	80035ba <memcpy+0xe>
 80035c6:	bd10      	pop	{r4, pc}

080035c8 <memmove>:
 80035c8:	4288      	cmp	r0, r1
 80035ca:	b510      	push	{r4, lr}
 80035cc:	eb01 0402 	add.w	r4, r1, r2
 80035d0:	d902      	bls.n	80035d8 <memmove+0x10>
 80035d2:	4284      	cmp	r4, r0
 80035d4:	4623      	mov	r3, r4
 80035d6:	d807      	bhi.n	80035e8 <memmove+0x20>
 80035d8:	1e43      	subs	r3, r0, #1
 80035da:	42a1      	cmp	r1, r4
 80035dc:	d008      	beq.n	80035f0 <memmove+0x28>
 80035de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80035e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80035e6:	e7f8      	b.n	80035da <memmove+0x12>
 80035e8:	4601      	mov	r1, r0
 80035ea:	4402      	add	r2, r0
 80035ec:	428a      	cmp	r2, r1
 80035ee:	d100      	bne.n	80035f2 <memmove+0x2a>
 80035f0:	bd10      	pop	{r4, pc}
 80035f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80035f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80035fa:	e7f7      	b.n	80035ec <memmove+0x24>

080035fc <__malloc_lock>:
 80035fc:	4801      	ldr	r0, [pc, #4]	; (8003604 <__malloc_lock+0x8>)
 80035fe:	f7ff bf61 	b.w	80034c4 <__retarget_lock_acquire_recursive>
 8003602:	bf00      	nop
 8003604:	20000154 	.word	0x20000154

08003608 <__malloc_unlock>:
 8003608:	4801      	ldr	r0, [pc, #4]	; (8003610 <__malloc_unlock+0x8>)
 800360a:	f7ff bf5c 	b.w	80034c6 <__retarget_lock_release_recursive>
 800360e:	bf00      	nop
 8003610:	20000154 	.word	0x20000154

08003614 <_realloc_r>:
 8003614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003616:	4607      	mov	r7, r0
 8003618:	4614      	mov	r4, r2
 800361a:	460e      	mov	r6, r1
 800361c:	b921      	cbnz	r1, 8003628 <_realloc_r+0x14>
 800361e:	4611      	mov	r1, r2
 8003620:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003624:	f7ff b81a 	b.w	800265c <_malloc_r>
 8003628:	b922      	cbnz	r2, 8003634 <_realloc_r+0x20>
 800362a:	f7fe ffcb 	bl	80025c4 <_free_r>
 800362e:	4625      	mov	r5, r4
 8003630:	4628      	mov	r0, r5
 8003632:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003634:	f000 f8f2 	bl	800381c <_malloc_usable_size_r>
 8003638:	42a0      	cmp	r0, r4
 800363a:	d20f      	bcs.n	800365c <_realloc_r+0x48>
 800363c:	4621      	mov	r1, r4
 800363e:	4638      	mov	r0, r7
 8003640:	f7ff f80c 	bl	800265c <_malloc_r>
 8003644:	4605      	mov	r5, r0
 8003646:	2800      	cmp	r0, #0
 8003648:	d0f2      	beq.n	8003630 <_realloc_r+0x1c>
 800364a:	4631      	mov	r1, r6
 800364c:	4622      	mov	r2, r4
 800364e:	f7ff ffad 	bl	80035ac <memcpy>
 8003652:	4631      	mov	r1, r6
 8003654:	4638      	mov	r0, r7
 8003656:	f7fe ffb5 	bl	80025c4 <_free_r>
 800365a:	e7e9      	b.n	8003630 <_realloc_r+0x1c>
 800365c:	4635      	mov	r5, r6
 800365e:	e7e7      	b.n	8003630 <_realloc_r+0x1c>

08003660 <_raise_r>:
 8003660:	291f      	cmp	r1, #31
 8003662:	b538      	push	{r3, r4, r5, lr}
 8003664:	4604      	mov	r4, r0
 8003666:	460d      	mov	r5, r1
 8003668:	d904      	bls.n	8003674 <_raise_r+0x14>
 800366a:	2316      	movs	r3, #22
 800366c:	6003      	str	r3, [r0, #0]
 800366e:	f04f 30ff 	mov.w	r0, #4294967295
 8003672:	bd38      	pop	{r3, r4, r5, pc}
 8003674:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003676:	b112      	cbz	r2, 800367e <_raise_r+0x1e>
 8003678:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800367c:	b94b      	cbnz	r3, 8003692 <_raise_r+0x32>
 800367e:	4620      	mov	r0, r4
 8003680:	f000 f830 	bl	80036e4 <_getpid_r>
 8003684:	462a      	mov	r2, r5
 8003686:	4601      	mov	r1, r0
 8003688:	4620      	mov	r0, r4
 800368a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800368e:	f000 b817 	b.w	80036c0 <_kill_r>
 8003692:	2b01      	cmp	r3, #1
 8003694:	d00a      	beq.n	80036ac <_raise_r+0x4c>
 8003696:	1c59      	adds	r1, r3, #1
 8003698:	d103      	bne.n	80036a2 <_raise_r+0x42>
 800369a:	2316      	movs	r3, #22
 800369c:	6003      	str	r3, [r0, #0]
 800369e:	2001      	movs	r0, #1
 80036a0:	e7e7      	b.n	8003672 <_raise_r+0x12>
 80036a2:	2400      	movs	r4, #0
 80036a4:	4628      	mov	r0, r5
 80036a6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80036aa:	4798      	blx	r3
 80036ac:	2000      	movs	r0, #0
 80036ae:	e7e0      	b.n	8003672 <_raise_r+0x12>

080036b0 <raise>:
 80036b0:	4b02      	ldr	r3, [pc, #8]	; (80036bc <raise+0xc>)
 80036b2:	4601      	mov	r1, r0
 80036b4:	6818      	ldr	r0, [r3, #0]
 80036b6:	f7ff bfd3 	b.w	8003660 <_raise_r>
 80036ba:	bf00      	nop
 80036bc:	2000000c 	.word	0x2000000c

080036c0 <_kill_r>:
 80036c0:	b538      	push	{r3, r4, r5, lr}
 80036c2:	2300      	movs	r3, #0
 80036c4:	4d06      	ldr	r5, [pc, #24]	; (80036e0 <_kill_r+0x20>)
 80036c6:	4604      	mov	r4, r0
 80036c8:	4608      	mov	r0, r1
 80036ca:	4611      	mov	r1, r2
 80036cc:	602b      	str	r3, [r5, #0]
 80036ce:	f7fc fef6 	bl	80004be <_kill>
 80036d2:	1c43      	adds	r3, r0, #1
 80036d4:	d102      	bne.n	80036dc <_kill_r+0x1c>
 80036d6:	682b      	ldr	r3, [r5, #0]
 80036d8:	b103      	cbz	r3, 80036dc <_kill_r+0x1c>
 80036da:	6023      	str	r3, [r4, #0]
 80036dc:	bd38      	pop	{r3, r4, r5, pc}
 80036de:	bf00      	nop
 80036e0:	2000015c 	.word	0x2000015c

080036e4 <_getpid_r>:
 80036e4:	f7fc bee4 	b.w	80004b0 <_getpid>

080036e8 <__sread>:
 80036e8:	b510      	push	{r4, lr}
 80036ea:	460c      	mov	r4, r1
 80036ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036f0:	f000 f89c 	bl	800382c <_read_r>
 80036f4:	2800      	cmp	r0, #0
 80036f6:	bfab      	itete	ge
 80036f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80036fa:	89a3      	ldrhlt	r3, [r4, #12]
 80036fc:	181b      	addge	r3, r3, r0
 80036fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003702:	bfac      	ite	ge
 8003704:	6563      	strge	r3, [r4, #84]	; 0x54
 8003706:	81a3      	strhlt	r3, [r4, #12]
 8003708:	bd10      	pop	{r4, pc}

0800370a <__swrite>:
 800370a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800370e:	461f      	mov	r7, r3
 8003710:	898b      	ldrh	r3, [r1, #12]
 8003712:	4605      	mov	r5, r0
 8003714:	05db      	lsls	r3, r3, #23
 8003716:	460c      	mov	r4, r1
 8003718:	4616      	mov	r6, r2
 800371a:	d505      	bpl.n	8003728 <__swrite+0x1e>
 800371c:	2302      	movs	r3, #2
 800371e:	2200      	movs	r2, #0
 8003720:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003724:	f000 f868 	bl	80037f8 <_lseek_r>
 8003728:	89a3      	ldrh	r3, [r4, #12]
 800372a:	4632      	mov	r2, r6
 800372c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003730:	81a3      	strh	r3, [r4, #12]
 8003732:	4628      	mov	r0, r5
 8003734:	463b      	mov	r3, r7
 8003736:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800373a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800373e:	f000 b817 	b.w	8003770 <_write_r>

08003742 <__sseek>:
 8003742:	b510      	push	{r4, lr}
 8003744:	460c      	mov	r4, r1
 8003746:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800374a:	f000 f855 	bl	80037f8 <_lseek_r>
 800374e:	1c43      	adds	r3, r0, #1
 8003750:	89a3      	ldrh	r3, [r4, #12]
 8003752:	bf15      	itete	ne
 8003754:	6560      	strne	r0, [r4, #84]	; 0x54
 8003756:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800375a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800375e:	81a3      	strheq	r3, [r4, #12]
 8003760:	bf18      	it	ne
 8003762:	81a3      	strhne	r3, [r4, #12]
 8003764:	bd10      	pop	{r4, pc}

08003766 <__sclose>:
 8003766:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800376a:	f000 b813 	b.w	8003794 <_close_r>
	...

08003770 <_write_r>:
 8003770:	b538      	push	{r3, r4, r5, lr}
 8003772:	4604      	mov	r4, r0
 8003774:	4608      	mov	r0, r1
 8003776:	4611      	mov	r1, r2
 8003778:	2200      	movs	r2, #0
 800377a:	4d05      	ldr	r5, [pc, #20]	; (8003790 <_write_r+0x20>)
 800377c:	602a      	str	r2, [r5, #0]
 800377e:	461a      	mov	r2, r3
 8003780:	f7fc fed4 	bl	800052c <_write>
 8003784:	1c43      	adds	r3, r0, #1
 8003786:	d102      	bne.n	800378e <_write_r+0x1e>
 8003788:	682b      	ldr	r3, [r5, #0]
 800378a:	b103      	cbz	r3, 800378e <_write_r+0x1e>
 800378c:	6023      	str	r3, [r4, #0]
 800378e:	bd38      	pop	{r3, r4, r5, pc}
 8003790:	2000015c 	.word	0x2000015c

08003794 <_close_r>:
 8003794:	b538      	push	{r3, r4, r5, lr}
 8003796:	2300      	movs	r3, #0
 8003798:	4d05      	ldr	r5, [pc, #20]	; (80037b0 <_close_r+0x1c>)
 800379a:	4604      	mov	r4, r0
 800379c:	4608      	mov	r0, r1
 800379e:	602b      	str	r3, [r5, #0]
 80037a0:	f7fc fee0 	bl	8000564 <_close>
 80037a4:	1c43      	adds	r3, r0, #1
 80037a6:	d102      	bne.n	80037ae <_close_r+0x1a>
 80037a8:	682b      	ldr	r3, [r5, #0]
 80037aa:	b103      	cbz	r3, 80037ae <_close_r+0x1a>
 80037ac:	6023      	str	r3, [r4, #0]
 80037ae:	bd38      	pop	{r3, r4, r5, pc}
 80037b0:	2000015c 	.word	0x2000015c

080037b4 <_fstat_r>:
 80037b4:	b538      	push	{r3, r4, r5, lr}
 80037b6:	2300      	movs	r3, #0
 80037b8:	4d06      	ldr	r5, [pc, #24]	; (80037d4 <_fstat_r+0x20>)
 80037ba:	4604      	mov	r4, r0
 80037bc:	4608      	mov	r0, r1
 80037be:	4611      	mov	r1, r2
 80037c0:	602b      	str	r3, [r5, #0]
 80037c2:	f7fc feda 	bl	800057a <_fstat>
 80037c6:	1c43      	adds	r3, r0, #1
 80037c8:	d102      	bne.n	80037d0 <_fstat_r+0x1c>
 80037ca:	682b      	ldr	r3, [r5, #0]
 80037cc:	b103      	cbz	r3, 80037d0 <_fstat_r+0x1c>
 80037ce:	6023      	str	r3, [r4, #0]
 80037d0:	bd38      	pop	{r3, r4, r5, pc}
 80037d2:	bf00      	nop
 80037d4:	2000015c 	.word	0x2000015c

080037d8 <_isatty_r>:
 80037d8:	b538      	push	{r3, r4, r5, lr}
 80037da:	2300      	movs	r3, #0
 80037dc:	4d05      	ldr	r5, [pc, #20]	; (80037f4 <_isatty_r+0x1c>)
 80037de:	4604      	mov	r4, r0
 80037e0:	4608      	mov	r0, r1
 80037e2:	602b      	str	r3, [r5, #0]
 80037e4:	f7fc fed8 	bl	8000598 <_isatty>
 80037e8:	1c43      	adds	r3, r0, #1
 80037ea:	d102      	bne.n	80037f2 <_isatty_r+0x1a>
 80037ec:	682b      	ldr	r3, [r5, #0]
 80037ee:	b103      	cbz	r3, 80037f2 <_isatty_r+0x1a>
 80037f0:	6023      	str	r3, [r4, #0]
 80037f2:	bd38      	pop	{r3, r4, r5, pc}
 80037f4:	2000015c 	.word	0x2000015c

080037f8 <_lseek_r>:
 80037f8:	b538      	push	{r3, r4, r5, lr}
 80037fa:	4604      	mov	r4, r0
 80037fc:	4608      	mov	r0, r1
 80037fe:	4611      	mov	r1, r2
 8003800:	2200      	movs	r2, #0
 8003802:	4d05      	ldr	r5, [pc, #20]	; (8003818 <_lseek_r+0x20>)
 8003804:	602a      	str	r2, [r5, #0]
 8003806:	461a      	mov	r2, r3
 8003808:	f7fc fed0 	bl	80005ac <_lseek>
 800380c:	1c43      	adds	r3, r0, #1
 800380e:	d102      	bne.n	8003816 <_lseek_r+0x1e>
 8003810:	682b      	ldr	r3, [r5, #0]
 8003812:	b103      	cbz	r3, 8003816 <_lseek_r+0x1e>
 8003814:	6023      	str	r3, [r4, #0]
 8003816:	bd38      	pop	{r3, r4, r5, pc}
 8003818:	2000015c 	.word	0x2000015c

0800381c <_malloc_usable_size_r>:
 800381c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003820:	1f18      	subs	r0, r3, #4
 8003822:	2b00      	cmp	r3, #0
 8003824:	bfbc      	itt	lt
 8003826:	580b      	ldrlt	r3, [r1, r0]
 8003828:	18c0      	addlt	r0, r0, r3
 800382a:	4770      	bx	lr

0800382c <_read_r>:
 800382c:	b538      	push	{r3, r4, r5, lr}
 800382e:	4604      	mov	r4, r0
 8003830:	4608      	mov	r0, r1
 8003832:	4611      	mov	r1, r2
 8003834:	2200      	movs	r2, #0
 8003836:	4d05      	ldr	r5, [pc, #20]	; (800384c <_read_r+0x20>)
 8003838:	602a      	str	r2, [r5, #0]
 800383a:	461a      	mov	r2, r3
 800383c:	f7fc fe59 	bl	80004f2 <_read>
 8003840:	1c43      	adds	r3, r0, #1
 8003842:	d102      	bne.n	800384a <_read_r+0x1e>
 8003844:	682b      	ldr	r3, [r5, #0]
 8003846:	b103      	cbz	r3, 800384a <_read_r+0x1e>
 8003848:	6023      	str	r3, [r4, #0]
 800384a:	bd38      	pop	{r3, r4, r5, pc}
 800384c:	2000015c 	.word	0x2000015c

08003850 <_init>:
 8003850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003852:	bf00      	nop
 8003854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003856:	bc08      	pop	{r3}
 8003858:	469e      	mov	lr, r3
 800385a:	4770      	bx	lr

0800385c <_fini>:
 800385c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800385e:	bf00      	nop
 8003860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003862:	bc08      	pop	{r3}
 8003864:	469e      	mov	lr, r3
 8003866:	4770      	bx	lr
