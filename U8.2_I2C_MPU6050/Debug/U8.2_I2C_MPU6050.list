
U8.2_I2C_MPU6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077cc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000510  080078e0  080078e0  000178e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007df0  08007df0  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08007df0  08007df0  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007df0  08007df0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007df0  08007df0  00017df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007df4  08007df4  00017df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08007df8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  200001e0  08007fd8  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  08007fd8  000202d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a355  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019cf  00000000  00000000  0002a55e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000990  00000000  00000000  0002bf30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000920  00000000  00000000  0002c8c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017fce  00000000  00000000  0002d1e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ac8e  00000000  00000000  000451ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086874  00000000  00000000  0004fe3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d66b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b38  00000000  00000000  000d6704  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	080078c4 	.word	0x080078c4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	080078c4 	.word	0x080078c4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <MPU_Init>:
void HC05_Handle(){
	uint8_t signal[2] = {(uint8_t) move_state, (uint8_t) move_mode};
	HAL_UART_Transmit(&huart1, signal, 2, 200);
}

void MPU_Init(){
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b086      	sub	sp, #24
 8000a8c:	af04      	add	r7, sp, #16
	uint8_t Data = 0;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	71fb      	strb	r3, [r7, #7]

	while(Data != 0x68){
 8000a92:	e00c      	b.n	8000aae <MPU_Init+0x26>
		HAL_I2C_Mem_Read(&hi2c1, MPU_ADDRESS, WHO_AM_I_RES, 1, &Data, 1, 1000);
 8000a94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a98:	9302      	str	r3, [sp, #8]
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	9301      	str	r3, [sp, #4]
 8000a9e:	1dfb      	adds	r3, r7, #7
 8000aa0:	9300      	str	r3, [sp, #0]
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	2275      	movs	r2, #117	; 0x75
 8000aa6:	21d0      	movs	r1, #208	; 0xd0
 8000aa8:	481b      	ldr	r0, [pc, #108]	; (8000b18 <MPU_Init+0x90>)
 8000aaa:	f001 fa91 	bl	8001fd0 <HAL_I2C_Mem_Read>
	while(Data != 0x68){
 8000aae:	79fb      	ldrb	r3, [r7, #7]
 8000ab0:	2b68      	cmp	r3, #104	; 0x68
 8000ab2:	d1ef      	bne.n	8000a94 <MPU_Init+0xc>
	}

	Data = 0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, MPU_ADDRESS, PWR_MGMT_1_RES, 1, &Data, 1, 1000);
 8000ab8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000abc:	9302      	str	r3, [sp, #8]
 8000abe:	2301      	movs	r3, #1
 8000ac0:	9301      	str	r3, [sp, #4]
 8000ac2:	1dfb      	adds	r3, r7, #7
 8000ac4:	9300      	str	r3, [sp, #0]
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	226b      	movs	r2, #107	; 0x6b
 8000aca:	21d0      	movs	r1, #208	; 0xd0
 8000acc:	4812      	ldr	r0, [pc, #72]	; (8000b18 <MPU_Init+0x90>)
 8000ace:	f001 f985 	bl	8001ddc <HAL_I2C_Mem_Write>

//	Data = 0x07;
//	HAL_I2C_Mem_Write(&hi2c1, MPU_ADDRESS, SMPLRT_DIV_RES, 1, &Data, 1, 1000);

	Data = 0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, MPU_ADDRESS, GYRO_CONFIG_RES, 1, &Data, 1, 1000);
 8000ad6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ada:	9302      	str	r3, [sp, #8]
 8000adc:	2301      	movs	r3, #1
 8000ade:	9301      	str	r3, [sp, #4]
 8000ae0:	1dfb      	adds	r3, r7, #7
 8000ae2:	9300      	str	r3, [sp, #0]
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	221b      	movs	r2, #27
 8000ae8:	21d0      	movs	r1, #208	; 0xd0
 8000aea:	480b      	ldr	r0, [pc, #44]	; (8000b18 <MPU_Init+0x90>)
 8000aec:	f001 f976 	bl	8001ddc <HAL_I2C_Mem_Write>

	Data = 0;
 8000af0:	2300      	movs	r3, #0
 8000af2:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, MPU_ADDRESS, ACCEL_CONFIG_RES, 1, &Data, 1, 1000);
 8000af4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000af8:	9302      	str	r3, [sp, #8]
 8000afa:	2301      	movs	r3, #1
 8000afc:	9301      	str	r3, [sp, #4]
 8000afe:	1dfb      	adds	r3, r7, #7
 8000b00:	9300      	str	r3, [sp, #0]
 8000b02:	2301      	movs	r3, #1
 8000b04:	221c      	movs	r2, #28
 8000b06:	21d0      	movs	r1, #208	; 0xd0
 8000b08:	4803      	ldr	r0, [pc, #12]	; (8000b18 <MPU_Init+0x90>)
 8000b0a:	f001 f967 	bl	8001ddc <HAL_I2C_Mem_Write>
}
 8000b0e:	bf00      	nop
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20000224 	.word	0x20000224
 8000b1c:	00000000 	.word	0x00000000

08000b20 <MPU_Handle>:
	char b[60] = {};
	sprintf(b, "%3.2f %3.2f %3.2f %3.2f %3.2f %3.2f\n", Acc_Error[0], Acc_Error[1], Acc_Error[2], Gyro_Error[0], Gyro_Error[1], Gyro_Error[2]);
	HAL_UART_Transmit(&huart1, b, 60, 200);
}

void MPU_Handle(){
 8000b20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000b24:	b0a9      	sub	sp, #164	; 0xa4
 8000b26:	af04      	add	r7, sp, #16
	const float Acc_Error[3] = {0.04, -0.01, 0.96};
	const float Gyro_Error[3] = {-3.44, 1.10, 0.35};
	double Acc[3];
	double Gyro[3];
	double MPU_Angle[3];
	uint32_t delta_time = 0;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	static uint32_t time_get_value = 0;
	static double GYRO_Angle[3] = {};
	double ACCEL_Angle[2] = {};
 8000b2e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	605a      	str	r2, [r3, #4]
 8000b38:	609a      	str	r2, [r3, #8]
 8000b3a:	60da      	str	r2, [r3, #12]
	uint8_t I2C_GYRO_Buffer[6] = {};
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b40:	2300      	movs	r3, #0
 8000b42:	85bb      	strh	r3, [r7, #44]	; 0x2c
	uint8_t I2C_ACCEL_Buffer[6] = {};
 8000b44:	2300      	movs	r3, #0
 8000b46:	623b      	str	r3, [r7, #32]
 8000b48:	2300      	movs	r3, #0
 8000b4a:	84bb      	strh	r3, [r7, #36]	; 0x24

	HAL_I2C_Mem_Read(&hi2c1, MPU_ADDRESS, GYRO_XOUT_H, 1, I2C_GYRO_Buffer, 6, 1000);
 8000b4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b50:	9302      	str	r3, [sp, #8]
 8000b52:	2306      	movs	r3, #6
 8000b54:	9301      	str	r3, [sp, #4]
 8000b56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b5a:	9300      	str	r3, [sp, #0]
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	2243      	movs	r2, #67	; 0x43
 8000b60:	21d0      	movs	r1, #208	; 0xd0
 8000b62:	48cd      	ldr	r0, [pc, #820]	; (8000e98 <MPU_Handle+0x378>)
 8000b64:	f001 fa34 	bl	8001fd0 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, MPU_ADDRESS, ACCEL_XOUT_H, 1, I2C_ACCEL_Buffer, 6, 1000);
 8000b68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b6c:	9302      	str	r3, [sp, #8]
 8000b6e:	2306      	movs	r3, #6
 8000b70:	9301      	str	r3, [sp, #4]
 8000b72:	f107 0320 	add.w	r3, r7, #32
 8000b76:	9300      	str	r3, [sp, #0]
 8000b78:	2301      	movs	r3, #1
 8000b7a:	223b      	movs	r2, #59	; 0x3b
 8000b7c:	21d0      	movs	r1, #208	; 0xd0
 8000b7e:	48c6      	ldr	r0, [pc, #792]	; (8000e98 <MPU_Handle+0x378>)
 8000b80:	f001 fa26 	bl	8001fd0 <HAL_I2C_Mem_Read>
	delta_time = HAL_GetTick() - time_get_value;
 8000b84:	f000 fd50 	bl	8001628 <HAL_GetTick>
 8000b88:	4602      	mov	r2, r0
 8000b8a:	4bc4      	ldr	r3, [pc, #784]	; (8000e9c <MPU_Handle+0x37c>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	1ad3      	subs	r3, r2, r3
 8000b90:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	time_get_value = HAL_GetTick();
 8000b94:	f000 fd48 	bl	8001628 <HAL_GetTick>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	4ac0      	ldr	r2, [pc, #768]	; (8000e9c <MPU_Handle+0x37c>)
 8000b9c:	6013      	str	r3, [r2, #0]

	Acc[0] = (int16_t)(I2C_ACCEL_Buffer[0] << 8 | I2C_ACCEL_Buffer[1]) / 16384.0 - Acc_Error[0];
 8000b9e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ba2:	021b      	lsls	r3, r3, #8
 8000ba4:	b21a      	sxth	r2, r3
 8000ba6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000baa:	b21b      	sxth	r3, r3
 8000bac:	4313      	orrs	r3, r2
 8000bae:	b21b      	sxth	r3, r3
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff fc27 	bl	8000404 <__aeabi_i2d>
 8000bb6:	f04f 0200 	mov.w	r2, #0
 8000bba:	4bb9      	ldr	r3, [pc, #740]	; (8000ea0 <MPU_Handle+0x380>)
 8000bbc:	f7ff fdb6 	bl	800072c <__aeabi_ddiv>
 8000bc0:	4602      	mov	r2, r0
 8000bc2:	460b      	mov	r3, r1
 8000bc4:	4614      	mov	r4, r2
 8000bc6:	461d      	mov	r5, r3
 8000bc8:	4bb6      	ldr	r3, [pc, #728]	; (8000ea4 <MPU_Handle+0x384>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff fc2b 	bl	8000428 <__aeabi_f2d>
 8000bd2:	4602      	mov	r2, r0
 8000bd4:	460b      	mov	r3, r1
 8000bd6:	4620      	mov	r0, r4
 8000bd8:	4629      	mov	r1, r5
 8000bda:	f7ff fac5 	bl	8000168 <__aeabi_dsub>
 8000bde:	4602      	mov	r2, r0
 8000be0:	460b      	mov	r3, r1
 8000be2:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	Acc[1] = (int16_t)(I2C_ACCEL_Buffer[2] << 8 | I2C_ACCEL_Buffer[3]) / 16384.0 - Acc_Error[1];
 8000be6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000bea:	021b      	lsls	r3, r3, #8
 8000bec:	b21a      	sxth	r2, r3
 8000bee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000bf2:	b21b      	sxth	r3, r3
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	b21b      	sxth	r3, r3
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff fc03 	bl	8000404 <__aeabi_i2d>
 8000bfe:	f04f 0200 	mov.w	r2, #0
 8000c02:	4ba7      	ldr	r3, [pc, #668]	; (8000ea0 <MPU_Handle+0x380>)
 8000c04:	f7ff fd92 	bl	800072c <__aeabi_ddiv>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	460b      	mov	r3, r1
 8000c0c:	4614      	mov	r4, r2
 8000c0e:	461d      	mov	r5, r3
 8000c10:	4ba4      	ldr	r3, [pc, #656]	; (8000ea4 <MPU_Handle+0x384>)
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff fc07 	bl	8000428 <__aeabi_f2d>
 8000c1a:	4602      	mov	r2, r0
 8000c1c:	460b      	mov	r3, r1
 8000c1e:	4620      	mov	r0, r4
 8000c20:	4629      	mov	r1, r5
 8000c22:	f7ff faa1 	bl	8000168 <__aeabi_dsub>
 8000c26:	4602      	mov	r2, r0
 8000c28:	460b      	mov	r3, r1
 8000c2a:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	Acc[2] = (int16_t)(I2C_ACCEL_Buffer[4] << 8 | I2C_ACCEL_Buffer[5]) / 16384.0 - Acc_Error[2];
 8000c2e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000c32:	021b      	lsls	r3, r3, #8
 8000c34:	b21a      	sxth	r2, r3
 8000c36:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000c3a:	b21b      	sxth	r3, r3
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	b21b      	sxth	r3, r3
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff fbdf 	bl	8000404 <__aeabi_i2d>
 8000c46:	f04f 0200 	mov.w	r2, #0
 8000c4a:	4b95      	ldr	r3, [pc, #596]	; (8000ea0 <MPU_Handle+0x380>)
 8000c4c:	f7ff fd6e 	bl	800072c <__aeabi_ddiv>
 8000c50:	4602      	mov	r2, r0
 8000c52:	460b      	mov	r3, r1
 8000c54:	4614      	mov	r4, r2
 8000c56:	461d      	mov	r5, r3
 8000c58:	4b92      	ldr	r3, [pc, #584]	; (8000ea4 <MPU_Handle+0x384>)
 8000c5a:	689b      	ldr	r3, [r3, #8]
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff fbe3 	bl	8000428 <__aeabi_f2d>
 8000c62:	4602      	mov	r2, r0
 8000c64:	460b      	mov	r3, r1
 8000c66:	4620      	mov	r0, r4
 8000c68:	4629      	mov	r1, r5
 8000c6a:	f7ff fa7d 	bl	8000168 <__aeabi_dsub>
 8000c6e:	4602      	mov	r2, r0
 8000c70:	460b      	mov	r3, r1
 8000c72:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80

	Gyro[0] = (int16_t)(I2C_GYRO_Buffer[0] << 8 | I2C_GYRO_Buffer[1]) / 131.0 - Gyro_Error[0];
 8000c76:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000c7a:	021b      	lsls	r3, r3, #8
 8000c7c:	b21a      	sxth	r2, r3
 8000c7e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000c82:	b21b      	sxth	r3, r3
 8000c84:	4313      	orrs	r3, r2
 8000c86:	b21b      	sxth	r3, r3
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff fbbb 	bl	8000404 <__aeabi_i2d>
 8000c8e:	a37e      	add	r3, pc, #504	; (adr r3, 8000e88 <MPU_Handle+0x368>)
 8000c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c94:	f7ff fd4a 	bl	800072c <__aeabi_ddiv>
 8000c98:	4602      	mov	r2, r0
 8000c9a:	460b      	mov	r3, r1
 8000c9c:	4614      	mov	r4, r2
 8000c9e:	461d      	mov	r5, r3
 8000ca0:	4b81      	ldr	r3, [pc, #516]	; (8000ea8 <MPU_Handle+0x388>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f7ff fbbf 	bl	8000428 <__aeabi_f2d>
 8000caa:	4602      	mov	r2, r0
 8000cac:	460b      	mov	r3, r1
 8000cae:	4620      	mov	r0, r4
 8000cb0:	4629      	mov	r1, r5
 8000cb2:	f7ff fa59 	bl	8000168 <__aeabi_dsub>
 8000cb6:	4602      	mov	r2, r0
 8000cb8:	460b      	mov	r3, r1
 8000cba:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	Gyro[1] = (int16_t)(I2C_GYRO_Buffer[2] << 8 | I2C_GYRO_Buffer[3]) / 131.0 - Gyro_Error[1];
 8000cbe:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000cc2:	021b      	lsls	r3, r3, #8
 8000cc4:	b21a      	sxth	r2, r3
 8000cc6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000cca:	b21b      	sxth	r3, r3
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	b21b      	sxth	r3, r3
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff fb97 	bl	8000404 <__aeabi_i2d>
 8000cd6:	a36c      	add	r3, pc, #432	; (adr r3, 8000e88 <MPU_Handle+0x368>)
 8000cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cdc:	f7ff fd26 	bl	800072c <__aeabi_ddiv>
 8000ce0:	4602      	mov	r2, r0
 8000ce2:	460b      	mov	r3, r1
 8000ce4:	4614      	mov	r4, r2
 8000ce6:	461d      	mov	r5, r3
 8000ce8:	4b6f      	ldr	r3, [pc, #444]	; (8000ea8 <MPU_Handle+0x388>)
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff fb9b 	bl	8000428 <__aeabi_f2d>
 8000cf2:	4602      	mov	r2, r0
 8000cf4:	460b      	mov	r3, r1
 8000cf6:	4620      	mov	r0, r4
 8000cf8:	4629      	mov	r1, r5
 8000cfa:	f7ff fa35 	bl	8000168 <__aeabi_dsub>
 8000cfe:	4602      	mov	r2, r0
 8000d00:	460b      	mov	r3, r1
 8000d02:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	Gyro[2] = (int16_t)(I2C_GYRO_Buffer[4] << 8 | I2C_GYRO_Buffer[5]) / 131.0 - Gyro_Error[2];
 8000d06:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000d0a:	021b      	lsls	r3, r3, #8
 8000d0c:	b21a      	sxth	r2, r3
 8000d0e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000d12:	b21b      	sxth	r3, r3
 8000d14:	4313      	orrs	r3, r2
 8000d16:	b21b      	sxth	r3, r3
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff fb73 	bl	8000404 <__aeabi_i2d>
 8000d1e:	a35a      	add	r3, pc, #360	; (adr r3, 8000e88 <MPU_Handle+0x368>)
 8000d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d24:	f7ff fd02 	bl	800072c <__aeabi_ddiv>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4614      	mov	r4, r2
 8000d2e:	461d      	mov	r5, r3
 8000d30:	4b5d      	ldr	r3, [pc, #372]	; (8000ea8 <MPU_Handle+0x388>)
 8000d32:	689b      	ldr	r3, [r3, #8]
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff fb77 	bl	8000428 <__aeabi_f2d>
 8000d3a:	4602      	mov	r2, r0
 8000d3c:	460b      	mov	r3, r1
 8000d3e:	4620      	mov	r0, r4
 8000d40:	4629      	mov	r1, r5
 8000d42:	f7ff fa11 	bl	8000168 <__aeabi_dsub>
 8000d46:	4602      	mov	r2, r0
 8000d48:	460b      	mov	r3, r1
 8000d4a:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

	ACCEL_Angle[0] = atan2(Acc[1], sqrt(pow(Acc[0], 2) + pow(Acc[2], 2))) * 180 / PI;
 8000d4e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8000d52:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8000d56:	f04f 0200 	mov.w	r2, #0
 8000d5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d5e:	f005 fb97 	bl	8006490 <pow>
 8000d62:	4680      	mov	r8, r0
 8000d64:	4689      	mov	r9, r1
 8000d66:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8000d6a:	f04f 0200 	mov.w	r2, #0
 8000d6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d72:	f005 fb8d 	bl	8006490 <pow>
 8000d76:	4602      	mov	r2, r0
 8000d78:	460b      	mov	r3, r1
 8000d7a:	4640      	mov	r0, r8
 8000d7c:	4649      	mov	r1, r9
 8000d7e:	f7ff f9f5 	bl	800016c <__adddf3>
 8000d82:	4602      	mov	r2, r0
 8000d84:	460b      	mov	r3, r1
 8000d86:	4610      	mov	r0, r2
 8000d88:	4619      	mov	r1, r3
 8000d8a:	f005 fc2d 	bl	80065e8 <sqrt>
 8000d8e:	4602      	mov	r2, r0
 8000d90:	460b      	mov	r3, r1
 8000d92:	4620      	mov	r0, r4
 8000d94:	4629      	mov	r1, r5
 8000d96:	f005 fb79 	bl	800648c <atan2>
 8000d9a:	f04f 0200 	mov.w	r2, #0
 8000d9e:	4b43      	ldr	r3, [pc, #268]	; (8000eac <MPU_Handle+0x38c>)
 8000da0:	f7ff fb9a 	bl	80004d8 <__aeabi_dmul>
 8000da4:	4602      	mov	r2, r0
 8000da6:	460b      	mov	r3, r1
 8000da8:	4610      	mov	r0, r2
 8000daa:	4619      	mov	r1, r3
 8000dac:	a338      	add	r3, pc, #224	; (adr r3, 8000e90 <MPU_Handle+0x370>)
 8000dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000db2:	f7ff fcbb 	bl	800072c <__aeabi_ddiv>
 8000db6:	4602      	mov	r2, r0
 8000db8:	460b      	mov	r3, r1
 8000dba:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	ACCEL_Angle[1] = atan2(Acc[0], sqrt(pow(Acc[1], 2) + pow(Acc[2], 2))) * 180 / PI;
 8000dbe:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8000dc2:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8000dc6:	f04f 0200 	mov.w	r2, #0
 8000dca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dce:	f005 fb5f 	bl	8006490 <pow>
 8000dd2:	4680      	mov	r8, r0
 8000dd4:	4689      	mov	r9, r1
 8000dd6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8000dda:	f04f 0200 	mov.w	r2, #0
 8000dde:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000de2:	f005 fb55 	bl	8006490 <pow>
 8000de6:	4602      	mov	r2, r0
 8000de8:	460b      	mov	r3, r1
 8000dea:	4640      	mov	r0, r8
 8000dec:	4649      	mov	r1, r9
 8000dee:	f7ff f9bd 	bl	800016c <__adddf3>
 8000df2:	4602      	mov	r2, r0
 8000df4:	460b      	mov	r3, r1
 8000df6:	4610      	mov	r0, r2
 8000df8:	4619      	mov	r1, r3
 8000dfa:	f005 fbf5 	bl	80065e8 <sqrt>
 8000dfe:	4602      	mov	r2, r0
 8000e00:	460b      	mov	r3, r1
 8000e02:	4620      	mov	r0, r4
 8000e04:	4629      	mov	r1, r5
 8000e06:	f005 fb41 	bl	800648c <atan2>
 8000e0a:	f04f 0200 	mov.w	r2, #0
 8000e0e:	4b27      	ldr	r3, [pc, #156]	; (8000eac <MPU_Handle+0x38c>)
 8000e10:	f7ff fb62 	bl	80004d8 <__aeabi_dmul>
 8000e14:	4602      	mov	r2, r0
 8000e16:	460b      	mov	r3, r1
 8000e18:	4610      	mov	r0, r2
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	a31c      	add	r3, pc, #112	; (adr r3, 8000e90 <MPU_Handle+0x370>)
 8000e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e22:	f7ff fc83 	bl	800072c <__aeabi_ddiv>
 8000e26:	4602      	mov	r2, r0
 8000e28:	460b      	mov	r3, r1
 8000e2a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

	GYRO_Angle[0] = GYRO_Angle[0] + delta_time / 1000.0 * Gyro[0];
 8000e2e:	4b20      	ldr	r3, [pc, #128]	; (8000eb0 <MPU_Handle+0x390>)
 8000e30:	e9d3 4500 	ldrd	r4, r5, [r3]
 8000e34:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8000e38:	f7ff fad4 	bl	80003e4 <__aeabi_ui2d>
 8000e3c:	f04f 0200 	mov.w	r2, #0
 8000e40:	4b1c      	ldr	r3, [pc, #112]	; (8000eb4 <MPU_Handle+0x394>)
 8000e42:	f7ff fc73 	bl	800072c <__aeabi_ddiv>
 8000e46:	4602      	mov	r2, r0
 8000e48:	460b      	mov	r3, r1
 8000e4a:	4610      	mov	r0, r2
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8000e52:	f7ff fb41 	bl	80004d8 <__aeabi_dmul>
 8000e56:	4602      	mov	r2, r0
 8000e58:	460b      	mov	r3, r1
 8000e5a:	4620      	mov	r0, r4
 8000e5c:	4629      	mov	r1, r5
 8000e5e:	f7ff f985 	bl	800016c <__adddf3>
 8000e62:	4602      	mov	r2, r0
 8000e64:	460b      	mov	r3, r1
 8000e66:	4912      	ldr	r1, [pc, #72]	; (8000eb0 <MPU_Handle+0x390>)
 8000e68:	e9c1 2300 	strd	r2, r3, [r1]
	GYRO_Angle[1] = GYRO_Angle[1] + delta_time / 1000.0 * Gyro[1];
 8000e6c:	4b10      	ldr	r3, [pc, #64]	; (8000eb0 <MPU_Handle+0x390>)
 8000e6e:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8000e72:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8000e76:	f7ff fab5 	bl	80003e4 <__aeabi_ui2d>
 8000e7a:	f04f 0200 	mov.w	r2, #0
 8000e7e:	4b0d      	ldr	r3, [pc, #52]	; (8000eb4 <MPU_Handle+0x394>)
 8000e80:	f7ff fc54 	bl	800072c <__aeabi_ddiv>
 8000e84:	4602      	mov	r2, r0
 8000e86:	e017      	b.n	8000eb8 <MPU_Handle+0x398>
 8000e88:	00000000 	.word	0x00000000
 8000e8c:	40606000 	.word	0x40606000
 8000e90:	54442eea 	.word	0x54442eea
 8000e94:	400921fb 	.word	0x400921fb
 8000e98:	20000224 	.word	0x20000224
 8000e9c:	200001fc 	.word	0x200001fc
 8000ea0:	40d00000 	.word	0x40d00000
 8000ea4:	0800792c 	.word	0x0800792c
 8000ea8:	08007938 	.word	0x08007938
 8000eac:	40668000 	.word	0x40668000
 8000eb0:	20000200 	.word	0x20000200
 8000eb4:	408f4000 	.word	0x408f4000
 8000eb8:	460b      	mov	r3, r1
 8000eba:	4610      	mov	r0, r2
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8000ec2:	f7ff fb09 	bl	80004d8 <__aeabi_dmul>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	460b      	mov	r3, r1
 8000eca:	4620      	mov	r0, r4
 8000ecc:	4629      	mov	r1, r5
 8000ece:	f7ff f94d 	bl	800016c <__adddf3>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	4954      	ldr	r1, [pc, #336]	; (8001028 <MPU_Handle+0x508>)
 8000ed8:	e9c1 2302 	strd	r2, r3, [r1, #8]
	GYRO_Angle[2] = GYRO_Angle[2] + delta_time / 1000.0 * Gyro[2];
 8000edc:	4b52      	ldr	r3, [pc, #328]	; (8001028 <MPU_Handle+0x508>)
 8000ede:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8000ee2:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8000ee6:	f7ff fa7d 	bl	80003e4 <__aeabi_ui2d>
 8000eea:	f04f 0200 	mov.w	r2, #0
 8000eee:	4b4f      	ldr	r3, [pc, #316]	; (800102c <MPU_Handle+0x50c>)
 8000ef0:	f7ff fc1c 	bl	800072c <__aeabi_ddiv>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	4610      	mov	r0, r2
 8000efa:	4619      	mov	r1, r3
 8000efc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8000f00:	f7ff faea 	bl	80004d8 <__aeabi_dmul>
 8000f04:	4602      	mov	r2, r0
 8000f06:	460b      	mov	r3, r1
 8000f08:	4620      	mov	r0, r4
 8000f0a:	4629      	mov	r1, r5
 8000f0c:	f7ff f92e 	bl	800016c <__adddf3>
 8000f10:	4602      	mov	r2, r0
 8000f12:	460b      	mov	r3, r1
 8000f14:	4944      	ldr	r1, [pc, #272]	; (8001028 <MPU_Handle+0x508>)
 8000f16:	e9c1 2304 	strd	r2, r3, [r1, #16]

	MPU_Angle[0] = 0.98 * GYRO_Angle[0] + 0.02 * ACCEL_Angle[0];
 8000f1a:	4b43      	ldr	r3, [pc, #268]	; (8001028 <MPU_Handle+0x508>)
 8000f1c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f20:	a33d      	add	r3, pc, #244	; (adr r3, 8001018 <MPU_Handle+0x4f8>)
 8000f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f26:	f7ff fad7 	bl	80004d8 <__aeabi_dmul>
 8000f2a:	4602      	mov	r2, r0
 8000f2c:	460b      	mov	r3, r1
 8000f2e:	4614      	mov	r4, r2
 8000f30:	461d      	mov	r5, r3
 8000f32:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8000f36:	a33a      	add	r3, pc, #232	; (adr r3, 8001020 <MPU_Handle+0x500>)
 8000f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f3c:	f7ff facc 	bl	80004d8 <__aeabi_dmul>
 8000f40:	4602      	mov	r2, r0
 8000f42:	460b      	mov	r3, r1
 8000f44:	4620      	mov	r0, r4
 8000f46:	4629      	mov	r1, r5
 8000f48:	f7ff f910 	bl	800016c <__adddf3>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	460b      	mov	r3, r1
 8000f50:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	MPU_Angle[1] = 0.98 * GYRO_Angle[1] + 0.02 * ACCEL_Angle[1];
 8000f54:	4b34      	ldr	r3, [pc, #208]	; (8001028 <MPU_Handle+0x508>)
 8000f56:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000f5a:	a32f      	add	r3, pc, #188	; (adr r3, 8001018 <MPU_Handle+0x4f8>)
 8000f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f60:	f7ff faba 	bl	80004d8 <__aeabi_dmul>
 8000f64:	4602      	mov	r2, r0
 8000f66:	460b      	mov	r3, r1
 8000f68:	4614      	mov	r4, r2
 8000f6a:	461d      	mov	r5, r3
 8000f6c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8000f70:	a32b      	add	r3, pc, #172	; (adr r3, 8001020 <MPU_Handle+0x500>)
 8000f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f76:	f7ff faaf 	bl	80004d8 <__aeabi_dmul>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	4620      	mov	r0, r4
 8000f80:	4629      	mov	r1, r5
 8000f82:	f7ff f8f3 	bl	800016c <__adddf3>
 8000f86:	4602      	mov	r2, r0
 8000f88:	460b      	mov	r3, r1
 8000f8a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	MPU_Angle[2] = 0.98 * GYRO_Angle[2] + 0.02 * ACCEL_Angle[2];
 8000f8e:	4b26      	ldr	r3, [pc, #152]	; (8001028 <MPU_Handle+0x508>)
 8000f90:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8000f94:	a320      	add	r3, pc, #128	; (adr r3, 8001018 <MPU_Handle+0x4f8>)
 8000f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f9a:	f7ff fa9d 	bl	80004d8 <__aeabi_dmul>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	4614      	mov	r4, r2
 8000fa4:	461d      	mov	r5, r3
 8000fa6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8000faa:	a31d      	add	r3, pc, #116	; (adr r3, 8001020 <MPU_Handle+0x500>)
 8000fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb0:	f7ff fa92 	bl	80004d8 <__aeabi_dmul>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	460b      	mov	r3, r1
 8000fb8:	4620      	mov	r0, r4
 8000fba:	4629      	mov	r1, r5
 8000fbc:	f7ff f8d6 	bl	800016c <__adddf3>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	char b[30] = {};
 8000fc8:	2300      	movs	r3, #0
 8000fca:	603b      	str	r3, [r7, #0]
 8000fcc:	1d3b      	adds	r3, r7, #4
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	605a      	str	r2, [r3, #4]
 8000fd4:	609a      	str	r2, [r3, #8]
 8000fd6:	60da      	str	r2, [r3, #12]
 8000fd8:	611a      	str	r2, [r3, #16]
 8000fda:	615a      	str	r2, [r3, #20]
 8000fdc:	831a      	strh	r2, [r3, #24]
	sprintf(b, "%3.2f %3.2f %3.2f\n", MPU_Angle[0], MPU_Angle[1], MPU_Angle[2]);
 8000fde:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8000fe2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8000fe6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8000fea:	463e      	mov	r6, r7
 8000fec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8000ff0:	e9cd 2300 	strd	r2, r3, [sp]
 8000ff4:	4622      	mov	r2, r4
 8000ff6:	462b      	mov	r3, r5
 8000ff8:	490d      	ldr	r1, [pc, #52]	; (8001030 <MPU_Handle+0x510>)
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	f003 f80e 	bl	800401c <siprintf>
	HAL_UART_Transmit(&huart1, b, 30, 200);
 8001000:	4639      	mov	r1, r7
 8001002:	23c8      	movs	r3, #200	; 0xc8
 8001004:	221e      	movs	r2, #30
 8001006:	480b      	ldr	r0, [pc, #44]	; (8001034 <MPU_Handle+0x514>)
 8001008:	f002 fa0b 	bl	8003422 <HAL_UART_Transmit>

}
 800100c:	bf00      	nop
 800100e:	3794      	adds	r7, #148	; 0x94
 8001010:	46bd      	mov	sp, r7
 8001012:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001016:	bf00      	nop
 8001018:	f5c28f5c 	.word	0xf5c28f5c
 800101c:	3fef5c28 	.word	0x3fef5c28
 8001020:	47ae147b 	.word	0x47ae147b
 8001024:	3f947ae1 	.word	0x3f947ae1
 8001028:	20000200 	.word	0x20000200
 800102c:	408f4000 	.word	0x408f4000
 8001030:	08007908 	.word	0x08007908
 8001034:	20000278 	.word	0x20000278

08001038 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800103c:	f000 fa9c 	bl	8001578 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001040:	f000 f80e 	bl	8001060 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001044:	f000 f8a0 	bl	8001188 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001048:	f000 f846 	bl	80010d8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800104c:	f000 f872 	bl	8001134 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  MPU_Init();
 8001050:	f7ff fd1a 	bl	8000a88 <MPU_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MPU_Handle();
 8001054:	f7ff fd64 	bl	8000b20 <MPU_Handle>
	  HAL_Delay(50);
 8001058:	2032      	movs	r0, #50	; 0x32
 800105a:	f000 faef 	bl	800163c <HAL_Delay>
	  MPU_Handle();
 800105e:	e7f9      	b.n	8001054 <main+0x1c>

08001060 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b090      	sub	sp, #64	; 0x40
 8001064:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001066:	f107 0318 	add.w	r3, r7, #24
 800106a:	2228      	movs	r2, #40	; 0x28
 800106c:	2100      	movs	r1, #0
 800106e:	4618      	mov	r0, r3
 8001070:	f002 fb6c 	bl	800374c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001074:	1d3b      	adds	r3, r7, #4
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	605a      	str	r2, [r3, #4]
 800107c:	609a      	str	r2, [r3, #8]
 800107e:	60da      	str	r2, [r3, #12]
 8001080:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001082:	2302      	movs	r3, #2
 8001084:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001086:	2301      	movs	r3, #1
 8001088:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800108a:	2310      	movs	r3, #16
 800108c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800108e:	2300      	movs	r3, #0
 8001090:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001092:	f107 0318 	add.w	r3, r7, #24
 8001096:	4618      	mov	r0, r3
 8001098:	f001 fd5c 	bl	8002b54 <HAL_RCC_OscConfig>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80010a2:	f000 f893 	bl	80011cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010a6:	230f      	movs	r3, #15
 80010a8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010aa:	2300      	movs	r3, #0
 80010ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ae:	2300      	movs	r3, #0
 80010b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010b2:	2300      	movs	r3, #0
 80010b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010b6:	2300      	movs	r3, #0
 80010b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010ba:	1d3b      	adds	r3, r7, #4
 80010bc:	2100      	movs	r1, #0
 80010be:	4618      	mov	r0, r3
 80010c0:	f001 ffc8 	bl	8003054 <HAL_RCC_ClockConfig>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80010ca:	f000 f87f 	bl	80011cc <Error_Handler>
  }
}
 80010ce:	bf00      	nop
 80010d0:	3740      	adds	r7, #64	; 0x40
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
	...

080010d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010dc:	4b12      	ldr	r3, [pc, #72]	; (8001128 <MX_I2C1_Init+0x50>)
 80010de:	4a13      	ldr	r2, [pc, #76]	; (800112c <MX_I2C1_Init+0x54>)
 80010e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010e2:	4b11      	ldr	r3, [pc, #68]	; (8001128 <MX_I2C1_Init+0x50>)
 80010e4:	4a12      	ldr	r2, [pc, #72]	; (8001130 <MX_I2C1_Init+0x58>)
 80010e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010e8:	4b0f      	ldr	r3, [pc, #60]	; (8001128 <MX_I2C1_Init+0x50>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010ee:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <MX_I2C1_Init+0x50>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010f4:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <MX_I2C1_Init+0x50>)
 80010f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010fc:	4b0a      	ldr	r3, [pc, #40]	; (8001128 <MX_I2C1_Init+0x50>)
 80010fe:	2200      	movs	r2, #0
 8001100:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001102:	4b09      	ldr	r3, [pc, #36]	; (8001128 <MX_I2C1_Init+0x50>)
 8001104:	2200      	movs	r2, #0
 8001106:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001108:	4b07      	ldr	r3, [pc, #28]	; (8001128 <MX_I2C1_Init+0x50>)
 800110a:	2200      	movs	r2, #0
 800110c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800110e:	4b06      	ldr	r3, [pc, #24]	; (8001128 <MX_I2C1_Init+0x50>)
 8001110:	2200      	movs	r2, #0
 8001112:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001114:	4804      	ldr	r0, [pc, #16]	; (8001128 <MX_I2C1_Init+0x50>)
 8001116:	f000 fd1d 	bl	8001b54 <HAL_I2C_Init>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001120:	f000 f854 	bl	80011cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001124:	bf00      	nop
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000224 	.word	0x20000224
 800112c:	40005400 	.word	0x40005400
 8001130:	000186a0 	.word	0x000186a0

08001134 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001138:	4b11      	ldr	r3, [pc, #68]	; (8001180 <MX_USART1_UART_Init+0x4c>)
 800113a:	4a12      	ldr	r2, [pc, #72]	; (8001184 <MX_USART1_UART_Init+0x50>)
 800113c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800113e:	4b10      	ldr	r3, [pc, #64]	; (8001180 <MX_USART1_UART_Init+0x4c>)
 8001140:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001144:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001146:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <MX_USART1_UART_Init+0x4c>)
 8001148:	2200      	movs	r2, #0
 800114a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800114c:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <MX_USART1_UART_Init+0x4c>)
 800114e:	2200      	movs	r2, #0
 8001150:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001152:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <MX_USART1_UART_Init+0x4c>)
 8001154:	2200      	movs	r2, #0
 8001156:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001158:	4b09      	ldr	r3, [pc, #36]	; (8001180 <MX_USART1_UART_Init+0x4c>)
 800115a:	220c      	movs	r2, #12
 800115c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800115e:	4b08      	ldr	r3, [pc, #32]	; (8001180 <MX_USART1_UART_Init+0x4c>)
 8001160:	2200      	movs	r2, #0
 8001162:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001164:	4b06      	ldr	r3, [pc, #24]	; (8001180 <MX_USART1_UART_Init+0x4c>)
 8001166:	2200      	movs	r2, #0
 8001168:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800116a:	4805      	ldr	r0, [pc, #20]	; (8001180 <MX_USART1_UART_Init+0x4c>)
 800116c:	f002 f90c 	bl	8003388 <HAL_UART_Init>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001176:	f000 f829 	bl	80011cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20000278 	.word	0x20000278
 8001184:	40013800 	.word	0x40013800

08001188 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800118e:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <MX_GPIO_Init+0x40>)
 8001190:	699b      	ldr	r3, [r3, #24]
 8001192:	4a0d      	ldr	r2, [pc, #52]	; (80011c8 <MX_GPIO_Init+0x40>)
 8001194:	f043 0304 	orr.w	r3, r3, #4
 8001198:	6193      	str	r3, [r2, #24]
 800119a:	4b0b      	ldr	r3, [pc, #44]	; (80011c8 <MX_GPIO_Init+0x40>)
 800119c:	699b      	ldr	r3, [r3, #24]
 800119e:	f003 0304 	and.w	r3, r3, #4
 80011a2:	607b      	str	r3, [r7, #4]
 80011a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a6:	4b08      	ldr	r3, [pc, #32]	; (80011c8 <MX_GPIO_Init+0x40>)
 80011a8:	699b      	ldr	r3, [r3, #24]
 80011aa:	4a07      	ldr	r2, [pc, #28]	; (80011c8 <MX_GPIO_Init+0x40>)
 80011ac:	f043 0308 	orr.w	r3, r3, #8
 80011b0:	6193      	str	r3, [r2, #24]
 80011b2:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <MX_GPIO_Init+0x40>)
 80011b4:	699b      	ldr	r3, [r3, #24]
 80011b6:	f003 0308 	and.w	r3, r3, #8
 80011ba:	603b      	str	r3, [r7, #0]
 80011bc:	683b      	ldr	r3, [r7, #0]

}
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bc80      	pop	{r7}
 80011c6:	4770      	bx	lr
 80011c8:	40021000 	.word	0x40021000

080011cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011d0:	b672      	cpsid	i
}
 80011d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011d4:	e7fe      	b.n	80011d4 <Error_Handler+0x8>
	...

080011d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011de:	4b15      	ldr	r3, [pc, #84]	; (8001234 <HAL_MspInit+0x5c>)
 80011e0:	699b      	ldr	r3, [r3, #24]
 80011e2:	4a14      	ldr	r2, [pc, #80]	; (8001234 <HAL_MspInit+0x5c>)
 80011e4:	f043 0301 	orr.w	r3, r3, #1
 80011e8:	6193      	str	r3, [r2, #24]
 80011ea:	4b12      	ldr	r3, [pc, #72]	; (8001234 <HAL_MspInit+0x5c>)
 80011ec:	699b      	ldr	r3, [r3, #24]
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	60bb      	str	r3, [r7, #8]
 80011f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011f6:	4b0f      	ldr	r3, [pc, #60]	; (8001234 <HAL_MspInit+0x5c>)
 80011f8:	69db      	ldr	r3, [r3, #28]
 80011fa:	4a0e      	ldr	r2, [pc, #56]	; (8001234 <HAL_MspInit+0x5c>)
 80011fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001200:	61d3      	str	r3, [r2, #28]
 8001202:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <HAL_MspInit+0x5c>)
 8001204:	69db      	ldr	r3, [r3, #28]
 8001206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800120a:	607b      	str	r3, [r7, #4]
 800120c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800120e:	4b0a      	ldr	r3, [pc, #40]	; (8001238 <HAL_MspInit+0x60>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	4a04      	ldr	r2, [pc, #16]	; (8001238 <HAL_MspInit+0x60>)
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800122a:	bf00      	nop
 800122c:	3714      	adds	r7, #20
 800122e:	46bd      	mov	sp, r7
 8001230:	bc80      	pop	{r7}
 8001232:	4770      	bx	lr
 8001234:	40021000 	.word	0x40021000
 8001238:	40010000 	.word	0x40010000

0800123c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b088      	sub	sp, #32
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001244:	f107 0310 	add.w	r3, r7, #16
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a15      	ldr	r2, [pc, #84]	; (80012ac <HAL_I2C_MspInit+0x70>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d123      	bne.n	80012a4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800125c:	4b14      	ldr	r3, [pc, #80]	; (80012b0 <HAL_I2C_MspInit+0x74>)
 800125e:	699b      	ldr	r3, [r3, #24]
 8001260:	4a13      	ldr	r2, [pc, #76]	; (80012b0 <HAL_I2C_MspInit+0x74>)
 8001262:	f043 0308 	orr.w	r3, r3, #8
 8001266:	6193      	str	r3, [r2, #24]
 8001268:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <HAL_I2C_MspInit+0x74>)
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	f003 0308 	and.w	r3, r3, #8
 8001270:	60fb      	str	r3, [r7, #12]
 8001272:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001274:	23c0      	movs	r3, #192	; 0xc0
 8001276:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001278:	2312      	movs	r3, #18
 800127a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800127c:	2303      	movs	r3, #3
 800127e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001280:	f107 0310 	add.w	r3, r7, #16
 8001284:	4619      	mov	r1, r3
 8001286:	480b      	ldr	r0, [pc, #44]	; (80012b4 <HAL_I2C_MspInit+0x78>)
 8001288:	f000 fae0 	bl	800184c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800128c:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <HAL_I2C_MspInit+0x74>)
 800128e:	69db      	ldr	r3, [r3, #28]
 8001290:	4a07      	ldr	r2, [pc, #28]	; (80012b0 <HAL_I2C_MspInit+0x74>)
 8001292:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001296:	61d3      	str	r3, [r2, #28]
 8001298:	4b05      	ldr	r3, [pc, #20]	; (80012b0 <HAL_I2C_MspInit+0x74>)
 800129a:	69db      	ldr	r3, [r3, #28]
 800129c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012a0:	60bb      	str	r3, [r7, #8]
 80012a2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012a4:	bf00      	nop
 80012a6:	3720      	adds	r7, #32
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	40005400 	.word	0x40005400
 80012b0:	40021000 	.word	0x40021000
 80012b4:	40010c00 	.word	0x40010c00

080012b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b088      	sub	sp, #32
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c0:	f107 0310 	add.w	r3, r7, #16
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a1c      	ldr	r2, [pc, #112]	; (8001344 <HAL_UART_MspInit+0x8c>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d131      	bne.n	800133c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012d8:	4b1b      	ldr	r3, [pc, #108]	; (8001348 <HAL_UART_MspInit+0x90>)
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	4a1a      	ldr	r2, [pc, #104]	; (8001348 <HAL_UART_MspInit+0x90>)
 80012de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012e2:	6193      	str	r3, [r2, #24]
 80012e4:	4b18      	ldr	r3, [pc, #96]	; (8001348 <HAL_UART_MspInit+0x90>)
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f0:	4b15      	ldr	r3, [pc, #84]	; (8001348 <HAL_UART_MspInit+0x90>)
 80012f2:	699b      	ldr	r3, [r3, #24]
 80012f4:	4a14      	ldr	r2, [pc, #80]	; (8001348 <HAL_UART_MspInit+0x90>)
 80012f6:	f043 0304 	orr.w	r3, r3, #4
 80012fa:	6193      	str	r3, [r2, #24]
 80012fc:	4b12      	ldr	r3, [pc, #72]	; (8001348 <HAL_UART_MspInit+0x90>)
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	f003 0304 	and.w	r3, r3, #4
 8001304:	60bb      	str	r3, [r7, #8]
 8001306:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001308:	f44f 7300 	mov.w	r3, #512	; 0x200
 800130c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130e:	2302      	movs	r3, #2
 8001310:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001312:	2303      	movs	r3, #3
 8001314:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001316:	f107 0310 	add.w	r3, r7, #16
 800131a:	4619      	mov	r1, r3
 800131c:	480b      	ldr	r0, [pc, #44]	; (800134c <HAL_UART_MspInit+0x94>)
 800131e:	f000 fa95 	bl	800184c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001322:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001326:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001328:	2300      	movs	r3, #0
 800132a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001330:	f107 0310 	add.w	r3, r7, #16
 8001334:	4619      	mov	r1, r3
 8001336:	4805      	ldr	r0, [pc, #20]	; (800134c <HAL_UART_MspInit+0x94>)
 8001338:	f000 fa88 	bl	800184c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800133c:	bf00      	nop
 800133e:	3720      	adds	r7, #32
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40013800 	.word	0x40013800
 8001348:	40021000 	.word	0x40021000
 800134c:	40010800 	.word	0x40010800

08001350 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001354:	e7fe      	b.n	8001354 <NMI_Handler+0x4>

08001356 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001356:	b480      	push	{r7}
 8001358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800135a:	e7fe      	b.n	800135a <HardFault_Handler+0x4>

0800135c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001360:	e7fe      	b.n	8001360 <MemManage_Handler+0x4>

08001362 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001362:	b480      	push	{r7}
 8001364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001366:	e7fe      	b.n	8001366 <BusFault_Handler+0x4>

08001368 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800136c:	e7fe      	b.n	800136c <UsageFault_Handler+0x4>

0800136e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800136e:	b480      	push	{r7}
 8001370:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	46bd      	mov	sp, r7
 8001376:	bc80      	pop	{r7}
 8001378:	4770      	bx	lr

0800137a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800137a:	b480      	push	{r7}
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	46bd      	mov	sp, r7
 8001382:	bc80      	pop	{r7}
 8001384:	4770      	bx	lr

08001386 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001386:	b480      	push	{r7}
 8001388:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	46bd      	mov	sp, r7
 800138e:	bc80      	pop	{r7}
 8001390:	4770      	bx	lr

08001392 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001396:	f000 f935 	bl	8001604 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}

0800139e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800139e:	b480      	push	{r7}
 80013a0:	af00      	add	r7, sp, #0
	return 1;
 80013a2:	2301      	movs	r3, #1
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bc80      	pop	{r7}
 80013aa:	4770      	bx	lr

080013ac <_kill>:

int _kill(int pid, int sig)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80013b6:	f002 f99f 	bl	80036f8 <__errno>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2216      	movs	r2, #22
 80013be:	601a      	str	r2, [r3, #0]
	return -1;
 80013c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <_exit>:

void _exit (int status)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80013d4:	f04f 31ff 	mov.w	r1, #4294967295
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f7ff ffe7 	bl	80013ac <_kill>
	while (1) {}		/* Make sure we hang here */
 80013de:	e7fe      	b.n	80013de <_exit+0x12>

080013e0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ec:	2300      	movs	r3, #0
 80013ee:	617b      	str	r3, [r7, #20]
 80013f0:	e00a      	b.n	8001408 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80013f2:	f3af 8000 	nop.w
 80013f6:	4601      	mov	r1, r0
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	1c5a      	adds	r2, r3, #1
 80013fc:	60ba      	str	r2, [r7, #8]
 80013fe:	b2ca      	uxtb	r2, r1
 8001400:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	3301      	adds	r3, #1
 8001406:	617b      	str	r3, [r7, #20]
 8001408:	697a      	ldr	r2, [r7, #20]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	429a      	cmp	r2, r3
 800140e:	dbf0      	blt.n	80013f2 <_read+0x12>
	}

return len;
 8001410:	687b      	ldr	r3, [r7, #4]
}
 8001412:	4618      	mov	r0, r3
 8001414:	3718      	adds	r7, #24
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b086      	sub	sp, #24
 800141e:	af00      	add	r7, sp, #0
 8001420:	60f8      	str	r0, [r7, #12]
 8001422:	60b9      	str	r1, [r7, #8]
 8001424:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001426:	2300      	movs	r3, #0
 8001428:	617b      	str	r3, [r7, #20]
 800142a:	e009      	b.n	8001440 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	1c5a      	adds	r2, r3, #1
 8001430:	60ba      	str	r2, [r7, #8]
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	4618      	mov	r0, r3
 8001436:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	3301      	adds	r3, #1
 800143e:	617b      	str	r3, [r7, #20]
 8001440:	697a      	ldr	r2, [r7, #20]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	429a      	cmp	r2, r3
 8001446:	dbf1      	blt.n	800142c <_write+0x12>
	}
	return len;
 8001448:	687b      	ldr	r3, [r7, #4]
}
 800144a:	4618      	mov	r0, r3
 800144c:	3718      	adds	r7, #24
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <_close>:

int _close(int file)
{
 8001452:	b480      	push	{r7}
 8001454:	b083      	sub	sp, #12
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
	return -1;
 800145a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800145e:	4618      	mov	r0, r3
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	bc80      	pop	{r7}
 8001466:	4770      	bx	lr

08001468 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001478:	605a      	str	r2, [r3, #4]
	return 0;
 800147a:	2300      	movs	r3, #0
}
 800147c:	4618      	mov	r0, r3
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	bc80      	pop	{r7}
 8001484:	4770      	bx	lr

08001486 <_isatty>:

int _isatty(int file)
{
 8001486:	b480      	push	{r7}
 8001488:	b083      	sub	sp, #12
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
	return 1;
 800148e:	2301      	movs	r3, #1
}
 8001490:	4618      	mov	r0, r3
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	bc80      	pop	{r7}
 8001498:	4770      	bx	lr

0800149a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800149a:	b480      	push	{r7}
 800149c:	b085      	sub	sp, #20
 800149e:	af00      	add	r7, sp, #0
 80014a0:	60f8      	str	r0, [r7, #12]
 80014a2:	60b9      	str	r1, [r7, #8]
 80014a4:	607a      	str	r2, [r7, #4]
	return 0;
 80014a6:	2300      	movs	r3, #0
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3714      	adds	r7, #20
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bc80      	pop	{r7}
 80014b0:	4770      	bx	lr
	...

080014b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014bc:	4a14      	ldr	r2, [pc, #80]	; (8001510 <_sbrk+0x5c>)
 80014be:	4b15      	ldr	r3, [pc, #84]	; (8001514 <_sbrk+0x60>)
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014c8:	4b13      	ldr	r3, [pc, #76]	; (8001518 <_sbrk+0x64>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d102      	bne.n	80014d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014d0:	4b11      	ldr	r3, [pc, #68]	; (8001518 <_sbrk+0x64>)
 80014d2:	4a12      	ldr	r2, [pc, #72]	; (800151c <_sbrk+0x68>)
 80014d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014d6:	4b10      	ldr	r3, [pc, #64]	; (8001518 <_sbrk+0x64>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4413      	add	r3, r2
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d207      	bcs.n	80014f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014e4:	f002 f908 	bl	80036f8 <__errno>
 80014e8:	4603      	mov	r3, r0
 80014ea:	220c      	movs	r2, #12
 80014ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014ee:	f04f 33ff 	mov.w	r3, #4294967295
 80014f2:	e009      	b.n	8001508 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014f4:	4b08      	ldr	r3, [pc, #32]	; (8001518 <_sbrk+0x64>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014fa:	4b07      	ldr	r3, [pc, #28]	; (8001518 <_sbrk+0x64>)
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4413      	add	r3, r2
 8001502:	4a05      	ldr	r2, [pc, #20]	; (8001518 <_sbrk+0x64>)
 8001504:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001506:	68fb      	ldr	r3, [r7, #12]
}
 8001508:	4618      	mov	r0, r3
 800150a:	3718      	adds	r7, #24
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	20005000 	.word	0x20005000
 8001514:	00000400 	.word	0x00000400
 8001518:	20000218 	.word	0x20000218
 800151c:	200002d8 	.word	0x200002d8

08001520 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001524:	bf00      	nop
 8001526:	46bd      	mov	sp, r7
 8001528:	bc80      	pop	{r7}
 800152a:	4770      	bx	lr

0800152c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800152c:	480c      	ldr	r0, [pc, #48]	; (8001560 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800152e:	490d      	ldr	r1, [pc, #52]	; (8001564 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001530:	4a0d      	ldr	r2, [pc, #52]	; (8001568 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001532:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001534:	e002      	b.n	800153c <LoopCopyDataInit>

08001536 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001536:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001538:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800153a:	3304      	adds	r3, #4

0800153c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800153c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800153e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001540:	d3f9      	bcc.n	8001536 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001542:	4a0a      	ldr	r2, [pc, #40]	; (800156c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001544:	4c0a      	ldr	r4, [pc, #40]	; (8001570 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001546:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001548:	e001      	b.n	800154e <LoopFillZerobss>

0800154a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800154a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800154c:	3204      	adds	r2, #4

0800154e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800154e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001550:	d3fb      	bcc.n	800154a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001552:	f7ff ffe5 	bl	8001520 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001556:	f002 f8d5 	bl	8003704 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800155a:	f7ff fd6d 	bl	8001038 <main>
  bx lr
 800155e:	4770      	bx	lr
  ldr r0, =_sdata
 8001560:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001564:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001568:	08007df8 	.word	0x08007df8
  ldr r2, =_sbss
 800156c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001570:	200002d4 	.word	0x200002d4

08001574 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001574:	e7fe      	b.n	8001574 <ADC1_2_IRQHandler>
	...

08001578 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800157c:	4b08      	ldr	r3, [pc, #32]	; (80015a0 <HAL_Init+0x28>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a07      	ldr	r2, [pc, #28]	; (80015a0 <HAL_Init+0x28>)
 8001582:	f043 0310 	orr.w	r3, r3, #16
 8001586:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001588:	2003      	movs	r0, #3
 800158a:	f000 f92b 	bl	80017e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800158e:	200f      	movs	r0, #15
 8001590:	f000 f808 	bl	80015a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001594:	f7ff fe20 	bl	80011d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40022000 	.word	0x40022000

080015a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015ac:	4b12      	ldr	r3, [pc, #72]	; (80015f8 <HAL_InitTick+0x54>)
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	4b12      	ldr	r3, [pc, #72]	; (80015fc <HAL_InitTick+0x58>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	4619      	mov	r1, r3
 80015b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80015be:	fbb2 f3f3 	udiv	r3, r2, r3
 80015c2:	4618      	mov	r0, r3
 80015c4:	f000 f935 	bl	8001832 <HAL_SYSTICK_Config>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e00e      	b.n	80015f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2b0f      	cmp	r3, #15
 80015d6:	d80a      	bhi.n	80015ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015d8:	2200      	movs	r2, #0
 80015da:	6879      	ldr	r1, [r7, #4]
 80015dc:	f04f 30ff 	mov.w	r0, #4294967295
 80015e0:	f000 f90b 	bl	80017fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015e4:	4a06      	ldr	r2, [pc, #24]	; (8001600 <HAL_InitTick+0x5c>)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015ea:	2300      	movs	r3, #0
 80015ec:	e000      	b.n	80015f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20000000 	.word	0x20000000
 80015fc:	20000008 	.word	0x20000008
 8001600:	20000004 	.word	0x20000004

08001604 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001608:	4b05      	ldr	r3, [pc, #20]	; (8001620 <HAL_IncTick+0x1c>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	461a      	mov	r2, r3
 800160e:	4b05      	ldr	r3, [pc, #20]	; (8001624 <HAL_IncTick+0x20>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4413      	add	r3, r2
 8001614:	4a03      	ldr	r2, [pc, #12]	; (8001624 <HAL_IncTick+0x20>)
 8001616:	6013      	str	r3, [r2, #0]
}
 8001618:	bf00      	nop
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr
 8001620:	20000008 	.word	0x20000008
 8001624:	200002c0 	.word	0x200002c0

08001628 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  return uwTick;
 800162c:	4b02      	ldr	r3, [pc, #8]	; (8001638 <HAL_GetTick+0x10>)
 800162e:	681b      	ldr	r3, [r3, #0]
}
 8001630:	4618      	mov	r0, r3
 8001632:	46bd      	mov	sp, r7
 8001634:	bc80      	pop	{r7}
 8001636:	4770      	bx	lr
 8001638:	200002c0 	.word	0x200002c0

0800163c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001644:	f7ff fff0 	bl	8001628 <HAL_GetTick>
 8001648:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001654:	d005      	beq.n	8001662 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001656:	4b0a      	ldr	r3, [pc, #40]	; (8001680 <HAL_Delay+0x44>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	461a      	mov	r2, r3
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	4413      	add	r3, r2
 8001660:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001662:	bf00      	nop
 8001664:	f7ff ffe0 	bl	8001628 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	68fa      	ldr	r2, [r7, #12]
 8001670:	429a      	cmp	r2, r3
 8001672:	d8f7      	bhi.n	8001664 <HAL_Delay+0x28>
  {
  }
}
 8001674:	bf00      	nop
 8001676:	bf00      	nop
 8001678:	3710      	adds	r7, #16
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	20000008 	.word	0x20000008

08001684 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001694:	4b0c      	ldr	r3, [pc, #48]	; (80016c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800169a:	68ba      	ldr	r2, [r7, #8]
 800169c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016a0:	4013      	ands	r3, r2
 80016a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016b6:	4a04      	ldr	r2, [pc, #16]	; (80016c8 <__NVIC_SetPriorityGrouping+0x44>)
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	60d3      	str	r3, [r2, #12]
}
 80016bc:	bf00      	nop
 80016be:	3714      	adds	r7, #20
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bc80      	pop	{r7}
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016d0:	4b04      	ldr	r3, [pc, #16]	; (80016e4 <__NVIC_GetPriorityGrouping+0x18>)
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	0a1b      	lsrs	r3, r3, #8
 80016d6:	f003 0307 	and.w	r3, r3, #7
}
 80016da:	4618      	mov	r0, r3
 80016dc:	46bd      	mov	sp, r7
 80016de:	bc80      	pop	{r7}
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	e000ed00 	.word	0xe000ed00

080016e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	6039      	str	r1, [r7, #0]
 80016f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	db0a      	blt.n	8001712 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	b2da      	uxtb	r2, r3
 8001700:	490c      	ldr	r1, [pc, #48]	; (8001734 <__NVIC_SetPriority+0x4c>)
 8001702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001706:	0112      	lsls	r2, r2, #4
 8001708:	b2d2      	uxtb	r2, r2
 800170a:	440b      	add	r3, r1
 800170c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001710:	e00a      	b.n	8001728 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	b2da      	uxtb	r2, r3
 8001716:	4908      	ldr	r1, [pc, #32]	; (8001738 <__NVIC_SetPriority+0x50>)
 8001718:	79fb      	ldrb	r3, [r7, #7]
 800171a:	f003 030f 	and.w	r3, r3, #15
 800171e:	3b04      	subs	r3, #4
 8001720:	0112      	lsls	r2, r2, #4
 8001722:	b2d2      	uxtb	r2, r2
 8001724:	440b      	add	r3, r1
 8001726:	761a      	strb	r2, [r3, #24]
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	bc80      	pop	{r7}
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	e000e100 	.word	0xe000e100
 8001738:	e000ed00 	.word	0xe000ed00

0800173c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800173c:	b480      	push	{r7}
 800173e:	b089      	sub	sp, #36	; 0x24
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f003 0307 	and.w	r3, r3, #7
 800174e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	f1c3 0307 	rsb	r3, r3, #7
 8001756:	2b04      	cmp	r3, #4
 8001758:	bf28      	it	cs
 800175a:	2304      	movcs	r3, #4
 800175c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	3304      	adds	r3, #4
 8001762:	2b06      	cmp	r3, #6
 8001764:	d902      	bls.n	800176c <NVIC_EncodePriority+0x30>
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	3b03      	subs	r3, #3
 800176a:	e000      	b.n	800176e <NVIC_EncodePriority+0x32>
 800176c:	2300      	movs	r3, #0
 800176e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001770:	f04f 32ff 	mov.w	r2, #4294967295
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	43da      	mvns	r2, r3
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	401a      	ands	r2, r3
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001784:	f04f 31ff 	mov.w	r1, #4294967295
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	fa01 f303 	lsl.w	r3, r1, r3
 800178e:	43d9      	mvns	r1, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001794:	4313      	orrs	r3, r2
         );
}
 8001796:	4618      	mov	r0, r3
 8001798:	3724      	adds	r7, #36	; 0x24
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr

080017a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	3b01      	subs	r3, #1
 80017ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017b0:	d301      	bcc.n	80017b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017b2:	2301      	movs	r3, #1
 80017b4:	e00f      	b.n	80017d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017b6:	4a0a      	ldr	r2, [pc, #40]	; (80017e0 <SysTick_Config+0x40>)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	3b01      	subs	r3, #1
 80017bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017be:	210f      	movs	r1, #15
 80017c0:	f04f 30ff 	mov.w	r0, #4294967295
 80017c4:	f7ff ff90 	bl	80016e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017c8:	4b05      	ldr	r3, [pc, #20]	; (80017e0 <SysTick_Config+0x40>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ce:	4b04      	ldr	r3, [pc, #16]	; (80017e0 <SysTick_Config+0x40>)
 80017d0:	2207      	movs	r2, #7
 80017d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	e000e010 	.word	0xe000e010

080017e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f7ff ff49 	bl	8001684 <__NVIC_SetPriorityGrouping>
}
 80017f2:	bf00      	nop
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b086      	sub	sp, #24
 80017fe:	af00      	add	r7, sp, #0
 8001800:	4603      	mov	r3, r0
 8001802:	60b9      	str	r1, [r7, #8]
 8001804:	607a      	str	r2, [r7, #4]
 8001806:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001808:	2300      	movs	r3, #0
 800180a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800180c:	f7ff ff5e 	bl	80016cc <__NVIC_GetPriorityGrouping>
 8001810:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	68b9      	ldr	r1, [r7, #8]
 8001816:	6978      	ldr	r0, [r7, #20]
 8001818:	f7ff ff90 	bl	800173c <NVIC_EncodePriority>
 800181c:	4602      	mov	r2, r0
 800181e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001822:	4611      	mov	r1, r2
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff ff5f 	bl	80016e8 <__NVIC_SetPriority>
}
 800182a:	bf00      	nop
 800182c:	3718      	adds	r7, #24
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b082      	sub	sp, #8
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f7ff ffb0 	bl	80017a0 <SysTick_Config>
 8001840:	4603      	mov	r3, r0
}
 8001842:	4618      	mov	r0, r3
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
	...

0800184c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800184c:	b480      	push	{r7}
 800184e:	b08b      	sub	sp, #44	; 0x2c
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001856:	2300      	movs	r3, #0
 8001858:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800185a:	2300      	movs	r3, #0
 800185c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800185e:	e169      	b.n	8001b34 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001860:	2201      	movs	r2, #1
 8001862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	69fa      	ldr	r2, [r7, #28]
 8001870:	4013      	ands	r3, r2
 8001872:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	429a      	cmp	r2, r3
 800187a:	f040 8158 	bne.w	8001b2e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	4a9a      	ldr	r2, [pc, #616]	; (8001aec <HAL_GPIO_Init+0x2a0>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d05e      	beq.n	8001946 <HAL_GPIO_Init+0xfa>
 8001888:	4a98      	ldr	r2, [pc, #608]	; (8001aec <HAL_GPIO_Init+0x2a0>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d875      	bhi.n	800197a <HAL_GPIO_Init+0x12e>
 800188e:	4a98      	ldr	r2, [pc, #608]	; (8001af0 <HAL_GPIO_Init+0x2a4>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d058      	beq.n	8001946 <HAL_GPIO_Init+0xfa>
 8001894:	4a96      	ldr	r2, [pc, #600]	; (8001af0 <HAL_GPIO_Init+0x2a4>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d86f      	bhi.n	800197a <HAL_GPIO_Init+0x12e>
 800189a:	4a96      	ldr	r2, [pc, #600]	; (8001af4 <HAL_GPIO_Init+0x2a8>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d052      	beq.n	8001946 <HAL_GPIO_Init+0xfa>
 80018a0:	4a94      	ldr	r2, [pc, #592]	; (8001af4 <HAL_GPIO_Init+0x2a8>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d869      	bhi.n	800197a <HAL_GPIO_Init+0x12e>
 80018a6:	4a94      	ldr	r2, [pc, #592]	; (8001af8 <HAL_GPIO_Init+0x2ac>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d04c      	beq.n	8001946 <HAL_GPIO_Init+0xfa>
 80018ac:	4a92      	ldr	r2, [pc, #584]	; (8001af8 <HAL_GPIO_Init+0x2ac>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d863      	bhi.n	800197a <HAL_GPIO_Init+0x12e>
 80018b2:	4a92      	ldr	r2, [pc, #584]	; (8001afc <HAL_GPIO_Init+0x2b0>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d046      	beq.n	8001946 <HAL_GPIO_Init+0xfa>
 80018b8:	4a90      	ldr	r2, [pc, #576]	; (8001afc <HAL_GPIO_Init+0x2b0>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d85d      	bhi.n	800197a <HAL_GPIO_Init+0x12e>
 80018be:	2b12      	cmp	r3, #18
 80018c0:	d82a      	bhi.n	8001918 <HAL_GPIO_Init+0xcc>
 80018c2:	2b12      	cmp	r3, #18
 80018c4:	d859      	bhi.n	800197a <HAL_GPIO_Init+0x12e>
 80018c6:	a201      	add	r2, pc, #4	; (adr r2, 80018cc <HAL_GPIO_Init+0x80>)
 80018c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018cc:	08001947 	.word	0x08001947
 80018d0:	08001921 	.word	0x08001921
 80018d4:	08001933 	.word	0x08001933
 80018d8:	08001975 	.word	0x08001975
 80018dc:	0800197b 	.word	0x0800197b
 80018e0:	0800197b 	.word	0x0800197b
 80018e4:	0800197b 	.word	0x0800197b
 80018e8:	0800197b 	.word	0x0800197b
 80018ec:	0800197b 	.word	0x0800197b
 80018f0:	0800197b 	.word	0x0800197b
 80018f4:	0800197b 	.word	0x0800197b
 80018f8:	0800197b 	.word	0x0800197b
 80018fc:	0800197b 	.word	0x0800197b
 8001900:	0800197b 	.word	0x0800197b
 8001904:	0800197b 	.word	0x0800197b
 8001908:	0800197b 	.word	0x0800197b
 800190c:	0800197b 	.word	0x0800197b
 8001910:	08001929 	.word	0x08001929
 8001914:	0800193d 	.word	0x0800193d
 8001918:	4a79      	ldr	r2, [pc, #484]	; (8001b00 <HAL_GPIO_Init+0x2b4>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d013      	beq.n	8001946 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800191e:	e02c      	b.n	800197a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	623b      	str	r3, [r7, #32]
          break;
 8001926:	e029      	b.n	800197c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	3304      	adds	r3, #4
 800192e:	623b      	str	r3, [r7, #32]
          break;
 8001930:	e024      	b.n	800197c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	3308      	adds	r3, #8
 8001938:	623b      	str	r3, [r7, #32]
          break;
 800193a:	e01f      	b.n	800197c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	330c      	adds	r3, #12
 8001942:	623b      	str	r3, [r7, #32]
          break;
 8001944:	e01a      	b.n	800197c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d102      	bne.n	8001954 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800194e:	2304      	movs	r3, #4
 8001950:	623b      	str	r3, [r7, #32]
          break;
 8001952:	e013      	b.n	800197c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d105      	bne.n	8001968 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800195c:	2308      	movs	r3, #8
 800195e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	69fa      	ldr	r2, [r7, #28]
 8001964:	611a      	str	r2, [r3, #16]
          break;
 8001966:	e009      	b.n	800197c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001968:	2308      	movs	r3, #8
 800196a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	69fa      	ldr	r2, [r7, #28]
 8001970:	615a      	str	r2, [r3, #20]
          break;
 8001972:	e003      	b.n	800197c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001974:	2300      	movs	r3, #0
 8001976:	623b      	str	r3, [r7, #32]
          break;
 8001978:	e000      	b.n	800197c <HAL_GPIO_Init+0x130>
          break;
 800197a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	2bff      	cmp	r3, #255	; 0xff
 8001980:	d801      	bhi.n	8001986 <HAL_GPIO_Init+0x13a>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	e001      	b.n	800198a <HAL_GPIO_Init+0x13e>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	3304      	adds	r3, #4
 800198a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	2bff      	cmp	r3, #255	; 0xff
 8001990:	d802      	bhi.n	8001998 <HAL_GPIO_Init+0x14c>
 8001992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	e002      	b.n	800199e <HAL_GPIO_Init+0x152>
 8001998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199a:	3b08      	subs	r3, #8
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	210f      	movs	r1, #15
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	fa01 f303 	lsl.w	r3, r1, r3
 80019ac:	43db      	mvns	r3, r3
 80019ae:	401a      	ands	r2, r3
 80019b0:	6a39      	ldr	r1, [r7, #32]
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	fa01 f303 	lsl.w	r3, r1, r3
 80019b8:	431a      	orrs	r2, r3
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	f000 80b1 	beq.w	8001b2e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019cc:	4b4d      	ldr	r3, [pc, #308]	; (8001b04 <HAL_GPIO_Init+0x2b8>)
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	4a4c      	ldr	r2, [pc, #304]	; (8001b04 <HAL_GPIO_Init+0x2b8>)
 80019d2:	f043 0301 	orr.w	r3, r3, #1
 80019d6:	6193      	str	r3, [r2, #24]
 80019d8:	4b4a      	ldr	r3, [pc, #296]	; (8001b04 <HAL_GPIO_Init+0x2b8>)
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	f003 0301 	and.w	r3, r3, #1
 80019e0:	60bb      	str	r3, [r7, #8]
 80019e2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019e4:	4a48      	ldr	r2, [pc, #288]	; (8001b08 <HAL_GPIO_Init+0x2bc>)
 80019e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e8:	089b      	lsrs	r3, r3, #2
 80019ea:	3302      	adds	r3, #2
 80019ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019f0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f4:	f003 0303 	and.w	r3, r3, #3
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	220f      	movs	r2, #15
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	43db      	mvns	r3, r3
 8001a02:	68fa      	ldr	r2, [r7, #12]
 8001a04:	4013      	ands	r3, r2
 8001a06:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4a40      	ldr	r2, [pc, #256]	; (8001b0c <HAL_GPIO_Init+0x2c0>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d013      	beq.n	8001a38 <HAL_GPIO_Init+0x1ec>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4a3f      	ldr	r2, [pc, #252]	; (8001b10 <HAL_GPIO_Init+0x2c4>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d00d      	beq.n	8001a34 <HAL_GPIO_Init+0x1e8>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4a3e      	ldr	r2, [pc, #248]	; (8001b14 <HAL_GPIO_Init+0x2c8>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d007      	beq.n	8001a30 <HAL_GPIO_Init+0x1e4>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	4a3d      	ldr	r2, [pc, #244]	; (8001b18 <HAL_GPIO_Init+0x2cc>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d101      	bne.n	8001a2c <HAL_GPIO_Init+0x1e0>
 8001a28:	2303      	movs	r3, #3
 8001a2a:	e006      	b.n	8001a3a <HAL_GPIO_Init+0x1ee>
 8001a2c:	2304      	movs	r3, #4
 8001a2e:	e004      	b.n	8001a3a <HAL_GPIO_Init+0x1ee>
 8001a30:	2302      	movs	r3, #2
 8001a32:	e002      	b.n	8001a3a <HAL_GPIO_Init+0x1ee>
 8001a34:	2301      	movs	r3, #1
 8001a36:	e000      	b.n	8001a3a <HAL_GPIO_Init+0x1ee>
 8001a38:	2300      	movs	r3, #0
 8001a3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a3c:	f002 0203 	and.w	r2, r2, #3
 8001a40:	0092      	lsls	r2, r2, #2
 8001a42:	4093      	lsls	r3, r2
 8001a44:	68fa      	ldr	r2, [r7, #12]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a4a:	492f      	ldr	r1, [pc, #188]	; (8001b08 <HAL_GPIO_Init+0x2bc>)
 8001a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4e:	089b      	lsrs	r3, r3, #2
 8001a50:	3302      	adds	r3, #2
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d006      	beq.n	8001a72 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a64:	4b2d      	ldr	r3, [pc, #180]	; (8001b1c <HAL_GPIO_Init+0x2d0>)
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	492c      	ldr	r1, [pc, #176]	; (8001b1c <HAL_GPIO_Init+0x2d0>)
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	600b      	str	r3, [r1, #0]
 8001a70:	e006      	b.n	8001a80 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a72:	4b2a      	ldr	r3, [pc, #168]	; (8001b1c <HAL_GPIO_Init+0x2d0>)
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	4928      	ldr	r1, [pc, #160]	; (8001b1c <HAL_GPIO_Init+0x2d0>)
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d006      	beq.n	8001a9a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a8c:	4b23      	ldr	r3, [pc, #140]	; (8001b1c <HAL_GPIO_Init+0x2d0>)
 8001a8e:	685a      	ldr	r2, [r3, #4]
 8001a90:	4922      	ldr	r1, [pc, #136]	; (8001b1c <HAL_GPIO_Init+0x2d0>)
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	604b      	str	r3, [r1, #4]
 8001a98:	e006      	b.n	8001aa8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a9a:	4b20      	ldr	r3, [pc, #128]	; (8001b1c <HAL_GPIO_Init+0x2d0>)
 8001a9c:	685a      	ldr	r2, [r3, #4]
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	491e      	ldr	r1, [pc, #120]	; (8001b1c <HAL_GPIO_Init+0x2d0>)
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d006      	beq.n	8001ac2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ab4:	4b19      	ldr	r3, [pc, #100]	; (8001b1c <HAL_GPIO_Init+0x2d0>)
 8001ab6:	689a      	ldr	r2, [r3, #8]
 8001ab8:	4918      	ldr	r1, [pc, #96]	; (8001b1c <HAL_GPIO_Init+0x2d0>)
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	608b      	str	r3, [r1, #8]
 8001ac0:	e006      	b.n	8001ad0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ac2:	4b16      	ldr	r3, [pc, #88]	; (8001b1c <HAL_GPIO_Init+0x2d0>)
 8001ac4:	689a      	ldr	r2, [r3, #8]
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	4914      	ldr	r1, [pc, #80]	; (8001b1c <HAL_GPIO_Init+0x2d0>)
 8001acc:	4013      	ands	r3, r2
 8001ace:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d021      	beq.n	8001b20 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001adc:	4b0f      	ldr	r3, [pc, #60]	; (8001b1c <HAL_GPIO_Init+0x2d0>)
 8001ade:	68da      	ldr	r2, [r3, #12]
 8001ae0:	490e      	ldr	r1, [pc, #56]	; (8001b1c <HAL_GPIO_Init+0x2d0>)
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	60cb      	str	r3, [r1, #12]
 8001ae8:	e021      	b.n	8001b2e <HAL_GPIO_Init+0x2e2>
 8001aea:	bf00      	nop
 8001aec:	10320000 	.word	0x10320000
 8001af0:	10310000 	.word	0x10310000
 8001af4:	10220000 	.word	0x10220000
 8001af8:	10210000 	.word	0x10210000
 8001afc:	10120000 	.word	0x10120000
 8001b00:	10110000 	.word	0x10110000
 8001b04:	40021000 	.word	0x40021000
 8001b08:	40010000 	.word	0x40010000
 8001b0c:	40010800 	.word	0x40010800
 8001b10:	40010c00 	.word	0x40010c00
 8001b14:	40011000 	.word	0x40011000
 8001b18:	40011400 	.word	0x40011400
 8001b1c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b20:	4b0b      	ldr	r3, [pc, #44]	; (8001b50 <HAL_GPIO_Init+0x304>)
 8001b22:	68da      	ldr	r2, [r3, #12]
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	43db      	mvns	r3, r3
 8001b28:	4909      	ldr	r1, [pc, #36]	; (8001b50 <HAL_GPIO_Init+0x304>)
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b30:	3301      	adds	r3, #1
 8001b32:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	f47f ae8e 	bne.w	8001860 <HAL_GPIO_Init+0x14>
  }
}
 8001b44:	bf00      	nop
 8001b46:	bf00      	nop
 8001b48:	372c      	adds	r7, #44	; 0x2c
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bc80      	pop	{r7}
 8001b4e:	4770      	bx	lr
 8001b50:	40010400 	.word	0x40010400

08001b54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d101      	bne.n	8001b66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e12b      	b.n	8001dbe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d106      	bne.n	8001b80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f7ff fb5e 	bl	800123c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2224      	movs	r2, #36	; 0x24
 8001b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f022 0201 	bic.w	r2, r2, #1
 8001b96:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ba6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001bb6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001bb8:	f001 fba0 	bl	80032fc <HAL_RCC_GetPCLK1Freq>
 8001bbc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	4a81      	ldr	r2, [pc, #516]	; (8001dc8 <HAL_I2C_Init+0x274>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d807      	bhi.n	8001bd8 <HAL_I2C_Init+0x84>
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	4a80      	ldr	r2, [pc, #512]	; (8001dcc <HAL_I2C_Init+0x278>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	bf94      	ite	ls
 8001bd0:	2301      	movls	r3, #1
 8001bd2:	2300      	movhi	r3, #0
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	e006      	b.n	8001be6 <HAL_I2C_Init+0x92>
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	4a7d      	ldr	r2, [pc, #500]	; (8001dd0 <HAL_I2C_Init+0x27c>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	bf94      	ite	ls
 8001be0:	2301      	movls	r3, #1
 8001be2:	2300      	movhi	r3, #0
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e0e7      	b.n	8001dbe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	4a78      	ldr	r2, [pc, #480]	; (8001dd4 <HAL_I2C_Init+0x280>)
 8001bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf6:	0c9b      	lsrs	r3, r3, #18
 8001bf8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	68ba      	ldr	r2, [r7, #8]
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	6a1b      	ldr	r3, [r3, #32]
 8001c14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	4a6a      	ldr	r2, [pc, #424]	; (8001dc8 <HAL_I2C_Init+0x274>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d802      	bhi.n	8001c28 <HAL_I2C_Init+0xd4>
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	3301      	adds	r3, #1
 8001c26:	e009      	b.n	8001c3c <HAL_I2C_Init+0xe8>
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001c2e:	fb02 f303 	mul.w	r3, r2, r3
 8001c32:	4a69      	ldr	r2, [pc, #420]	; (8001dd8 <HAL_I2C_Init+0x284>)
 8001c34:	fba2 2303 	umull	r2, r3, r2, r3
 8001c38:	099b      	lsrs	r3, r3, #6
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	6812      	ldr	r2, [r2, #0]
 8001c40:	430b      	orrs	r3, r1
 8001c42:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	69db      	ldr	r3, [r3, #28]
 8001c4a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001c4e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	495c      	ldr	r1, [pc, #368]	; (8001dc8 <HAL_I2C_Init+0x274>)
 8001c58:	428b      	cmp	r3, r1
 8001c5a:	d819      	bhi.n	8001c90 <HAL_I2C_Init+0x13c>
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	1e59      	subs	r1, r3, #1
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c6a:	1c59      	adds	r1, r3, #1
 8001c6c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001c70:	400b      	ands	r3, r1
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d00a      	beq.n	8001c8c <HAL_I2C_Init+0x138>
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	1e59      	subs	r1, r3, #1
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c84:	3301      	adds	r3, #1
 8001c86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c8a:	e051      	b.n	8001d30 <HAL_I2C_Init+0x1dc>
 8001c8c:	2304      	movs	r3, #4
 8001c8e:	e04f      	b.n	8001d30 <HAL_I2C_Init+0x1dc>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d111      	bne.n	8001cbc <HAL_I2C_Init+0x168>
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	1e58      	subs	r0, r3, #1
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6859      	ldr	r1, [r3, #4]
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	440b      	add	r3, r1
 8001ca6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001caa:	3301      	adds	r3, #1
 8001cac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	bf0c      	ite	eq
 8001cb4:	2301      	moveq	r3, #1
 8001cb6:	2300      	movne	r3, #0
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	e012      	b.n	8001ce2 <HAL_I2C_Init+0x18e>
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	1e58      	subs	r0, r3, #1
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6859      	ldr	r1, [r3, #4]
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	440b      	add	r3, r1
 8001cca:	0099      	lsls	r1, r3, #2
 8001ccc:	440b      	add	r3, r1
 8001cce:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	bf0c      	ite	eq
 8001cdc:	2301      	moveq	r3, #1
 8001cde:	2300      	movne	r3, #0
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <HAL_I2C_Init+0x196>
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e022      	b.n	8001d30 <HAL_I2C_Init+0x1dc>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d10e      	bne.n	8001d10 <HAL_I2C_Init+0x1bc>
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	1e58      	subs	r0, r3, #1
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6859      	ldr	r1, [r3, #4]
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	440b      	add	r3, r1
 8001d00:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d04:	3301      	adds	r3, #1
 8001d06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d0e:	e00f      	b.n	8001d30 <HAL_I2C_Init+0x1dc>
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	1e58      	subs	r0, r3, #1
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6859      	ldr	r1, [r3, #4]
 8001d18:	460b      	mov	r3, r1
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	440b      	add	r3, r1
 8001d1e:	0099      	lsls	r1, r3, #2
 8001d20:	440b      	add	r3, r1
 8001d22:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d26:	3301      	adds	r3, #1
 8001d28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d30:	6879      	ldr	r1, [r7, #4]
 8001d32:	6809      	ldr	r1, [r1, #0]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	69da      	ldr	r2, [r3, #28]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6a1b      	ldr	r3, [r3, #32]
 8001d4a:	431a      	orrs	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	430a      	orrs	r2, r1
 8001d52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001d5e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	6911      	ldr	r1, [r2, #16]
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	68d2      	ldr	r2, [r2, #12]
 8001d6a:	4311      	orrs	r1, r2
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	6812      	ldr	r2, [r2, #0]
 8001d70:	430b      	orrs	r3, r1
 8001d72:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	695a      	ldr	r2, [r3, #20]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	699b      	ldr	r3, [r3, #24]
 8001d86:	431a      	orrs	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f042 0201 	orr.w	r2, r2, #1
 8001d9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2220      	movs	r2, #32
 8001daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	000186a0 	.word	0x000186a0
 8001dcc:	001e847f 	.word	0x001e847f
 8001dd0:	003d08ff 	.word	0x003d08ff
 8001dd4:	431bde83 	.word	0x431bde83
 8001dd8:	10624dd3 	.word	0x10624dd3

08001ddc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b088      	sub	sp, #32
 8001de0:	af02      	add	r7, sp, #8
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	4608      	mov	r0, r1
 8001de6:	4611      	mov	r1, r2
 8001de8:	461a      	mov	r2, r3
 8001dea:	4603      	mov	r3, r0
 8001dec:	817b      	strh	r3, [r7, #10]
 8001dee:	460b      	mov	r3, r1
 8001df0:	813b      	strh	r3, [r7, #8]
 8001df2:	4613      	mov	r3, r2
 8001df4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001df6:	f7ff fc17 	bl	8001628 <HAL_GetTick>
 8001dfa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	2b20      	cmp	r3, #32
 8001e06:	f040 80d9 	bne.w	8001fbc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	9300      	str	r3, [sp, #0]
 8001e0e:	2319      	movs	r3, #25
 8001e10:	2201      	movs	r2, #1
 8001e12:	496d      	ldr	r1, [pc, #436]	; (8001fc8 <HAL_I2C_Mem_Write+0x1ec>)
 8001e14:	68f8      	ldr	r0, [r7, #12]
 8001e16:	f000 fcc1 	bl	800279c <I2C_WaitOnFlagUntilTimeout>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001e20:	2302      	movs	r3, #2
 8001e22:	e0cc      	b.n	8001fbe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d101      	bne.n	8001e32 <HAL_I2C_Mem_Write+0x56>
 8001e2e:	2302      	movs	r3, #2
 8001e30:	e0c5      	b.n	8001fbe <HAL_I2C_Mem_Write+0x1e2>
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2201      	movs	r2, #1
 8001e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0301 	and.w	r3, r3, #1
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d007      	beq.n	8001e58 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f042 0201 	orr.w	r2, r2, #1
 8001e56:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e66:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2221      	movs	r2, #33	; 0x21
 8001e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2240      	movs	r2, #64	; 0x40
 8001e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	6a3a      	ldr	r2, [r7, #32]
 8001e82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001e88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e8e:	b29a      	uxth	r2, r3
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	4a4d      	ldr	r2, [pc, #308]	; (8001fcc <HAL_I2C_Mem_Write+0x1f0>)
 8001e98:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e9a:	88f8      	ldrh	r0, [r7, #6]
 8001e9c:	893a      	ldrh	r2, [r7, #8]
 8001e9e:	8979      	ldrh	r1, [r7, #10]
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	9301      	str	r3, [sp, #4]
 8001ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ea6:	9300      	str	r3, [sp, #0]
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	68f8      	ldr	r0, [r7, #12]
 8001eac:	f000 faf8 	bl	80024a0 <I2C_RequestMemoryWrite>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d052      	beq.n	8001f5c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e081      	b.n	8001fbe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001eba:	697a      	ldr	r2, [r7, #20]
 8001ebc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ebe:	68f8      	ldr	r0, [r7, #12]
 8001ec0:	f000 fd42 	bl	8002948 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d00d      	beq.n	8001ee6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	2b04      	cmp	r3, #4
 8001ed0:	d107      	bne.n	8001ee2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ee0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e06b      	b.n	8001fbe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eea:	781a      	ldrb	r2, [r3, #0]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef6:	1c5a      	adds	r2, r3, #1
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f00:	3b01      	subs	r3, #1
 8001f02:	b29a      	uxth	r2, r3
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	b29a      	uxth	r2, r3
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	695b      	ldr	r3, [r3, #20]
 8001f1c:	f003 0304 	and.w	r3, r3, #4
 8001f20:	2b04      	cmp	r3, #4
 8001f22:	d11b      	bne.n	8001f5c <HAL_I2C_Mem_Write+0x180>
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d017      	beq.n	8001f5c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f30:	781a      	ldrb	r2, [r3, #0]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3c:	1c5a      	adds	r2, r3, #1
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f46:	3b01      	subs	r3, #1
 8001f48:	b29a      	uxth	r2, r3
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	3b01      	subs	r3, #1
 8001f56:	b29a      	uxth	r2, r3
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d1aa      	bne.n	8001eba <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f64:	697a      	ldr	r2, [r7, #20]
 8001f66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f68:	68f8      	ldr	r0, [r7, #12]
 8001f6a:	f000 fd2e 	bl	80029ca <I2C_WaitOnBTFFlagUntilTimeout>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d00d      	beq.n	8001f90 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f78:	2b04      	cmp	r3, #4
 8001f7a:	d107      	bne.n	8001f8c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f8a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e016      	b.n	8001fbe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2220      	movs	r2, #32
 8001fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	e000      	b.n	8001fbe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001fbc:	2302      	movs	r3, #2
  }
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3718      	adds	r7, #24
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	00100002 	.word	0x00100002
 8001fcc:	ffff0000 	.word	0xffff0000

08001fd0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b08c      	sub	sp, #48	; 0x30
 8001fd4:	af02      	add	r7, sp, #8
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	4608      	mov	r0, r1
 8001fda:	4611      	mov	r1, r2
 8001fdc:	461a      	mov	r2, r3
 8001fde:	4603      	mov	r3, r0
 8001fe0:	817b      	strh	r3, [r7, #10]
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	813b      	strh	r3, [r7, #8]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001fea:	2300      	movs	r3, #0
 8001fec:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001fee:	f7ff fb1b 	bl	8001628 <HAL_GetTick>
 8001ff2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	2b20      	cmp	r3, #32
 8001ffe:	f040 8244 	bne.w	800248a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002004:	9300      	str	r3, [sp, #0]
 8002006:	2319      	movs	r3, #25
 8002008:	2201      	movs	r2, #1
 800200a:	4982      	ldr	r1, [pc, #520]	; (8002214 <HAL_I2C_Mem_Read+0x244>)
 800200c:	68f8      	ldr	r0, [r7, #12]
 800200e:	f000 fbc5 	bl	800279c <I2C_WaitOnFlagUntilTimeout>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002018:	2302      	movs	r3, #2
 800201a:	e237      	b.n	800248c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002022:	2b01      	cmp	r3, #1
 8002024:	d101      	bne.n	800202a <HAL_I2C_Mem_Read+0x5a>
 8002026:	2302      	movs	r3, #2
 8002028:	e230      	b.n	800248c <HAL_I2C_Mem_Read+0x4bc>
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2201      	movs	r2, #1
 800202e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	2b01      	cmp	r3, #1
 800203e:	d007      	beq.n	8002050 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f042 0201 	orr.w	r2, r2, #1
 800204e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800205e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2222      	movs	r2, #34	; 0x22
 8002064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2240      	movs	r2, #64	; 0x40
 800206c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2200      	movs	r2, #0
 8002074:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800207a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002080:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002086:	b29a      	uxth	r2, r3
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	4a62      	ldr	r2, [pc, #392]	; (8002218 <HAL_I2C_Mem_Read+0x248>)
 8002090:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002092:	88f8      	ldrh	r0, [r7, #6]
 8002094:	893a      	ldrh	r2, [r7, #8]
 8002096:	8979      	ldrh	r1, [r7, #10]
 8002098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209a:	9301      	str	r3, [sp, #4]
 800209c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800209e:	9300      	str	r3, [sp, #0]
 80020a0:	4603      	mov	r3, r0
 80020a2:	68f8      	ldr	r0, [r7, #12]
 80020a4:	f000 fa92 	bl	80025cc <I2C_RequestMemoryRead>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e1ec      	b.n	800248c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d113      	bne.n	80020e2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020ba:	2300      	movs	r3, #0
 80020bc:	61fb      	str	r3, [r7, #28]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	695b      	ldr	r3, [r3, #20]
 80020c4:	61fb      	str	r3, [r7, #28]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	61fb      	str	r3, [r7, #28]
 80020ce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	e1c0      	b.n	8002464 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d11e      	bne.n	8002128 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020f8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80020fa:	b672      	cpsid	i
}
 80020fc:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020fe:	2300      	movs	r3, #0
 8002100:	61bb      	str	r3, [r7, #24]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	695b      	ldr	r3, [r3, #20]
 8002108:	61bb      	str	r3, [r7, #24]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	61bb      	str	r3, [r7, #24]
 8002112:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002122:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002124:	b662      	cpsie	i
}
 8002126:	e035      	b.n	8002194 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800212c:	2b02      	cmp	r3, #2
 800212e:	d11e      	bne.n	800216e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800213e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002140:	b672      	cpsid	i
}
 8002142:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002144:	2300      	movs	r3, #0
 8002146:	617b      	str	r3, [r7, #20]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	695b      	ldr	r3, [r3, #20]
 800214e:	617b      	str	r3, [r7, #20]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	699b      	ldr	r3, [r3, #24]
 8002156:	617b      	str	r3, [r7, #20]
 8002158:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002168:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800216a:	b662      	cpsie	i
}
 800216c:	e012      	b.n	8002194 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800217c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800217e:	2300      	movs	r3, #0
 8002180:	613b      	str	r3, [r7, #16]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	695b      	ldr	r3, [r3, #20]
 8002188:	613b      	str	r3, [r7, #16]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	613b      	str	r3, [r7, #16]
 8002192:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002194:	e166      	b.n	8002464 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800219a:	2b03      	cmp	r3, #3
 800219c:	f200 811f 	bhi.w	80023de <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d123      	bne.n	80021f0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80021ac:	68f8      	ldr	r0, [r7, #12]
 80021ae:	f000 fc4d 	bl	8002a4c <I2C_WaitOnRXNEFlagUntilTimeout>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e167      	b.n	800248c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	691a      	ldr	r2, [r3, #16]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c6:	b2d2      	uxtb	r2, r2
 80021c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ce:	1c5a      	adds	r2, r3, #1
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021d8:	3b01      	subs	r3, #1
 80021da:	b29a      	uxth	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	3b01      	subs	r3, #1
 80021e8:	b29a      	uxth	r2, r3
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	855a      	strh	r2, [r3, #42]	; 0x2a
 80021ee:	e139      	b.n	8002464 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d152      	bne.n	800229e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80021f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fa:	9300      	str	r3, [sp, #0]
 80021fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021fe:	2200      	movs	r2, #0
 8002200:	4906      	ldr	r1, [pc, #24]	; (800221c <HAL_I2C_Mem_Read+0x24c>)
 8002202:	68f8      	ldr	r0, [r7, #12]
 8002204:	f000 faca 	bl	800279c <I2C_WaitOnFlagUntilTimeout>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d008      	beq.n	8002220 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e13c      	b.n	800248c <HAL_I2C_Mem_Read+0x4bc>
 8002212:	bf00      	nop
 8002214:	00100002 	.word	0x00100002
 8002218:	ffff0000 	.word	0xffff0000
 800221c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002220:	b672      	cpsid	i
}
 8002222:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002232:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	691a      	ldr	r2, [r3, #16]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223e:	b2d2      	uxtb	r2, r2
 8002240:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002246:	1c5a      	adds	r2, r3, #1
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002250:	3b01      	subs	r3, #1
 8002252:	b29a      	uxth	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800225c:	b29b      	uxth	r3, r3
 800225e:	3b01      	subs	r3, #1
 8002260:	b29a      	uxth	r2, r3
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002266:	b662      	cpsie	i
}
 8002268:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	691a      	ldr	r2, [r3, #16]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002274:	b2d2      	uxtb	r2, r2
 8002276:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227c:	1c5a      	adds	r2, r3, #1
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002286:	3b01      	subs	r3, #1
 8002288:	b29a      	uxth	r2, r3
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002292:	b29b      	uxth	r3, r3
 8002294:	3b01      	subs	r3, #1
 8002296:	b29a      	uxth	r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800229c:	e0e2      	b.n	8002464 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800229e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a0:	9300      	str	r3, [sp, #0]
 80022a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022a4:	2200      	movs	r2, #0
 80022a6:	497b      	ldr	r1, [pc, #492]	; (8002494 <HAL_I2C_Mem_Read+0x4c4>)
 80022a8:	68f8      	ldr	r0, [r7, #12]
 80022aa:	f000 fa77 	bl	800279c <I2C_WaitOnFlagUntilTimeout>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e0e9      	b.n	800248c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022c6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80022c8:	b672      	cpsid	i
}
 80022ca:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	691a      	ldr	r2, [r3, #16]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d6:	b2d2      	uxtb	r2, r2
 80022d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022de:	1c5a      	adds	r2, r3, #1
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022e8:	3b01      	subs	r3, #1
 80022ea:	b29a      	uxth	r2, r3
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	3b01      	subs	r3, #1
 80022f8:	b29a      	uxth	r2, r3
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80022fe:	4b66      	ldr	r3, [pc, #408]	; (8002498 <HAL_I2C_Mem_Read+0x4c8>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	08db      	lsrs	r3, r3, #3
 8002304:	4a65      	ldr	r2, [pc, #404]	; (800249c <HAL_I2C_Mem_Read+0x4cc>)
 8002306:	fba2 2303 	umull	r2, r3, r2, r3
 800230a:	0a1a      	lsrs	r2, r3, #8
 800230c:	4613      	mov	r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	4413      	add	r3, r2
 8002312:	00da      	lsls	r2, r3, #3
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002318:	6a3b      	ldr	r3, [r7, #32]
 800231a:	3b01      	subs	r3, #1
 800231c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800231e:	6a3b      	ldr	r3, [r7, #32]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d118      	bne.n	8002356 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2200      	movs	r2, #0
 8002328:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2220      	movs	r2, #32
 800232e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2200      	movs	r2, #0
 8002336:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233e:	f043 0220 	orr.w	r2, r3, #32
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002346:	b662      	cpsie	i
}
 8002348:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e09a      	b.n	800248c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	695b      	ldr	r3, [r3, #20]
 800235c:	f003 0304 	and.w	r3, r3, #4
 8002360:	2b04      	cmp	r3, #4
 8002362:	d1d9      	bne.n	8002318 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002372:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	691a      	ldr	r2, [r3, #16]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237e:	b2d2      	uxtb	r2, r2
 8002380:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002386:	1c5a      	adds	r2, r3, #1
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002390:	3b01      	subs	r3, #1
 8002392:	b29a      	uxth	r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800239c:	b29b      	uxth	r3, r3
 800239e:	3b01      	subs	r3, #1
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80023a6:	b662      	cpsie	i
}
 80023a8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	691a      	ldr	r2, [r3, #16]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b4:	b2d2      	uxtb	r2, r2
 80023b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023bc:	1c5a      	adds	r2, r3, #1
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c6:	3b01      	subs	r3, #1
 80023c8:	b29a      	uxth	r2, r3
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	3b01      	subs	r3, #1
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	855a      	strh	r2, [r3, #42]	; 0x2a
 80023dc:	e042      	b.n	8002464 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023e0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80023e2:	68f8      	ldr	r0, [r7, #12]
 80023e4:	f000 fb32 	bl	8002a4c <I2C_WaitOnRXNEFlagUntilTimeout>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e04c      	b.n	800248c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	691a      	ldr	r2, [r3, #16]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fc:	b2d2      	uxtb	r2, r2
 80023fe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002404:	1c5a      	adds	r2, r3, #1
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800240e:	3b01      	subs	r3, #1
 8002410:	b29a      	uxth	r2, r3
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800241a:	b29b      	uxth	r3, r3
 800241c:	3b01      	subs	r3, #1
 800241e:	b29a      	uxth	r2, r3
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	695b      	ldr	r3, [r3, #20]
 800242a:	f003 0304 	and.w	r3, r3, #4
 800242e:	2b04      	cmp	r3, #4
 8002430:	d118      	bne.n	8002464 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	691a      	ldr	r2, [r3, #16]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243c:	b2d2      	uxtb	r2, r2
 800243e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002444:	1c5a      	adds	r2, r3, #1
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800244e:	3b01      	subs	r3, #1
 8002450:	b29a      	uxth	r2, r3
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800245a:	b29b      	uxth	r3, r3
 800245c:	3b01      	subs	r3, #1
 800245e:	b29a      	uxth	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002468:	2b00      	cmp	r3, #0
 800246a:	f47f ae94 	bne.w	8002196 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2220      	movs	r2, #32
 8002472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2200      	movs	r2, #0
 800247a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002486:	2300      	movs	r3, #0
 8002488:	e000      	b.n	800248c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800248a:	2302      	movs	r3, #2
  }
}
 800248c:	4618      	mov	r0, r3
 800248e:	3728      	adds	r7, #40	; 0x28
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	00010004 	.word	0x00010004
 8002498:	20000000 	.word	0x20000000
 800249c:	14f8b589 	.word	0x14f8b589

080024a0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b088      	sub	sp, #32
 80024a4:	af02      	add	r7, sp, #8
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	4608      	mov	r0, r1
 80024aa:	4611      	mov	r1, r2
 80024ac:	461a      	mov	r2, r3
 80024ae:	4603      	mov	r3, r0
 80024b0:	817b      	strh	r3, [r7, #10]
 80024b2:	460b      	mov	r3, r1
 80024b4:	813b      	strh	r3, [r7, #8]
 80024b6:	4613      	mov	r3, r2
 80024b8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024cc:	9300      	str	r3, [sp, #0]
 80024ce:	6a3b      	ldr	r3, [r7, #32]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80024d6:	68f8      	ldr	r0, [r7, #12]
 80024d8:	f000 f960 	bl	800279c <I2C_WaitOnFlagUntilTimeout>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d00d      	beq.n	80024fe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024f0:	d103      	bne.n	80024fa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024f8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e05f      	b.n	80025be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80024fe:	897b      	ldrh	r3, [r7, #10]
 8002500:	b2db      	uxtb	r3, r3
 8002502:	461a      	mov	r2, r3
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800250c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800250e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002510:	6a3a      	ldr	r2, [r7, #32]
 8002512:	492d      	ldr	r1, [pc, #180]	; (80025c8 <I2C_RequestMemoryWrite+0x128>)
 8002514:	68f8      	ldr	r0, [r7, #12]
 8002516:	f000 f998 	bl	800284a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e04c      	b.n	80025be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002524:	2300      	movs	r3, #0
 8002526:	617b      	str	r3, [r7, #20]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	695b      	ldr	r3, [r3, #20]
 800252e:	617b      	str	r3, [r7, #20]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	699b      	ldr	r3, [r3, #24]
 8002536:	617b      	str	r3, [r7, #20]
 8002538:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800253a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800253c:	6a39      	ldr	r1, [r7, #32]
 800253e:	68f8      	ldr	r0, [r7, #12]
 8002540:	f000 fa02 	bl	8002948 <I2C_WaitOnTXEFlagUntilTimeout>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d00d      	beq.n	8002566 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	2b04      	cmp	r3, #4
 8002550:	d107      	bne.n	8002562 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002560:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e02b      	b.n	80025be <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002566:	88fb      	ldrh	r3, [r7, #6]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d105      	bne.n	8002578 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800256c:	893b      	ldrh	r3, [r7, #8]
 800256e:	b2da      	uxtb	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	611a      	str	r2, [r3, #16]
 8002576:	e021      	b.n	80025bc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002578:	893b      	ldrh	r3, [r7, #8]
 800257a:	0a1b      	lsrs	r3, r3, #8
 800257c:	b29b      	uxth	r3, r3
 800257e:	b2da      	uxtb	r2, r3
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002586:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002588:	6a39      	ldr	r1, [r7, #32]
 800258a:	68f8      	ldr	r0, [r7, #12]
 800258c:	f000 f9dc 	bl	8002948 <I2C_WaitOnTXEFlagUntilTimeout>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00d      	beq.n	80025b2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	2b04      	cmp	r3, #4
 800259c:	d107      	bne.n	80025ae <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e005      	b.n	80025be <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80025b2:	893b      	ldrh	r3, [r7, #8]
 80025b4:	b2da      	uxtb	r2, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3718      	adds	r7, #24
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	00010002 	.word	0x00010002

080025cc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b088      	sub	sp, #32
 80025d0:	af02      	add	r7, sp, #8
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	4608      	mov	r0, r1
 80025d6:	4611      	mov	r1, r2
 80025d8:	461a      	mov	r2, r3
 80025da:	4603      	mov	r3, r0
 80025dc:	817b      	strh	r3, [r7, #10]
 80025de:	460b      	mov	r3, r1
 80025e0:	813b      	strh	r3, [r7, #8]
 80025e2:	4613      	mov	r3, r2
 80025e4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80025f4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002604:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002608:	9300      	str	r3, [sp, #0]
 800260a:	6a3b      	ldr	r3, [r7, #32]
 800260c:	2200      	movs	r2, #0
 800260e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002612:	68f8      	ldr	r0, [r7, #12]
 8002614:	f000 f8c2 	bl	800279c <I2C_WaitOnFlagUntilTimeout>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00d      	beq.n	800263a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002628:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800262c:	d103      	bne.n	8002636 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002634:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e0aa      	b.n	8002790 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800263a:	897b      	ldrh	r3, [r7, #10]
 800263c:	b2db      	uxtb	r3, r3
 800263e:	461a      	mov	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002648:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264c:	6a3a      	ldr	r2, [r7, #32]
 800264e:	4952      	ldr	r1, [pc, #328]	; (8002798 <I2C_RequestMemoryRead+0x1cc>)
 8002650:	68f8      	ldr	r0, [r7, #12]
 8002652:	f000 f8fa 	bl	800284a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e097      	b.n	8002790 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002660:	2300      	movs	r3, #0
 8002662:	617b      	str	r3, [r7, #20]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	695b      	ldr	r3, [r3, #20]
 800266a:	617b      	str	r3, [r7, #20]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	617b      	str	r3, [r7, #20]
 8002674:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002676:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002678:	6a39      	ldr	r1, [r7, #32]
 800267a:	68f8      	ldr	r0, [r7, #12]
 800267c:	f000 f964 	bl	8002948 <I2C_WaitOnTXEFlagUntilTimeout>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d00d      	beq.n	80026a2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268a:	2b04      	cmp	r3, #4
 800268c:	d107      	bne.n	800269e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800269c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e076      	b.n	8002790 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80026a2:	88fb      	ldrh	r3, [r7, #6]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d105      	bne.n	80026b4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80026a8:	893b      	ldrh	r3, [r7, #8]
 80026aa:	b2da      	uxtb	r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	611a      	str	r2, [r3, #16]
 80026b2:	e021      	b.n	80026f8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80026b4:	893b      	ldrh	r3, [r7, #8]
 80026b6:	0a1b      	lsrs	r3, r3, #8
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	b2da      	uxtb	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026c4:	6a39      	ldr	r1, [r7, #32]
 80026c6:	68f8      	ldr	r0, [r7, #12]
 80026c8:	f000 f93e 	bl	8002948 <I2C_WaitOnTXEFlagUntilTimeout>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00d      	beq.n	80026ee <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d6:	2b04      	cmp	r3, #4
 80026d8:	d107      	bne.n	80026ea <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026e8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e050      	b.n	8002790 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80026ee:	893b      	ldrh	r3, [r7, #8]
 80026f0:	b2da      	uxtb	r2, r3
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026fa:	6a39      	ldr	r1, [r7, #32]
 80026fc:	68f8      	ldr	r0, [r7, #12]
 80026fe:	f000 f923 	bl	8002948 <I2C_WaitOnTXEFlagUntilTimeout>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00d      	beq.n	8002724 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270c:	2b04      	cmp	r3, #4
 800270e:	d107      	bne.n	8002720 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800271e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e035      	b.n	8002790 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002732:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002736:	9300      	str	r3, [sp, #0]
 8002738:	6a3b      	ldr	r3, [r7, #32]
 800273a:	2200      	movs	r2, #0
 800273c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002740:	68f8      	ldr	r0, [r7, #12]
 8002742:	f000 f82b 	bl	800279c <I2C_WaitOnFlagUntilTimeout>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d00d      	beq.n	8002768 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002756:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800275a:	d103      	bne.n	8002764 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002762:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e013      	b.n	8002790 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002768:	897b      	ldrh	r3, [r7, #10]
 800276a:	b2db      	uxtb	r3, r3
 800276c:	f043 0301 	orr.w	r3, r3, #1
 8002770:	b2da      	uxtb	r2, r3
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277a:	6a3a      	ldr	r2, [r7, #32]
 800277c:	4906      	ldr	r1, [pc, #24]	; (8002798 <I2C_RequestMemoryRead+0x1cc>)
 800277e:	68f8      	ldr	r0, [r7, #12]
 8002780:	f000 f863 	bl	800284a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e000      	b.n	8002790 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800278e:	2300      	movs	r3, #0
}
 8002790:	4618      	mov	r0, r3
 8002792:	3718      	adds	r7, #24
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	00010002 	.word	0x00010002

0800279c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	603b      	str	r3, [r7, #0]
 80027a8:	4613      	mov	r3, r2
 80027aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027ac:	e025      	b.n	80027fa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027b4:	d021      	beq.n	80027fa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027b6:	f7fe ff37 	bl	8001628 <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	683a      	ldr	r2, [r7, #0]
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d302      	bcc.n	80027cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d116      	bne.n	80027fa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2200      	movs	r2, #0
 80027d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2220      	movs	r2, #32
 80027d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e6:	f043 0220 	orr.w	r2, r3, #32
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e023      	b.n	8002842 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	0c1b      	lsrs	r3, r3, #16
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	2b01      	cmp	r3, #1
 8002802:	d10d      	bne.n	8002820 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	695b      	ldr	r3, [r3, #20]
 800280a:	43da      	mvns	r2, r3
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	4013      	ands	r3, r2
 8002810:	b29b      	uxth	r3, r3
 8002812:	2b00      	cmp	r3, #0
 8002814:	bf0c      	ite	eq
 8002816:	2301      	moveq	r3, #1
 8002818:	2300      	movne	r3, #0
 800281a:	b2db      	uxtb	r3, r3
 800281c:	461a      	mov	r2, r3
 800281e:	e00c      	b.n	800283a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	699b      	ldr	r3, [r3, #24]
 8002826:	43da      	mvns	r2, r3
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	4013      	ands	r3, r2
 800282c:	b29b      	uxth	r3, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	bf0c      	ite	eq
 8002832:	2301      	moveq	r3, #1
 8002834:	2300      	movne	r3, #0
 8002836:	b2db      	uxtb	r3, r3
 8002838:	461a      	mov	r2, r3
 800283a:	79fb      	ldrb	r3, [r7, #7]
 800283c:	429a      	cmp	r2, r3
 800283e:	d0b6      	beq.n	80027ae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3710      	adds	r7, #16
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}

0800284a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800284a:	b580      	push	{r7, lr}
 800284c:	b084      	sub	sp, #16
 800284e:	af00      	add	r7, sp, #0
 8002850:	60f8      	str	r0, [r7, #12]
 8002852:	60b9      	str	r1, [r7, #8]
 8002854:	607a      	str	r2, [r7, #4]
 8002856:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002858:	e051      	b.n	80028fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	695b      	ldr	r3, [r3, #20]
 8002860:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002864:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002868:	d123      	bne.n	80028b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002878:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002882:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2200      	movs	r2, #0
 8002888:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2220      	movs	r2, #32
 800288e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289e:	f043 0204 	orr.w	r2, r3, #4
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e046      	b.n	8002940 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b8:	d021      	beq.n	80028fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028ba:	f7fe feb5 	bl	8001628 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d302      	bcc.n	80028d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d116      	bne.n	80028fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2200      	movs	r2, #0
 80028d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2220      	movs	r2, #32
 80028da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	f043 0220 	orr.w	r2, r3, #32
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e020      	b.n	8002940 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	0c1b      	lsrs	r3, r3, #16
 8002902:	b2db      	uxtb	r3, r3
 8002904:	2b01      	cmp	r3, #1
 8002906:	d10c      	bne.n	8002922 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	695b      	ldr	r3, [r3, #20]
 800290e:	43da      	mvns	r2, r3
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	4013      	ands	r3, r2
 8002914:	b29b      	uxth	r3, r3
 8002916:	2b00      	cmp	r3, #0
 8002918:	bf14      	ite	ne
 800291a:	2301      	movne	r3, #1
 800291c:	2300      	moveq	r3, #0
 800291e:	b2db      	uxtb	r3, r3
 8002920:	e00b      	b.n	800293a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	43da      	mvns	r2, r3
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	4013      	ands	r3, r2
 800292e:	b29b      	uxth	r3, r3
 8002930:	2b00      	cmp	r3, #0
 8002932:	bf14      	ite	ne
 8002934:	2301      	movne	r3, #1
 8002936:	2300      	moveq	r3, #0
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b00      	cmp	r3, #0
 800293c:	d18d      	bne.n	800285a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800293e:	2300      	movs	r3, #0
}
 8002940:	4618      	mov	r0, r3
 8002942:	3710      	adds	r7, #16
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002954:	e02d      	b.n	80029b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002956:	68f8      	ldr	r0, [r7, #12]
 8002958:	f000 f8ce 	bl	8002af8 <I2C_IsAcknowledgeFailed>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e02d      	b.n	80029c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800296c:	d021      	beq.n	80029b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800296e:	f7fe fe5b 	bl	8001628 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	68ba      	ldr	r2, [r7, #8]
 800297a:	429a      	cmp	r2, r3
 800297c:	d302      	bcc.n	8002984 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d116      	bne.n	80029b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2200      	movs	r2, #0
 8002988:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2220      	movs	r2, #32
 800298e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299e:	f043 0220 	orr.w	r2, r3, #32
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e007      	b.n	80029c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	695b      	ldr	r3, [r3, #20]
 80029b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029bc:	2b80      	cmp	r3, #128	; 0x80
 80029be:	d1ca      	bne.n	8002956 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3710      	adds	r7, #16
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029ca:	b580      	push	{r7, lr}
 80029cc:	b084      	sub	sp, #16
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	60f8      	str	r0, [r7, #12]
 80029d2:	60b9      	str	r1, [r7, #8]
 80029d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029d6:	e02d      	b.n	8002a34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029d8:	68f8      	ldr	r0, [r7, #12]
 80029da:	f000 f88d 	bl	8002af8 <I2C_IsAcknowledgeFailed>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d001      	beq.n	80029e8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e02d      	b.n	8002a44 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ee:	d021      	beq.n	8002a34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029f0:	f7fe fe1a 	bl	8001628 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	68ba      	ldr	r2, [r7, #8]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d302      	bcc.n	8002a06 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d116      	bne.n	8002a34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2220      	movs	r2, #32
 8002a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a20:	f043 0220 	orr.w	r2, r3, #32
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e007      	b.n	8002a44 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	695b      	ldr	r3, [r3, #20]
 8002a3a:	f003 0304 	and.w	r3, r3, #4
 8002a3e:	2b04      	cmp	r3, #4
 8002a40:	d1ca      	bne.n	80029d8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a42:	2300      	movs	r3, #0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3710      	adds	r7, #16
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002a58:	e042      	b.n	8002ae0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	695b      	ldr	r3, [r3, #20]
 8002a60:	f003 0310 	and.w	r3, r3, #16
 8002a64:	2b10      	cmp	r3, #16
 8002a66:	d119      	bne.n	8002a9c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f06f 0210 	mvn.w	r2, #16
 8002a70:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2200      	movs	r2, #0
 8002a76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2220      	movs	r2, #32
 8002a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2200      	movs	r2, #0
 8002a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e029      	b.n	8002af0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a9c:	f7fe fdc4 	bl	8001628 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	68ba      	ldr	r2, [r7, #8]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d302      	bcc.n	8002ab2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d116      	bne.n	8002ae0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2220      	movs	r2, #32
 8002abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002acc:	f043 0220 	orr.w	r2, r3, #32
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e007      	b.n	8002af0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aea:	2b40      	cmp	r3, #64	; 0x40
 8002aec:	d1b5      	bne.n	8002a5a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3710      	adds	r7, #16
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	695b      	ldr	r3, [r3, #20]
 8002b06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b0e:	d11b      	bne.n	8002b48 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b18:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2220      	movs	r2, #32
 8002b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b34:	f043 0204 	orr.w	r2, r3, #4
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e000      	b.n	8002b4a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bc80      	pop	{r7}
 8002b52:	4770      	bx	lr

08002b54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b086      	sub	sp, #24
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d101      	bne.n	8002b66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e26c      	b.n	8003040 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f000 8087 	beq.w	8002c82 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b74:	4b92      	ldr	r3, [pc, #584]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f003 030c 	and.w	r3, r3, #12
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d00c      	beq.n	8002b9a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b80:	4b8f      	ldr	r3, [pc, #572]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f003 030c 	and.w	r3, r3, #12
 8002b88:	2b08      	cmp	r3, #8
 8002b8a:	d112      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x5e>
 8002b8c:	4b8c      	ldr	r3, [pc, #560]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b98:	d10b      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b9a:	4b89      	ldr	r3, [pc, #548]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d06c      	beq.n	8002c80 <HAL_RCC_OscConfig+0x12c>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d168      	bne.n	8002c80 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e246      	b.n	8003040 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bba:	d106      	bne.n	8002bca <HAL_RCC_OscConfig+0x76>
 8002bbc:	4b80      	ldr	r3, [pc, #512]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a7f      	ldr	r2, [pc, #508]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002bc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bc6:	6013      	str	r3, [r2, #0]
 8002bc8:	e02e      	b.n	8002c28 <HAL_RCC_OscConfig+0xd4>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d10c      	bne.n	8002bec <HAL_RCC_OscConfig+0x98>
 8002bd2:	4b7b      	ldr	r3, [pc, #492]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a7a      	ldr	r2, [pc, #488]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002bd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bdc:	6013      	str	r3, [r2, #0]
 8002bde:	4b78      	ldr	r3, [pc, #480]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a77      	ldr	r2, [pc, #476]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002be4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002be8:	6013      	str	r3, [r2, #0]
 8002bea:	e01d      	b.n	8002c28 <HAL_RCC_OscConfig+0xd4>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bf4:	d10c      	bne.n	8002c10 <HAL_RCC_OscConfig+0xbc>
 8002bf6:	4b72      	ldr	r3, [pc, #456]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a71      	ldr	r2, [pc, #452]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002bfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c00:	6013      	str	r3, [r2, #0]
 8002c02:	4b6f      	ldr	r3, [pc, #444]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a6e      	ldr	r2, [pc, #440]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002c08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c0c:	6013      	str	r3, [r2, #0]
 8002c0e:	e00b      	b.n	8002c28 <HAL_RCC_OscConfig+0xd4>
 8002c10:	4b6b      	ldr	r3, [pc, #428]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a6a      	ldr	r2, [pc, #424]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002c16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c1a:	6013      	str	r3, [r2, #0]
 8002c1c:	4b68      	ldr	r3, [pc, #416]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a67      	ldr	r2, [pc, #412]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002c22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c26:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d013      	beq.n	8002c58 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c30:	f7fe fcfa 	bl	8001628 <HAL_GetTick>
 8002c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c36:	e008      	b.n	8002c4a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c38:	f7fe fcf6 	bl	8001628 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b64      	cmp	r3, #100	; 0x64
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e1fa      	b.n	8003040 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c4a:	4b5d      	ldr	r3, [pc, #372]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d0f0      	beq.n	8002c38 <HAL_RCC_OscConfig+0xe4>
 8002c56:	e014      	b.n	8002c82 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c58:	f7fe fce6 	bl	8001628 <HAL_GetTick>
 8002c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c5e:	e008      	b.n	8002c72 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c60:	f7fe fce2 	bl	8001628 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b64      	cmp	r3, #100	; 0x64
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e1e6      	b.n	8003040 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c72:	4b53      	ldr	r3, [pc, #332]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d1f0      	bne.n	8002c60 <HAL_RCC_OscConfig+0x10c>
 8002c7e:	e000      	b.n	8002c82 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d063      	beq.n	8002d56 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c8e:	4b4c      	ldr	r3, [pc, #304]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f003 030c 	and.w	r3, r3, #12
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00b      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002c9a:	4b49      	ldr	r3, [pc, #292]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f003 030c 	and.w	r3, r3, #12
 8002ca2:	2b08      	cmp	r3, #8
 8002ca4:	d11c      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x18c>
 8002ca6:	4b46      	ldr	r3, [pc, #280]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d116      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cb2:	4b43      	ldr	r3, [pc, #268]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d005      	beq.n	8002cca <HAL_RCC_OscConfig+0x176>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d001      	beq.n	8002cca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e1ba      	b.n	8003040 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cca:	4b3d      	ldr	r3, [pc, #244]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	695b      	ldr	r3, [r3, #20]
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	4939      	ldr	r1, [pc, #228]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cde:	e03a      	b.n	8002d56 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	691b      	ldr	r3, [r3, #16]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d020      	beq.n	8002d2a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ce8:	4b36      	ldr	r3, [pc, #216]	; (8002dc4 <HAL_RCC_OscConfig+0x270>)
 8002cea:	2201      	movs	r2, #1
 8002cec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cee:	f7fe fc9b 	bl	8001628 <HAL_GetTick>
 8002cf2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cf4:	e008      	b.n	8002d08 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cf6:	f7fe fc97 	bl	8001628 <HAL_GetTick>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d901      	bls.n	8002d08 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e19b      	b.n	8003040 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d08:	4b2d      	ldr	r3, [pc, #180]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0302 	and.w	r3, r3, #2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d0f0      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d14:	4b2a      	ldr	r3, [pc, #168]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	695b      	ldr	r3, [r3, #20]
 8002d20:	00db      	lsls	r3, r3, #3
 8002d22:	4927      	ldr	r1, [pc, #156]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	600b      	str	r3, [r1, #0]
 8002d28:	e015      	b.n	8002d56 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d2a:	4b26      	ldr	r3, [pc, #152]	; (8002dc4 <HAL_RCC_OscConfig+0x270>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d30:	f7fe fc7a 	bl	8001628 <HAL_GetTick>
 8002d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d36:	e008      	b.n	8002d4a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d38:	f7fe fc76 	bl	8001628 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e17a      	b.n	8003040 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d4a:	4b1d      	ldr	r3, [pc, #116]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1f0      	bne.n	8002d38 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0308 	and.w	r3, r3, #8
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d03a      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d019      	beq.n	8002d9e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d6a:	4b17      	ldr	r3, [pc, #92]	; (8002dc8 <HAL_RCC_OscConfig+0x274>)
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d70:	f7fe fc5a 	bl	8001628 <HAL_GetTick>
 8002d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d76:	e008      	b.n	8002d8a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d78:	f7fe fc56 	bl	8001628 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e15a      	b.n	8003040 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d8a:	4b0d      	ldr	r3, [pc, #52]	; (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d0f0      	beq.n	8002d78 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002d96:	2001      	movs	r0, #1
 8002d98:	f000 fad8 	bl	800334c <RCC_Delay>
 8002d9c:	e01c      	b.n	8002dd8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d9e:	4b0a      	ldr	r3, [pc, #40]	; (8002dc8 <HAL_RCC_OscConfig+0x274>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002da4:	f7fe fc40 	bl	8001628 <HAL_GetTick>
 8002da8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002daa:	e00f      	b.n	8002dcc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dac:	f7fe fc3c 	bl	8001628 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d908      	bls.n	8002dcc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e140      	b.n	8003040 <HAL_RCC_OscConfig+0x4ec>
 8002dbe:	bf00      	nop
 8002dc0:	40021000 	.word	0x40021000
 8002dc4:	42420000 	.word	0x42420000
 8002dc8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dcc:	4b9e      	ldr	r3, [pc, #632]	; (8003048 <HAL_RCC_OscConfig+0x4f4>)
 8002dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1e9      	bne.n	8002dac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0304 	and.w	r3, r3, #4
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	f000 80a6 	beq.w	8002f32 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002de6:	2300      	movs	r3, #0
 8002de8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dea:	4b97      	ldr	r3, [pc, #604]	; (8003048 <HAL_RCC_OscConfig+0x4f4>)
 8002dec:	69db      	ldr	r3, [r3, #28]
 8002dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d10d      	bne.n	8002e12 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002df6:	4b94      	ldr	r3, [pc, #592]	; (8003048 <HAL_RCC_OscConfig+0x4f4>)
 8002df8:	69db      	ldr	r3, [r3, #28]
 8002dfa:	4a93      	ldr	r2, [pc, #588]	; (8003048 <HAL_RCC_OscConfig+0x4f4>)
 8002dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e00:	61d3      	str	r3, [r2, #28]
 8002e02:	4b91      	ldr	r3, [pc, #580]	; (8003048 <HAL_RCC_OscConfig+0x4f4>)
 8002e04:	69db      	ldr	r3, [r3, #28]
 8002e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e0a:	60bb      	str	r3, [r7, #8]
 8002e0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e12:	4b8e      	ldr	r3, [pc, #568]	; (800304c <HAL_RCC_OscConfig+0x4f8>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d118      	bne.n	8002e50 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e1e:	4b8b      	ldr	r3, [pc, #556]	; (800304c <HAL_RCC_OscConfig+0x4f8>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a8a      	ldr	r2, [pc, #552]	; (800304c <HAL_RCC_OscConfig+0x4f8>)
 8002e24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e2a:	f7fe fbfd 	bl	8001628 <HAL_GetTick>
 8002e2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e30:	e008      	b.n	8002e44 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e32:	f7fe fbf9 	bl	8001628 <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	2b64      	cmp	r3, #100	; 0x64
 8002e3e:	d901      	bls.n	8002e44 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e0fd      	b.n	8003040 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e44:	4b81      	ldr	r3, [pc, #516]	; (800304c <HAL_RCC_OscConfig+0x4f8>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d0f0      	beq.n	8002e32 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d106      	bne.n	8002e66 <HAL_RCC_OscConfig+0x312>
 8002e58:	4b7b      	ldr	r3, [pc, #492]	; (8003048 <HAL_RCC_OscConfig+0x4f4>)
 8002e5a:	6a1b      	ldr	r3, [r3, #32]
 8002e5c:	4a7a      	ldr	r2, [pc, #488]	; (8003048 <HAL_RCC_OscConfig+0x4f4>)
 8002e5e:	f043 0301 	orr.w	r3, r3, #1
 8002e62:	6213      	str	r3, [r2, #32]
 8002e64:	e02d      	b.n	8002ec2 <HAL_RCC_OscConfig+0x36e>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d10c      	bne.n	8002e88 <HAL_RCC_OscConfig+0x334>
 8002e6e:	4b76      	ldr	r3, [pc, #472]	; (8003048 <HAL_RCC_OscConfig+0x4f4>)
 8002e70:	6a1b      	ldr	r3, [r3, #32]
 8002e72:	4a75      	ldr	r2, [pc, #468]	; (8003048 <HAL_RCC_OscConfig+0x4f4>)
 8002e74:	f023 0301 	bic.w	r3, r3, #1
 8002e78:	6213      	str	r3, [r2, #32]
 8002e7a:	4b73      	ldr	r3, [pc, #460]	; (8003048 <HAL_RCC_OscConfig+0x4f4>)
 8002e7c:	6a1b      	ldr	r3, [r3, #32]
 8002e7e:	4a72      	ldr	r2, [pc, #456]	; (8003048 <HAL_RCC_OscConfig+0x4f4>)
 8002e80:	f023 0304 	bic.w	r3, r3, #4
 8002e84:	6213      	str	r3, [r2, #32]
 8002e86:	e01c      	b.n	8002ec2 <HAL_RCC_OscConfig+0x36e>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	2b05      	cmp	r3, #5
 8002e8e:	d10c      	bne.n	8002eaa <HAL_RCC_OscConfig+0x356>
 8002e90:	4b6d      	ldr	r3, [pc, #436]	; (8003048 <HAL_RCC_OscConfig+0x4f4>)
 8002e92:	6a1b      	ldr	r3, [r3, #32]
 8002e94:	4a6c      	ldr	r2, [pc, #432]	; (8003048 <HAL_RCC_OscConfig+0x4f4>)
 8002e96:	f043 0304 	orr.w	r3, r3, #4
 8002e9a:	6213      	str	r3, [r2, #32]
 8002e9c:	4b6a      	ldr	r3, [pc, #424]	; (8003048 <HAL_RCC_OscConfig+0x4f4>)
 8002e9e:	6a1b      	ldr	r3, [r3, #32]
 8002ea0:	4a69      	ldr	r2, [pc, #420]	; (8003048 <HAL_RCC_OscConfig+0x4f4>)
 8002ea2:	f043 0301 	orr.w	r3, r3, #1
 8002ea6:	6213      	str	r3, [r2, #32]
 8002ea8:	e00b      	b.n	8002ec2 <HAL_RCC_OscConfig+0x36e>
 8002eaa:	4b67      	ldr	r3, [pc, #412]	; (8003048 <HAL_RCC_OscConfig+0x4f4>)
 8002eac:	6a1b      	ldr	r3, [r3, #32]
 8002eae:	4a66      	ldr	r2, [pc, #408]	; (8003048 <HAL_RCC_OscConfig+0x4f4>)
 8002eb0:	f023 0301 	bic.w	r3, r3, #1
 8002eb4:	6213      	str	r3, [r2, #32]
 8002eb6:	4b64      	ldr	r3, [pc, #400]	; (8003048 <HAL_RCC_OscConfig+0x4f4>)
 8002eb8:	6a1b      	ldr	r3, [r3, #32]
 8002eba:	4a63      	ldr	r2, [pc, #396]	; (8003048 <HAL_RCC_OscConfig+0x4f4>)
 8002ebc:	f023 0304 	bic.w	r3, r3, #4
 8002ec0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d015      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eca:	f7fe fbad 	bl	8001628 <HAL_GetTick>
 8002ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ed0:	e00a      	b.n	8002ee8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ed2:	f7fe fba9 	bl	8001628 <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d901      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e0ab      	b.n	8003040 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ee8:	4b57      	ldr	r3, [pc, #348]	; (8003048 <HAL_RCC_OscConfig+0x4f4>)
 8002eea:	6a1b      	ldr	r3, [r3, #32]
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d0ee      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x37e>
 8002ef4:	e014      	b.n	8002f20 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ef6:	f7fe fb97 	bl	8001628 <HAL_GetTick>
 8002efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002efc:	e00a      	b.n	8002f14 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002efe:	f7fe fb93 	bl	8001628 <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d901      	bls.n	8002f14 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e095      	b.n	8003040 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f14:	4b4c      	ldr	r3, [pc, #304]	; (8003048 <HAL_RCC_OscConfig+0x4f4>)
 8002f16:	6a1b      	ldr	r3, [r3, #32]
 8002f18:	f003 0302 	and.w	r3, r3, #2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d1ee      	bne.n	8002efe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f20:	7dfb      	ldrb	r3, [r7, #23]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d105      	bne.n	8002f32 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f26:	4b48      	ldr	r3, [pc, #288]	; (8003048 <HAL_RCC_OscConfig+0x4f4>)
 8002f28:	69db      	ldr	r3, [r3, #28]
 8002f2a:	4a47      	ldr	r2, [pc, #284]	; (8003048 <HAL_RCC_OscConfig+0x4f4>)
 8002f2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f30:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	69db      	ldr	r3, [r3, #28]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	f000 8081 	beq.w	800303e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f3c:	4b42      	ldr	r3, [pc, #264]	; (8003048 <HAL_RCC_OscConfig+0x4f4>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f003 030c 	and.w	r3, r3, #12
 8002f44:	2b08      	cmp	r3, #8
 8002f46:	d061      	beq.n	800300c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	69db      	ldr	r3, [r3, #28]
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d146      	bne.n	8002fde <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f50:	4b3f      	ldr	r3, [pc, #252]	; (8003050 <HAL_RCC_OscConfig+0x4fc>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f56:	f7fe fb67 	bl	8001628 <HAL_GetTick>
 8002f5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f5c:	e008      	b.n	8002f70 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f5e:	f7fe fb63 	bl	8001628 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d901      	bls.n	8002f70 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e067      	b.n	8003040 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f70:	4b35      	ldr	r3, [pc, #212]	; (8003048 <HAL_RCC_OscConfig+0x4f4>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d1f0      	bne.n	8002f5e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
 8002f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f84:	d108      	bne.n	8002f98 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f86:	4b30      	ldr	r3, [pc, #192]	; (8003048 <HAL_RCC_OscConfig+0x4f4>)
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	492d      	ldr	r1, [pc, #180]	; (8003048 <HAL_RCC_OscConfig+0x4f4>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f98:	4b2b      	ldr	r3, [pc, #172]	; (8003048 <HAL_RCC_OscConfig+0x4f4>)
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a19      	ldr	r1, [r3, #32]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa8:	430b      	orrs	r3, r1
 8002faa:	4927      	ldr	r1, [pc, #156]	; (8003048 <HAL_RCC_OscConfig+0x4f4>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fb0:	4b27      	ldr	r3, [pc, #156]	; (8003050 <HAL_RCC_OscConfig+0x4fc>)
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb6:	f7fe fb37 	bl	8001628 <HAL_GetTick>
 8002fba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fbc:	e008      	b.n	8002fd0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fbe:	f7fe fb33 	bl	8001628 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d901      	bls.n	8002fd0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e037      	b.n	8003040 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fd0:	4b1d      	ldr	r3, [pc, #116]	; (8003048 <HAL_RCC_OscConfig+0x4f4>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d0f0      	beq.n	8002fbe <HAL_RCC_OscConfig+0x46a>
 8002fdc:	e02f      	b.n	800303e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fde:	4b1c      	ldr	r3, [pc, #112]	; (8003050 <HAL_RCC_OscConfig+0x4fc>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe4:	f7fe fb20 	bl	8001628 <HAL_GetTick>
 8002fe8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fea:	e008      	b.n	8002ffe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fec:	f7fe fb1c 	bl	8001628 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e020      	b.n	8003040 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ffe:	4b12      	ldr	r3, [pc, #72]	; (8003048 <HAL_RCC_OscConfig+0x4f4>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1f0      	bne.n	8002fec <HAL_RCC_OscConfig+0x498>
 800300a:	e018      	b.n	800303e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	69db      	ldr	r3, [r3, #28]
 8003010:	2b01      	cmp	r3, #1
 8003012:	d101      	bne.n	8003018 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e013      	b.n	8003040 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003018:	4b0b      	ldr	r3, [pc, #44]	; (8003048 <HAL_RCC_OscConfig+0x4f4>)
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a1b      	ldr	r3, [r3, #32]
 8003028:	429a      	cmp	r2, r3
 800302a:	d106      	bne.n	800303a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003036:	429a      	cmp	r2, r3
 8003038:	d001      	beq.n	800303e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e000      	b.n	8003040 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800303e:	2300      	movs	r3, #0
}
 8003040:	4618      	mov	r0, r3
 8003042:	3718      	adds	r7, #24
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	40021000 	.word	0x40021000
 800304c:	40007000 	.word	0x40007000
 8003050:	42420060 	.word	0x42420060

08003054 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d101      	bne.n	8003068 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e0d0      	b.n	800320a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003068:	4b6a      	ldr	r3, [pc, #424]	; (8003214 <HAL_RCC_ClockConfig+0x1c0>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0307 	and.w	r3, r3, #7
 8003070:	683a      	ldr	r2, [r7, #0]
 8003072:	429a      	cmp	r2, r3
 8003074:	d910      	bls.n	8003098 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003076:	4b67      	ldr	r3, [pc, #412]	; (8003214 <HAL_RCC_ClockConfig+0x1c0>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f023 0207 	bic.w	r2, r3, #7
 800307e:	4965      	ldr	r1, [pc, #404]	; (8003214 <HAL_RCC_ClockConfig+0x1c0>)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	4313      	orrs	r3, r2
 8003084:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003086:	4b63      	ldr	r3, [pc, #396]	; (8003214 <HAL_RCC_ClockConfig+0x1c0>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0307 	and.w	r3, r3, #7
 800308e:	683a      	ldr	r2, [r7, #0]
 8003090:	429a      	cmp	r2, r3
 8003092:	d001      	beq.n	8003098 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e0b8      	b.n	800320a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0302 	and.w	r3, r3, #2
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d020      	beq.n	80030e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0304 	and.w	r3, r3, #4
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d005      	beq.n	80030bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030b0:	4b59      	ldr	r3, [pc, #356]	; (8003218 <HAL_RCC_ClockConfig+0x1c4>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	4a58      	ldr	r2, [pc, #352]	; (8003218 <HAL_RCC_ClockConfig+0x1c4>)
 80030b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80030ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0308 	and.w	r3, r3, #8
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d005      	beq.n	80030d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030c8:	4b53      	ldr	r3, [pc, #332]	; (8003218 <HAL_RCC_ClockConfig+0x1c4>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	4a52      	ldr	r2, [pc, #328]	; (8003218 <HAL_RCC_ClockConfig+0x1c4>)
 80030ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80030d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030d4:	4b50      	ldr	r3, [pc, #320]	; (8003218 <HAL_RCC_ClockConfig+0x1c4>)
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	494d      	ldr	r1, [pc, #308]	; (8003218 <HAL_RCC_ClockConfig+0x1c4>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d040      	beq.n	8003174 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d107      	bne.n	800310a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030fa:	4b47      	ldr	r3, [pc, #284]	; (8003218 <HAL_RCC_ClockConfig+0x1c4>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d115      	bne.n	8003132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e07f      	b.n	800320a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	2b02      	cmp	r3, #2
 8003110:	d107      	bne.n	8003122 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003112:	4b41      	ldr	r3, [pc, #260]	; (8003218 <HAL_RCC_ClockConfig+0x1c4>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d109      	bne.n	8003132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e073      	b.n	800320a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003122:	4b3d      	ldr	r3, [pc, #244]	; (8003218 <HAL_RCC_ClockConfig+0x1c4>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d101      	bne.n	8003132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e06b      	b.n	800320a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003132:	4b39      	ldr	r3, [pc, #228]	; (8003218 <HAL_RCC_ClockConfig+0x1c4>)
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f023 0203 	bic.w	r2, r3, #3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	4936      	ldr	r1, [pc, #216]	; (8003218 <HAL_RCC_ClockConfig+0x1c4>)
 8003140:	4313      	orrs	r3, r2
 8003142:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003144:	f7fe fa70 	bl	8001628 <HAL_GetTick>
 8003148:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800314a:	e00a      	b.n	8003162 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800314c:	f7fe fa6c 	bl	8001628 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	f241 3288 	movw	r2, #5000	; 0x1388
 800315a:	4293      	cmp	r3, r2
 800315c:	d901      	bls.n	8003162 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e053      	b.n	800320a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003162:	4b2d      	ldr	r3, [pc, #180]	; (8003218 <HAL_RCC_ClockConfig+0x1c4>)
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f003 020c 	and.w	r2, r3, #12
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	429a      	cmp	r2, r3
 8003172:	d1eb      	bne.n	800314c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003174:	4b27      	ldr	r3, [pc, #156]	; (8003214 <HAL_RCC_ClockConfig+0x1c0>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0307 	and.w	r3, r3, #7
 800317c:	683a      	ldr	r2, [r7, #0]
 800317e:	429a      	cmp	r2, r3
 8003180:	d210      	bcs.n	80031a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003182:	4b24      	ldr	r3, [pc, #144]	; (8003214 <HAL_RCC_ClockConfig+0x1c0>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f023 0207 	bic.w	r2, r3, #7
 800318a:	4922      	ldr	r1, [pc, #136]	; (8003214 <HAL_RCC_ClockConfig+0x1c0>)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	4313      	orrs	r3, r2
 8003190:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003192:	4b20      	ldr	r3, [pc, #128]	; (8003214 <HAL_RCC_ClockConfig+0x1c0>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0307 	and.w	r3, r3, #7
 800319a:	683a      	ldr	r2, [r7, #0]
 800319c:	429a      	cmp	r2, r3
 800319e:	d001      	beq.n	80031a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e032      	b.n	800320a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0304 	and.w	r3, r3, #4
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d008      	beq.n	80031c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031b0:	4b19      	ldr	r3, [pc, #100]	; (8003218 <HAL_RCC_ClockConfig+0x1c4>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	4916      	ldr	r1, [pc, #88]	; (8003218 <HAL_RCC_ClockConfig+0x1c4>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0308 	and.w	r3, r3, #8
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d009      	beq.n	80031e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031ce:	4b12      	ldr	r3, [pc, #72]	; (8003218 <HAL_RCC_ClockConfig+0x1c4>)
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	00db      	lsls	r3, r3, #3
 80031dc:	490e      	ldr	r1, [pc, #56]	; (8003218 <HAL_RCC_ClockConfig+0x1c4>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031e2:	f000 f821 	bl	8003228 <HAL_RCC_GetSysClockFreq>
 80031e6:	4602      	mov	r2, r0
 80031e8:	4b0b      	ldr	r3, [pc, #44]	; (8003218 <HAL_RCC_ClockConfig+0x1c4>)
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	091b      	lsrs	r3, r3, #4
 80031ee:	f003 030f 	and.w	r3, r3, #15
 80031f2:	490a      	ldr	r1, [pc, #40]	; (800321c <HAL_RCC_ClockConfig+0x1c8>)
 80031f4:	5ccb      	ldrb	r3, [r1, r3]
 80031f6:	fa22 f303 	lsr.w	r3, r2, r3
 80031fa:	4a09      	ldr	r2, [pc, #36]	; (8003220 <HAL_RCC_ClockConfig+0x1cc>)
 80031fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80031fe:	4b09      	ldr	r3, [pc, #36]	; (8003224 <HAL_RCC_ClockConfig+0x1d0>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4618      	mov	r0, r3
 8003204:	f7fe f9ce 	bl	80015a4 <HAL_InitTick>

  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3710      	adds	r7, #16
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	40022000 	.word	0x40022000
 8003218:	40021000 	.word	0x40021000
 800321c:	08007944 	.word	0x08007944
 8003220:	20000000 	.word	0x20000000
 8003224:	20000004 	.word	0x20000004

08003228 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003228:	b490      	push	{r4, r7}
 800322a:	b08a      	sub	sp, #40	; 0x28
 800322c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800322e:	4b2a      	ldr	r3, [pc, #168]	; (80032d8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003230:	1d3c      	adds	r4, r7, #4
 8003232:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003234:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003238:	f240 2301 	movw	r3, #513	; 0x201
 800323c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800323e:	2300      	movs	r3, #0
 8003240:	61fb      	str	r3, [r7, #28]
 8003242:	2300      	movs	r3, #0
 8003244:	61bb      	str	r3, [r7, #24]
 8003246:	2300      	movs	r3, #0
 8003248:	627b      	str	r3, [r7, #36]	; 0x24
 800324a:	2300      	movs	r3, #0
 800324c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800324e:	2300      	movs	r3, #0
 8003250:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003252:	4b22      	ldr	r3, [pc, #136]	; (80032dc <HAL_RCC_GetSysClockFreq+0xb4>)
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	f003 030c 	and.w	r3, r3, #12
 800325e:	2b04      	cmp	r3, #4
 8003260:	d002      	beq.n	8003268 <HAL_RCC_GetSysClockFreq+0x40>
 8003262:	2b08      	cmp	r3, #8
 8003264:	d003      	beq.n	800326e <HAL_RCC_GetSysClockFreq+0x46>
 8003266:	e02d      	b.n	80032c4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003268:	4b1d      	ldr	r3, [pc, #116]	; (80032e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800326a:	623b      	str	r3, [r7, #32]
      break;
 800326c:	e02d      	b.n	80032ca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	0c9b      	lsrs	r3, r3, #18
 8003272:	f003 030f 	and.w	r3, r3, #15
 8003276:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800327a:	4413      	add	r3, r2
 800327c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003280:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d013      	beq.n	80032b4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800328c:	4b13      	ldr	r3, [pc, #76]	; (80032dc <HAL_RCC_GetSysClockFreq+0xb4>)
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	0c5b      	lsrs	r3, r3, #17
 8003292:	f003 0301 	and.w	r3, r3, #1
 8003296:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800329a:	4413      	add	r3, r2
 800329c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80032a0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	4a0e      	ldr	r2, [pc, #56]	; (80032e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032a6:	fb02 f203 	mul.w	r2, r2, r3
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80032b0:	627b      	str	r3, [r7, #36]	; 0x24
 80032b2:	e004      	b.n	80032be <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	4a0b      	ldr	r2, [pc, #44]	; (80032e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80032b8:	fb02 f303 	mul.w	r3, r2, r3
 80032bc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80032be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c0:	623b      	str	r3, [r7, #32]
      break;
 80032c2:	e002      	b.n	80032ca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80032c4:	4b06      	ldr	r3, [pc, #24]	; (80032e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032c6:	623b      	str	r3, [r7, #32]
      break;
 80032c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032ca:	6a3b      	ldr	r3, [r7, #32]
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3728      	adds	r7, #40	; 0x28
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bc90      	pop	{r4, r7}
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	0800791c 	.word	0x0800791c
 80032dc:	40021000 	.word	0x40021000
 80032e0:	007a1200 	.word	0x007a1200
 80032e4:	003d0900 	.word	0x003d0900

080032e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032e8:	b480      	push	{r7}
 80032ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032ec:	4b02      	ldr	r3, [pc, #8]	; (80032f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80032ee:	681b      	ldr	r3, [r3, #0]
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bc80      	pop	{r7}
 80032f6:	4770      	bx	lr
 80032f8:	20000000 	.word	0x20000000

080032fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003300:	f7ff fff2 	bl	80032e8 <HAL_RCC_GetHCLKFreq>
 8003304:	4602      	mov	r2, r0
 8003306:	4b05      	ldr	r3, [pc, #20]	; (800331c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	0a1b      	lsrs	r3, r3, #8
 800330c:	f003 0307 	and.w	r3, r3, #7
 8003310:	4903      	ldr	r1, [pc, #12]	; (8003320 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003312:	5ccb      	ldrb	r3, [r1, r3]
 8003314:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003318:	4618      	mov	r0, r3
 800331a:	bd80      	pop	{r7, pc}
 800331c:	40021000 	.word	0x40021000
 8003320:	08007954 	.word	0x08007954

08003324 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003328:	f7ff ffde 	bl	80032e8 <HAL_RCC_GetHCLKFreq>
 800332c:	4602      	mov	r2, r0
 800332e:	4b05      	ldr	r3, [pc, #20]	; (8003344 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	0adb      	lsrs	r3, r3, #11
 8003334:	f003 0307 	and.w	r3, r3, #7
 8003338:	4903      	ldr	r1, [pc, #12]	; (8003348 <HAL_RCC_GetPCLK2Freq+0x24>)
 800333a:	5ccb      	ldrb	r3, [r1, r3]
 800333c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003340:	4618      	mov	r0, r3
 8003342:	bd80      	pop	{r7, pc}
 8003344:	40021000 	.word	0x40021000
 8003348:	08007954 	.word	0x08007954

0800334c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800334c:	b480      	push	{r7}
 800334e:	b085      	sub	sp, #20
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003354:	4b0a      	ldr	r3, [pc, #40]	; (8003380 <RCC_Delay+0x34>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a0a      	ldr	r2, [pc, #40]	; (8003384 <RCC_Delay+0x38>)
 800335a:	fba2 2303 	umull	r2, r3, r2, r3
 800335e:	0a5b      	lsrs	r3, r3, #9
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	fb02 f303 	mul.w	r3, r2, r3
 8003366:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003368:	bf00      	nop
  }
  while (Delay --);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	1e5a      	subs	r2, r3, #1
 800336e:	60fa      	str	r2, [r7, #12]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d1f9      	bne.n	8003368 <RCC_Delay+0x1c>
}
 8003374:	bf00      	nop
 8003376:	bf00      	nop
 8003378:	3714      	adds	r7, #20
 800337a:	46bd      	mov	sp, r7
 800337c:	bc80      	pop	{r7}
 800337e:	4770      	bx	lr
 8003380:	20000000 	.word	0x20000000
 8003384:	10624dd3 	.word	0x10624dd3

08003388 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d101      	bne.n	800339a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e03f      	b.n	800341a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d106      	bne.n	80033b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f7fd ff82 	bl	80012b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2224      	movs	r2, #36	; 0x24
 80033b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68da      	ldr	r2, [r3, #12]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f000 f905 	bl	80035dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	691a      	ldr	r2, [r3, #16]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	695a      	ldr	r2, [r3, #20]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68da      	ldr	r2, [r3, #12]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003400:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2220      	movs	r2, #32
 800340c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2220      	movs	r2, #32
 8003414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3708      	adds	r7, #8
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}

08003422 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003422:	b580      	push	{r7, lr}
 8003424:	b08a      	sub	sp, #40	; 0x28
 8003426:	af02      	add	r7, sp, #8
 8003428:	60f8      	str	r0, [r7, #12]
 800342a:	60b9      	str	r1, [r7, #8]
 800342c:	603b      	str	r3, [r7, #0]
 800342e:	4613      	mov	r3, r2
 8003430:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003432:	2300      	movs	r3, #0
 8003434:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b20      	cmp	r3, #32
 8003440:	d17c      	bne.n	800353c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d002      	beq.n	800344e <HAL_UART_Transmit+0x2c>
 8003448:	88fb      	ldrh	r3, [r7, #6]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d101      	bne.n	8003452 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e075      	b.n	800353e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003458:	2b01      	cmp	r3, #1
 800345a:	d101      	bne.n	8003460 <HAL_UART_Transmit+0x3e>
 800345c:	2302      	movs	r3, #2
 800345e:	e06e      	b.n	800353e <HAL_UART_Transmit+0x11c>
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2200      	movs	r2, #0
 800346c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2221      	movs	r2, #33	; 0x21
 8003472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003476:	f7fe f8d7 	bl	8001628 <HAL_GetTick>
 800347a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	88fa      	ldrh	r2, [r7, #6]
 8003480:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	88fa      	ldrh	r2, [r7, #6]
 8003486:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003490:	d108      	bne.n	80034a4 <HAL_UART_Transmit+0x82>
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d104      	bne.n	80034a4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800349a:	2300      	movs	r3, #0
 800349c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	61bb      	str	r3, [r7, #24]
 80034a2:	e003      	b.n	80034ac <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034a8:	2300      	movs	r3, #0
 80034aa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80034b4:	e02a      	b.n	800350c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	9300      	str	r3, [sp, #0]
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	2200      	movs	r2, #0
 80034be:	2180      	movs	r1, #128	; 0x80
 80034c0:	68f8      	ldr	r0, [r7, #12]
 80034c2:	f000 f840 	bl	8003546 <UART_WaitOnFlagUntilTimeout>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d001      	beq.n	80034d0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e036      	b.n	800353e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d10b      	bne.n	80034ee <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	881b      	ldrh	r3, [r3, #0]
 80034da:	461a      	mov	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	3302      	adds	r3, #2
 80034ea:	61bb      	str	r3, [r7, #24]
 80034ec:	e007      	b.n	80034fe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	781a      	ldrb	r2, [r3, #0]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	3301      	adds	r3, #1
 80034fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003502:	b29b      	uxth	r3, r3
 8003504:	3b01      	subs	r3, #1
 8003506:	b29a      	uxth	r2, r3
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003510:	b29b      	uxth	r3, r3
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1cf      	bne.n	80034b6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	9300      	str	r3, [sp, #0]
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	2200      	movs	r2, #0
 800351e:	2140      	movs	r1, #64	; 0x40
 8003520:	68f8      	ldr	r0, [r7, #12]
 8003522:	f000 f810 	bl	8003546 <UART_WaitOnFlagUntilTimeout>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d001      	beq.n	8003530 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	e006      	b.n	800353e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2220      	movs	r2, #32
 8003534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003538:	2300      	movs	r3, #0
 800353a:	e000      	b.n	800353e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800353c:	2302      	movs	r3, #2
  }
}
 800353e:	4618      	mov	r0, r3
 8003540:	3720      	adds	r7, #32
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003546:	b580      	push	{r7, lr}
 8003548:	b084      	sub	sp, #16
 800354a:	af00      	add	r7, sp, #0
 800354c:	60f8      	str	r0, [r7, #12]
 800354e:	60b9      	str	r1, [r7, #8]
 8003550:	603b      	str	r3, [r7, #0]
 8003552:	4613      	mov	r3, r2
 8003554:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003556:	e02c      	b.n	80035b2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800355e:	d028      	beq.n	80035b2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d007      	beq.n	8003576 <UART_WaitOnFlagUntilTimeout+0x30>
 8003566:	f7fe f85f 	bl	8001628 <HAL_GetTick>
 800356a:	4602      	mov	r2, r0
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	429a      	cmp	r2, r3
 8003574:	d21d      	bcs.n	80035b2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	68da      	ldr	r2, [r3, #12]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003584:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	695a      	ldr	r2, [r3, #20]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f022 0201 	bic.w	r2, r2, #1
 8003594:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2220      	movs	r2, #32
 800359a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2220      	movs	r2, #32
 80035a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e00f      	b.n	80035d2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	4013      	ands	r3, r2
 80035bc:	68ba      	ldr	r2, [r7, #8]
 80035be:	429a      	cmp	r2, r3
 80035c0:	bf0c      	ite	eq
 80035c2:	2301      	moveq	r3, #1
 80035c4:	2300      	movne	r3, #0
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	461a      	mov	r2, r3
 80035ca:	79fb      	ldrb	r3, [r7, #7]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d0c3      	beq.n	8003558 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3710      	adds	r7, #16
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
	...

080035dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	68da      	ldr	r2, [r3, #12]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	430a      	orrs	r2, r1
 80035f8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	689a      	ldr	r2, [r3, #8]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	431a      	orrs	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	695b      	ldr	r3, [r3, #20]
 8003608:	4313      	orrs	r3, r2
 800360a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003616:	f023 030c 	bic.w	r3, r3, #12
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	6812      	ldr	r2, [r2, #0]
 800361e:	68b9      	ldr	r1, [r7, #8]
 8003620:	430b      	orrs	r3, r1
 8003622:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	699a      	ldr	r2, [r3, #24]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	430a      	orrs	r2, r1
 8003638:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a2c      	ldr	r2, [pc, #176]	; (80036f0 <UART_SetConfig+0x114>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d103      	bne.n	800364c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003644:	f7ff fe6e 	bl	8003324 <HAL_RCC_GetPCLK2Freq>
 8003648:	60f8      	str	r0, [r7, #12]
 800364a:	e002      	b.n	8003652 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800364c:	f7ff fe56 	bl	80032fc <HAL_RCC_GetPCLK1Freq>
 8003650:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003652:	68fa      	ldr	r2, [r7, #12]
 8003654:	4613      	mov	r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	4413      	add	r3, r2
 800365a:	009a      	lsls	r2, r3, #2
 800365c:	441a      	add	r2, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	fbb2 f3f3 	udiv	r3, r2, r3
 8003668:	4a22      	ldr	r2, [pc, #136]	; (80036f4 <UART_SetConfig+0x118>)
 800366a:	fba2 2303 	umull	r2, r3, r2, r3
 800366e:	095b      	lsrs	r3, r3, #5
 8003670:	0119      	lsls	r1, r3, #4
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	4613      	mov	r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	4413      	add	r3, r2
 800367a:	009a      	lsls	r2, r3, #2
 800367c:	441a      	add	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	fbb2 f2f3 	udiv	r2, r2, r3
 8003688:	4b1a      	ldr	r3, [pc, #104]	; (80036f4 <UART_SetConfig+0x118>)
 800368a:	fba3 0302 	umull	r0, r3, r3, r2
 800368e:	095b      	lsrs	r3, r3, #5
 8003690:	2064      	movs	r0, #100	; 0x64
 8003692:	fb00 f303 	mul.w	r3, r0, r3
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	011b      	lsls	r3, r3, #4
 800369a:	3332      	adds	r3, #50	; 0x32
 800369c:	4a15      	ldr	r2, [pc, #84]	; (80036f4 <UART_SetConfig+0x118>)
 800369e:	fba2 2303 	umull	r2, r3, r2, r3
 80036a2:	095b      	lsrs	r3, r3, #5
 80036a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036a8:	4419      	add	r1, r3
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	4613      	mov	r3, r2
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	4413      	add	r3, r2
 80036b2:	009a      	lsls	r2, r3, #2
 80036b4:	441a      	add	r2, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80036c0:	4b0c      	ldr	r3, [pc, #48]	; (80036f4 <UART_SetConfig+0x118>)
 80036c2:	fba3 0302 	umull	r0, r3, r3, r2
 80036c6:	095b      	lsrs	r3, r3, #5
 80036c8:	2064      	movs	r0, #100	; 0x64
 80036ca:	fb00 f303 	mul.w	r3, r0, r3
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	011b      	lsls	r3, r3, #4
 80036d2:	3332      	adds	r3, #50	; 0x32
 80036d4:	4a07      	ldr	r2, [pc, #28]	; (80036f4 <UART_SetConfig+0x118>)
 80036d6:	fba2 2303 	umull	r2, r3, r2, r3
 80036da:	095b      	lsrs	r3, r3, #5
 80036dc:	f003 020f 	and.w	r2, r3, #15
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	440a      	add	r2, r1
 80036e6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80036e8:	bf00      	nop
 80036ea:	3710      	adds	r7, #16
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	40013800 	.word	0x40013800
 80036f4:	51eb851f 	.word	0x51eb851f

080036f8 <__errno>:
 80036f8:	4b01      	ldr	r3, [pc, #4]	; (8003700 <__errno+0x8>)
 80036fa:	6818      	ldr	r0, [r3, #0]
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	2000000c 	.word	0x2000000c

08003704 <__libc_init_array>:
 8003704:	b570      	push	{r4, r5, r6, lr}
 8003706:	2600      	movs	r6, #0
 8003708:	4d0c      	ldr	r5, [pc, #48]	; (800373c <__libc_init_array+0x38>)
 800370a:	4c0d      	ldr	r4, [pc, #52]	; (8003740 <__libc_init_array+0x3c>)
 800370c:	1b64      	subs	r4, r4, r5
 800370e:	10a4      	asrs	r4, r4, #2
 8003710:	42a6      	cmp	r6, r4
 8003712:	d109      	bne.n	8003728 <__libc_init_array+0x24>
 8003714:	f004 f8d6 	bl	80078c4 <_init>
 8003718:	2600      	movs	r6, #0
 800371a:	4d0a      	ldr	r5, [pc, #40]	; (8003744 <__libc_init_array+0x40>)
 800371c:	4c0a      	ldr	r4, [pc, #40]	; (8003748 <__libc_init_array+0x44>)
 800371e:	1b64      	subs	r4, r4, r5
 8003720:	10a4      	asrs	r4, r4, #2
 8003722:	42a6      	cmp	r6, r4
 8003724:	d105      	bne.n	8003732 <__libc_init_array+0x2e>
 8003726:	bd70      	pop	{r4, r5, r6, pc}
 8003728:	f855 3b04 	ldr.w	r3, [r5], #4
 800372c:	4798      	blx	r3
 800372e:	3601      	adds	r6, #1
 8003730:	e7ee      	b.n	8003710 <__libc_init_array+0xc>
 8003732:	f855 3b04 	ldr.w	r3, [r5], #4
 8003736:	4798      	blx	r3
 8003738:	3601      	adds	r6, #1
 800373a:	e7f2      	b.n	8003722 <__libc_init_array+0x1e>
 800373c:	08007df0 	.word	0x08007df0
 8003740:	08007df0 	.word	0x08007df0
 8003744:	08007df0 	.word	0x08007df0
 8003748:	08007df4 	.word	0x08007df4

0800374c <memset>:
 800374c:	4603      	mov	r3, r0
 800374e:	4402      	add	r2, r0
 8003750:	4293      	cmp	r3, r2
 8003752:	d100      	bne.n	8003756 <memset+0xa>
 8003754:	4770      	bx	lr
 8003756:	f803 1b01 	strb.w	r1, [r3], #1
 800375a:	e7f9      	b.n	8003750 <memset+0x4>

0800375c <__cvt>:
 800375c:	2b00      	cmp	r3, #0
 800375e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003762:	461f      	mov	r7, r3
 8003764:	bfbb      	ittet	lt
 8003766:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800376a:	461f      	movlt	r7, r3
 800376c:	2300      	movge	r3, #0
 800376e:	232d      	movlt	r3, #45	; 0x2d
 8003770:	b088      	sub	sp, #32
 8003772:	4614      	mov	r4, r2
 8003774:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003776:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003778:	7013      	strb	r3, [r2, #0]
 800377a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800377c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003780:	f023 0820 	bic.w	r8, r3, #32
 8003784:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003788:	d005      	beq.n	8003796 <__cvt+0x3a>
 800378a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800378e:	d100      	bne.n	8003792 <__cvt+0x36>
 8003790:	3501      	adds	r5, #1
 8003792:	2302      	movs	r3, #2
 8003794:	e000      	b.n	8003798 <__cvt+0x3c>
 8003796:	2303      	movs	r3, #3
 8003798:	aa07      	add	r2, sp, #28
 800379a:	9204      	str	r2, [sp, #16]
 800379c:	aa06      	add	r2, sp, #24
 800379e:	e9cd a202 	strd	sl, r2, [sp, #8]
 80037a2:	e9cd 3500 	strd	r3, r5, [sp]
 80037a6:	4622      	mov	r2, r4
 80037a8:	463b      	mov	r3, r7
 80037aa:	f000 fce5 	bl	8004178 <_dtoa_r>
 80037ae:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80037b2:	4606      	mov	r6, r0
 80037b4:	d102      	bne.n	80037bc <__cvt+0x60>
 80037b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80037b8:	07db      	lsls	r3, r3, #31
 80037ba:	d522      	bpl.n	8003802 <__cvt+0xa6>
 80037bc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80037c0:	eb06 0905 	add.w	r9, r6, r5
 80037c4:	d110      	bne.n	80037e8 <__cvt+0x8c>
 80037c6:	7833      	ldrb	r3, [r6, #0]
 80037c8:	2b30      	cmp	r3, #48	; 0x30
 80037ca:	d10a      	bne.n	80037e2 <__cvt+0x86>
 80037cc:	2200      	movs	r2, #0
 80037ce:	2300      	movs	r3, #0
 80037d0:	4620      	mov	r0, r4
 80037d2:	4639      	mov	r1, r7
 80037d4:	f7fd f8e8 	bl	80009a8 <__aeabi_dcmpeq>
 80037d8:	b918      	cbnz	r0, 80037e2 <__cvt+0x86>
 80037da:	f1c5 0501 	rsb	r5, r5, #1
 80037de:	f8ca 5000 	str.w	r5, [sl]
 80037e2:	f8da 3000 	ldr.w	r3, [sl]
 80037e6:	4499      	add	r9, r3
 80037e8:	2200      	movs	r2, #0
 80037ea:	2300      	movs	r3, #0
 80037ec:	4620      	mov	r0, r4
 80037ee:	4639      	mov	r1, r7
 80037f0:	f7fd f8da 	bl	80009a8 <__aeabi_dcmpeq>
 80037f4:	b108      	cbz	r0, 80037fa <__cvt+0x9e>
 80037f6:	f8cd 901c 	str.w	r9, [sp, #28]
 80037fa:	2230      	movs	r2, #48	; 0x30
 80037fc:	9b07      	ldr	r3, [sp, #28]
 80037fe:	454b      	cmp	r3, r9
 8003800:	d307      	bcc.n	8003812 <__cvt+0xb6>
 8003802:	4630      	mov	r0, r6
 8003804:	9b07      	ldr	r3, [sp, #28]
 8003806:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003808:	1b9b      	subs	r3, r3, r6
 800380a:	6013      	str	r3, [r2, #0]
 800380c:	b008      	add	sp, #32
 800380e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003812:	1c59      	adds	r1, r3, #1
 8003814:	9107      	str	r1, [sp, #28]
 8003816:	701a      	strb	r2, [r3, #0]
 8003818:	e7f0      	b.n	80037fc <__cvt+0xa0>

0800381a <__exponent>:
 800381a:	4603      	mov	r3, r0
 800381c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800381e:	2900      	cmp	r1, #0
 8003820:	f803 2b02 	strb.w	r2, [r3], #2
 8003824:	bfb6      	itet	lt
 8003826:	222d      	movlt	r2, #45	; 0x2d
 8003828:	222b      	movge	r2, #43	; 0x2b
 800382a:	4249      	neglt	r1, r1
 800382c:	2909      	cmp	r1, #9
 800382e:	7042      	strb	r2, [r0, #1]
 8003830:	dd2b      	ble.n	800388a <__exponent+0x70>
 8003832:	f10d 0407 	add.w	r4, sp, #7
 8003836:	46a4      	mov	ip, r4
 8003838:	270a      	movs	r7, #10
 800383a:	fb91 f6f7 	sdiv	r6, r1, r7
 800383e:	460a      	mov	r2, r1
 8003840:	46a6      	mov	lr, r4
 8003842:	fb07 1516 	mls	r5, r7, r6, r1
 8003846:	2a63      	cmp	r2, #99	; 0x63
 8003848:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800384c:	4631      	mov	r1, r6
 800384e:	f104 34ff 	add.w	r4, r4, #4294967295
 8003852:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003856:	dcf0      	bgt.n	800383a <__exponent+0x20>
 8003858:	3130      	adds	r1, #48	; 0x30
 800385a:	f1ae 0502 	sub.w	r5, lr, #2
 800385e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003862:	4629      	mov	r1, r5
 8003864:	1c44      	adds	r4, r0, #1
 8003866:	4561      	cmp	r1, ip
 8003868:	d30a      	bcc.n	8003880 <__exponent+0x66>
 800386a:	f10d 0209 	add.w	r2, sp, #9
 800386e:	eba2 020e 	sub.w	r2, r2, lr
 8003872:	4565      	cmp	r5, ip
 8003874:	bf88      	it	hi
 8003876:	2200      	movhi	r2, #0
 8003878:	4413      	add	r3, r2
 800387a:	1a18      	subs	r0, r3, r0
 800387c:	b003      	add	sp, #12
 800387e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003880:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003884:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003888:	e7ed      	b.n	8003866 <__exponent+0x4c>
 800388a:	2330      	movs	r3, #48	; 0x30
 800388c:	3130      	adds	r1, #48	; 0x30
 800388e:	7083      	strb	r3, [r0, #2]
 8003890:	70c1      	strb	r1, [r0, #3]
 8003892:	1d03      	adds	r3, r0, #4
 8003894:	e7f1      	b.n	800387a <__exponent+0x60>
	...

08003898 <_printf_float>:
 8003898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800389c:	b091      	sub	sp, #68	; 0x44
 800389e:	460c      	mov	r4, r1
 80038a0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80038a4:	4616      	mov	r6, r2
 80038a6:	461f      	mov	r7, r3
 80038a8:	4605      	mov	r5, r0
 80038aa:	f001 fa53 	bl	8004d54 <_localeconv_r>
 80038ae:	6803      	ldr	r3, [r0, #0]
 80038b0:	4618      	mov	r0, r3
 80038b2:	9309      	str	r3, [sp, #36]	; 0x24
 80038b4:	f7fc fc4c 	bl	8000150 <strlen>
 80038b8:	2300      	movs	r3, #0
 80038ba:	930e      	str	r3, [sp, #56]	; 0x38
 80038bc:	f8d8 3000 	ldr.w	r3, [r8]
 80038c0:	900a      	str	r0, [sp, #40]	; 0x28
 80038c2:	3307      	adds	r3, #7
 80038c4:	f023 0307 	bic.w	r3, r3, #7
 80038c8:	f103 0208 	add.w	r2, r3, #8
 80038cc:	f894 9018 	ldrb.w	r9, [r4, #24]
 80038d0:	f8d4 b000 	ldr.w	fp, [r4]
 80038d4:	f8c8 2000 	str.w	r2, [r8]
 80038d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038dc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80038e0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80038e4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80038e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80038ea:	f04f 32ff 	mov.w	r2, #4294967295
 80038ee:	4640      	mov	r0, r8
 80038f0:	4b9c      	ldr	r3, [pc, #624]	; (8003b64 <_printf_float+0x2cc>)
 80038f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80038f4:	f7fd f88a 	bl	8000a0c <__aeabi_dcmpun>
 80038f8:	bb70      	cbnz	r0, 8003958 <_printf_float+0xc0>
 80038fa:	f04f 32ff 	mov.w	r2, #4294967295
 80038fe:	4640      	mov	r0, r8
 8003900:	4b98      	ldr	r3, [pc, #608]	; (8003b64 <_printf_float+0x2cc>)
 8003902:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003904:	f7fd f864 	bl	80009d0 <__aeabi_dcmple>
 8003908:	bb30      	cbnz	r0, 8003958 <_printf_float+0xc0>
 800390a:	2200      	movs	r2, #0
 800390c:	2300      	movs	r3, #0
 800390e:	4640      	mov	r0, r8
 8003910:	4651      	mov	r1, sl
 8003912:	f7fd f853 	bl	80009bc <__aeabi_dcmplt>
 8003916:	b110      	cbz	r0, 800391e <_printf_float+0x86>
 8003918:	232d      	movs	r3, #45	; 0x2d
 800391a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800391e:	4b92      	ldr	r3, [pc, #584]	; (8003b68 <_printf_float+0x2d0>)
 8003920:	4892      	ldr	r0, [pc, #584]	; (8003b6c <_printf_float+0x2d4>)
 8003922:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003926:	bf94      	ite	ls
 8003928:	4698      	movls	r8, r3
 800392a:	4680      	movhi	r8, r0
 800392c:	2303      	movs	r3, #3
 800392e:	f04f 0a00 	mov.w	sl, #0
 8003932:	6123      	str	r3, [r4, #16]
 8003934:	f02b 0304 	bic.w	r3, fp, #4
 8003938:	6023      	str	r3, [r4, #0]
 800393a:	4633      	mov	r3, r6
 800393c:	4621      	mov	r1, r4
 800393e:	4628      	mov	r0, r5
 8003940:	9700      	str	r7, [sp, #0]
 8003942:	aa0f      	add	r2, sp, #60	; 0x3c
 8003944:	f000 f9d4 	bl	8003cf0 <_printf_common>
 8003948:	3001      	adds	r0, #1
 800394a:	f040 8090 	bne.w	8003a6e <_printf_float+0x1d6>
 800394e:	f04f 30ff 	mov.w	r0, #4294967295
 8003952:	b011      	add	sp, #68	; 0x44
 8003954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003958:	4642      	mov	r2, r8
 800395a:	4653      	mov	r3, sl
 800395c:	4640      	mov	r0, r8
 800395e:	4651      	mov	r1, sl
 8003960:	f7fd f854 	bl	8000a0c <__aeabi_dcmpun>
 8003964:	b148      	cbz	r0, 800397a <_printf_float+0xe2>
 8003966:	f1ba 0f00 	cmp.w	sl, #0
 800396a:	bfb8      	it	lt
 800396c:	232d      	movlt	r3, #45	; 0x2d
 800396e:	4880      	ldr	r0, [pc, #512]	; (8003b70 <_printf_float+0x2d8>)
 8003970:	bfb8      	it	lt
 8003972:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003976:	4b7f      	ldr	r3, [pc, #508]	; (8003b74 <_printf_float+0x2dc>)
 8003978:	e7d3      	b.n	8003922 <_printf_float+0x8a>
 800397a:	6863      	ldr	r3, [r4, #4]
 800397c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003980:	1c5a      	adds	r2, r3, #1
 8003982:	d142      	bne.n	8003a0a <_printf_float+0x172>
 8003984:	2306      	movs	r3, #6
 8003986:	6063      	str	r3, [r4, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	9206      	str	r2, [sp, #24]
 800398c:	aa0e      	add	r2, sp, #56	; 0x38
 800398e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003992:	aa0d      	add	r2, sp, #52	; 0x34
 8003994:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003998:	9203      	str	r2, [sp, #12]
 800399a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800399e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80039a2:	6023      	str	r3, [r4, #0]
 80039a4:	6863      	ldr	r3, [r4, #4]
 80039a6:	4642      	mov	r2, r8
 80039a8:	9300      	str	r3, [sp, #0]
 80039aa:	4628      	mov	r0, r5
 80039ac:	4653      	mov	r3, sl
 80039ae:	910b      	str	r1, [sp, #44]	; 0x2c
 80039b0:	f7ff fed4 	bl	800375c <__cvt>
 80039b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80039b6:	4680      	mov	r8, r0
 80039b8:	2947      	cmp	r1, #71	; 0x47
 80039ba:	990d      	ldr	r1, [sp, #52]	; 0x34
 80039bc:	d108      	bne.n	80039d0 <_printf_float+0x138>
 80039be:	1cc8      	adds	r0, r1, #3
 80039c0:	db02      	blt.n	80039c8 <_printf_float+0x130>
 80039c2:	6863      	ldr	r3, [r4, #4]
 80039c4:	4299      	cmp	r1, r3
 80039c6:	dd40      	ble.n	8003a4a <_printf_float+0x1b2>
 80039c8:	f1a9 0902 	sub.w	r9, r9, #2
 80039cc:	fa5f f989 	uxtb.w	r9, r9
 80039d0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80039d4:	d81f      	bhi.n	8003a16 <_printf_float+0x17e>
 80039d6:	464a      	mov	r2, r9
 80039d8:	3901      	subs	r1, #1
 80039da:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80039de:	910d      	str	r1, [sp, #52]	; 0x34
 80039e0:	f7ff ff1b 	bl	800381a <__exponent>
 80039e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80039e6:	4682      	mov	sl, r0
 80039e8:	1813      	adds	r3, r2, r0
 80039ea:	2a01      	cmp	r2, #1
 80039ec:	6123      	str	r3, [r4, #16]
 80039ee:	dc02      	bgt.n	80039f6 <_printf_float+0x15e>
 80039f0:	6822      	ldr	r2, [r4, #0]
 80039f2:	07d2      	lsls	r2, r2, #31
 80039f4:	d501      	bpl.n	80039fa <_printf_float+0x162>
 80039f6:	3301      	adds	r3, #1
 80039f8:	6123      	str	r3, [r4, #16]
 80039fa:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d09b      	beq.n	800393a <_printf_float+0xa2>
 8003a02:	232d      	movs	r3, #45	; 0x2d
 8003a04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a08:	e797      	b.n	800393a <_printf_float+0xa2>
 8003a0a:	2947      	cmp	r1, #71	; 0x47
 8003a0c:	d1bc      	bne.n	8003988 <_printf_float+0xf0>
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1ba      	bne.n	8003988 <_printf_float+0xf0>
 8003a12:	2301      	movs	r3, #1
 8003a14:	e7b7      	b.n	8003986 <_printf_float+0xee>
 8003a16:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003a1a:	d118      	bne.n	8003a4e <_printf_float+0x1b6>
 8003a1c:	2900      	cmp	r1, #0
 8003a1e:	6863      	ldr	r3, [r4, #4]
 8003a20:	dd0b      	ble.n	8003a3a <_printf_float+0x1a2>
 8003a22:	6121      	str	r1, [r4, #16]
 8003a24:	b913      	cbnz	r3, 8003a2c <_printf_float+0x194>
 8003a26:	6822      	ldr	r2, [r4, #0]
 8003a28:	07d0      	lsls	r0, r2, #31
 8003a2a:	d502      	bpl.n	8003a32 <_printf_float+0x19a>
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	440b      	add	r3, r1
 8003a30:	6123      	str	r3, [r4, #16]
 8003a32:	f04f 0a00 	mov.w	sl, #0
 8003a36:	65a1      	str	r1, [r4, #88]	; 0x58
 8003a38:	e7df      	b.n	80039fa <_printf_float+0x162>
 8003a3a:	b913      	cbnz	r3, 8003a42 <_printf_float+0x1aa>
 8003a3c:	6822      	ldr	r2, [r4, #0]
 8003a3e:	07d2      	lsls	r2, r2, #31
 8003a40:	d501      	bpl.n	8003a46 <_printf_float+0x1ae>
 8003a42:	3302      	adds	r3, #2
 8003a44:	e7f4      	b.n	8003a30 <_printf_float+0x198>
 8003a46:	2301      	movs	r3, #1
 8003a48:	e7f2      	b.n	8003a30 <_printf_float+0x198>
 8003a4a:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003a4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003a50:	4299      	cmp	r1, r3
 8003a52:	db05      	blt.n	8003a60 <_printf_float+0x1c8>
 8003a54:	6823      	ldr	r3, [r4, #0]
 8003a56:	6121      	str	r1, [r4, #16]
 8003a58:	07d8      	lsls	r0, r3, #31
 8003a5a:	d5ea      	bpl.n	8003a32 <_printf_float+0x19a>
 8003a5c:	1c4b      	adds	r3, r1, #1
 8003a5e:	e7e7      	b.n	8003a30 <_printf_float+0x198>
 8003a60:	2900      	cmp	r1, #0
 8003a62:	bfcc      	ite	gt
 8003a64:	2201      	movgt	r2, #1
 8003a66:	f1c1 0202 	rsble	r2, r1, #2
 8003a6a:	4413      	add	r3, r2
 8003a6c:	e7e0      	b.n	8003a30 <_printf_float+0x198>
 8003a6e:	6823      	ldr	r3, [r4, #0]
 8003a70:	055a      	lsls	r2, r3, #21
 8003a72:	d407      	bmi.n	8003a84 <_printf_float+0x1ec>
 8003a74:	6923      	ldr	r3, [r4, #16]
 8003a76:	4642      	mov	r2, r8
 8003a78:	4631      	mov	r1, r6
 8003a7a:	4628      	mov	r0, r5
 8003a7c:	47b8      	blx	r7
 8003a7e:	3001      	adds	r0, #1
 8003a80:	d12b      	bne.n	8003ada <_printf_float+0x242>
 8003a82:	e764      	b.n	800394e <_printf_float+0xb6>
 8003a84:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003a88:	f240 80dd 	bls.w	8003c46 <_printf_float+0x3ae>
 8003a8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003a90:	2200      	movs	r2, #0
 8003a92:	2300      	movs	r3, #0
 8003a94:	f7fc ff88 	bl	80009a8 <__aeabi_dcmpeq>
 8003a98:	2800      	cmp	r0, #0
 8003a9a:	d033      	beq.n	8003b04 <_printf_float+0x26c>
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	4631      	mov	r1, r6
 8003aa0:	4628      	mov	r0, r5
 8003aa2:	4a35      	ldr	r2, [pc, #212]	; (8003b78 <_printf_float+0x2e0>)
 8003aa4:	47b8      	blx	r7
 8003aa6:	3001      	adds	r0, #1
 8003aa8:	f43f af51 	beq.w	800394e <_printf_float+0xb6>
 8003aac:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	db02      	blt.n	8003aba <_printf_float+0x222>
 8003ab4:	6823      	ldr	r3, [r4, #0]
 8003ab6:	07d8      	lsls	r0, r3, #31
 8003ab8:	d50f      	bpl.n	8003ada <_printf_float+0x242>
 8003aba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003abe:	4631      	mov	r1, r6
 8003ac0:	4628      	mov	r0, r5
 8003ac2:	47b8      	blx	r7
 8003ac4:	3001      	adds	r0, #1
 8003ac6:	f43f af42 	beq.w	800394e <_printf_float+0xb6>
 8003aca:	f04f 0800 	mov.w	r8, #0
 8003ace:	f104 091a 	add.w	r9, r4, #26
 8003ad2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003ad4:	3b01      	subs	r3, #1
 8003ad6:	4543      	cmp	r3, r8
 8003ad8:	dc09      	bgt.n	8003aee <_printf_float+0x256>
 8003ada:	6823      	ldr	r3, [r4, #0]
 8003adc:	079b      	lsls	r3, r3, #30
 8003ade:	f100 8102 	bmi.w	8003ce6 <_printf_float+0x44e>
 8003ae2:	68e0      	ldr	r0, [r4, #12]
 8003ae4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003ae6:	4298      	cmp	r0, r3
 8003ae8:	bfb8      	it	lt
 8003aea:	4618      	movlt	r0, r3
 8003aec:	e731      	b.n	8003952 <_printf_float+0xba>
 8003aee:	2301      	movs	r3, #1
 8003af0:	464a      	mov	r2, r9
 8003af2:	4631      	mov	r1, r6
 8003af4:	4628      	mov	r0, r5
 8003af6:	47b8      	blx	r7
 8003af8:	3001      	adds	r0, #1
 8003afa:	f43f af28 	beq.w	800394e <_printf_float+0xb6>
 8003afe:	f108 0801 	add.w	r8, r8, #1
 8003b02:	e7e6      	b.n	8003ad2 <_printf_float+0x23a>
 8003b04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	dc38      	bgt.n	8003b7c <_printf_float+0x2e4>
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	4631      	mov	r1, r6
 8003b0e:	4628      	mov	r0, r5
 8003b10:	4a19      	ldr	r2, [pc, #100]	; (8003b78 <_printf_float+0x2e0>)
 8003b12:	47b8      	blx	r7
 8003b14:	3001      	adds	r0, #1
 8003b16:	f43f af1a 	beq.w	800394e <_printf_float+0xb6>
 8003b1a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	d102      	bne.n	8003b28 <_printf_float+0x290>
 8003b22:	6823      	ldr	r3, [r4, #0]
 8003b24:	07d9      	lsls	r1, r3, #31
 8003b26:	d5d8      	bpl.n	8003ada <_printf_float+0x242>
 8003b28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003b2c:	4631      	mov	r1, r6
 8003b2e:	4628      	mov	r0, r5
 8003b30:	47b8      	blx	r7
 8003b32:	3001      	adds	r0, #1
 8003b34:	f43f af0b 	beq.w	800394e <_printf_float+0xb6>
 8003b38:	f04f 0900 	mov.w	r9, #0
 8003b3c:	f104 0a1a 	add.w	sl, r4, #26
 8003b40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003b42:	425b      	negs	r3, r3
 8003b44:	454b      	cmp	r3, r9
 8003b46:	dc01      	bgt.n	8003b4c <_printf_float+0x2b4>
 8003b48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003b4a:	e794      	b.n	8003a76 <_printf_float+0x1de>
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	4652      	mov	r2, sl
 8003b50:	4631      	mov	r1, r6
 8003b52:	4628      	mov	r0, r5
 8003b54:	47b8      	blx	r7
 8003b56:	3001      	adds	r0, #1
 8003b58:	f43f aef9 	beq.w	800394e <_printf_float+0xb6>
 8003b5c:	f109 0901 	add.w	r9, r9, #1
 8003b60:	e7ee      	b.n	8003b40 <_printf_float+0x2a8>
 8003b62:	bf00      	nop
 8003b64:	7fefffff 	.word	0x7fefffff
 8003b68:	08007960 	.word	0x08007960
 8003b6c:	08007964 	.word	0x08007964
 8003b70:	0800796c 	.word	0x0800796c
 8003b74:	08007968 	.word	0x08007968
 8003b78:	08007970 	.word	0x08007970
 8003b7c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003b7e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003b80:	429a      	cmp	r2, r3
 8003b82:	bfa8      	it	ge
 8003b84:	461a      	movge	r2, r3
 8003b86:	2a00      	cmp	r2, #0
 8003b88:	4691      	mov	r9, r2
 8003b8a:	dc37      	bgt.n	8003bfc <_printf_float+0x364>
 8003b8c:	f04f 0b00 	mov.w	fp, #0
 8003b90:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003b94:	f104 021a 	add.w	r2, r4, #26
 8003b98:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003b9c:	ebaa 0309 	sub.w	r3, sl, r9
 8003ba0:	455b      	cmp	r3, fp
 8003ba2:	dc33      	bgt.n	8003c0c <_printf_float+0x374>
 8003ba4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	db3b      	blt.n	8003c24 <_printf_float+0x38c>
 8003bac:	6823      	ldr	r3, [r4, #0]
 8003bae:	07da      	lsls	r2, r3, #31
 8003bb0:	d438      	bmi.n	8003c24 <_printf_float+0x38c>
 8003bb2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003bb4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003bb6:	eba2 030a 	sub.w	r3, r2, sl
 8003bba:	eba2 0901 	sub.w	r9, r2, r1
 8003bbe:	4599      	cmp	r9, r3
 8003bc0:	bfa8      	it	ge
 8003bc2:	4699      	movge	r9, r3
 8003bc4:	f1b9 0f00 	cmp.w	r9, #0
 8003bc8:	dc34      	bgt.n	8003c34 <_printf_float+0x39c>
 8003bca:	f04f 0800 	mov.w	r8, #0
 8003bce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003bd2:	f104 0a1a 	add.w	sl, r4, #26
 8003bd6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003bda:	1a9b      	subs	r3, r3, r2
 8003bdc:	eba3 0309 	sub.w	r3, r3, r9
 8003be0:	4543      	cmp	r3, r8
 8003be2:	f77f af7a 	ble.w	8003ada <_printf_float+0x242>
 8003be6:	2301      	movs	r3, #1
 8003be8:	4652      	mov	r2, sl
 8003bea:	4631      	mov	r1, r6
 8003bec:	4628      	mov	r0, r5
 8003bee:	47b8      	blx	r7
 8003bf0:	3001      	adds	r0, #1
 8003bf2:	f43f aeac 	beq.w	800394e <_printf_float+0xb6>
 8003bf6:	f108 0801 	add.w	r8, r8, #1
 8003bfa:	e7ec      	b.n	8003bd6 <_printf_float+0x33e>
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	4631      	mov	r1, r6
 8003c00:	4642      	mov	r2, r8
 8003c02:	4628      	mov	r0, r5
 8003c04:	47b8      	blx	r7
 8003c06:	3001      	adds	r0, #1
 8003c08:	d1c0      	bne.n	8003b8c <_printf_float+0x2f4>
 8003c0a:	e6a0      	b.n	800394e <_printf_float+0xb6>
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	4631      	mov	r1, r6
 8003c10:	4628      	mov	r0, r5
 8003c12:	920b      	str	r2, [sp, #44]	; 0x2c
 8003c14:	47b8      	blx	r7
 8003c16:	3001      	adds	r0, #1
 8003c18:	f43f ae99 	beq.w	800394e <_printf_float+0xb6>
 8003c1c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003c1e:	f10b 0b01 	add.w	fp, fp, #1
 8003c22:	e7b9      	b.n	8003b98 <_printf_float+0x300>
 8003c24:	4631      	mov	r1, r6
 8003c26:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003c2a:	4628      	mov	r0, r5
 8003c2c:	47b8      	blx	r7
 8003c2e:	3001      	adds	r0, #1
 8003c30:	d1bf      	bne.n	8003bb2 <_printf_float+0x31a>
 8003c32:	e68c      	b.n	800394e <_printf_float+0xb6>
 8003c34:	464b      	mov	r3, r9
 8003c36:	4631      	mov	r1, r6
 8003c38:	4628      	mov	r0, r5
 8003c3a:	eb08 020a 	add.w	r2, r8, sl
 8003c3e:	47b8      	blx	r7
 8003c40:	3001      	adds	r0, #1
 8003c42:	d1c2      	bne.n	8003bca <_printf_float+0x332>
 8003c44:	e683      	b.n	800394e <_printf_float+0xb6>
 8003c46:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003c48:	2a01      	cmp	r2, #1
 8003c4a:	dc01      	bgt.n	8003c50 <_printf_float+0x3b8>
 8003c4c:	07db      	lsls	r3, r3, #31
 8003c4e:	d537      	bpl.n	8003cc0 <_printf_float+0x428>
 8003c50:	2301      	movs	r3, #1
 8003c52:	4642      	mov	r2, r8
 8003c54:	4631      	mov	r1, r6
 8003c56:	4628      	mov	r0, r5
 8003c58:	47b8      	blx	r7
 8003c5a:	3001      	adds	r0, #1
 8003c5c:	f43f ae77 	beq.w	800394e <_printf_float+0xb6>
 8003c60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003c64:	4631      	mov	r1, r6
 8003c66:	4628      	mov	r0, r5
 8003c68:	47b8      	blx	r7
 8003c6a:	3001      	adds	r0, #1
 8003c6c:	f43f ae6f 	beq.w	800394e <_printf_float+0xb6>
 8003c70:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003c74:	2200      	movs	r2, #0
 8003c76:	2300      	movs	r3, #0
 8003c78:	f7fc fe96 	bl	80009a8 <__aeabi_dcmpeq>
 8003c7c:	b9d8      	cbnz	r0, 8003cb6 <_printf_float+0x41e>
 8003c7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003c80:	f108 0201 	add.w	r2, r8, #1
 8003c84:	3b01      	subs	r3, #1
 8003c86:	4631      	mov	r1, r6
 8003c88:	4628      	mov	r0, r5
 8003c8a:	47b8      	blx	r7
 8003c8c:	3001      	adds	r0, #1
 8003c8e:	d10e      	bne.n	8003cae <_printf_float+0x416>
 8003c90:	e65d      	b.n	800394e <_printf_float+0xb6>
 8003c92:	2301      	movs	r3, #1
 8003c94:	464a      	mov	r2, r9
 8003c96:	4631      	mov	r1, r6
 8003c98:	4628      	mov	r0, r5
 8003c9a:	47b8      	blx	r7
 8003c9c:	3001      	adds	r0, #1
 8003c9e:	f43f ae56 	beq.w	800394e <_printf_float+0xb6>
 8003ca2:	f108 0801 	add.w	r8, r8, #1
 8003ca6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	4543      	cmp	r3, r8
 8003cac:	dcf1      	bgt.n	8003c92 <_printf_float+0x3fa>
 8003cae:	4653      	mov	r3, sl
 8003cb0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003cb4:	e6e0      	b.n	8003a78 <_printf_float+0x1e0>
 8003cb6:	f04f 0800 	mov.w	r8, #0
 8003cba:	f104 091a 	add.w	r9, r4, #26
 8003cbe:	e7f2      	b.n	8003ca6 <_printf_float+0x40e>
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	4642      	mov	r2, r8
 8003cc4:	e7df      	b.n	8003c86 <_printf_float+0x3ee>
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	464a      	mov	r2, r9
 8003cca:	4631      	mov	r1, r6
 8003ccc:	4628      	mov	r0, r5
 8003cce:	47b8      	blx	r7
 8003cd0:	3001      	adds	r0, #1
 8003cd2:	f43f ae3c 	beq.w	800394e <_printf_float+0xb6>
 8003cd6:	f108 0801 	add.w	r8, r8, #1
 8003cda:	68e3      	ldr	r3, [r4, #12]
 8003cdc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003cde:	1a5b      	subs	r3, r3, r1
 8003ce0:	4543      	cmp	r3, r8
 8003ce2:	dcf0      	bgt.n	8003cc6 <_printf_float+0x42e>
 8003ce4:	e6fd      	b.n	8003ae2 <_printf_float+0x24a>
 8003ce6:	f04f 0800 	mov.w	r8, #0
 8003cea:	f104 0919 	add.w	r9, r4, #25
 8003cee:	e7f4      	b.n	8003cda <_printf_float+0x442>

08003cf0 <_printf_common>:
 8003cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cf4:	4616      	mov	r6, r2
 8003cf6:	4699      	mov	r9, r3
 8003cf8:	688a      	ldr	r2, [r1, #8]
 8003cfa:	690b      	ldr	r3, [r1, #16]
 8003cfc:	4607      	mov	r7, r0
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	bfb8      	it	lt
 8003d02:	4613      	movlt	r3, r2
 8003d04:	6033      	str	r3, [r6, #0]
 8003d06:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003d0a:	460c      	mov	r4, r1
 8003d0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003d10:	b10a      	cbz	r2, 8003d16 <_printf_common+0x26>
 8003d12:	3301      	adds	r3, #1
 8003d14:	6033      	str	r3, [r6, #0]
 8003d16:	6823      	ldr	r3, [r4, #0]
 8003d18:	0699      	lsls	r1, r3, #26
 8003d1a:	bf42      	ittt	mi
 8003d1c:	6833      	ldrmi	r3, [r6, #0]
 8003d1e:	3302      	addmi	r3, #2
 8003d20:	6033      	strmi	r3, [r6, #0]
 8003d22:	6825      	ldr	r5, [r4, #0]
 8003d24:	f015 0506 	ands.w	r5, r5, #6
 8003d28:	d106      	bne.n	8003d38 <_printf_common+0x48>
 8003d2a:	f104 0a19 	add.w	sl, r4, #25
 8003d2e:	68e3      	ldr	r3, [r4, #12]
 8003d30:	6832      	ldr	r2, [r6, #0]
 8003d32:	1a9b      	subs	r3, r3, r2
 8003d34:	42ab      	cmp	r3, r5
 8003d36:	dc28      	bgt.n	8003d8a <_printf_common+0x9a>
 8003d38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003d3c:	1e13      	subs	r3, r2, #0
 8003d3e:	6822      	ldr	r2, [r4, #0]
 8003d40:	bf18      	it	ne
 8003d42:	2301      	movne	r3, #1
 8003d44:	0692      	lsls	r2, r2, #26
 8003d46:	d42d      	bmi.n	8003da4 <_printf_common+0xb4>
 8003d48:	4649      	mov	r1, r9
 8003d4a:	4638      	mov	r0, r7
 8003d4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d50:	47c0      	blx	r8
 8003d52:	3001      	adds	r0, #1
 8003d54:	d020      	beq.n	8003d98 <_printf_common+0xa8>
 8003d56:	6823      	ldr	r3, [r4, #0]
 8003d58:	68e5      	ldr	r5, [r4, #12]
 8003d5a:	f003 0306 	and.w	r3, r3, #6
 8003d5e:	2b04      	cmp	r3, #4
 8003d60:	bf18      	it	ne
 8003d62:	2500      	movne	r5, #0
 8003d64:	6832      	ldr	r2, [r6, #0]
 8003d66:	f04f 0600 	mov.w	r6, #0
 8003d6a:	68a3      	ldr	r3, [r4, #8]
 8003d6c:	bf08      	it	eq
 8003d6e:	1aad      	subeq	r5, r5, r2
 8003d70:	6922      	ldr	r2, [r4, #16]
 8003d72:	bf08      	it	eq
 8003d74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	bfc4      	itt	gt
 8003d7c:	1a9b      	subgt	r3, r3, r2
 8003d7e:	18ed      	addgt	r5, r5, r3
 8003d80:	341a      	adds	r4, #26
 8003d82:	42b5      	cmp	r5, r6
 8003d84:	d11a      	bne.n	8003dbc <_printf_common+0xcc>
 8003d86:	2000      	movs	r0, #0
 8003d88:	e008      	b.n	8003d9c <_printf_common+0xac>
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	4652      	mov	r2, sl
 8003d8e:	4649      	mov	r1, r9
 8003d90:	4638      	mov	r0, r7
 8003d92:	47c0      	blx	r8
 8003d94:	3001      	adds	r0, #1
 8003d96:	d103      	bne.n	8003da0 <_printf_common+0xb0>
 8003d98:	f04f 30ff 	mov.w	r0, #4294967295
 8003d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003da0:	3501      	adds	r5, #1
 8003da2:	e7c4      	b.n	8003d2e <_printf_common+0x3e>
 8003da4:	2030      	movs	r0, #48	; 0x30
 8003da6:	18e1      	adds	r1, r4, r3
 8003da8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003dac:	1c5a      	adds	r2, r3, #1
 8003dae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003db2:	4422      	add	r2, r4
 8003db4:	3302      	adds	r3, #2
 8003db6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003dba:	e7c5      	b.n	8003d48 <_printf_common+0x58>
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	4622      	mov	r2, r4
 8003dc0:	4649      	mov	r1, r9
 8003dc2:	4638      	mov	r0, r7
 8003dc4:	47c0      	blx	r8
 8003dc6:	3001      	adds	r0, #1
 8003dc8:	d0e6      	beq.n	8003d98 <_printf_common+0xa8>
 8003dca:	3601      	adds	r6, #1
 8003dcc:	e7d9      	b.n	8003d82 <_printf_common+0x92>
	...

08003dd0 <_printf_i>:
 8003dd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003dd4:	460c      	mov	r4, r1
 8003dd6:	7e27      	ldrb	r7, [r4, #24]
 8003dd8:	4691      	mov	r9, r2
 8003dda:	2f78      	cmp	r7, #120	; 0x78
 8003ddc:	4680      	mov	r8, r0
 8003dde:	469a      	mov	sl, r3
 8003de0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003de2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003de6:	d807      	bhi.n	8003df8 <_printf_i+0x28>
 8003de8:	2f62      	cmp	r7, #98	; 0x62
 8003dea:	d80a      	bhi.n	8003e02 <_printf_i+0x32>
 8003dec:	2f00      	cmp	r7, #0
 8003dee:	f000 80d9 	beq.w	8003fa4 <_printf_i+0x1d4>
 8003df2:	2f58      	cmp	r7, #88	; 0x58
 8003df4:	f000 80a4 	beq.w	8003f40 <_printf_i+0x170>
 8003df8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003dfc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003e00:	e03a      	b.n	8003e78 <_printf_i+0xa8>
 8003e02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003e06:	2b15      	cmp	r3, #21
 8003e08:	d8f6      	bhi.n	8003df8 <_printf_i+0x28>
 8003e0a:	a001      	add	r0, pc, #4	; (adr r0, 8003e10 <_printf_i+0x40>)
 8003e0c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003e10:	08003e69 	.word	0x08003e69
 8003e14:	08003e7d 	.word	0x08003e7d
 8003e18:	08003df9 	.word	0x08003df9
 8003e1c:	08003df9 	.word	0x08003df9
 8003e20:	08003df9 	.word	0x08003df9
 8003e24:	08003df9 	.word	0x08003df9
 8003e28:	08003e7d 	.word	0x08003e7d
 8003e2c:	08003df9 	.word	0x08003df9
 8003e30:	08003df9 	.word	0x08003df9
 8003e34:	08003df9 	.word	0x08003df9
 8003e38:	08003df9 	.word	0x08003df9
 8003e3c:	08003f8b 	.word	0x08003f8b
 8003e40:	08003ead 	.word	0x08003ead
 8003e44:	08003f6d 	.word	0x08003f6d
 8003e48:	08003df9 	.word	0x08003df9
 8003e4c:	08003df9 	.word	0x08003df9
 8003e50:	08003fad 	.word	0x08003fad
 8003e54:	08003df9 	.word	0x08003df9
 8003e58:	08003ead 	.word	0x08003ead
 8003e5c:	08003df9 	.word	0x08003df9
 8003e60:	08003df9 	.word	0x08003df9
 8003e64:	08003f75 	.word	0x08003f75
 8003e68:	680b      	ldr	r3, [r1, #0]
 8003e6a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003e6e:	1d1a      	adds	r2, r3, #4
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	600a      	str	r2, [r1, #0]
 8003e74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e0a4      	b.n	8003fc6 <_printf_i+0x1f6>
 8003e7c:	6825      	ldr	r5, [r4, #0]
 8003e7e:	6808      	ldr	r0, [r1, #0]
 8003e80:	062e      	lsls	r6, r5, #24
 8003e82:	f100 0304 	add.w	r3, r0, #4
 8003e86:	d50a      	bpl.n	8003e9e <_printf_i+0xce>
 8003e88:	6805      	ldr	r5, [r0, #0]
 8003e8a:	600b      	str	r3, [r1, #0]
 8003e8c:	2d00      	cmp	r5, #0
 8003e8e:	da03      	bge.n	8003e98 <_printf_i+0xc8>
 8003e90:	232d      	movs	r3, #45	; 0x2d
 8003e92:	426d      	negs	r5, r5
 8003e94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e98:	230a      	movs	r3, #10
 8003e9a:	485e      	ldr	r0, [pc, #376]	; (8004014 <_printf_i+0x244>)
 8003e9c:	e019      	b.n	8003ed2 <_printf_i+0x102>
 8003e9e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003ea2:	6805      	ldr	r5, [r0, #0]
 8003ea4:	600b      	str	r3, [r1, #0]
 8003ea6:	bf18      	it	ne
 8003ea8:	b22d      	sxthne	r5, r5
 8003eaa:	e7ef      	b.n	8003e8c <_printf_i+0xbc>
 8003eac:	680b      	ldr	r3, [r1, #0]
 8003eae:	6825      	ldr	r5, [r4, #0]
 8003eb0:	1d18      	adds	r0, r3, #4
 8003eb2:	6008      	str	r0, [r1, #0]
 8003eb4:	0628      	lsls	r0, r5, #24
 8003eb6:	d501      	bpl.n	8003ebc <_printf_i+0xec>
 8003eb8:	681d      	ldr	r5, [r3, #0]
 8003eba:	e002      	b.n	8003ec2 <_printf_i+0xf2>
 8003ebc:	0669      	lsls	r1, r5, #25
 8003ebe:	d5fb      	bpl.n	8003eb8 <_printf_i+0xe8>
 8003ec0:	881d      	ldrh	r5, [r3, #0]
 8003ec2:	2f6f      	cmp	r7, #111	; 0x6f
 8003ec4:	bf0c      	ite	eq
 8003ec6:	2308      	moveq	r3, #8
 8003ec8:	230a      	movne	r3, #10
 8003eca:	4852      	ldr	r0, [pc, #328]	; (8004014 <_printf_i+0x244>)
 8003ecc:	2100      	movs	r1, #0
 8003ece:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003ed2:	6866      	ldr	r6, [r4, #4]
 8003ed4:	2e00      	cmp	r6, #0
 8003ed6:	bfa8      	it	ge
 8003ed8:	6821      	ldrge	r1, [r4, #0]
 8003eda:	60a6      	str	r6, [r4, #8]
 8003edc:	bfa4      	itt	ge
 8003ede:	f021 0104 	bicge.w	r1, r1, #4
 8003ee2:	6021      	strge	r1, [r4, #0]
 8003ee4:	b90d      	cbnz	r5, 8003eea <_printf_i+0x11a>
 8003ee6:	2e00      	cmp	r6, #0
 8003ee8:	d04d      	beq.n	8003f86 <_printf_i+0x1b6>
 8003eea:	4616      	mov	r6, r2
 8003eec:	fbb5 f1f3 	udiv	r1, r5, r3
 8003ef0:	fb03 5711 	mls	r7, r3, r1, r5
 8003ef4:	5dc7      	ldrb	r7, [r0, r7]
 8003ef6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003efa:	462f      	mov	r7, r5
 8003efc:	42bb      	cmp	r3, r7
 8003efe:	460d      	mov	r5, r1
 8003f00:	d9f4      	bls.n	8003eec <_printf_i+0x11c>
 8003f02:	2b08      	cmp	r3, #8
 8003f04:	d10b      	bne.n	8003f1e <_printf_i+0x14e>
 8003f06:	6823      	ldr	r3, [r4, #0]
 8003f08:	07df      	lsls	r7, r3, #31
 8003f0a:	d508      	bpl.n	8003f1e <_printf_i+0x14e>
 8003f0c:	6923      	ldr	r3, [r4, #16]
 8003f0e:	6861      	ldr	r1, [r4, #4]
 8003f10:	4299      	cmp	r1, r3
 8003f12:	bfde      	ittt	le
 8003f14:	2330      	movle	r3, #48	; 0x30
 8003f16:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003f1a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003f1e:	1b92      	subs	r2, r2, r6
 8003f20:	6122      	str	r2, [r4, #16]
 8003f22:	464b      	mov	r3, r9
 8003f24:	4621      	mov	r1, r4
 8003f26:	4640      	mov	r0, r8
 8003f28:	f8cd a000 	str.w	sl, [sp]
 8003f2c:	aa03      	add	r2, sp, #12
 8003f2e:	f7ff fedf 	bl	8003cf0 <_printf_common>
 8003f32:	3001      	adds	r0, #1
 8003f34:	d14c      	bne.n	8003fd0 <_printf_i+0x200>
 8003f36:	f04f 30ff 	mov.w	r0, #4294967295
 8003f3a:	b004      	add	sp, #16
 8003f3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f40:	4834      	ldr	r0, [pc, #208]	; (8004014 <_printf_i+0x244>)
 8003f42:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003f46:	680e      	ldr	r6, [r1, #0]
 8003f48:	6823      	ldr	r3, [r4, #0]
 8003f4a:	f856 5b04 	ldr.w	r5, [r6], #4
 8003f4e:	061f      	lsls	r7, r3, #24
 8003f50:	600e      	str	r6, [r1, #0]
 8003f52:	d514      	bpl.n	8003f7e <_printf_i+0x1ae>
 8003f54:	07d9      	lsls	r1, r3, #31
 8003f56:	bf44      	itt	mi
 8003f58:	f043 0320 	orrmi.w	r3, r3, #32
 8003f5c:	6023      	strmi	r3, [r4, #0]
 8003f5e:	b91d      	cbnz	r5, 8003f68 <_printf_i+0x198>
 8003f60:	6823      	ldr	r3, [r4, #0]
 8003f62:	f023 0320 	bic.w	r3, r3, #32
 8003f66:	6023      	str	r3, [r4, #0]
 8003f68:	2310      	movs	r3, #16
 8003f6a:	e7af      	b.n	8003ecc <_printf_i+0xfc>
 8003f6c:	6823      	ldr	r3, [r4, #0]
 8003f6e:	f043 0320 	orr.w	r3, r3, #32
 8003f72:	6023      	str	r3, [r4, #0]
 8003f74:	2378      	movs	r3, #120	; 0x78
 8003f76:	4828      	ldr	r0, [pc, #160]	; (8004018 <_printf_i+0x248>)
 8003f78:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003f7c:	e7e3      	b.n	8003f46 <_printf_i+0x176>
 8003f7e:	065e      	lsls	r6, r3, #25
 8003f80:	bf48      	it	mi
 8003f82:	b2ad      	uxthmi	r5, r5
 8003f84:	e7e6      	b.n	8003f54 <_printf_i+0x184>
 8003f86:	4616      	mov	r6, r2
 8003f88:	e7bb      	b.n	8003f02 <_printf_i+0x132>
 8003f8a:	680b      	ldr	r3, [r1, #0]
 8003f8c:	6826      	ldr	r6, [r4, #0]
 8003f8e:	1d1d      	adds	r5, r3, #4
 8003f90:	6960      	ldr	r0, [r4, #20]
 8003f92:	600d      	str	r5, [r1, #0]
 8003f94:	0635      	lsls	r5, r6, #24
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	d501      	bpl.n	8003f9e <_printf_i+0x1ce>
 8003f9a:	6018      	str	r0, [r3, #0]
 8003f9c:	e002      	b.n	8003fa4 <_printf_i+0x1d4>
 8003f9e:	0671      	lsls	r1, r6, #25
 8003fa0:	d5fb      	bpl.n	8003f9a <_printf_i+0x1ca>
 8003fa2:	8018      	strh	r0, [r3, #0]
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	4616      	mov	r6, r2
 8003fa8:	6123      	str	r3, [r4, #16]
 8003faa:	e7ba      	b.n	8003f22 <_printf_i+0x152>
 8003fac:	680b      	ldr	r3, [r1, #0]
 8003fae:	1d1a      	adds	r2, r3, #4
 8003fb0:	600a      	str	r2, [r1, #0]
 8003fb2:	681e      	ldr	r6, [r3, #0]
 8003fb4:	2100      	movs	r1, #0
 8003fb6:	4630      	mov	r0, r6
 8003fb8:	6862      	ldr	r2, [r4, #4]
 8003fba:	f000 fed7 	bl	8004d6c <memchr>
 8003fbe:	b108      	cbz	r0, 8003fc4 <_printf_i+0x1f4>
 8003fc0:	1b80      	subs	r0, r0, r6
 8003fc2:	6060      	str	r0, [r4, #4]
 8003fc4:	6863      	ldr	r3, [r4, #4]
 8003fc6:	6123      	str	r3, [r4, #16]
 8003fc8:	2300      	movs	r3, #0
 8003fca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fce:	e7a8      	b.n	8003f22 <_printf_i+0x152>
 8003fd0:	4632      	mov	r2, r6
 8003fd2:	4649      	mov	r1, r9
 8003fd4:	4640      	mov	r0, r8
 8003fd6:	6923      	ldr	r3, [r4, #16]
 8003fd8:	47d0      	blx	sl
 8003fda:	3001      	adds	r0, #1
 8003fdc:	d0ab      	beq.n	8003f36 <_printf_i+0x166>
 8003fde:	6823      	ldr	r3, [r4, #0]
 8003fe0:	079b      	lsls	r3, r3, #30
 8003fe2:	d413      	bmi.n	800400c <_printf_i+0x23c>
 8003fe4:	68e0      	ldr	r0, [r4, #12]
 8003fe6:	9b03      	ldr	r3, [sp, #12]
 8003fe8:	4298      	cmp	r0, r3
 8003fea:	bfb8      	it	lt
 8003fec:	4618      	movlt	r0, r3
 8003fee:	e7a4      	b.n	8003f3a <_printf_i+0x16a>
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	4632      	mov	r2, r6
 8003ff4:	4649      	mov	r1, r9
 8003ff6:	4640      	mov	r0, r8
 8003ff8:	47d0      	blx	sl
 8003ffa:	3001      	adds	r0, #1
 8003ffc:	d09b      	beq.n	8003f36 <_printf_i+0x166>
 8003ffe:	3501      	adds	r5, #1
 8004000:	68e3      	ldr	r3, [r4, #12]
 8004002:	9903      	ldr	r1, [sp, #12]
 8004004:	1a5b      	subs	r3, r3, r1
 8004006:	42ab      	cmp	r3, r5
 8004008:	dcf2      	bgt.n	8003ff0 <_printf_i+0x220>
 800400a:	e7eb      	b.n	8003fe4 <_printf_i+0x214>
 800400c:	2500      	movs	r5, #0
 800400e:	f104 0619 	add.w	r6, r4, #25
 8004012:	e7f5      	b.n	8004000 <_printf_i+0x230>
 8004014:	08007972 	.word	0x08007972
 8004018:	08007983 	.word	0x08007983

0800401c <siprintf>:
 800401c:	b40e      	push	{r1, r2, r3}
 800401e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004022:	b500      	push	{lr}
 8004024:	b09c      	sub	sp, #112	; 0x70
 8004026:	ab1d      	add	r3, sp, #116	; 0x74
 8004028:	9002      	str	r0, [sp, #8]
 800402a:	9006      	str	r0, [sp, #24]
 800402c:	9107      	str	r1, [sp, #28]
 800402e:	9104      	str	r1, [sp, #16]
 8004030:	4808      	ldr	r0, [pc, #32]	; (8004054 <siprintf+0x38>)
 8004032:	4909      	ldr	r1, [pc, #36]	; (8004058 <siprintf+0x3c>)
 8004034:	f853 2b04 	ldr.w	r2, [r3], #4
 8004038:	9105      	str	r1, [sp, #20]
 800403a:	6800      	ldr	r0, [r0, #0]
 800403c:	a902      	add	r1, sp, #8
 800403e:	9301      	str	r3, [sp, #4]
 8004040:	f001 fb42 	bl	80056c8 <_svfiprintf_r>
 8004044:	2200      	movs	r2, #0
 8004046:	9b02      	ldr	r3, [sp, #8]
 8004048:	701a      	strb	r2, [r3, #0]
 800404a:	b01c      	add	sp, #112	; 0x70
 800404c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004050:	b003      	add	sp, #12
 8004052:	4770      	bx	lr
 8004054:	2000000c 	.word	0x2000000c
 8004058:	ffff0208 	.word	0xffff0208

0800405c <quorem>:
 800405c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004060:	6903      	ldr	r3, [r0, #16]
 8004062:	690c      	ldr	r4, [r1, #16]
 8004064:	4607      	mov	r7, r0
 8004066:	42a3      	cmp	r3, r4
 8004068:	f2c0 8083 	blt.w	8004172 <quorem+0x116>
 800406c:	3c01      	subs	r4, #1
 800406e:	f100 0514 	add.w	r5, r0, #20
 8004072:	f101 0814 	add.w	r8, r1, #20
 8004076:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800407a:	9301      	str	r3, [sp, #4]
 800407c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004080:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004084:	3301      	adds	r3, #1
 8004086:	429a      	cmp	r2, r3
 8004088:	fbb2 f6f3 	udiv	r6, r2, r3
 800408c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004090:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004094:	d332      	bcc.n	80040fc <quorem+0xa0>
 8004096:	f04f 0e00 	mov.w	lr, #0
 800409a:	4640      	mov	r0, r8
 800409c:	46ac      	mov	ip, r5
 800409e:	46f2      	mov	sl, lr
 80040a0:	f850 2b04 	ldr.w	r2, [r0], #4
 80040a4:	b293      	uxth	r3, r2
 80040a6:	fb06 e303 	mla	r3, r6, r3, lr
 80040aa:	0c12      	lsrs	r2, r2, #16
 80040ac:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80040b0:	fb06 e202 	mla	r2, r6, r2, lr
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	ebaa 0303 	sub.w	r3, sl, r3
 80040ba:	f8dc a000 	ldr.w	sl, [ip]
 80040be:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80040c2:	fa1f fa8a 	uxth.w	sl, sl
 80040c6:	4453      	add	r3, sl
 80040c8:	fa1f fa82 	uxth.w	sl, r2
 80040cc:	f8dc 2000 	ldr.w	r2, [ip]
 80040d0:	4581      	cmp	r9, r0
 80040d2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80040d6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80040da:	b29b      	uxth	r3, r3
 80040dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80040e0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80040e4:	f84c 3b04 	str.w	r3, [ip], #4
 80040e8:	d2da      	bcs.n	80040a0 <quorem+0x44>
 80040ea:	f855 300b 	ldr.w	r3, [r5, fp]
 80040ee:	b92b      	cbnz	r3, 80040fc <quorem+0xa0>
 80040f0:	9b01      	ldr	r3, [sp, #4]
 80040f2:	3b04      	subs	r3, #4
 80040f4:	429d      	cmp	r5, r3
 80040f6:	461a      	mov	r2, r3
 80040f8:	d32f      	bcc.n	800415a <quorem+0xfe>
 80040fa:	613c      	str	r4, [r7, #16]
 80040fc:	4638      	mov	r0, r7
 80040fe:	f001 f8cb 	bl	8005298 <__mcmp>
 8004102:	2800      	cmp	r0, #0
 8004104:	db25      	blt.n	8004152 <quorem+0xf6>
 8004106:	4628      	mov	r0, r5
 8004108:	f04f 0c00 	mov.w	ip, #0
 800410c:	3601      	adds	r6, #1
 800410e:	f858 1b04 	ldr.w	r1, [r8], #4
 8004112:	f8d0 e000 	ldr.w	lr, [r0]
 8004116:	b28b      	uxth	r3, r1
 8004118:	ebac 0303 	sub.w	r3, ip, r3
 800411c:	fa1f f28e 	uxth.w	r2, lr
 8004120:	4413      	add	r3, r2
 8004122:	0c0a      	lsrs	r2, r1, #16
 8004124:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004128:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800412c:	b29b      	uxth	r3, r3
 800412e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004132:	45c1      	cmp	r9, r8
 8004134:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004138:	f840 3b04 	str.w	r3, [r0], #4
 800413c:	d2e7      	bcs.n	800410e <quorem+0xb2>
 800413e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004142:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004146:	b922      	cbnz	r2, 8004152 <quorem+0xf6>
 8004148:	3b04      	subs	r3, #4
 800414a:	429d      	cmp	r5, r3
 800414c:	461a      	mov	r2, r3
 800414e:	d30a      	bcc.n	8004166 <quorem+0x10a>
 8004150:	613c      	str	r4, [r7, #16]
 8004152:	4630      	mov	r0, r6
 8004154:	b003      	add	sp, #12
 8004156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800415a:	6812      	ldr	r2, [r2, #0]
 800415c:	3b04      	subs	r3, #4
 800415e:	2a00      	cmp	r2, #0
 8004160:	d1cb      	bne.n	80040fa <quorem+0x9e>
 8004162:	3c01      	subs	r4, #1
 8004164:	e7c6      	b.n	80040f4 <quorem+0x98>
 8004166:	6812      	ldr	r2, [r2, #0]
 8004168:	3b04      	subs	r3, #4
 800416a:	2a00      	cmp	r2, #0
 800416c:	d1f0      	bne.n	8004150 <quorem+0xf4>
 800416e:	3c01      	subs	r4, #1
 8004170:	e7eb      	b.n	800414a <quorem+0xee>
 8004172:	2000      	movs	r0, #0
 8004174:	e7ee      	b.n	8004154 <quorem+0xf8>
	...

08004178 <_dtoa_r>:
 8004178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800417c:	4616      	mov	r6, r2
 800417e:	461f      	mov	r7, r3
 8004180:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004182:	b099      	sub	sp, #100	; 0x64
 8004184:	4605      	mov	r5, r0
 8004186:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800418a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800418e:	b974      	cbnz	r4, 80041ae <_dtoa_r+0x36>
 8004190:	2010      	movs	r0, #16
 8004192:	f000 fde3 	bl	8004d5c <malloc>
 8004196:	4602      	mov	r2, r0
 8004198:	6268      	str	r0, [r5, #36]	; 0x24
 800419a:	b920      	cbnz	r0, 80041a6 <_dtoa_r+0x2e>
 800419c:	21ea      	movs	r1, #234	; 0xea
 800419e:	4bae      	ldr	r3, [pc, #696]	; (8004458 <_dtoa_r+0x2e0>)
 80041a0:	48ae      	ldr	r0, [pc, #696]	; (800445c <_dtoa_r+0x2e4>)
 80041a2:	f001 fba1 	bl	80058e8 <__assert_func>
 80041a6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80041aa:	6004      	str	r4, [r0, #0]
 80041ac:	60c4      	str	r4, [r0, #12]
 80041ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80041b0:	6819      	ldr	r1, [r3, #0]
 80041b2:	b151      	cbz	r1, 80041ca <_dtoa_r+0x52>
 80041b4:	685a      	ldr	r2, [r3, #4]
 80041b6:	2301      	movs	r3, #1
 80041b8:	4093      	lsls	r3, r2
 80041ba:	604a      	str	r2, [r1, #4]
 80041bc:	608b      	str	r3, [r1, #8]
 80041be:	4628      	mov	r0, r5
 80041c0:	f000 fe30 	bl	8004e24 <_Bfree>
 80041c4:	2200      	movs	r2, #0
 80041c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80041c8:	601a      	str	r2, [r3, #0]
 80041ca:	1e3b      	subs	r3, r7, #0
 80041cc:	bfaf      	iteee	ge
 80041ce:	2300      	movge	r3, #0
 80041d0:	2201      	movlt	r2, #1
 80041d2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80041d6:	9305      	strlt	r3, [sp, #20]
 80041d8:	bfa8      	it	ge
 80041da:	f8c8 3000 	strge.w	r3, [r8]
 80041de:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80041e2:	4b9f      	ldr	r3, [pc, #636]	; (8004460 <_dtoa_r+0x2e8>)
 80041e4:	bfb8      	it	lt
 80041e6:	f8c8 2000 	strlt.w	r2, [r8]
 80041ea:	ea33 0309 	bics.w	r3, r3, r9
 80041ee:	d119      	bne.n	8004224 <_dtoa_r+0xac>
 80041f0:	f242 730f 	movw	r3, #9999	; 0x270f
 80041f4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80041f6:	6013      	str	r3, [r2, #0]
 80041f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80041fc:	4333      	orrs	r3, r6
 80041fe:	f000 8580 	beq.w	8004d02 <_dtoa_r+0xb8a>
 8004202:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004204:	b953      	cbnz	r3, 800421c <_dtoa_r+0xa4>
 8004206:	4b97      	ldr	r3, [pc, #604]	; (8004464 <_dtoa_r+0x2ec>)
 8004208:	e022      	b.n	8004250 <_dtoa_r+0xd8>
 800420a:	4b97      	ldr	r3, [pc, #604]	; (8004468 <_dtoa_r+0x2f0>)
 800420c:	9308      	str	r3, [sp, #32]
 800420e:	3308      	adds	r3, #8
 8004210:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004212:	6013      	str	r3, [r2, #0]
 8004214:	9808      	ldr	r0, [sp, #32]
 8004216:	b019      	add	sp, #100	; 0x64
 8004218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800421c:	4b91      	ldr	r3, [pc, #580]	; (8004464 <_dtoa_r+0x2ec>)
 800421e:	9308      	str	r3, [sp, #32]
 8004220:	3303      	adds	r3, #3
 8004222:	e7f5      	b.n	8004210 <_dtoa_r+0x98>
 8004224:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004228:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800422c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004230:	2200      	movs	r2, #0
 8004232:	2300      	movs	r3, #0
 8004234:	f7fc fbb8 	bl	80009a8 <__aeabi_dcmpeq>
 8004238:	4680      	mov	r8, r0
 800423a:	b158      	cbz	r0, 8004254 <_dtoa_r+0xdc>
 800423c:	2301      	movs	r3, #1
 800423e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004240:	6013      	str	r3, [r2, #0]
 8004242:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004244:	2b00      	cmp	r3, #0
 8004246:	f000 8559 	beq.w	8004cfc <_dtoa_r+0xb84>
 800424a:	4888      	ldr	r0, [pc, #544]	; (800446c <_dtoa_r+0x2f4>)
 800424c:	6018      	str	r0, [r3, #0]
 800424e:	1e43      	subs	r3, r0, #1
 8004250:	9308      	str	r3, [sp, #32]
 8004252:	e7df      	b.n	8004214 <_dtoa_r+0x9c>
 8004254:	ab16      	add	r3, sp, #88	; 0x58
 8004256:	9301      	str	r3, [sp, #4]
 8004258:	ab17      	add	r3, sp, #92	; 0x5c
 800425a:	9300      	str	r3, [sp, #0]
 800425c:	4628      	mov	r0, r5
 800425e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004262:	f001 f8c5 	bl	80053f0 <__d2b>
 8004266:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800426a:	4682      	mov	sl, r0
 800426c:	2c00      	cmp	r4, #0
 800426e:	d07e      	beq.n	800436e <_dtoa_r+0x1f6>
 8004270:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004274:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004276:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800427a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800427e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004282:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004286:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800428a:	2200      	movs	r2, #0
 800428c:	4b78      	ldr	r3, [pc, #480]	; (8004470 <_dtoa_r+0x2f8>)
 800428e:	f7fb ff6b 	bl	8000168 <__aeabi_dsub>
 8004292:	a36b      	add	r3, pc, #428	; (adr r3, 8004440 <_dtoa_r+0x2c8>)
 8004294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004298:	f7fc f91e 	bl	80004d8 <__aeabi_dmul>
 800429c:	a36a      	add	r3, pc, #424	; (adr r3, 8004448 <_dtoa_r+0x2d0>)
 800429e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a2:	f7fb ff63 	bl	800016c <__adddf3>
 80042a6:	4606      	mov	r6, r0
 80042a8:	4620      	mov	r0, r4
 80042aa:	460f      	mov	r7, r1
 80042ac:	f7fc f8aa 	bl	8000404 <__aeabi_i2d>
 80042b0:	a367      	add	r3, pc, #412	; (adr r3, 8004450 <_dtoa_r+0x2d8>)
 80042b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b6:	f7fc f90f 	bl	80004d8 <__aeabi_dmul>
 80042ba:	4602      	mov	r2, r0
 80042bc:	460b      	mov	r3, r1
 80042be:	4630      	mov	r0, r6
 80042c0:	4639      	mov	r1, r7
 80042c2:	f7fb ff53 	bl	800016c <__adddf3>
 80042c6:	4606      	mov	r6, r0
 80042c8:	460f      	mov	r7, r1
 80042ca:	f7fc fbb5 	bl	8000a38 <__aeabi_d2iz>
 80042ce:	2200      	movs	r2, #0
 80042d0:	4681      	mov	r9, r0
 80042d2:	2300      	movs	r3, #0
 80042d4:	4630      	mov	r0, r6
 80042d6:	4639      	mov	r1, r7
 80042d8:	f7fc fb70 	bl	80009bc <__aeabi_dcmplt>
 80042dc:	b148      	cbz	r0, 80042f2 <_dtoa_r+0x17a>
 80042de:	4648      	mov	r0, r9
 80042e0:	f7fc f890 	bl	8000404 <__aeabi_i2d>
 80042e4:	4632      	mov	r2, r6
 80042e6:	463b      	mov	r3, r7
 80042e8:	f7fc fb5e 	bl	80009a8 <__aeabi_dcmpeq>
 80042ec:	b908      	cbnz	r0, 80042f2 <_dtoa_r+0x17a>
 80042ee:	f109 39ff 	add.w	r9, r9, #4294967295
 80042f2:	f1b9 0f16 	cmp.w	r9, #22
 80042f6:	d857      	bhi.n	80043a8 <_dtoa_r+0x230>
 80042f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80042fc:	4b5d      	ldr	r3, [pc, #372]	; (8004474 <_dtoa_r+0x2fc>)
 80042fe:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8004302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004306:	f7fc fb59 	bl	80009bc <__aeabi_dcmplt>
 800430a:	2800      	cmp	r0, #0
 800430c:	d04e      	beq.n	80043ac <_dtoa_r+0x234>
 800430e:	2300      	movs	r3, #0
 8004310:	f109 39ff 	add.w	r9, r9, #4294967295
 8004314:	930f      	str	r3, [sp, #60]	; 0x3c
 8004316:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004318:	1b1c      	subs	r4, r3, r4
 800431a:	1e63      	subs	r3, r4, #1
 800431c:	9309      	str	r3, [sp, #36]	; 0x24
 800431e:	bf49      	itett	mi
 8004320:	f1c4 0301 	rsbmi	r3, r4, #1
 8004324:	2300      	movpl	r3, #0
 8004326:	9306      	strmi	r3, [sp, #24]
 8004328:	2300      	movmi	r3, #0
 800432a:	bf54      	ite	pl
 800432c:	9306      	strpl	r3, [sp, #24]
 800432e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004330:	f1b9 0f00 	cmp.w	r9, #0
 8004334:	db3c      	blt.n	80043b0 <_dtoa_r+0x238>
 8004336:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004338:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800433c:	444b      	add	r3, r9
 800433e:	9309      	str	r3, [sp, #36]	; 0x24
 8004340:	2300      	movs	r3, #0
 8004342:	930a      	str	r3, [sp, #40]	; 0x28
 8004344:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004346:	2b09      	cmp	r3, #9
 8004348:	d86c      	bhi.n	8004424 <_dtoa_r+0x2ac>
 800434a:	2b05      	cmp	r3, #5
 800434c:	bfc4      	itt	gt
 800434e:	3b04      	subgt	r3, #4
 8004350:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004352:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004354:	bfc8      	it	gt
 8004356:	2400      	movgt	r4, #0
 8004358:	f1a3 0302 	sub.w	r3, r3, #2
 800435c:	bfd8      	it	le
 800435e:	2401      	movle	r4, #1
 8004360:	2b03      	cmp	r3, #3
 8004362:	f200 808b 	bhi.w	800447c <_dtoa_r+0x304>
 8004366:	e8df f003 	tbb	[pc, r3]
 800436a:	4f2d      	.short	0x4f2d
 800436c:	5b4d      	.short	0x5b4d
 800436e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004372:	441c      	add	r4, r3
 8004374:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004378:	2b20      	cmp	r3, #32
 800437a:	bfc3      	ittte	gt
 800437c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004380:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8004384:	fa09 f303 	lslgt.w	r3, r9, r3
 8004388:	f1c3 0320 	rsble	r3, r3, #32
 800438c:	bfc6      	itte	gt
 800438e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004392:	4318      	orrgt	r0, r3
 8004394:	fa06 f003 	lslle.w	r0, r6, r3
 8004398:	f7fc f824 	bl	80003e4 <__aeabi_ui2d>
 800439c:	2301      	movs	r3, #1
 800439e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80043a2:	3c01      	subs	r4, #1
 80043a4:	9313      	str	r3, [sp, #76]	; 0x4c
 80043a6:	e770      	b.n	800428a <_dtoa_r+0x112>
 80043a8:	2301      	movs	r3, #1
 80043aa:	e7b3      	b.n	8004314 <_dtoa_r+0x19c>
 80043ac:	900f      	str	r0, [sp, #60]	; 0x3c
 80043ae:	e7b2      	b.n	8004316 <_dtoa_r+0x19e>
 80043b0:	9b06      	ldr	r3, [sp, #24]
 80043b2:	eba3 0309 	sub.w	r3, r3, r9
 80043b6:	9306      	str	r3, [sp, #24]
 80043b8:	f1c9 0300 	rsb	r3, r9, #0
 80043bc:	930a      	str	r3, [sp, #40]	; 0x28
 80043be:	2300      	movs	r3, #0
 80043c0:	930e      	str	r3, [sp, #56]	; 0x38
 80043c2:	e7bf      	b.n	8004344 <_dtoa_r+0x1cc>
 80043c4:	2300      	movs	r3, #0
 80043c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80043c8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	dc59      	bgt.n	8004482 <_dtoa_r+0x30a>
 80043ce:	f04f 0b01 	mov.w	fp, #1
 80043d2:	465b      	mov	r3, fp
 80043d4:	f8cd b008 	str.w	fp, [sp, #8]
 80043d8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80043dc:	2200      	movs	r2, #0
 80043de:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80043e0:	6042      	str	r2, [r0, #4]
 80043e2:	2204      	movs	r2, #4
 80043e4:	f102 0614 	add.w	r6, r2, #20
 80043e8:	429e      	cmp	r6, r3
 80043ea:	6841      	ldr	r1, [r0, #4]
 80043ec:	d94f      	bls.n	800448e <_dtoa_r+0x316>
 80043ee:	4628      	mov	r0, r5
 80043f0:	f000 fcd8 	bl	8004da4 <_Balloc>
 80043f4:	9008      	str	r0, [sp, #32]
 80043f6:	2800      	cmp	r0, #0
 80043f8:	d14d      	bne.n	8004496 <_dtoa_r+0x31e>
 80043fa:	4602      	mov	r2, r0
 80043fc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004400:	4b1d      	ldr	r3, [pc, #116]	; (8004478 <_dtoa_r+0x300>)
 8004402:	e6cd      	b.n	80041a0 <_dtoa_r+0x28>
 8004404:	2301      	movs	r3, #1
 8004406:	e7de      	b.n	80043c6 <_dtoa_r+0x24e>
 8004408:	2300      	movs	r3, #0
 800440a:	930b      	str	r3, [sp, #44]	; 0x2c
 800440c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800440e:	eb09 0b03 	add.w	fp, r9, r3
 8004412:	f10b 0301 	add.w	r3, fp, #1
 8004416:	2b01      	cmp	r3, #1
 8004418:	9302      	str	r3, [sp, #8]
 800441a:	bfb8      	it	lt
 800441c:	2301      	movlt	r3, #1
 800441e:	e7dd      	b.n	80043dc <_dtoa_r+0x264>
 8004420:	2301      	movs	r3, #1
 8004422:	e7f2      	b.n	800440a <_dtoa_r+0x292>
 8004424:	2401      	movs	r4, #1
 8004426:	2300      	movs	r3, #0
 8004428:	940b      	str	r4, [sp, #44]	; 0x2c
 800442a:	9322      	str	r3, [sp, #136]	; 0x88
 800442c:	f04f 3bff 	mov.w	fp, #4294967295
 8004430:	2200      	movs	r2, #0
 8004432:	2312      	movs	r3, #18
 8004434:	f8cd b008 	str.w	fp, [sp, #8]
 8004438:	9223      	str	r2, [sp, #140]	; 0x8c
 800443a:	e7cf      	b.n	80043dc <_dtoa_r+0x264>
 800443c:	f3af 8000 	nop.w
 8004440:	636f4361 	.word	0x636f4361
 8004444:	3fd287a7 	.word	0x3fd287a7
 8004448:	8b60c8b3 	.word	0x8b60c8b3
 800444c:	3fc68a28 	.word	0x3fc68a28
 8004450:	509f79fb 	.word	0x509f79fb
 8004454:	3fd34413 	.word	0x3fd34413
 8004458:	080079a1 	.word	0x080079a1
 800445c:	080079b8 	.word	0x080079b8
 8004460:	7ff00000 	.word	0x7ff00000
 8004464:	0800799d 	.word	0x0800799d
 8004468:	08007994 	.word	0x08007994
 800446c:	08007971 	.word	0x08007971
 8004470:	3ff80000 	.word	0x3ff80000
 8004474:	08007ab0 	.word	0x08007ab0
 8004478:	08007a17 	.word	0x08007a17
 800447c:	2301      	movs	r3, #1
 800447e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004480:	e7d4      	b.n	800442c <_dtoa_r+0x2b4>
 8004482:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8004486:	465b      	mov	r3, fp
 8004488:	f8cd b008 	str.w	fp, [sp, #8]
 800448c:	e7a6      	b.n	80043dc <_dtoa_r+0x264>
 800448e:	3101      	adds	r1, #1
 8004490:	6041      	str	r1, [r0, #4]
 8004492:	0052      	lsls	r2, r2, #1
 8004494:	e7a6      	b.n	80043e4 <_dtoa_r+0x26c>
 8004496:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004498:	9a08      	ldr	r2, [sp, #32]
 800449a:	601a      	str	r2, [r3, #0]
 800449c:	9b02      	ldr	r3, [sp, #8]
 800449e:	2b0e      	cmp	r3, #14
 80044a0:	f200 80a8 	bhi.w	80045f4 <_dtoa_r+0x47c>
 80044a4:	2c00      	cmp	r4, #0
 80044a6:	f000 80a5 	beq.w	80045f4 <_dtoa_r+0x47c>
 80044aa:	f1b9 0f00 	cmp.w	r9, #0
 80044ae:	dd34      	ble.n	800451a <_dtoa_r+0x3a2>
 80044b0:	4a9a      	ldr	r2, [pc, #616]	; (800471c <_dtoa_r+0x5a4>)
 80044b2:	f009 030f 	and.w	r3, r9, #15
 80044b6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80044ba:	f419 7f80 	tst.w	r9, #256	; 0x100
 80044be:	e9d3 3400 	ldrd	r3, r4, [r3]
 80044c2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80044c6:	ea4f 1429 	mov.w	r4, r9, asr #4
 80044ca:	d016      	beq.n	80044fa <_dtoa_r+0x382>
 80044cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80044d0:	4b93      	ldr	r3, [pc, #588]	; (8004720 <_dtoa_r+0x5a8>)
 80044d2:	2703      	movs	r7, #3
 80044d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80044d8:	f7fc f928 	bl	800072c <__aeabi_ddiv>
 80044dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80044e0:	f004 040f 	and.w	r4, r4, #15
 80044e4:	4e8e      	ldr	r6, [pc, #568]	; (8004720 <_dtoa_r+0x5a8>)
 80044e6:	b954      	cbnz	r4, 80044fe <_dtoa_r+0x386>
 80044e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80044ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80044f0:	f7fc f91c 	bl	800072c <__aeabi_ddiv>
 80044f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80044f8:	e029      	b.n	800454e <_dtoa_r+0x3d6>
 80044fa:	2702      	movs	r7, #2
 80044fc:	e7f2      	b.n	80044e4 <_dtoa_r+0x36c>
 80044fe:	07e1      	lsls	r1, r4, #31
 8004500:	d508      	bpl.n	8004514 <_dtoa_r+0x39c>
 8004502:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004506:	e9d6 2300 	ldrd	r2, r3, [r6]
 800450a:	f7fb ffe5 	bl	80004d8 <__aeabi_dmul>
 800450e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004512:	3701      	adds	r7, #1
 8004514:	1064      	asrs	r4, r4, #1
 8004516:	3608      	adds	r6, #8
 8004518:	e7e5      	b.n	80044e6 <_dtoa_r+0x36e>
 800451a:	f000 80a5 	beq.w	8004668 <_dtoa_r+0x4f0>
 800451e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004522:	f1c9 0400 	rsb	r4, r9, #0
 8004526:	4b7d      	ldr	r3, [pc, #500]	; (800471c <_dtoa_r+0x5a4>)
 8004528:	f004 020f 	and.w	r2, r4, #15
 800452c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004534:	f7fb ffd0 	bl	80004d8 <__aeabi_dmul>
 8004538:	2702      	movs	r7, #2
 800453a:	2300      	movs	r3, #0
 800453c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004540:	4e77      	ldr	r6, [pc, #476]	; (8004720 <_dtoa_r+0x5a8>)
 8004542:	1124      	asrs	r4, r4, #4
 8004544:	2c00      	cmp	r4, #0
 8004546:	f040 8084 	bne.w	8004652 <_dtoa_r+0x4da>
 800454a:	2b00      	cmp	r3, #0
 800454c:	d1d2      	bne.n	80044f4 <_dtoa_r+0x37c>
 800454e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004550:	2b00      	cmp	r3, #0
 8004552:	f000 808b 	beq.w	800466c <_dtoa_r+0x4f4>
 8004556:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800455a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800455e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004562:	2200      	movs	r2, #0
 8004564:	4b6f      	ldr	r3, [pc, #444]	; (8004724 <_dtoa_r+0x5ac>)
 8004566:	f7fc fa29 	bl	80009bc <__aeabi_dcmplt>
 800456a:	2800      	cmp	r0, #0
 800456c:	d07e      	beq.n	800466c <_dtoa_r+0x4f4>
 800456e:	9b02      	ldr	r3, [sp, #8]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d07b      	beq.n	800466c <_dtoa_r+0x4f4>
 8004574:	f1bb 0f00 	cmp.w	fp, #0
 8004578:	dd38      	ble.n	80045ec <_dtoa_r+0x474>
 800457a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800457e:	2200      	movs	r2, #0
 8004580:	4b69      	ldr	r3, [pc, #420]	; (8004728 <_dtoa_r+0x5b0>)
 8004582:	f7fb ffa9 	bl	80004d8 <__aeabi_dmul>
 8004586:	465c      	mov	r4, fp
 8004588:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800458c:	f109 38ff 	add.w	r8, r9, #4294967295
 8004590:	3701      	adds	r7, #1
 8004592:	4638      	mov	r0, r7
 8004594:	f7fb ff36 	bl	8000404 <__aeabi_i2d>
 8004598:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800459c:	f7fb ff9c 	bl	80004d8 <__aeabi_dmul>
 80045a0:	2200      	movs	r2, #0
 80045a2:	4b62      	ldr	r3, [pc, #392]	; (800472c <_dtoa_r+0x5b4>)
 80045a4:	f7fb fde2 	bl	800016c <__adddf3>
 80045a8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80045ac:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80045b0:	9611      	str	r6, [sp, #68]	; 0x44
 80045b2:	2c00      	cmp	r4, #0
 80045b4:	d15d      	bne.n	8004672 <_dtoa_r+0x4fa>
 80045b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80045ba:	2200      	movs	r2, #0
 80045bc:	4b5c      	ldr	r3, [pc, #368]	; (8004730 <_dtoa_r+0x5b8>)
 80045be:	f7fb fdd3 	bl	8000168 <__aeabi_dsub>
 80045c2:	4602      	mov	r2, r0
 80045c4:	460b      	mov	r3, r1
 80045c6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80045ca:	4633      	mov	r3, r6
 80045cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80045ce:	f7fc fa13 	bl	80009f8 <__aeabi_dcmpgt>
 80045d2:	2800      	cmp	r0, #0
 80045d4:	f040 829e 	bne.w	8004b14 <_dtoa_r+0x99c>
 80045d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80045dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80045de:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80045e2:	f7fc f9eb 	bl	80009bc <__aeabi_dcmplt>
 80045e6:	2800      	cmp	r0, #0
 80045e8:	f040 8292 	bne.w	8004b10 <_dtoa_r+0x998>
 80045ec:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80045f0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80045f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	f2c0 8153 	blt.w	80048a2 <_dtoa_r+0x72a>
 80045fc:	f1b9 0f0e 	cmp.w	r9, #14
 8004600:	f300 814f 	bgt.w	80048a2 <_dtoa_r+0x72a>
 8004604:	4b45      	ldr	r3, [pc, #276]	; (800471c <_dtoa_r+0x5a4>)
 8004606:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800460a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800460e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004612:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004614:	2b00      	cmp	r3, #0
 8004616:	f280 80db 	bge.w	80047d0 <_dtoa_r+0x658>
 800461a:	9b02      	ldr	r3, [sp, #8]
 800461c:	2b00      	cmp	r3, #0
 800461e:	f300 80d7 	bgt.w	80047d0 <_dtoa_r+0x658>
 8004622:	f040 8274 	bne.w	8004b0e <_dtoa_r+0x996>
 8004626:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800462a:	2200      	movs	r2, #0
 800462c:	4b40      	ldr	r3, [pc, #256]	; (8004730 <_dtoa_r+0x5b8>)
 800462e:	f7fb ff53 	bl	80004d8 <__aeabi_dmul>
 8004632:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004636:	f7fc f9d5 	bl	80009e4 <__aeabi_dcmpge>
 800463a:	9c02      	ldr	r4, [sp, #8]
 800463c:	4626      	mov	r6, r4
 800463e:	2800      	cmp	r0, #0
 8004640:	f040 824a 	bne.w	8004ad8 <_dtoa_r+0x960>
 8004644:	2331      	movs	r3, #49	; 0x31
 8004646:	9f08      	ldr	r7, [sp, #32]
 8004648:	f109 0901 	add.w	r9, r9, #1
 800464c:	f807 3b01 	strb.w	r3, [r7], #1
 8004650:	e246      	b.n	8004ae0 <_dtoa_r+0x968>
 8004652:	07e2      	lsls	r2, r4, #31
 8004654:	d505      	bpl.n	8004662 <_dtoa_r+0x4ea>
 8004656:	e9d6 2300 	ldrd	r2, r3, [r6]
 800465a:	f7fb ff3d 	bl	80004d8 <__aeabi_dmul>
 800465e:	2301      	movs	r3, #1
 8004660:	3701      	adds	r7, #1
 8004662:	1064      	asrs	r4, r4, #1
 8004664:	3608      	adds	r6, #8
 8004666:	e76d      	b.n	8004544 <_dtoa_r+0x3cc>
 8004668:	2702      	movs	r7, #2
 800466a:	e770      	b.n	800454e <_dtoa_r+0x3d6>
 800466c:	46c8      	mov	r8, r9
 800466e:	9c02      	ldr	r4, [sp, #8]
 8004670:	e78f      	b.n	8004592 <_dtoa_r+0x41a>
 8004672:	9908      	ldr	r1, [sp, #32]
 8004674:	4b29      	ldr	r3, [pc, #164]	; (800471c <_dtoa_r+0x5a4>)
 8004676:	4421      	add	r1, r4
 8004678:	9112      	str	r1, [sp, #72]	; 0x48
 800467a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800467c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004680:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004684:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004688:	2900      	cmp	r1, #0
 800468a:	d055      	beq.n	8004738 <_dtoa_r+0x5c0>
 800468c:	2000      	movs	r0, #0
 800468e:	4929      	ldr	r1, [pc, #164]	; (8004734 <_dtoa_r+0x5bc>)
 8004690:	f7fc f84c 	bl	800072c <__aeabi_ddiv>
 8004694:	463b      	mov	r3, r7
 8004696:	4632      	mov	r2, r6
 8004698:	f7fb fd66 	bl	8000168 <__aeabi_dsub>
 800469c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80046a0:	9f08      	ldr	r7, [sp, #32]
 80046a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80046a6:	f7fc f9c7 	bl	8000a38 <__aeabi_d2iz>
 80046aa:	4604      	mov	r4, r0
 80046ac:	f7fb feaa 	bl	8000404 <__aeabi_i2d>
 80046b0:	4602      	mov	r2, r0
 80046b2:	460b      	mov	r3, r1
 80046b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80046b8:	f7fb fd56 	bl	8000168 <__aeabi_dsub>
 80046bc:	4602      	mov	r2, r0
 80046be:	460b      	mov	r3, r1
 80046c0:	3430      	adds	r4, #48	; 0x30
 80046c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80046c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80046ca:	f807 4b01 	strb.w	r4, [r7], #1
 80046ce:	f7fc f975 	bl	80009bc <__aeabi_dcmplt>
 80046d2:	2800      	cmp	r0, #0
 80046d4:	d174      	bne.n	80047c0 <_dtoa_r+0x648>
 80046d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80046da:	2000      	movs	r0, #0
 80046dc:	4911      	ldr	r1, [pc, #68]	; (8004724 <_dtoa_r+0x5ac>)
 80046de:	f7fb fd43 	bl	8000168 <__aeabi_dsub>
 80046e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80046e6:	f7fc f969 	bl	80009bc <__aeabi_dcmplt>
 80046ea:	2800      	cmp	r0, #0
 80046ec:	f040 80b6 	bne.w	800485c <_dtoa_r+0x6e4>
 80046f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80046f2:	429f      	cmp	r7, r3
 80046f4:	f43f af7a 	beq.w	80045ec <_dtoa_r+0x474>
 80046f8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80046fc:	2200      	movs	r2, #0
 80046fe:	4b0a      	ldr	r3, [pc, #40]	; (8004728 <_dtoa_r+0x5b0>)
 8004700:	f7fb feea 	bl	80004d8 <__aeabi_dmul>
 8004704:	2200      	movs	r2, #0
 8004706:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800470a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800470e:	4b06      	ldr	r3, [pc, #24]	; (8004728 <_dtoa_r+0x5b0>)
 8004710:	f7fb fee2 	bl	80004d8 <__aeabi_dmul>
 8004714:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004718:	e7c3      	b.n	80046a2 <_dtoa_r+0x52a>
 800471a:	bf00      	nop
 800471c:	08007ab0 	.word	0x08007ab0
 8004720:	08007a88 	.word	0x08007a88
 8004724:	3ff00000 	.word	0x3ff00000
 8004728:	40240000 	.word	0x40240000
 800472c:	401c0000 	.word	0x401c0000
 8004730:	40140000 	.word	0x40140000
 8004734:	3fe00000 	.word	0x3fe00000
 8004738:	4630      	mov	r0, r6
 800473a:	4639      	mov	r1, r7
 800473c:	f7fb fecc 	bl	80004d8 <__aeabi_dmul>
 8004740:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004742:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004746:	9c08      	ldr	r4, [sp, #32]
 8004748:	9314      	str	r3, [sp, #80]	; 0x50
 800474a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800474e:	f7fc f973 	bl	8000a38 <__aeabi_d2iz>
 8004752:	9015      	str	r0, [sp, #84]	; 0x54
 8004754:	f7fb fe56 	bl	8000404 <__aeabi_i2d>
 8004758:	4602      	mov	r2, r0
 800475a:	460b      	mov	r3, r1
 800475c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004760:	f7fb fd02 	bl	8000168 <__aeabi_dsub>
 8004764:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004766:	4606      	mov	r6, r0
 8004768:	3330      	adds	r3, #48	; 0x30
 800476a:	f804 3b01 	strb.w	r3, [r4], #1
 800476e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004770:	460f      	mov	r7, r1
 8004772:	429c      	cmp	r4, r3
 8004774:	f04f 0200 	mov.w	r2, #0
 8004778:	d124      	bne.n	80047c4 <_dtoa_r+0x64c>
 800477a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800477e:	4bb3      	ldr	r3, [pc, #716]	; (8004a4c <_dtoa_r+0x8d4>)
 8004780:	f7fb fcf4 	bl	800016c <__adddf3>
 8004784:	4602      	mov	r2, r0
 8004786:	460b      	mov	r3, r1
 8004788:	4630      	mov	r0, r6
 800478a:	4639      	mov	r1, r7
 800478c:	f7fc f934 	bl	80009f8 <__aeabi_dcmpgt>
 8004790:	2800      	cmp	r0, #0
 8004792:	d162      	bne.n	800485a <_dtoa_r+0x6e2>
 8004794:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004798:	2000      	movs	r0, #0
 800479a:	49ac      	ldr	r1, [pc, #688]	; (8004a4c <_dtoa_r+0x8d4>)
 800479c:	f7fb fce4 	bl	8000168 <__aeabi_dsub>
 80047a0:	4602      	mov	r2, r0
 80047a2:	460b      	mov	r3, r1
 80047a4:	4630      	mov	r0, r6
 80047a6:	4639      	mov	r1, r7
 80047a8:	f7fc f908 	bl	80009bc <__aeabi_dcmplt>
 80047ac:	2800      	cmp	r0, #0
 80047ae:	f43f af1d 	beq.w	80045ec <_dtoa_r+0x474>
 80047b2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80047b4:	1e7b      	subs	r3, r7, #1
 80047b6:	9314      	str	r3, [sp, #80]	; 0x50
 80047b8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80047bc:	2b30      	cmp	r3, #48	; 0x30
 80047be:	d0f8      	beq.n	80047b2 <_dtoa_r+0x63a>
 80047c0:	46c1      	mov	r9, r8
 80047c2:	e03a      	b.n	800483a <_dtoa_r+0x6c2>
 80047c4:	4ba2      	ldr	r3, [pc, #648]	; (8004a50 <_dtoa_r+0x8d8>)
 80047c6:	f7fb fe87 	bl	80004d8 <__aeabi_dmul>
 80047ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80047ce:	e7bc      	b.n	800474a <_dtoa_r+0x5d2>
 80047d0:	9f08      	ldr	r7, [sp, #32]
 80047d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80047d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80047da:	f7fb ffa7 	bl	800072c <__aeabi_ddiv>
 80047de:	f7fc f92b 	bl	8000a38 <__aeabi_d2iz>
 80047e2:	4604      	mov	r4, r0
 80047e4:	f7fb fe0e 	bl	8000404 <__aeabi_i2d>
 80047e8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80047ec:	f7fb fe74 	bl	80004d8 <__aeabi_dmul>
 80047f0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80047f4:	460b      	mov	r3, r1
 80047f6:	4602      	mov	r2, r0
 80047f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80047fc:	f7fb fcb4 	bl	8000168 <__aeabi_dsub>
 8004800:	f807 6b01 	strb.w	r6, [r7], #1
 8004804:	9e08      	ldr	r6, [sp, #32]
 8004806:	9b02      	ldr	r3, [sp, #8]
 8004808:	1bbe      	subs	r6, r7, r6
 800480a:	42b3      	cmp	r3, r6
 800480c:	d13a      	bne.n	8004884 <_dtoa_r+0x70c>
 800480e:	4602      	mov	r2, r0
 8004810:	460b      	mov	r3, r1
 8004812:	f7fb fcab 	bl	800016c <__adddf3>
 8004816:	4602      	mov	r2, r0
 8004818:	460b      	mov	r3, r1
 800481a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800481e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004822:	f7fc f8e9 	bl	80009f8 <__aeabi_dcmpgt>
 8004826:	bb58      	cbnz	r0, 8004880 <_dtoa_r+0x708>
 8004828:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800482c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004830:	f7fc f8ba 	bl	80009a8 <__aeabi_dcmpeq>
 8004834:	b108      	cbz	r0, 800483a <_dtoa_r+0x6c2>
 8004836:	07e1      	lsls	r1, r4, #31
 8004838:	d422      	bmi.n	8004880 <_dtoa_r+0x708>
 800483a:	4628      	mov	r0, r5
 800483c:	4651      	mov	r1, sl
 800483e:	f000 faf1 	bl	8004e24 <_Bfree>
 8004842:	2300      	movs	r3, #0
 8004844:	703b      	strb	r3, [r7, #0]
 8004846:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004848:	f109 0001 	add.w	r0, r9, #1
 800484c:	6018      	str	r0, [r3, #0]
 800484e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004850:	2b00      	cmp	r3, #0
 8004852:	f43f acdf 	beq.w	8004214 <_dtoa_r+0x9c>
 8004856:	601f      	str	r7, [r3, #0]
 8004858:	e4dc      	b.n	8004214 <_dtoa_r+0x9c>
 800485a:	4627      	mov	r7, r4
 800485c:	463b      	mov	r3, r7
 800485e:	461f      	mov	r7, r3
 8004860:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004864:	2a39      	cmp	r2, #57	; 0x39
 8004866:	d107      	bne.n	8004878 <_dtoa_r+0x700>
 8004868:	9a08      	ldr	r2, [sp, #32]
 800486a:	429a      	cmp	r2, r3
 800486c:	d1f7      	bne.n	800485e <_dtoa_r+0x6e6>
 800486e:	2230      	movs	r2, #48	; 0x30
 8004870:	9908      	ldr	r1, [sp, #32]
 8004872:	f108 0801 	add.w	r8, r8, #1
 8004876:	700a      	strb	r2, [r1, #0]
 8004878:	781a      	ldrb	r2, [r3, #0]
 800487a:	3201      	adds	r2, #1
 800487c:	701a      	strb	r2, [r3, #0]
 800487e:	e79f      	b.n	80047c0 <_dtoa_r+0x648>
 8004880:	46c8      	mov	r8, r9
 8004882:	e7eb      	b.n	800485c <_dtoa_r+0x6e4>
 8004884:	2200      	movs	r2, #0
 8004886:	4b72      	ldr	r3, [pc, #456]	; (8004a50 <_dtoa_r+0x8d8>)
 8004888:	f7fb fe26 	bl	80004d8 <__aeabi_dmul>
 800488c:	4602      	mov	r2, r0
 800488e:	460b      	mov	r3, r1
 8004890:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004894:	2200      	movs	r2, #0
 8004896:	2300      	movs	r3, #0
 8004898:	f7fc f886 	bl	80009a8 <__aeabi_dcmpeq>
 800489c:	2800      	cmp	r0, #0
 800489e:	d098      	beq.n	80047d2 <_dtoa_r+0x65a>
 80048a0:	e7cb      	b.n	800483a <_dtoa_r+0x6c2>
 80048a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80048a4:	2a00      	cmp	r2, #0
 80048a6:	f000 80cd 	beq.w	8004a44 <_dtoa_r+0x8cc>
 80048aa:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80048ac:	2a01      	cmp	r2, #1
 80048ae:	f300 80af 	bgt.w	8004a10 <_dtoa_r+0x898>
 80048b2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80048b4:	2a00      	cmp	r2, #0
 80048b6:	f000 80a7 	beq.w	8004a08 <_dtoa_r+0x890>
 80048ba:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80048be:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80048c0:	9f06      	ldr	r7, [sp, #24]
 80048c2:	9a06      	ldr	r2, [sp, #24]
 80048c4:	2101      	movs	r1, #1
 80048c6:	441a      	add	r2, r3
 80048c8:	9206      	str	r2, [sp, #24]
 80048ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80048cc:	4628      	mov	r0, r5
 80048ce:	441a      	add	r2, r3
 80048d0:	9209      	str	r2, [sp, #36]	; 0x24
 80048d2:	f000 fb61 	bl	8004f98 <__i2b>
 80048d6:	4606      	mov	r6, r0
 80048d8:	2f00      	cmp	r7, #0
 80048da:	dd0c      	ble.n	80048f6 <_dtoa_r+0x77e>
 80048dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048de:	2b00      	cmp	r3, #0
 80048e0:	dd09      	ble.n	80048f6 <_dtoa_r+0x77e>
 80048e2:	42bb      	cmp	r3, r7
 80048e4:	bfa8      	it	ge
 80048e6:	463b      	movge	r3, r7
 80048e8:	9a06      	ldr	r2, [sp, #24]
 80048ea:	1aff      	subs	r7, r7, r3
 80048ec:	1ad2      	subs	r2, r2, r3
 80048ee:	9206      	str	r2, [sp, #24]
 80048f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	9309      	str	r3, [sp, #36]	; 0x24
 80048f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048f8:	b1f3      	cbz	r3, 8004938 <_dtoa_r+0x7c0>
 80048fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	f000 80a9 	beq.w	8004a54 <_dtoa_r+0x8dc>
 8004902:	2c00      	cmp	r4, #0
 8004904:	dd10      	ble.n	8004928 <_dtoa_r+0x7b0>
 8004906:	4631      	mov	r1, r6
 8004908:	4622      	mov	r2, r4
 800490a:	4628      	mov	r0, r5
 800490c:	f000 fbfe 	bl	800510c <__pow5mult>
 8004910:	4652      	mov	r2, sl
 8004912:	4601      	mov	r1, r0
 8004914:	4606      	mov	r6, r0
 8004916:	4628      	mov	r0, r5
 8004918:	f000 fb54 	bl	8004fc4 <__multiply>
 800491c:	4680      	mov	r8, r0
 800491e:	4651      	mov	r1, sl
 8004920:	4628      	mov	r0, r5
 8004922:	f000 fa7f 	bl	8004e24 <_Bfree>
 8004926:	46c2      	mov	sl, r8
 8004928:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800492a:	1b1a      	subs	r2, r3, r4
 800492c:	d004      	beq.n	8004938 <_dtoa_r+0x7c0>
 800492e:	4651      	mov	r1, sl
 8004930:	4628      	mov	r0, r5
 8004932:	f000 fbeb 	bl	800510c <__pow5mult>
 8004936:	4682      	mov	sl, r0
 8004938:	2101      	movs	r1, #1
 800493a:	4628      	mov	r0, r5
 800493c:	f000 fb2c 	bl	8004f98 <__i2b>
 8004940:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004942:	4604      	mov	r4, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	f340 8087 	ble.w	8004a58 <_dtoa_r+0x8e0>
 800494a:	461a      	mov	r2, r3
 800494c:	4601      	mov	r1, r0
 800494e:	4628      	mov	r0, r5
 8004950:	f000 fbdc 	bl	800510c <__pow5mult>
 8004954:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004956:	4604      	mov	r4, r0
 8004958:	2b01      	cmp	r3, #1
 800495a:	f340 8080 	ble.w	8004a5e <_dtoa_r+0x8e6>
 800495e:	f04f 0800 	mov.w	r8, #0
 8004962:	6923      	ldr	r3, [r4, #16]
 8004964:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004968:	6918      	ldr	r0, [r3, #16]
 800496a:	f000 fac7 	bl	8004efc <__hi0bits>
 800496e:	f1c0 0020 	rsb	r0, r0, #32
 8004972:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004974:	4418      	add	r0, r3
 8004976:	f010 001f 	ands.w	r0, r0, #31
 800497a:	f000 8092 	beq.w	8004aa2 <_dtoa_r+0x92a>
 800497e:	f1c0 0320 	rsb	r3, r0, #32
 8004982:	2b04      	cmp	r3, #4
 8004984:	f340 808a 	ble.w	8004a9c <_dtoa_r+0x924>
 8004988:	f1c0 001c 	rsb	r0, r0, #28
 800498c:	9b06      	ldr	r3, [sp, #24]
 800498e:	4407      	add	r7, r0
 8004990:	4403      	add	r3, r0
 8004992:	9306      	str	r3, [sp, #24]
 8004994:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004996:	4403      	add	r3, r0
 8004998:	9309      	str	r3, [sp, #36]	; 0x24
 800499a:	9b06      	ldr	r3, [sp, #24]
 800499c:	2b00      	cmp	r3, #0
 800499e:	dd05      	ble.n	80049ac <_dtoa_r+0x834>
 80049a0:	4651      	mov	r1, sl
 80049a2:	461a      	mov	r2, r3
 80049a4:	4628      	mov	r0, r5
 80049a6:	f000 fc0b 	bl	80051c0 <__lshift>
 80049aa:	4682      	mov	sl, r0
 80049ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	dd05      	ble.n	80049be <_dtoa_r+0x846>
 80049b2:	4621      	mov	r1, r4
 80049b4:	461a      	mov	r2, r3
 80049b6:	4628      	mov	r0, r5
 80049b8:	f000 fc02 	bl	80051c0 <__lshift>
 80049bc:	4604      	mov	r4, r0
 80049be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d070      	beq.n	8004aa6 <_dtoa_r+0x92e>
 80049c4:	4621      	mov	r1, r4
 80049c6:	4650      	mov	r0, sl
 80049c8:	f000 fc66 	bl	8005298 <__mcmp>
 80049cc:	2800      	cmp	r0, #0
 80049ce:	da6a      	bge.n	8004aa6 <_dtoa_r+0x92e>
 80049d0:	2300      	movs	r3, #0
 80049d2:	4651      	mov	r1, sl
 80049d4:	220a      	movs	r2, #10
 80049d6:	4628      	mov	r0, r5
 80049d8:	f000 fa46 	bl	8004e68 <__multadd>
 80049dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80049de:	4682      	mov	sl, r0
 80049e0:	f109 39ff 	add.w	r9, r9, #4294967295
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f000 8193 	beq.w	8004d10 <_dtoa_r+0xb98>
 80049ea:	4631      	mov	r1, r6
 80049ec:	2300      	movs	r3, #0
 80049ee:	220a      	movs	r2, #10
 80049f0:	4628      	mov	r0, r5
 80049f2:	f000 fa39 	bl	8004e68 <__multadd>
 80049f6:	f1bb 0f00 	cmp.w	fp, #0
 80049fa:	4606      	mov	r6, r0
 80049fc:	f300 8093 	bgt.w	8004b26 <_dtoa_r+0x9ae>
 8004a00:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	dc57      	bgt.n	8004ab6 <_dtoa_r+0x93e>
 8004a06:	e08e      	b.n	8004b26 <_dtoa_r+0x9ae>
 8004a08:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004a0a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004a0e:	e756      	b.n	80048be <_dtoa_r+0x746>
 8004a10:	9b02      	ldr	r3, [sp, #8]
 8004a12:	1e5c      	subs	r4, r3, #1
 8004a14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a16:	42a3      	cmp	r3, r4
 8004a18:	bfb7      	itett	lt
 8004a1a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004a1c:	1b1c      	subge	r4, r3, r4
 8004a1e:	1ae2      	sublt	r2, r4, r3
 8004a20:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8004a22:	bfbe      	ittt	lt
 8004a24:	940a      	strlt	r4, [sp, #40]	; 0x28
 8004a26:	189b      	addlt	r3, r3, r2
 8004a28:	930e      	strlt	r3, [sp, #56]	; 0x38
 8004a2a:	9b02      	ldr	r3, [sp, #8]
 8004a2c:	bfb8      	it	lt
 8004a2e:	2400      	movlt	r4, #0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	bfbb      	ittet	lt
 8004a34:	9b06      	ldrlt	r3, [sp, #24]
 8004a36:	9a02      	ldrlt	r2, [sp, #8]
 8004a38:	9f06      	ldrge	r7, [sp, #24]
 8004a3a:	1a9f      	sublt	r7, r3, r2
 8004a3c:	bfac      	ite	ge
 8004a3e:	9b02      	ldrge	r3, [sp, #8]
 8004a40:	2300      	movlt	r3, #0
 8004a42:	e73e      	b.n	80048c2 <_dtoa_r+0x74a>
 8004a44:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004a46:	9f06      	ldr	r7, [sp, #24]
 8004a48:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8004a4a:	e745      	b.n	80048d8 <_dtoa_r+0x760>
 8004a4c:	3fe00000 	.word	0x3fe00000
 8004a50:	40240000 	.word	0x40240000
 8004a54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004a56:	e76a      	b.n	800492e <_dtoa_r+0x7b6>
 8004a58:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	dc19      	bgt.n	8004a92 <_dtoa_r+0x91a>
 8004a5e:	9b04      	ldr	r3, [sp, #16]
 8004a60:	b9bb      	cbnz	r3, 8004a92 <_dtoa_r+0x91a>
 8004a62:	9b05      	ldr	r3, [sp, #20]
 8004a64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a68:	b99b      	cbnz	r3, 8004a92 <_dtoa_r+0x91a>
 8004a6a:	9b05      	ldr	r3, [sp, #20]
 8004a6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004a70:	0d1b      	lsrs	r3, r3, #20
 8004a72:	051b      	lsls	r3, r3, #20
 8004a74:	b183      	cbz	r3, 8004a98 <_dtoa_r+0x920>
 8004a76:	f04f 0801 	mov.w	r8, #1
 8004a7a:	9b06      	ldr	r3, [sp, #24]
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	9306      	str	r3, [sp, #24]
 8004a80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a82:	3301      	adds	r3, #1
 8004a84:	9309      	str	r3, [sp, #36]	; 0x24
 8004a86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	f47f af6a 	bne.w	8004962 <_dtoa_r+0x7ea>
 8004a8e:	2001      	movs	r0, #1
 8004a90:	e76f      	b.n	8004972 <_dtoa_r+0x7fa>
 8004a92:	f04f 0800 	mov.w	r8, #0
 8004a96:	e7f6      	b.n	8004a86 <_dtoa_r+0x90e>
 8004a98:	4698      	mov	r8, r3
 8004a9a:	e7f4      	b.n	8004a86 <_dtoa_r+0x90e>
 8004a9c:	f43f af7d 	beq.w	800499a <_dtoa_r+0x822>
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	301c      	adds	r0, #28
 8004aa4:	e772      	b.n	800498c <_dtoa_r+0x814>
 8004aa6:	9b02      	ldr	r3, [sp, #8]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	dc36      	bgt.n	8004b1a <_dtoa_r+0x9a2>
 8004aac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	dd33      	ble.n	8004b1a <_dtoa_r+0x9a2>
 8004ab2:	f8dd b008 	ldr.w	fp, [sp, #8]
 8004ab6:	f1bb 0f00 	cmp.w	fp, #0
 8004aba:	d10d      	bne.n	8004ad8 <_dtoa_r+0x960>
 8004abc:	4621      	mov	r1, r4
 8004abe:	465b      	mov	r3, fp
 8004ac0:	2205      	movs	r2, #5
 8004ac2:	4628      	mov	r0, r5
 8004ac4:	f000 f9d0 	bl	8004e68 <__multadd>
 8004ac8:	4601      	mov	r1, r0
 8004aca:	4604      	mov	r4, r0
 8004acc:	4650      	mov	r0, sl
 8004ace:	f000 fbe3 	bl	8005298 <__mcmp>
 8004ad2:	2800      	cmp	r0, #0
 8004ad4:	f73f adb6 	bgt.w	8004644 <_dtoa_r+0x4cc>
 8004ad8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004ada:	9f08      	ldr	r7, [sp, #32]
 8004adc:	ea6f 0903 	mvn.w	r9, r3
 8004ae0:	f04f 0800 	mov.w	r8, #0
 8004ae4:	4621      	mov	r1, r4
 8004ae6:	4628      	mov	r0, r5
 8004ae8:	f000 f99c 	bl	8004e24 <_Bfree>
 8004aec:	2e00      	cmp	r6, #0
 8004aee:	f43f aea4 	beq.w	800483a <_dtoa_r+0x6c2>
 8004af2:	f1b8 0f00 	cmp.w	r8, #0
 8004af6:	d005      	beq.n	8004b04 <_dtoa_r+0x98c>
 8004af8:	45b0      	cmp	r8, r6
 8004afa:	d003      	beq.n	8004b04 <_dtoa_r+0x98c>
 8004afc:	4641      	mov	r1, r8
 8004afe:	4628      	mov	r0, r5
 8004b00:	f000 f990 	bl	8004e24 <_Bfree>
 8004b04:	4631      	mov	r1, r6
 8004b06:	4628      	mov	r0, r5
 8004b08:	f000 f98c 	bl	8004e24 <_Bfree>
 8004b0c:	e695      	b.n	800483a <_dtoa_r+0x6c2>
 8004b0e:	2400      	movs	r4, #0
 8004b10:	4626      	mov	r6, r4
 8004b12:	e7e1      	b.n	8004ad8 <_dtoa_r+0x960>
 8004b14:	46c1      	mov	r9, r8
 8004b16:	4626      	mov	r6, r4
 8004b18:	e594      	b.n	8004644 <_dtoa_r+0x4cc>
 8004b1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b1c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	f000 80fc 	beq.w	8004d1e <_dtoa_r+0xba6>
 8004b26:	2f00      	cmp	r7, #0
 8004b28:	dd05      	ble.n	8004b36 <_dtoa_r+0x9be>
 8004b2a:	4631      	mov	r1, r6
 8004b2c:	463a      	mov	r2, r7
 8004b2e:	4628      	mov	r0, r5
 8004b30:	f000 fb46 	bl	80051c0 <__lshift>
 8004b34:	4606      	mov	r6, r0
 8004b36:	f1b8 0f00 	cmp.w	r8, #0
 8004b3a:	d05c      	beq.n	8004bf6 <_dtoa_r+0xa7e>
 8004b3c:	4628      	mov	r0, r5
 8004b3e:	6871      	ldr	r1, [r6, #4]
 8004b40:	f000 f930 	bl	8004da4 <_Balloc>
 8004b44:	4607      	mov	r7, r0
 8004b46:	b928      	cbnz	r0, 8004b54 <_dtoa_r+0x9dc>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004b4e:	4b7e      	ldr	r3, [pc, #504]	; (8004d48 <_dtoa_r+0xbd0>)
 8004b50:	f7ff bb26 	b.w	80041a0 <_dtoa_r+0x28>
 8004b54:	6932      	ldr	r2, [r6, #16]
 8004b56:	f106 010c 	add.w	r1, r6, #12
 8004b5a:	3202      	adds	r2, #2
 8004b5c:	0092      	lsls	r2, r2, #2
 8004b5e:	300c      	adds	r0, #12
 8004b60:	f000 f912 	bl	8004d88 <memcpy>
 8004b64:	2201      	movs	r2, #1
 8004b66:	4639      	mov	r1, r7
 8004b68:	4628      	mov	r0, r5
 8004b6a:	f000 fb29 	bl	80051c0 <__lshift>
 8004b6e:	46b0      	mov	r8, r6
 8004b70:	4606      	mov	r6, r0
 8004b72:	9b08      	ldr	r3, [sp, #32]
 8004b74:	3301      	adds	r3, #1
 8004b76:	9302      	str	r3, [sp, #8]
 8004b78:	9b08      	ldr	r3, [sp, #32]
 8004b7a:	445b      	add	r3, fp
 8004b7c:	930a      	str	r3, [sp, #40]	; 0x28
 8004b7e:	9b04      	ldr	r3, [sp, #16]
 8004b80:	f003 0301 	and.w	r3, r3, #1
 8004b84:	9309      	str	r3, [sp, #36]	; 0x24
 8004b86:	9b02      	ldr	r3, [sp, #8]
 8004b88:	4621      	mov	r1, r4
 8004b8a:	4650      	mov	r0, sl
 8004b8c:	f103 3bff 	add.w	fp, r3, #4294967295
 8004b90:	f7ff fa64 	bl	800405c <quorem>
 8004b94:	4603      	mov	r3, r0
 8004b96:	4641      	mov	r1, r8
 8004b98:	3330      	adds	r3, #48	; 0x30
 8004b9a:	9004      	str	r0, [sp, #16]
 8004b9c:	4650      	mov	r0, sl
 8004b9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ba0:	f000 fb7a 	bl	8005298 <__mcmp>
 8004ba4:	4632      	mov	r2, r6
 8004ba6:	9006      	str	r0, [sp, #24]
 8004ba8:	4621      	mov	r1, r4
 8004baa:	4628      	mov	r0, r5
 8004bac:	f000 fb90 	bl	80052d0 <__mdiff>
 8004bb0:	68c2      	ldr	r2, [r0, #12]
 8004bb2:	4607      	mov	r7, r0
 8004bb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004bb6:	bb02      	cbnz	r2, 8004bfa <_dtoa_r+0xa82>
 8004bb8:	4601      	mov	r1, r0
 8004bba:	4650      	mov	r0, sl
 8004bbc:	f000 fb6c 	bl	8005298 <__mcmp>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004bc4:	4639      	mov	r1, r7
 8004bc6:	4628      	mov	r0, r5
 8004bc8:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8004bcc:	f000 f92a 	bl	8004e24 <_Bfree>
 8004bd0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004bd2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004bd4:	9f02      	ldr	r7, [sp, #8]
 8004bd6:	ea43 0102 	orr.w	r1, r3, r2
 8004bda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bdc:	430b      	orrs	r3, r1
 8004bde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004be0:	d10d      	bne.n	8004bfe <_dtoa_r+0xa86>
 8004be2:	2b39      	cmp	r3, #57	; 0x39
 8004be4:	d027      	beq.n	8004c36 <_dtoa_r+0xabe>
 8004be6:	9a06      	ldr	r2, [sp, #24]
 8004be8:	2a00      	cmp	r2, #0
 8004bea:	dd01      	ble.n	8004bf0 <_dtoa_r+0xa78>
 8004bec:	9b04      	ldr	r3, [sp, #16]
 8004bee:	3331      	adds	r3, #49	; 0x31
 8004bf0:	f88b 3000 	strb.w	r3, [fp]
 8004bf4:	e776      	b.n	8004ae4 <_dtoa_r+0x96c>
 8004bf6:	4630      	mov	r0, r6
 8004bf8:	e7b9      	b.n	8004b6e <_dtoa_r+0x9f6>
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	e7e2      	b.n	8004bc4 <_dtoa_r+0xa4c>
 8004bfe:	9906      	ldr	r1, [sp, #24]
 8004c00:	2900      	cmp	r1, #0
 8004c02:	db04      	blt.n	8004c0e <_dtoa_r+0xa96>
 8004c04:	9822      	ldr	r0, [sp, #136]	; 0x88
 8004c06:	4301      	orrs	r1, r0
 8004c08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c0a:	4301      	orrs	r1, r0
 8004c0c:	d120      	bne.n	8004c50 <_dtoa_r+0xad8>
 8004c0e:	2a00      	cmp	r2, #0
 8004c10:	ddee      	ble.n	8004bf0 <_dtoa_r+0xa78>
 8004c12:	4651      	mov	r1, sl
 8004c14:	2201      	movs	r2, #1
 8004c16:	4628      	mov	r0, r5
 8004c18:	9302      	str	r3, [sp, #8]
 8004c1a:	f000 fad1 	bl	80051c0 <__lshift>
 8004c1e:	4621      	mov	r1, r4
 8004c20:	4682      	mov	sl, r0
 8004c22:	f000 fb39 	bl	8005298 <__mcmp>
 8004c26:	2800      	cmp	r0, #0
 8004c28:	9b02      	ldr	r3, [sp, #8]
 8004c2a:	dc02      	bgt.n	8004c32 <_dtoa_r+0xaba>
 8004c2c:	d1e0      	bne.n	8004bf0 <_dtoa_r+0xa78>
 8004c2e:	07da      	lsls	r2, r3, #31
 8004c30:	d5de      	bpl.n	8004bf0 <_dtoa_r+0xa78>
 8004c32:	2b39      	cmp	r3, #57	; 0x39
 8004c34:	d1da      	bne.n	8004bec <_dtoa_r+0xa74>
 8004c36:	2339      	movs	r3, #57	; 0x39
 8004c38:	f88b 3000 	strb.w	r3, [fp]
 8004c3c:	463b      	mov	r3, r7
 8004c3e:	461f      	mov	r7, r3
 8004c40:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8004c44:	3b01      	subs	r3, #1
 8004c46:	2a39      	cmp	r2, #57	; 0x39
 8004c48:	d050      	beq.n	8004cec <_dtoa_r+0xb74>
 8004c4a:	3201      	adds	r2, #1
 8004c4c:	701a      	strb	r2, [r3, #0]
 8004c4e:	e749      	b.n	8004ae4 <_dtoa_r+0x96c>
 8004c50:	2a00      	cmp	r2, #0
 8004c52:	dd03      	ble.n	8004c5c <_dtoa_r+0xae4>
 8004c54:	2b39      	cmp	r3, #57	; 0x39
 8004c56:	d0ee      	beq.n	8004c36 <_dtoa_r+0xabe>
 8004c58:	3301      	adds	r3, #1
 8004c5a:	e7c9      	b.n	8004bf0 <_dtoa_r+0xa78>
 8004c5c:	9a02      	ldr	r2, [sp, #8]
 8004c5e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004c60:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004c64:	428a      	cmp	r2, r1
 8004c66:	d02a      	beq.n	8004cbe <_dtoa_r+0xb46>
 8004c68:	4651      	mov	r1, sl
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	220a      	movs	r2, #10
 8004c6e:	4628      	mov	r0, r5
 8004c70:	f000 f8fa 	bl	8004e68 <__multadd>
 8004c74:	45b0      	cmp	r8, r6
 8004c76:	4682      	mov	sl, r0
 8004c78:	f04f 0300 	mov.w	r3, #0
 8004c7c:	f04f 020a 	mov.w	r2, #10
 8004c80:	4641      	mov	r1, r8
 8004c82:	4628      	mov	r0, r5
 8004c84:	d107      	bne.n	8004c96 <_dtoa_r+0xb1e>
 8004c86:	f000 f8ef 	bl	8004e68 <__multadd>
 8004c8a:	4680      	mov	r8, r0
 8004c8c:	4606      	mov	r6, r0
 8004c8e:	9b02      	ldr	r3, [sp, #8]
 8004c90:	3301      	adds	r3, #1
 8004c92:	9302      	str	r3, [sp, #8]
 8004c94:	e777      	b.n	8004b86 <_dtoa_r+0xa0e>
 8004c96:	f000 f8e7 	bl	8004e68 <__multadd>
 8004c9a:	4631      	mov	r1, r6
 8004c9c:	4680      	mov	r8, r0
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	220a      	movs	r2, #10
 8004ca2:	4628      	mov	r0, r5
 8004ca4:	f000 f8e0 	bl	8004e68 <__multadd>
 8004ca8:	4606      	mov	r6, r0
 8004caa:	e7f0      	b.n	8004c8e <_dtoa_r+0xb16>
 8004cac:	f1bb 0f00 	cmp.w	fp, #0
 8004cb0:	bfcc      	ite	gt
 8004cb2:	465f      	movgt	r7, fp
 8004cb4:	2701      	movle	r7, #1
 8004cb6:	f04f 0800 	mov.w	r8, #0
 8004cba:	9a08      	ldr	r2, [sp, #32]
 8004cbc:	4417      	add	r7, r2
 8004cbe:	4651      	mov	r1, sl
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	4628      	mov	r0, r5
 8004cc4:	9302      	str	r3, [sp, #8]
 8004cc6:	f000 fa7b 	bl	80051c0 <__lshift>
 8004cca:	4621      	mov	r1, r4
 8004ccc:	4682      	mov	sl, r0
 8004cce:	f000 fae3 	bl	8005298 <__mcmp>
 8004cd2:	2800      	cmp	r0, #0
 8004cd4:	dcb2      	bgt.n	8004c3c <_dtoa_r+0xac4>
 8004cd6:	d102      	bne.n	8004cde <_dtoa_r+0xb66>
 8004cd8:	9b02      	ldr	r3, [sp, #8]
 8004cda:	07db      	lsls	r3, r3, #31
 8004cdc:	d4ae      	bmi.n	8004c3c <_dtoa_r+0xac4>
 8004cde:	463b      	mov	r3, r7
 8004ce0:	461f      	mov	r7, r3
 8004ce2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004ce6:	2a30      	cmp	r2, #48	; 0x30
 8004ce8:	d0fa      	beq.n	8004ce0 <_dtoa_r+0xb68>
 8004cea:	e6fb      	b.n	8004ae4 <_dtoa_r+0x96c>
 8004cec:	9a08      	ldr	r2, [sp, #32]
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d1a5      	bne.n	8004c3e <_dtoa_r+0xac6>
 8004cf2:	2331      	movs	r3, #49	; 0x31
 8004cf4:	f109 0901 	add.w	r9, r9, #1
 8004cf8:	7013      	strb	r3, [r2, #0]
 8004cfa:	e6f3      	b.n	8004ae4 <_dtoa_r+0x96c>
 8004cfc:	4b13      	ldr	r3, [pc, #76]	; (8004d4c <_dtoa_r+0xbd4>)
 8004cfe:	f7ff baa7 	b.w	8004250 <_dtoa_r+0xd8>
 8004d02:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	f47f aa80 	bne.w	800420a <_dtoa_r+0x92>
 8004d0a:	4b11      	ldr	r3, [pc, #68]	; (8004d50 <_dtoa_r+0xbd8>)
 8004d0c:	f7ff baa0 	b.w	8004250 <_dtoa_r+0xd8>
 8004d10:	f1bb 0f00 	cmp.w	fp, #0
 8004d14:	dc03      	bgt.n	8004d1e <_dtoa_r+0xba6>
 8004d16:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004d18:	2b02      	cmp	r3, #2
 8004d1a:	f73f aecc 	bgt.w	8004ab6 <_dtoa_r+0x93e>
 8004d1e:	9f08      	ldr	r7, [sp, #32]
 8004d20:	4621      	mov	r1, r4
 8004d22:	4650      	mov	r0, sl
 8004d24:	f7ff f99a 	bl	800405c <quorem>
 8004d28:	9a08      	ldr	r2, [sp, #32]
 8004d2a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8004d2e:	f807 3b01 	strb.w	r3, [r7], #1
 8004d32:	1aba      	subs	r2, r7, r2
 8004d34:	4593      	cmp	fp, r2
 8004d36:	ddb9      	ble.n	8004cac <_dtoa_r+0xb34>
 8004d38:	4651      	mov	r1, sl
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	220a      	movs	r2, #10
 8004d3e:	4628      	mov	r0, r5
 8004d40:	f000 f892 	bl	8004e68 <__multadd>
 8004d44:	4682      	mov	sl, r0
 8004d46:	e7eb      	b.n	8004d20 <_dtoa_r+0xba8>
 8004d48:	08007a17 	.word	0x08007a17
 8004d4c:	08007970 	.word	0x08007970
 8004d50:	08007994 	.word	0x08007994

08004d54 <_localeconv_r>:
 8004d54:	4800      	ldr	r0, [pc, #0]	; (8004d58 <_localeconv_r+0x4>)
 8004d56:	4770      	bx	lr
 8004d58:	20000160 	.word	0x20000160

08004d5c <malloc>:
 8004d5c:	4b02      	ldr	r3, [pc, #8]	; (8004d68 <malloc+0xc>)
 8004d5e:	4601      	mov	r1, r0
 8004d60:	6818      	ldr	r0, [r3, #0]
 8004d62:	f000 bbfb 	b.w	800555c <_malloc_r>
 8004d66:	bf00      	nop
 8004d68:	2000000c 	.word	0x2000000c

08004d6c <memchr>:
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	b510      	push	{r4, lr}
 8004d70:	b2c9      	uxtb	r1, r1
 8004d72:	4402      	add	r2, r0
 8004d74:	4293      	cmp	r3, r2
 8004d76:	4618      	mov	r0, r3
 8004d78:	d101      	bne.n	8004d7e <memchr+0x12>
 8004d7a:	2000      	movs	r0, #0
 8004d7c:	e003      	b.n	8004d86 <memchr+0x1a>
 8004d7e:	7804      	ldrb	r4, [r0, #0]
 8004d80:	3301      	adds	r3, #1
 8004d82:	428c      	cmp	r4, r1
 8004d84:	d1f6      	bne.n	8004d74 <memchr+0x8>
 8004d86:	bd10      	pop	{r4, pc}

08004d88 <memcpy>:
 8004d88:	440a      	add	r2, r1
 8004d8a:	4291      	cmp	r1, r2
 8004d8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d90:	d100      	bne.n	8004d94 <memcpy+0xc>
 8004d92:	4770      	bx	lr
 8004d94:	b510      	push	{r4, lr}
 8004d96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d9a:	4291      	cmp	r1, r2
 8004d9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004da0:	d1f9      	bne.n	8004d96 <memcpy+0xe>
 8004da2:	bd10      	pop	{r4, pc}

08004da4 <_Balloc>:
 8004da4:	b570      	push	{r4, r5, r6, lr}
 8004da6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004da8:	4604      	mov	r4, r0
 8004daa:	460d      	mov	r5, r1
 8004dac:	b976      	cbnz	r6, 8004dcc <_Balloc+0x28>
 8004dae:	2010      	movs	r0, #16
 8004db0:	f7ff ffd4 	bl	8004d5c <malloc>
 8004db4:	4602      	mov	r2, r0
 8004db6:	6260      	str	r0, [r4, #36]	; 0x24
 8004db8:	b920      	cbnz	r0, 8004dc4 <_Balloc+0x20>
 8004dba:	2166      	movs	r1, #102	; 0x66
 8004dbc:	4b17      	ldr	r3, [pc, #92]	; (8004e1c <_Balloc+0x78>)
 8004dbe:	4818      	ldr	r0, [pc, #96]	; (8004e20 <_Balloc+0x7c>)
 8004dc0:	f000 fd92 	bl	80058e8 <__assert_func>
 8004dc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004dc8:	6006      	str	r6, [r0, #0]
 8004dca:	60c6      	str	r6, [r0, #12]
 8004dcc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004dce:	68f3      	ldr	r3, [r6, #12]
 8004dd0:	b183      	cbz	r3, 8004df4 <_Balloc+0x50>
 8004dd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004dda:	b9b8      	cbnz	r0, 8004e0c <_Balloc+0x68>
 8004ddc:	2101      	movs	r1, #1
 8004dde:	fa01 f605 	lsl.w	r6, r1, r5
 8004de2:	1d72      	adds	r2, r6, #5
 8004de4:	4620      	mov	r0, r4
 8004de6:	0092      	lsls	r2, r2, #2
 8004de8:	f000 fb5e 	bl	80054a8 <_calloc_r>
 8004dec:	b160      	cbz	r0, 8004e08 <_Balloc+0x64>
 8004dee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004df2:	e00e      	b.n	8004e12 <_Balloc+0x6e>
 8004df4:	2221      	movs	r2, #33	; 0x21
 8004df6:	2104      	movs	r1, #4
 8004df8:	4620      	mov	r0, r4
 8004dfa:	f000 fb55 	bl	80054a8 <_calloc_r>
 8004dfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e00:	60f0      	str	r0, [r6, #12]
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d1e4      	bne.n	8004dd2 <_Balloc+0x2e>
 8004e08:	2000      	movs	r0, #0
 8004e0a:	bd70      	pop	{r4, r5, r6, pc}
 8004e0c:	6802      	ldr	r2, [r0, #0]
 8004e0e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004e12:	2300      	movs	r3, #0
 8004e14:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004e18:	e7f7      	b.n	8004e0a <_Balloc+0x66>
 8004e1a:	bf00      	nop
 8004e1c:	080079a1 	.word	0x080079a1
 8004e20:	08007a28 	.word	0x08007a28

08004e24 <_Bfree>:
 8004e24:	b570      	push	{r4, r5, r6, lr}
 8004e26:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004e28:	4605      	mov	r5, r0
 8004e2a:	460c      	mov	r4, r1
 8004e2c:	b976      	cbnz	r6, 8004e4c <_Bfree+0x28>
 8004e2e:	2010      	movs	r0, #16
 8004e30:	f7ff ff94 	bl	8004d5c <malloc>
 8004e34:	4602      	mov	r2, r0
 8004e36:	6268      	str	r0, [r5, #36]	; 0x24
 8004e38:	b920      	cbnz	r0, 8004e44 <_Bfree+0x20>
 8004e3a:	218a      	movs	r1, #138	; 0x8a
 8004e3c:	4b08      	ldr	r3, [pc, #32]	; (8004e60 <_Bfree+0x3c>)
 8004e3e:	4809      	ldr	r0, [pc, #36]	; (8004e64 <_Bfree+0x40>)
 8004e40:	f000 fd52 	bl	80058e8 <__assert_func>
 8004e44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004e48:	6006      	str	r6, [r0, #0]
 8004e4a:	60c6      	str	r6, [r0, #12]
 8004e4c:	b13c      	cbz	r4, 8004e5e <_Bfree+0x3a>
 8004e4e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004e50:	6862      	ldr	r2, [r4, #4]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004e58:	6021      	str	r1, [r4, #0]
 8004e5a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004e5e:	bd70      	pop	{r4, r5, r6, pc}
 8004e60:	080079a1 	.word	0x080079a1
 8004e64:	08007a28 	.word	0x08007a28

08004e68 <__multadd>:
 8004e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e6c:	4698      	mov	r8, r3
 8004e6e:	460c      	mov	r4, r1
 8004e70:	2300      	movs	r3, #0
 8004e72:	690e      	ldr	r6, [r1, #16]
 8004e74:	4607      	mov	r7, r0
 8004e76:	f101 0014 	add.w	r0, r1, #20
 8004e7a:	6805      	ldr	r5, [r0, #0]
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	b2a9      	uxth	r1, r5
 8004e80:	fb02 8101 	mla	r1, r2, r1, r8
 8004e84:	0c2d      	lsrs	r5, r5, #16
 8004e86:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8004e8a:	fb02 c505 	mla	r5, r2, r5, ip
 8004e8e:	b289      	uxth	r1, r1
 8004e90:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8004e94:	429e      	cmp	r6, r3
 8004e96:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8004e9a:	f840 1b04 	str.w	r1, [r0], #4
 8004e9e:	dcec      	bgt.n	8004e7a <__multadd+0x12>
 8004ea0:	f1b8 0f00 	cmp.w	r8, #0
 8004ea4:	d022      	beq.n	8004eec <__multadd+0x84>
 8004ea6:	68a3      	ldr	r3, [r4, #8]
 8004ea8:	42b3      	cmp	r3, r6
 8004eaa:	dc19      	bgt.n	8004ee0 <__multadd+0x78>
 8004eac:	6861      	ldr	r1, [r4, #4]
 8004eae:	4638      	mov	r0, r7
 8004eb0:	3101      	adds	r1, #1
 8004eb2:	f7ff ff77 	bl	8004da4 <_Balloc>
 8004eb6:	4605      	mov	r5, r0
 8004eb8:	b928      	cbnz	r0, 8004ec6 <__multadd+0x5e>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	21b5      	movs	r1, #181	; 0xb5
 8004ebe:	4b0d      	ldr	r3, [pc, #52]	; (8004ef4 <__multadd+0x8c>)
 8004ec0:	480d      	ldr	r0, [pc, #52]	; (8004ef8 <__multadd+0x90>)
 8004ec2:	f000 fd11 	bl	80058e8 <__assert_func>
 8004ec6:	6922      	ldr	r2, [r4, #16]
 8004ec8:	f104 010c 	add.w	r1, r4, #12
 8004ecc:	3202      	adds	r2, #2
 8004ece:	0092      	lsls	r2, r2, #2
 8004ed0:	300c      	adds	r0, #12
 8004ed2:	f7ff ff59 	bl	8004d88 <memcpy>
 8004ed6:	4621      	mov	r1, r4
 8004ed8:	4638      	mov	r0, r7
 8004eda:	f7ff ffa3 	bl	8004e24 <_Bfree>
 8004ede:	462c      	mov	r4, r5
 8004ee0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8004ee4:	3601      	adds	r6, #1
 8004ee6:	f8c3 8014 	str.w	r8, [r3, #20]
 8004eea:	6126      	str	r6, [r4, #16]
 8004eec:	4620      	mov	r0, r4
 8004eee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ef2:	bf00      	nop
 8004ef4:	08007a17 	.word	0x08007a17
 8004ef8:	08007a28 	.word	0x08007a28

08004efc <__hi0bits>:
 8004efc:	0c02      	lsrs	r2, r0, #16
 8004efe:	0412      	lsls	r2, r2, #16
 8004f00:	4603      	mov	r3, r0
 8004f02:	b9ca      	cbnz	r2, 8004f38 <__hi0bits+0x3c>
 8004f04:	0403      	lsls	r3, r0, #16
 8004f06:	2010      	movs	r0, #16
 8004f08:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004f0c:	bf04      	itt	eq
 8004f0e:	021b      	lsleq	r3, r3, #8
 8004f10:	3008      	addeq	r0, #8
 8004f12:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004f16:	bf04      	itt	eq
 8004f18:	011b      	lsleq	r3, r3, #4
 8004f1a:	3004      	addeq	r0, #4
 8004f1c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004f20:	bf04      	itt	eq
 8004f22:	009b      	lsleq	r3, r3, #2
 8004f24:	3002      	addeq	r0, #2
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	db05      	blt.n	8004f36 <__hi0bits+0x3a>
 8004f2a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8004f2e:	f100 0001 	add.w	r0, r0, #1
 8004f32:	bf08      	it	eq
 8004f34:	2020      	moveq	r0, #32
 8004f36:	4770      	bx	lr
 8004f38:	2000      	movs	r0, #0
 8004f3a:	e7e5      	b.n	8004f08 <__hi0bits+0xc>

08004f3c <__lo0bits>:
 8004f3c:	6803      	ldr	r3, [r0, #0]
 8004f3e:	4602      	mov	r2, r0
 8004f40:	f013 0007 	ands.w	r0, r3, #7
 8004f44:	d00b      	beq.n	8004f5e <__lo0bits+0x22>
 8004f46:	07d9      	lsls	r1, r3, #31
 8004f48:	d422      	bmi.n	8004f90 <__lo0bits+0x54>
 8004f4a:	0798      	lsls	r0, r3, #30
 8004f4c:	bf49      	itett	mi
 8004f4e:	085b      	lsrmi	r3, r3, #1
 8004f50:	089b      	lsrpl	r3, r3, #2
 8004f52:	2001      	movmi	r0, #1
 8004f54:	6013      	strmi	r3, [r2, #0]
 8004f56:	bf5c      	itt	pl
 8004f58:	2002      	movpl	r0, #2
 8004f5a:	6013      	strpl	r3, [r2, #0]
 8004f5c:	4770      	bx	lr
 8004f5e:	b299      	uxth	r1, r3
 8004f60:	b909      	cbnz	r1, 8004f66 <__lo0bits+0x2a>
 8004f62:	2010      	movs	r0, #16
 8004f64:	0c1b      	lsrs	r3, r3, #16
 8004f66:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004f6a:	bf04      	itt	eq
 8004f6c:	0a1b      	lsreq	r3, r3, #8
 8004f6e:	3008      	addeq	r0, #8
 8004f70:	0719      	lsls	r1, r3, #28
 8004f72:	bf04      	itt	eq
 8004f74:	091b      	lsreq	r3, r3, #4
 8004f76:	3004      	addeq	r0, #4
 8004f78:	0799      	lsls	r1, r3, #30
 8004f7a:	bf04      	itt	eq
 8004f7c:	089b      	lsreq	r3, r3, #2
 8004f7e:	3002      	addeq	r0, #2
 8004f80:	07d9      	lsls	r1, r3, #31
 8004f82:	d403      	bmi.n	8004f8c <__lo0bits+0x50>
 8004f84:	085b      	lsrs	r3, r3, #1
 8004f86:	f100 0001 	add.w	r0, r0, #1
 8004f8a:	d003      	beq.n	8004f94 <__lo0bits+0x58>
 8004f8c:	6013      	str	r3, [r2, #0]
 8004f8e:	4770      	bx	lr
 8004f90:	2000      	movs	r0, #0
 8004f92:	4770      	bx	lr
 8004f94:	2020      	movs	r0, #32
 8004f96:	4770      	bx	lr

08004f98 <__i2b>:
 8004f98:	b510      	push	{r4, lr}
 8004f9a:	460c      	mov	r4, r1
 8004f9c:	2101      	movs	r1, #1
 8004f9e:	f7ff ff01 	bl	8004da4 <_Balloc>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	b928      	cbnz	r0, 8004fb2 <__i2b+0x1a>
 8004fa6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004faa:	4b04      	ldr	r3, [pc, #16]	; (8004fbc <__i2b+0x24>)
 8004fac:	4804      	ldr	r0, [pc, #16]	; (8004fc0 <__i2b+0x28>)
 8004fae:	f000 fc9b 	bl	80058e8 <__assert_func>
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	6144      	str	r4, [r0, #20]
 8004fb6:	6103      	str	r3, [r0, #16]
 8004fb8:	bd10      	pop	{r4, pc}
 8004fba:	bf00      	nop
 8004fbc:	08007a17 	.word	0x08007a17
 8004fc0:	08007a28 	.word	0x08007a28

08004fc4 <__multiply>:
 8004fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fc8:	4614      	mov	r4, r2
 8004fca:	690a      	ldr	r2, [r1, #16]
 8004fcc:	6923      	ldr	r3, [r4, #16]
 8004fce:	460d      	mov	r5, r1
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	bfbe      	ittt	lt
 8004fd4:	460b      	movlt	r3, r1
 8004fd6:	4625      	movlt	r5, r4
 8004fd8:	461c      	movlt	r4, r3
 8004fda:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8004fde:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8004fe2:	68ab      	ldr	r3, [r5, #8]
 8004fe4:	6869      	ldr	r1, [r5, #4]
 8004fe6:	eb0a 0709 	add.w	r7, sl, r9
 8004fea:	42bb      	cmp	r3, r7
 8004fec:	b085      	sub	sp, #20
 8004fee:	bfb8      	it	lt
 8004ff0:	3101      	addlt	r1, #1
 8004ff2:	f7ff fed7 	bl	8004da4 <_Balloc>
 8004ff6:	b930      	cbnz	r0, 8005006 <__multiply+0x42>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	f240 115d 	movw	r1, #349	; 0x15d
 8004ffe:	4b41      	ldr	r3, [pc, #260]	; (8005104 <__multiply+0x140>)
 8005000:	4841      	ldr	r0, [pc, #260]	; (8005108 <__multiply+0x144>)
 8005002:	f000 fc71 	bl	80058e8 <__assert_func>
 8005006:	f100 0614 	add.w	r6, r0, #20
 800500a:	4633      	mov	r3, r6
 800500c:	2200      	movs	r2, #0
 800500e:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8005012:	4543      	cmp	r3, r8
 8005014:	d31e      	bcc.n	8005054 <__multiply+0x90>
 8005016:	f105 0c14 	add.w	ip, r5, #20
 800501a:	f104 0314 	add.w	r3, r4, #20
 800501e:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005022:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8005026:	9202      	str	r2, [sp, #8]
 8005028:	ebac 0205 	sub.w	r2, ip, r5
 800502c:	3a15      	subs	r2, #21
 800502e:	f022 0203 	bic.w	r2, r2, #3
 8005032:	3204      	adds	r2, #4
 8005034:	f105 0115 	add.w	r1, r5, #21
 8005038:	458c      	cmp	ip, r1
 800503a:	bf38      	it	cc
 800503c:	2204      	movcc	r2, #4
 800503e:	9201      	str	r2, [sp, #4]
 8005040:	9a02      	ldr	r2, [sp, #8]
 8005042:	9303      	str	r3, [sp, #12]
 8005044:	429a      	cmp	r2, r3
 8005046:	d808      	bhi.n	800505a <__multiply+0x96>
 8005048:	2f00      	cmp	r7, #0
 800504a:	dc55      	bgt.n	80050f8 <__multiply+0x134>
 800504c:	6107      	str	r7, [r0, #16]
 800504e:	b005      	add	sp, #20
 8005050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005054:	f843 2b04 	str.w	r2, [r3], #4
 8005058:	e7db      	b.n	8005012 <__multiply+0x4e>
 800505a:	f8b3 a000 	ldrh.w	sl, [r3]
 800505e:	f1ba 0f00 	cmp.w	sl, #0
 8005062:	d020      	beq.n	80050a6 <__multiply+0xe2>
 8005064:	46b1      	mov	r9, r6
 8005066:	2200      	movs	r2, #0
 8005068:	f105 0e14 	add.w	lr, r5, #20
 800506c:	f85e 4b04 	ldr.w	r4, [lr], #4
 8005070:	f8d9 b000 	ldr.w	fp, [r9]
 8005074:	b2a1      	uxth	r1, r4
 8005076:	fa1f fb8b 	uxth.w	fp, fp
 800507a:	fb0a b101 	mla	r1, sl, r1, fp
 800507e:	4411      	add	r1, r2
 8005080:	f8d9 2000 	ldr.w	r2, [r9]
 8005084:	0c24      	lsrs	r4, r4, #16
 8005086:	0c12      	lsrs	r2, r2, #16
 8005088:	fb0a 2404 	mla	r4, sl, r4, r2
 800508c:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8005090:	b289      	uxth	r1, r1
 8005092:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005096:	45f4      	cmp	ip, lr
 8005098:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800509c:	f849 1b04 	str.w	r1, [r9], #4
 80050a0:	d8e4      	bhi.n	800506c <__multiply+0xa8>
 80050a2:	9901      	ldr	r1, [sp, #4]
 80050a4:	5072      	str	r2, [r6, r1]
 80050a6:	9a03      	ldr	r2, [sp, #12]
 80050a8:	3304      	adds	r3, #4
 80050aa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80050ae:	f1b9 0f00 	cmp.w	r9, #0
 80050b2:	d01f      	beq.n	80050f4 <__multiply+0x130>
 80050b4:	46b6      	mov	lr, r6
 80050b6:	f04f 0a00 	mov.w	sl, #0
 80050ba:	6834      	ldr	r4, [r6, #0]
 80050bc:	f105 0114 	add.w	r1, r5, #20
 80050c0:	880a      	ldrh	r2, [r1, #0]
 80050c2:	f8be b002 	ldrh.w	fp, [lr, #2]
 80050c6:	b2a4      	uxth	r4, r4
 80050c8:	fb09 b202 	mla	r2, r9, r2, fp
 80050cc:	4492      	add	sl, r2
 80050ce:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80050d2:	f84e 4b04 	str.w	r4, [lr], #4
 80050d6:	f851 4b04 	ldr.w	r4, [r1], #4
 80050da:	f8be 2000 	ldrh.w	r2, [lr]
 80050de:	0c24      	lsrs	r4, r4, #16
 80050e0:	fb09 2404 	mla	r4, r9, r4, r2
 80050e4:	458c      	cmp	ip, r1
 80050e6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80050ea:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80050ee:	d8e7      	bhi.n	80050c0 <__multiply+0xfc>
 80050f0:	9a01      	ldr	r2, [sp, #4]
 80050f2:	50b4      	str	r4, [r6, r2]
 80050f4:	3604      	adds	r6, #4
 80050f6:	e7a3      	b.n	8005040 <__multiply+0x7c>
 80050f8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d1a5      	bne.n	800504c <__multiply+0x88>
 8005100:	3f01      	subs	r7, #1
 8005102:	e7a1      	b.n	8005048 <__multiply+0x84>
 8005104:	08007a17 	.word	0x08007a17
 8005108:	08007a28 	.word	0x08007a28

0800510c <__pow5mult>:
 800510c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005110:	4615      	mov	r5, r2
 8005112:	f012 0203 	ands.w	r2, r2, #3
 8005116:	4606      	mov	r6, r0
 8005118:	460f      	mov	r7, r1
 800511a:	d007      	beq.n	800512c <__pow5mult+0x20>
 800511c:	4c25      	ldr	r4, [pc, #148]	; (80051b4 <__pow5mult+0xa8>)
 800511e:	3a01      	subs	r2, #1
 8005120:	2300      	movs	r3, #0
 8005122:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005126:	f7ff fe9f 	bl	8004e68 <__multadd>
 800512a:	4607      	mov	r7, r0
 800512c:	10ad      	asrs	r5, r5, #2
 800512e:	d03d      	beq.n	80051ac <__pow5mult+0xa0>
 8005130:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005132:	b97c      	cbnz	r4, 8005154 <__pow5mult+0x48>
 8005134:	2010      	movs	r0, #16
 8005136:	f7ff fe11 	bl	8004d5c <malloc>
 800513a:	4602      	mov	r2, r0
 800513c:	6270      	str	r0, [r6, #36]	; 0x24
 800513e:	b928      	cbnz	r0, 800514c <__pow5mult+0x40>
 8005140:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005144:	4b1c      	ldr	r3, [pc, #112]	; (80051b8 <__pow5mult+0xac>)
 8005146:	481d      	ldr	r0, [pc, #116]	; (80051bc <__pow5mult+0xb0>)
 8005148:	f000 fbce 	bl	80058e8 <__assert_func>
 800514c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005150:	6004      	str	r4, [r0, #0]
 8005152:	60c4      	str	r4, [r0, #12]
 8005154:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005158:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800515c:	b94c      	cbnz	r4, 8005172 <__pow5mult+0x66>
 800515e:	f240 2171 	movw	r1, #625	; 0x271
 8005162:	4630      	mov	r0, r6
 8005164:	f7ff ff18 	bl	8004f98 <__i2b>
 8005168:	2300      	movs	r3, #0
 800516a:	4604      	mov	r4, r0
 800516c:	f8c8 0008 	str.w	r0, [r8, #8]
 8005170:	6003      	str	r3, [r0, #0]
 8005172:	f04f 0900 	mov.w	r9, #0
 8005176:	07eb      	lsls	r3, r5, #31
 8005178:	d50a      	bpl.n	8005190 <__pow5mult+0x84>
 800517a:	4639      	mov	r1, r7
 800517c:	4622      	mov	r2, r4
 800517e:	4630      	mov	r0, r6
 8005180:	f7ff ff20 	bl	8004fc4 <__multiply>
 8005184:	4680      	mov	r8, r0
 8005186:	4639      	mov	r1, r7
 8005188:	4630      	mov	r0, r6
 800518a:	f7ff fe4b 	bl	8004e24 <_Bfree>
 800518e:	4647      	mov	r7, r8
 8005190:	106d      	asrs	r5, r5, #1
 8005192:	d00b      	beq.n	80051ac <__pow5mult+0xa0>
 8005194:	6820      	ldr	r0, [r4, #0]
 8005196:	b938      	cbnz	r0, 80051a8 <__pow5mult+0x9c>
 8005198:	4622      	mov	r2, r4
 800519a:	4621      	mov	r1, r4
 800519c:	4630      	mov	r0, r6
 800519e:	f7ff ff11 	bl	8004fc4 <__multiply>
 80051a2:	6020      	str	r0, [r4, #0]
 80051a4:	f8c0 9000 	str.w	r9, [r0]
 80051a8:	4604      	mov	r4, r0
 80051aa:	e7e4      	b.n	8005176 <__pow5mult+0x6a>
 80051ac:	4638      	mov	r0, r7
 80051ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051b2:	bf00      	nop
 80051b4:	08007b78 	.word	0x08007b78
 80051b8:	080079a1 	.word	0x080079a1
 80051bc:	08007a28 	.word	0x08007a28

080051c0 <__lshift>:
 80051c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051c4:	460c      	mov	r4, r1
 80051c6:	4607      	mov	r7, r0
 80051c8:	4691      	mov	r9, r2
 80051ca:	6923      	ldr	r3, [r4, #16]
 80051cc:	6849      	ldr	r1, [r1, #4]
 80051ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80051d2:	68a3      	ldr	r3, [r4, #8]
 80051d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80051d8:	f108 0601 	add.w	r6, r8, #1
 80051dc:	42b3      	cmp	r3, r6
 80051de:	db0b      	blt.n	80051f8 <__lshift+0x38>
 80051e0:	4638      	mov	r0, r7
 80051e2:	f7ff fddf 	bl	8004da4 <_Balloc>
 80051e6:	4605      	mov	r5, r0
 80051e8:	b948      	cbnz	r0, 80051fe <__lshift+0x3e>
 80051ea:	4602      	mov	r2, r0
 80051ec:	f240 11d9 	movw	r1, #473	; 0x1d9
 80051f0:	4b27      	ldr	r3, [pc, #156]	; (8005290 <__lshift+0xd0>)
 80051f2:	4828      	ldr	r0, [pc, #160]	; (8005294 <__lshift+0xd4>)
 80051f4:	f000 fb78 	bl	80058e8 <__assert_func>
 80051f8:	3101      	adds	r1, #1
 80051fa:	005b      	lsls	r3, r3, #1
 80051fc:	e7ee      	b.n	80051dc <__lshift+0x1c>
 80051fe:	2300      	movs	r3, #0
 8005200:	f100 0114 	add.w	r1, r0, #20
 8005204:	f100 0210 	add.w	r2, r0, #16
 8005208:	4618      	mov	r0, r3
 800520a:	4553      	cmp	r3, sl
 800520c:	db33      	blt.n	8005276 <__lshift+0xb6>
 800520e:	6920      	ldr	r0, [r4, #16]
 8005210:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005214:	f104 0314 	add.w	r3, r4, #20
 8005218:	f019 091f 	ands.w	r9, r9, #31
 800521c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005220:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005224:	d02b      	beq.n	800527e <__lshift+0xbe>
 8005226:	468a      	mov	sl, r1
 8005228:	2200      	movs	r2, #0
 800522a:	f1c9 0e20 	rsb	lr, r9, #32
 800522e:	6818      	ldr	r0, [r3, #0]
 8005230:	fa00 f009 	lsl.w	r0, r0, r9
 8005234:	4302      	orrs	r2, r0
 8005236:	f84a 2b04 	str.w	r2, [sl], #4
 800523a:	f853 2b04 	ldr.w	r2, [r3], #4
 800523e:	459c      	cmp	ip, r3
 8005240:	fa22 f20e 	lsr.w	r2, r2, lr
 8005244:	d8f3      	bhi.n	800522e <__lshift+0x6e>
 8005246:	ebac 0304 	sub.w	r3, ip, r4
 800524a:	3b15      	subs	r3, #21
 800524c:	f023 0303 	bic.w	r3, r3, #3
 8005250:	3304      	adds	r3, #4
 8005252:	f104 0015 	add.w	r0, r4, #21
 8005256:	4584      	cmp	ip, r0
 8005258:	bf38      	it	cc
 800525a:	2304      	movcc	r3, #4
 800525c:	50ca      	str	r2, [r1, r3]
 800525e:	b10a      	cbz	r2, 8005264 <__lshift+0xa4>
 8005260:	f108 0602 	add.w	r6, r8, #2
 8005264:	3e01      	subs	r6, #1
 8005266:	4638      	mov	r0, r7
 8005268:	4621      	mov	r1, r4
 800526a:	612e      	str	r6, [r5, #16]
 800526c:	f7ff fdda 	bl	8004e24 <_Bfree>
 8005270:	4628      	mov	r0, r5
 8005272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005276:	f842 0f04 	str.w	r0, [r2, #4]!
 800527a:	3301      	adds	r3, #1
 800527c:	e7c5      	b.n	800520a <__lshift+0x4a>
 800527e:	3904      	subs	r1, #4
 8005280:	f853 2b04 	ldr.w	r2, [r3], #4
 8005284:	459c      	cmp	ip, r3
 8005286:	f841 2f04 	str.w	r2, [r1, #4]!
 800528a:	d8f9      	bhi.n	8005280 <__lshift+0xc0>
 800528c:	e7ea      	b.n	8005264 <__lshift+0xa4>
 800528e:	bf00      	nop
 8005290:	08007a17 	.word	0x08007a17
 8005294:	08007a28 	.word	0x08007a28

08005298 <__mcmp>:
 8005298:	4603      	mov	r3, r0
 800529a:	690a      	ldr	r2, [r1, #16]
 800529c:	6900      	ldr	r0, [r0, #16]
 800529e:	b530      	push	{r4, r5, lr}
 80052a0:	1a80      	subs	r0, r0, r2
 80052a2:	d10d      	bne.n	80052c0 <__mcmp+0x28>
 80052a4:	3314      	adds	r3, #20
 80052a6:	3114      	adds	r1, #20
 80052a8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80052ac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80052b0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80052b4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80052b8:	4295      	cmp	r5, r2
 80052ba:	d002      	beq.n	80052c2 <__mcmp+0x2a>
 80052bc:	d304      	bcc.n	80052c8 <__mcmp+0x30>
 80052be:	2001      	movs	r0, #1
 80052c0:	bd30      	pop	{r4, r5, pc}
 80052c2:	42a3      	cmp	r3, r4
 80052c4:	d3f4      	bcc.n	80052b0 <__mcmp+0x18>
 80052c6:	e7fb      	b.n	80052c0 <__mcmp+0x28>
 80052c8:	f04f 30ff 	mov.w	r0, #4294967295
 80052cc:	e7f8      	b.n	80052c0 <__mcmp+0x28>
	...

080052d0 <__mdiff>:
 80052d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052d4:	460c      	mov	r4, r1
 80052d6:	4606      	mov	r6, r0
 80052d8:	4611      	mov	r1, r2
 80052da:	4620      	mov	r0, r4
 80052dc:	4692      	mov	sl, r2
 80052de:	f7ff ffdb 	bl	8005298 <__mcmp>
 80052e2:	1e05      	subs	r5, r0, #0
 80052e4:	d111      	bne.n	800530a <__mdiff+0x3a>
 80052e6:	4629      	mov	r1, r5
 80052e8:	4630      	mov	r0, r6
 80052ea:	f7ff fd5b 	bl	8004da4 <_Balloc>
 80052ee:	4602      	mov	r2, r0
 80052f0:	b928      	cbnz	r0, 80052fe <__mdiff+0x2e>
 80052f2:	f240 2132 	movw	r1, #562	; 0x232
 80052f6:	4b3c      	ldr	r3, [pc, #240]	; (80053e8 <__mdiff+0x118>)
 80052f8:	483c      	ldr	r0, [pc, #240]	; (80053ec <__mdiff+0x11c>)
 80052fa:	f000 faf5 	bl	80058e8 <__assert_func>
 80052fe:	2301      	movs	r3, #1
 8005300:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005304:	4610      	mov	r0, r2
 8005306:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800530a:	bfa4      	itt	ge
 800530c:	4653      	movge	r3, sl
 800530e:	46a2      	movge	sl, r4
 8005310:	4630      	mov	r0, r6
 8005312:	f8da 1004 	ldr.w	r1, [sl, #4]
 8005316:	bfa6      	itte	ge
 8005318:	461c      	movge	r4, r3
 800531a:	2500      	movge	r5, #0
 800531c:	2501      	movlt	r5, #1
 800531e:	f7ff fd41 	bl	8004da4 <_Balloc>
 8005322:	4602      	mov	r2, r0
 8005324:	b918      	cbnz	r0, 800532e <__mdiff+0x5e>
 8005326:	f44f 7110 	mov.w	r1, #576	; 0x240
 800532a:	4b2f      	ldr	r3, [pc, #188]	; (80053e8 <__mdiff+0x118>)
 800532c:	e7e4      	b.n	80052f8 <__mdiff+0x28>
 800532e:	f100 0814 	add.w	r8, r0, #20
 8005332:	f8da 7010 	ldr.w	r7, [sl, #16]
 8005336:	60c5      	str	r5, [r0, #12]
 8005338:	f04f 0c00 	mov.w	ip, #0
 800533c:	f10a 0514 	add.w	r5, sl, #20
 8005340:	f10a 0010 	add.w	r0, sl, #16
 8005344:	46c2      	mov	sl, r8
 8005346:	6926      	ldr	r6, [r4, #16]
 8005348:	f104 0914 	add.w	r9, r4, #20
 800534c:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8005350:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005354:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8005358:	f859 3b04 	ldr.w	r3, [r9], #4
 800535c:	fa1f f18b 	uxth.w	r1, fp
 8005360:	4461      	add	r1, ip
 8005362:	fa1f fc83 	uxth.w	ip, r3
 8005366:	0c1b      	lsrs	r3, r3, #16
 8005368:	eba1 010c 	sub.w	r1, r1, ip
 800536c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005370:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005374:	b289      	uxth	r1, r1
 8005376:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800537a:	454e      	cmp	r6, r9
 800537c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005380:	f84a 3b04 	str.w	r3, [sl], #4
 8005384:	d8e6      	bhi.n	8005354 <__mdiff+0x84>
 8005386:	1b33      	subs	r3, r6, r4
 8005388:	3b15      	subs	r3, #21
 800538a:	f023 0303 	bic.w	r3, r3, #3
 800538e:	3415      	adds	r4, #21
 8005390:	3304      	adds	r3, #4
 8005392:	42a6      	cmp	r6, r4
 8005394:	bf38      	it	cc
 8005396:	2304      	movcc	r3, #4
 8005398:	441d      	add	r5, r3
 800539a:	4443      	add	r3, r8
 800539c:	461e      	mov	r6, r3
 800539e:	462c      	mov	r4, r5
 80053a0:	4574      	cmp	r4, lr
 80053a2:	d30e      	bcc.n	80053c2 <__mdiff+0xf2>
 80053a4:	f10e 0103 	add.w	r1, lr, #3
 80053a8:	1b49      	subs	r1, r1, r5
 80053aa:	f021 0103 	bic.w	r1, r1, #3
 80053ae:	3d03      	subs	r5, #3
 80053b0:	45ae      	cmp	lr, r5
 80053b2:	bf38      	it	cc
 80053b4:	2100      	movcc	r1, #0
 80053b6:	4419      	add	r1, r3
 80053b8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80053bc:	b18b      	cbz	r3, 80053e2 <__mdiff+0x112>
 80053be:	6117      	str	r7, [r2, #16]
 80053c0:	e7a0      	b.n	8005304 <__mdiff+0x34>
 80053c2:	f854 8b04 	ldr.w	r8, [r4], #4
 80053c6:	fa1f f188 	uxth.w	r1, r8
 80053ca:	4461      	add	r1, ip
 80053cc:	1408      	asrs	r0, r1, #16
 80053ce:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 80053d2:	b289      	uxth	r1, r1
 80053d4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80053d8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80053dc:	f846 1b04 	str.w	r1, [r6], #4
 80053e0:	e7de      	b.n	80053a0 <__mdiff+0xd0>
 80053e2:	3f01      	subs	r7, #1
 80053e4:	e7e8      	b.n	80053b8 <__mdiff+0xe8>
 80053e6:	bf00      	nop
 80053e8:	08007a17 	.word	0x08007a17
 80053ec:	08007a28 	.word	0x08007a28

080053f0 <__d2b>:
 80053f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80053f4:	2101      	movs	r1, #1
 80053f6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80053fa:	4690      	mov	r8, r2
 80053fc:	461d      	mov	r5, r3
 80053fe:	f7ff fcd1 	bl	8004da4 <_Balloc>
 8005402:	4604      	mov	r4, r0
 8005404:	b930      	cbnz	r0, 8005414 <__d2b+0x24>
 8005406:	4602      	mov	r2, r0
 8005408:	f240 310a 	movw	r1, #778	; 0x30a
 800540c:	4b24      	ldr	r3, [pc, #144]	; (80054a0 <__d2b+0xb0>)
 800540e:	4825      	ldr	r0, [pc, #148]	; (80054a4 <__d2b+0xb4>)
 8005410:	f000 fa6a 	bl	80058e8 <__assert_func>
 8005414:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005418:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800541c:	bb2d      	cbnz	r5, 800546a <__d2b+0x7a>
 800541e:	9301      	str	r3, [sp, #4]
 8005420:	f1b8 0300 	subs.w	r3, r8, #0
 8005424:	d026      	beq.n	8005474 <__d2b+0x84>
 8005426:	4668      	mov	r0, sp
 8005428:	9300      	str	r3, [sp, #0]
 800542a:	f7ff fd87 	bl	8004f3c <__lo0bits>
 800542e:	9900      	ldr	r1, [sp, #0]
 8005430:	b1f0      	cbz	r0, 8005470 <__d2b+0x80>
 8005432:	9a01      	ldr	r2, [sp, #4]
 8005434:	f1c0 0320 	rsb	r3, r0, #32
 8005438:	fa02 f303 	lsl.w	r3, r2, r3
 800543c:	430b      	orrs	r3, r1
 800543e:	40c2      	lsrs	r2, r0
 8005440:	6163      	str	r3, [r4, #20]
 8005442:	9201      	str	r2, [sp, #4]
 8005444:	9b01      	ldr	r3, [sp, #4]
 8005446:	2b00      	cmp	r3, #0
 8005448:	bf14      	ite	ne
 800544a:	2102      	movne	r1, #2
 800544c:	2101      	moveq	r1, #1
 800544e:	61a3      	str	r3, [r4, #24]
 8005450:	6121      	str	r1, [r4, #16]
 8005452:	b1c5      	cbz	r5, 8005486 <__d2b+0x96>
 8005454:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005458:	4405      	add	r5, r0
 800545a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800545e:	603d      	str	r5, [r7, #0]
 8005460:	6030      	str	r0, [r6, #0]
 8005462:	4620      	mov	r0, r4
 8005464:	b002      	add	sp, #8
 8005466:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800546a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800546e:	e7d6      	b.n	800541e <__d2b+0x2e>
 8005470:	6161      	str	r1, [r4, #20]
 8005472:	e7e7      	b.n	8005444 <__d2b+0x54>
 8005474:	a801      	add	r0, sp, #4
 8005476:	f7ff fd61 	bl	8004f3c <__lo0bits>
 800547a:	2101      	movs	r1, #1
 800547c:	9b01      	ldr	r3, [sp, #4]
 800547e:	6121      	str	r1, [r4, #16]
 8005480:	6163      	str	r3, [r4, #20]
 8005482:	3020      	adds	r0, #32
 8005484:	e7e5      	b.n	8005452 <__d2b+0x62>
 8005486:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800548a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800548e:	6038      	str	r0, [r7, #0]
 8005490:	6918      	ldr	r0, [r3, #16]
 8005492:	f7ff fd33 	bl	8004efc <__hi0bits>
 8005496:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800549a:	6031      	str	r1, [r6, #0]
 800549c:	e7e1      	b.n	8005462 <__d2b+0x72>
 800549e:	bf00      	nop
 80054a0:	08007a17 	.word	0x08007a17
 80054a4:	08007a28 	.word	0x08007a28

080054a8 <_calloc_r>:
 80054a8:	b538      	push	{r3, r4, r5, lr}
 80054aa:	fb02 f501 	mul.w	r5, r2, r1
 80054ae:	4629      	mov	r1, r5
 80054b0:	f000 f854 	bl	800555c <_malloc_r>
 80054b4:	4604      	mov	r4, r0
 80054b6:	b118      	cbz	r0, 80054c0 <_calloc_r+0x18>
 80054b8:	462a      	mov	r2, r5
 80054ba:	2100      	movs	r1, #0
 80054bc:	f7fe f946 	bl	800374c <memset>
 80054c0:	4620      	mov	r0, r4
 80054c2:	bd38      	pop	{r3, r4, r5, pc}

080054c4 <_free_r>:
 80054c4:	b538      	push	{r3, r4, r5, lr}
 80054c6:	4605      	mov	r5, r0
 80054c8:	2900      	cmp	r1, #0
 80054ca:	d043      	beq.n	8005554 <_free_r+0x90>
 80054cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054d0:	1f0c      	subs	r4, r1, #4
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	bfb8      	it	lt
 80054d6:	18e4      	addlt	r4, r4, r3
 80054d8:	f000 fa62 	bl	80059a0 <__malloc_lock>
 80054dc:	4a1e      	ldr	r2, [pc, #120]	; (8005558 <_free_r+0x94>)
 80054de:	6813      	ldr	r3, [r2, #0]
 80054e0:	4610      	mov	r0, r2
 80054e2:	b933      	cbnz	r3, 80054f2 <_free_r+0x2e>
 80054e4:	6063      	str	r3, [r4, #4]
 80054e6:	6014      	str	r4, [r2, #0]
 80054e8:	4628      	mov	r0, r5
 80054ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80054ee:	f000 ba5d 	b.w	80059ac <__malloc_unlock>
 80054f2:	42a3      	cmp	r3, r4
 80054f4:	d90a      	bls.n	800550c <_free_r+0x48>
 80054f6:	6821      	ldr	r1, [r4, #0]
 80054f8:	1862      	adds	r2, r4, r1
 80054fa:	4293      	cmp	r3, r2
 80054fc:	bf01      	itttt	eq
 80054fe:	681a      	ldreq	r2, [r3, #0]
 8005500:	685b      	ldreq	r3, [r3, #4]
 8005502:	1852      	addeq	r2, r2, r1
 8005504:	6022      	streq	r2, [r4, #0]
 8005506:	6063      	str	r3, [r4, #4]
 8005508:	6004      	str	r4, [r0, #0]
 800550a:	e7ed      	b.n	80054e8 <_free_r+0x24>
 800550c:	461a      	mov	r2, r3
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	b10b      	cbz	r3, 8005516 <_free_r+0x52>
 8005512:	42a3      	cmp	r3, r4
 8005514:	d9fa      	bls.n	800550c <_free_r+0x48>
 8005516:	6811      	ldr	r1, [r2, #0]
 8005518:	1850      	adds	r0, r2, r1
 800551a:	42a0      	cmp	r0, r4
 800551c:	d10b      	bne.n	8005536 <_free_r+0x72>
 800551e:	6820      	ldr	r0, [r4, #0]
 8005520:	4401      	add	r1, r0
 8005522:	1850      	adds	r0, r2, r1
 8005524:	4283      	cmp	r3, r0
 8005526:	6011      	str	r1, [r2, #0]
 8005528:	d1de      	bne.n	80054e8 <_free_r+0x24>
 800552a:	6818      	ldr	r0, [r3, #0]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	4401      	add	r1, r0
 8005530:	6011      	str	r1, [r2, #0]
 8005532:	6053      	str	r3, [r2, #4]
 8005534:	e7d8      	b.n	80054e8 <_free_r+0x24>
 8005536:	d902      	bls.n	800553e <_free_r+0x7a>
 8005538:	230c      	movs	r3, #12
 800553a:	602b      	str	r3, [r5, #0]
 800553c:	e7d4      	b.n	80054e8 <_free_r+0x24>
 800553e:	6820      	ldr	r0, [r4, #0]
 8005540:	1821      	adds	r1, r4, r0
 8005542:	428b      	cmp	r3, r1
 8005544:	bf01      	itttt	eq
 8005546:	6819      	ldreq	r1, [r3, #0]
 8005548:	685b      	ldreq	r3, [r3, #4]
 800554a:	1809      	addeq	r1, r1, r0
 800554c:	6021      	streq	r1, [r4, #0]
 800554e:	6063      	str	r3, [r4, #4]
 8005550:	6054      	str	r4, [r2, #4]
 8005552:	e7c9      	b.n	80054e8 <_free_r+0x24>
 8005554:	bd38      	pop	{r3, r4, r5, pc}
 8005556:	bf00      	nop
 8005558:	2000021c 	.word	0x2000021c

0800555c <_malloc_r>:
 800555c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800555e:	1ccd      	adds	r5, r1, #3
 8005560:	f025 0503 	bic.w	r5, r5, #3
 8005564:	3508      	adds	r5, #8
 8005566:	2d0c      	cmp	r5, #12
 8005568:	bf38      	it	cc
 800556a:	250c      	movcc	r5, #12
 800556c:	2d00      	cmp	r5, #0
 800556e:	4606      	mov	r6, r0
 8005570:	db01      	blt.n	8005576 <_malloc_r+0x1a>
 8005572:	42a9      	cmp	r1, r5
 8005574:	d903      	bls.n	800557e <_malloc_r+0x22>
 8005576:	230c      	movs	r3, #12
 8005578:	6033      	str	r3, [r6, #0]
 800557a:	2000      	movs	r0, #0
 800557c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800557e:	f000 fa0f 	bl	80059a0 <__malloc_lock>
 8005582:	4921      	ldr	r1, [pc, #132]	; (8005608 <_malloc_r+0xac>)
 8005584:	680a      	ldr	r2, [r1, #0]
 8005586:	4614      	mov	r4, r2
 8005588:	b99c      	cbnz	r4, 80055b2 <_malloc_r+0x56>
 800558a:	4f20      	ldr	r7, [pc, #128]	; (800560c <_malloc_r+0xb0>)
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	b923      	cbnz	r3, 800559a <_malloc_r+0x3e>
 8005590:	4621      	mov	r1, r4
 8005592:	4630      	mov	r0, r6
 8005594:	f000 f998 	bl	80058c8 <_sbrk_r>
 8005598:	6038      	str	r0, [r7, #0]
 800559a:	4629      	mov	r1, r5
 800559c:	4630      	mov	r0, r6
 800559e:	f000 f993 	bl	80058c8 <_sbrk_r>
 80055a2:	1c43      	adds	r3, r0, #1
 80055a4:	d123      	bne.n	80055ee <_malloc_r+0x92>
 80055a6:	230c      	movs	r3, #12
 80055a8:	4630      	mov	r0, r6
 80055aa:	6033      	str	r3, [r6, #0]
 80055ac:	f000 f9fe 	bl	80059ac <__malloc_unlock>
 80055b0:	e7e3      	b.n	800557a <_malloc_r+0x1e>
 80055b2:	6823      	ldr	r3, [r4, #0]
 80055b4:	1b5b      	subs	r3, r3, r5
 80055b6:	d417      	bmi.n	80055e8 <_malloc_r+0x8c>
 80055b8:	2b0b      	cmp	r3, #11
 80055ba:	d903      	bls.n	80055c4 <_malloc_r+0x68>
 80055bc:	6023      	str	r3, [r4, #0]
 80055be:	441c      	add	r4, r3
 80055c0:	6025      	str	r5, [r4, #0]
 80055c2:	e004      	b.n	80055ce <_malloc_r+0x72>
 80055c4:	6863      	ldr	r3, [r4, #4]
 80055c6:	42a2      	cmp	r2, r4
 80055c8:	bf0c      	ite	eq
 80055ca:	600b      	streq	r3, [r1, #0]
 80055cc:	6053      	strne	r3, [r2, #4]
 80055ce:	4630      	mov	r0, r6
 80055d0:	f000 f9ec 	bl	80059ac <__malloc_unlock>
 80055d4:	f104 000b 	add.w	r0, r4, #11
 80055d8:	1d23      	adds	r3, r4, #4
 80055da:	f020 0007 	bic.w	r0, r0, #7
 80055de:	1ac2      	subs	r2, r0, r3
 80055e0:	d0cc      	beq.n	800557c <_malloc_r+0x20>
 80055e2:	1a1b      	subs	r3, r3, r0
 80055e4:	50a3      	str	r3, [r4, r2]
 80055e6:	e7c9      	b.n	800557c <_malloc_r+0x20>
 80055e8:	4622      	mov	r2, r4
 80055ea:	6864      	ldr	r4, [r4, #4]
 80055ec:	e7cc      	b.n	8005588 <_malloc_r+0x2c>
 80055ee:	1cc4      	adds	r4, r0, #3
 80055f0:	f024 0403 	bic.w	r4, r4, #3
 80055f4:	42a0      	cmp	r0, r4
 80055f6:	d0e3      	beq.n	80055c0 <_malloc_r+0x64>
 80055f8:	1a21      	subs	r1, r4, r0
 80055fa:	4630      	mov	r0, r6
 80055fc:	f000 f964 	bl	80058c8 <_sbrk_r>
 8005600:	3001      	adds	r0, #1
 8005602:	d1dd      	bne.n	80055c0 <_malloc_r+0x64>
 8005604:	e7cf      	b.n	80055a6 <_malloc_r+0x4a>
 8005606:	bf00      	nop
 8005608:	2000021c 	.word	0x2000021c
 800560c:	20000220 	.word	0x20000220

08005610 <__ssputs_r>:
 8005610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005614:	688e      	ldr	r6, [r1, #8]
 8005616:	4682      	mov	sl, r0
 8005618:	429e      	cmp	r6, r3
 800561a:	460c      	mov	r4, r1
 800561c:	4690      	mov	r8, r2
 800561e:	461f      	mov	r7, r3
 8005620:	d838      	bhi.n	8005694 <__ssputs_r+0x84>
 8005622:	898a      	ldrh	r2, [r1, #12]
 8005624:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005628:	d032      	beq.n	8005690 <__ssputs_r+0x80>
 800562a:	6825      	ldr	r5, [r4, #0]
 800562c:	6909      	ldr	r1, [r1, #16]
 800562e:	3301      	adds	r3, #1
 8005630:	eba5 0901 	sub.w	r9, r5, r1
 8005634:	6965      	ldr	r5, [r4, #20]
 8005636:	444b      	add	r3, r9
 8005638:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800563c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005640:	106d      	asrs	r5, r5, #1
 8005642:	429d      	cmp	r5, r3
 8005644:	bf38      	it	cc
 8005646:	461d      	movcc	r5, r3
 8005648:	0553      	lsls	r3, r2, #21
 800564a:	d531      	bpl.n	80056b0 <__ssputs_r+0xa0>
 800564c:	4629      	mov	r1, r5
 800564e:	f7ff ff85 	bl	800555c <_malloc_r>
 8005652:	4606      	mov	r6, r0
 8005654:	b950      	cbnz	r0, 800566c <__ssputs_r+0x5c>
 8005656:	230c      	movs	r3, #12
 8005658:	f04f 30ff 	mov.w	r0, #4294967295
 800565c:	f8ca 3000 	str.w	r3, [sl]
 8005660:	89a3      	ldrh	r3, [r4, #12]
 8005662:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005666:	81a3      	strh	r3, [r4, #12]
 8005668:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800566c:	464a      	mov	r2, r9
 800566e:	6921      	ldr	r1, [r4, #16]
 8005670:	f7ff fb8a 	bl	8004d88 <memcpy>
 8005674:	89a3      	ldrh	r3, [r4, #12]
 8005676:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800567a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800567e:	81a3      	strh	r3, [r4, #12]
 8005680:	6126      	str	r6, [r4, #16]
 8005682:	444e      	add	r6, r9
 8005684:	6026      	str	r6, [r4, #0]
 8005686:	463e      	mov	r6, r7
 8005688:	6165      	str	r5, [r4, #20]
 800568a:	eba5 0509 	sub.w	r5, r5, r9
 800568e:	60a5      	str	r5, [r4, #8]
 8005690:	42be      	cmp	r6, r7
 8005692:	d900      	bls.n	8005696 <__ssputs_r+0x86>
 8005694:	463e      	mov	r6, r7
 8005696:	4632      	mov	r2, r6
 8005698:	4641      	mov	r1, r8
 800569a:	6820      	ldr	r0, [r4, #0]
 800569c:	f000 f966 	bl	800596c <memmove>
 80056a0:	68a3      	ldr	r3, [r4, #8]
 80056a2:	6822      	ldr	r2, [r4, #0]
 80056a4:	1b9b      	subs	r3, r3, r6
 80056a6:	4432      	add	r2, r6
 80056a8:	2000      	movs	r0, #0
 80056aa:	60a3      	str	r3, [r4, #8]
 80056ac:	6022      	str	r2, [r4, #0]
 80056ae:	e7db      	b.n	8005668 <__ssputs_r+0x58>
 80056b0:	462a      	mov	r2, r5
 80056b2:	f000 f981 	bl	80059b8 <_realloc_r>
 80056b6:	4606      	mov	r6, r0
 80056b8:	2800      	cmp	r0, #0
 80056ba:	d1e1      	bne.n	8005680 <__ssputs_r+0x70>
 80056bc:	4650      	mov	r0, sl
 80056be:	6921      	ldr	r1, [r4, #16]
 80056c0:	f7ff ff00 	bl	80054c4 <_free_r>
 80056c4:	e7c7      	b.n	8005656 <__ssputs_r+0x46>
	...

080056c8 <_svfiprintf_r>:
 80056c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056cc:	4698      	mov	r8, r3
 80056ce:	898b      	ldrh	r3, [r1, #12]
 80056d0:	4607      	mov	r7, r0
 80056d2:	061b      	lsls	r3, r3, #24
 80056d4:	460d      	mov	r5, r1
 80056d6:	4614      	mov	r4, r2
 80056d8:	b09d      	sub	sp, #116	; 0x74
 80056da:	d50e      	bpl.n	80056fa <_svfiprintf_r+0x32>
 80056dc:	690b      	ldr	r3, [r1, #16]
 80056de:	b963      	cbnz	r3, 80056fa <_svfiprintf_r+0x32>
 80056e0:	2140      	movs	r1, #64	; 0x40
 80056e2:	f7ff ff3b 	bl	800555c <_malloc_r>
 80056e6:	6028      	str	r0, [r5, #0]
 80056e8:	6128      	str	r0, [r5, #16]
 80056ea:	b920      	cbnz	r0, 80056f6 <_svfiprintf_r+0x2e>
 80056ec:	230c      	movs	r3, #12
 80056ee:	603b      	str	r3, [r7, #0]
 80056f0:	f04f 30ff 	mov.w	r0, #4294967295
 80056f4:	e0d1      	b.n	800589a <_svfiprintf_r+0x1d2>
 80056f6:	2340      	movs	r3, #64	; 0x40
 80056f8:	616b      	str	r3, [r5, #20]
 80056fa:	2300      	movs	r3, #0
 80056fc:	9309      	str	r3, [sp, #36]	; 0x24
 80056fe:	2320      	movs	r3, #32
 8005700:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005704:	2330      	movs	r3, #48	; 0x30
 8005706:	f04f 0901 	mov.w	r9, #1
 800570a:	f8cd 800c 	str.w	r8, [sp, #12]
 800570e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80058b4 <_svfiprintf_r+0x1ec>
 8005712:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005716:	4623      	mov	r3, r4
 8005718:	469a      	mov	sl, r3
 800571a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800571e:	b10a      	cbz	r2, 8005724 <_svfiprintf_r+0x5c>
 8005720:	2a25      	cmp	r2, #37	; 0x25
 8005722:	d1f9      	bne.n	8005718 <_svfiprintf_r+0x50>
 8005724:	ebba 0b04 	subs.w	fp, sl, r4
 8005728:	d00b      	beq.n	8005742 <_svfiprintf_r+0x7a>
 800572a:	465b      	mov	r3, fp
 800572c:	4622      	mov	r2, r4
 800572e:	4629      	mov	r1, r5
 8005730:	4638      	mov	r0, r7
 8005732:	f7ff ff6d 	bl	8005610 <__ssputs_r>
 8005736:	3001      	adds	r0, #1
 8005738:	f000 80aa 	beq.w	8005890 <_svfiprintf_r+0x1c8>
 800573c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800573e:	445a      	add	r2, fp
 8005740:	9209      	str	r2, [sp, #36]	; 0x24
 8005742:	f89a 3000 	ldrb.w	r3, [sl]
 8005746:	2b00      	cmp	r3, #0
 8005748:	f000 80a2 	beq.w	8005890 <_svfiprintf_r+0x1c8>
 800574c:	2300      	movs	r3, #0
 800574e:	f04f 32ff 	mov.w	r2, #4294967295
 8005752:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005756:	f10a 0a01 	add.w	sl, sl, #1
 800575a:	9304      	str	r3, [sp, #16]
 800575c:	9307      	str	r3, [sp, #28]
 800575e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005762:	931a      	str	r3, [sp, #104]	; 0x68
 8005764:	4654      	mov	r4, sl
 8005766:	2205      	movs	r2, #5
 8005768:	f814 1b01 	ldrb.w	r1, [r4], #1
 800576c:	4851      	ldr	r0, [pc, #324]	; (80058b4 <_svfiprintf_r+0x1ec>)
 800576e:	f7ff fafd 	bl	8004d6c <memchr>
 8005772:	9a04      	ldr	r2, [sp, #16]
 8005774:	b9d8      	cbnz	r0, 80057ae <_svfiprintf_r+0xe6>
 8005776:	06d0      	lsls	r0, r2, #27
 8005778:	bf44      	itt	mi
 800577a:	2320      	movmi	r3, #32
 800577c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005780:	0711      	lsls	r1, r2, #28
 8005782:	bf44      	itt	mi
 8005784:	232b      	movmi	r3, #43	; 0x2b
 8005786:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800578a:	f89a 3000 	ldrb.w	r3, [sl]
 800578e:	2b2a      	cmp	r3, #42	; 0x2a
 8005790:	d015      	beq.n	80057be <_svfiprintf_r+0xf6>
 8005792:	4654      	mov	r4, sl
 8005794:	2000      	movs	r0, #0
 8005796:	f04f 0c0a 	mov.w	ip, #10
 800579a:	9a07      	ldr	r2, [sp, #28]
 800579c:	4621      	mov	r1, r4
 800579e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80057a2:	3b30      	subs	r3, #48	; 0x30
 80057a4:	2b09      	cmp	r3, #9
 80057a6:	d94e      	bls.n	8005846 <_svfiprintf_r+0x17e>
 80057a8:	b1b0      	cbz	r0, 80057d8 <_svfiprintf_r+0x110>
 80057aa:	9207      	str	r2, [sp, #28]
 80057ac:	e014      	b.n	80057d8 <_svfiprintf_r+0x110>
 80057ae:	eba0 0308 	sub.w	r3, r0, r8
 80057b2:	fa09 f303 	lsl.w	r3, r9, r3
 80057b6:	4313      	orrs	r3, r2
 80057b8:	46a2      	mov	sl, r4
 80057ba:	9304      	str	r3, [sp, #16]
 80057bc:	e7d2      	b.n	8005764 <_svfiprintf_r+0x9c>
 80057be:	9b03      	ldr	r3, [sp, #12]
 80057c0:	1d19      	adds	r1, r3, #4
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	9103      	str	r1, [sp, #12]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	bfbb      	ittet	lt
 80057ca:	425b      	neglt	r3, r3
 80057cc:	f042 0202 	orrlt.w	r2, r2, #2
 80057d0:	9307      	strge	r3, [sp, #28]
 80057d2:	9307      	strlt	r3, [sp, #28]
 80057d4:	bfb8      	it	lt
 80057d6:	9204      	strlt	r2, [sp, #16]
 80057d8:	7823      	ldrb	r3, [r4, #0]
 80057da:	2b2e      	cmp	r3, #46	; 0x2e
 80057dc:	d10c      	bne.n	80057f8 <_svfiprintf_r+0x130>
 80057de:	7863      	ldrb	r3, [r4, #1]
 80057e0:	2b2a      	cmp	r3, #42	; 0x2a
 80057e2:	d135      	bne.n	8005850 <_svfiprintf_r+0x188>
 80057e4:	9b03      	ldr	r3, [sp, #12]
 80057e6:	3402      	adds	r4, #2
 80057e8:	1d1a      	adds	r2, r3, #4
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	9203      	str	r2, [sp, #12]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	bfb8      	it	lt
 80057f2:	f04f 33ff 	movlt.w	r3, #4294967295
 80057f6:	9305      	str	r3, [sp, #20]
 80057f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80058c4 <_svfiprintf_r+0x1fc>
 80057fc:	2203      	movs	r2, #3
 80057fe:	4650      	mov	r0, sl
 8005800:	7821      	ldrb	r1, [r4, #0]
 8005802:	f7ff fab3 	bl	8004d6c <memchr>
 8005806:	b140      	cbz	r0, 800581a <_svfiprintf_r+0x152>
 8005808:	2340      	movs	r3, #64	; 0x40
 800580a:	eba0 000a 	sub.w	r0, r0, sl
 800580e:	fa03 f000 	lsl.w	r0, r3, r0
 8005812:	9b04      	ldr	r3, [sp, #16]
 8005814:	3401      	adds	r4, #1
 8005816:	4303      	orrs	r3, r0
 8005818:	9304      	str	r3, [sp, #16]
 800581a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800581e:	2206      	movs	r2, #6
 8005820:	4825      	ldr	r0, [pc, #148]	; (80058b8 <_svfiprintf_r+0x1f0>)
 8005822:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005826:	f7ff faa1 	bl	8004d6c <memchr>
 800582a:	2800      	cmp	r0, #0
 800582c:	d038      	beq.n	80058a0 <_svfiprintf_r+0x1d8>
 800582e:	4b23      	ldr	r3, [pc, #140]	; (80058bc <_svfiprintf_r+0x1f4>)
 8005830:	bb1b      	cbnz	r3, 800587a <_svfiprintf_r+0x1b2>
 8005832:	9b03      	ldr	r3, [sp, #12]
 8005834:	3307      	adds	r3, #7
 8005836:	f023 0307 	bic.w	r3, r3, #7
 800583a:	3308      	adds	r3, #8
 800583c:	9303      	str	r3, [sp, #12]
 800583e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005840:	4433      	add	r3, r6
 8005842:	9309      	str	r3, [sp, #36]	; 0x24
 8005844:	e767      	b.n	8005716 <_svfiprintf_r+0x4e>
 8005846:	460c      	mov	r4, r1
 8005848:	2001      	movs	r0, #1
 800584a:	fb0c 3202 	mla	r2, ip, r2, r3
 800584e:	e7a5      	b.n	800579c <_svfiprintf_r+0xd4>
 8005850:	2300      	movs	r3, #0
 8005852:	f04f 0c0a 	mov.w	ip, #10
 8005856:	4619      	mov	r1, r3
 8005858:	3401      	adds	r4, #1
 800585a:	9305      	str	r3, [sp, #20]
 800585c:	4620      	mov	r0, r4
 800585e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005862:	3a30      	subs	r2, #48	; 0x30
 8005864:	2a09      	cmp	r2, #9
 8005866:	d903      	bls.n	8005870 <_svfiprintf_r+0x1a8>
 8005868:	2b00      	cmp	r3, #0
 800586a:	d0c5      	beq.n	80057f8 <_svfiprintf_r+0x130>
 800586c:	9105      	str	r1, [sp, #20]
 800586e:	e7c3      	b.n	80057f8 <_svfiprintf_r+0x130>
 8005870:	4604      	mov	r4, r0
 8005872:	2301      	movs	r3, #1
 8005874:	fb0c 2101 	mla	r1, ip, r1, r2
 8005878:	e7f0      	b.n	800585c <_svfiprintf_r+0x194>
 800587a:	ab03      	add	r3, sp, #12
 800587c:	9300      	str	r3, [sp, #0]
 800587e:	462a      	mov	r2, r5
 8005880:	4638      	mov	r0, r7
 8005882:	4b0f      	ldr	r3, [pc, #60]	; (80058c0 <_svfiprintf_r+0x1f8>)
 8005884:	a904      	add	r1, sp, #16
 8005886:	f7fe f807 	bl	8003898 <_printf_float>
 800588a:	1c42      	adds	r2, r0, #1
 800588c:	4606      	mov	r6, r0
 800588e:	d1d6      	bne.n	800583e <_svfiprintf_r+0x176>
 8005890:	89ab      	ldrh	r3, [r5, #12]
 8005892:	065b      	lsls	r3, r3, #25
 8005894:	f53f af2c 	bmi.w	80056f0 <_svfiprintf_r+0x28>
 8005898:	9809      	ldr	r0, [sp, #36]	; 0x24
 800589a:	b01d      	add	sp, #116	; 0x74
 800589c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058a0:	ab03      	add	r3, sp, #12
 80058a2:	9300      	str	r3, [sp, #0]
 80058a4:	462a      	mov	r2, r5
 80058a6:	4638      	mov	r0, r7
 80058a8:	4b05      	ldr	r3, [pc, #20]	; (80058c0 <_svfiprintf_r+0x1f8>)
 80058aa:	a904      	add	r1, sp, #16
 80058ac:	f7fe fa90 	bl	8003dd0 <_printf_i>
 80058b0:	e7eb      	b.n	800588a <_svfiprintf_r+0x1c2>
 80058b2:	bf00      	nop
 80058b4:	08007b84 	.word	0x08007b84
 80058b8:	08007b8e 	.word	0x08007b8e
 80058bc:	08003899 	.word	0x08003899
 80058c0:	08005611 	.word	0x08005611
 80058c4:	08007b8a 	.word	0x08007b8a

080058c8 <_sbrk_r>:
 80058c8:	b538      	push	{r3, r4, r5, lr}
 80058ca:	2300      	movs	r3, #0
 80058cc:	4d05      	ldr	r5, [pc, #20]	; (80058e4 <_sbrk_r+0x1c>)
 80058ce:	4604      	mov	r4, r0
 80058d0:	4608      	mov	r0, r1
 80058d2:	602b      	str	r3, [r5, #0]
 80058d4:	f7fb fdee 	bl	80014b4 <_sbrk>
 80058d8:	1c43      	adds	r3, r0, #1
 80058da:	d102      	bne.n	80058e2 <_sbrk_r+0x1a>
 80058dc:	682b      	ldr	r3, [r5, #0]
 80058de:	b103      	cbz	r3, 80058e2 <_sbrk_r+0x1a>
 80058e0:	6023      	str	r3, [r4, #0]
 80058e2:	bd38      	pop	{r3, r4, r5, pc}
 80058e4:	200002c4 	.word	0x200002c4

080058e8 <__assert_func>:
 80058e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80058ea:	4614      	mov	r4, r2
 80058ec:	461a      	mov	r2, r3
 80058ee:	4b09      	ldr	r3, [pc, #36]	; (8005914 <__assert_func+0x2c>)
 80058f0:	4605      	mov	r5, r0
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	68d8      	ldr	r0, [r3, #12]
 80058f6:	b14c      	cbz	r4, 800590c <__assert_func+0x24>
 80058f8:	4b07      	ldr	r3, [pc, #28]	; (8005918 <__assert_func+0x30>)
 80058fa:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80058fe:	9100      	str	r1, [sp, #0]
 8005900:	462b      	mov	r3, r5
 8005902:	4906      	ldr	r1, [pc, #24]	; (800591c <__assert_func+0x34>)
 8005904:	f000 f80e 	bl	8005924 <fiprintf>
 8005908:	f000 faa2 	bl	8005e50 <abort>
 800590c:	4b04      	ldr	r3, [pc, #16]	; (8005920 <__assert_func+0x38>)
 800590e:	461c      	mov	r4, r3
 8005910:	e7f3      	b.n	80058fa <__assert_func+0x12>
 8005912:	bf00      	nop
 8005914:	2000000c 	.word	0x2000000c
 8005918:	08007b95 	.word	0x08007b95
 800591c:	08007ba2 	.word	0x08007ba2
 8005920:	08007bd0 	.word	0x08007bd0

08005924 <fiprintf>:
 8005924:	b40e      	push	{r1, r2, r3}
 8005926:	b503      	push	{r0, r1, lr}
 8005928:	4601      	mov	r1, r0
 800592a:	ab03      	add	r3, sp, #12
 800592c:	4805      	ldr	r0, [pc, #20]	; (8005944 <fiprintf+0x20>)
 800592e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005932:	6800      	ldr	r0, [r0, #0]
 8005934:	9301      	str	r3, [sp, #4]
 8005936:	f000 f88d 	bl	8005a54 <_vfiprintf_r>
 800593a:	b002      	add	sp, #8
 800593c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005940:	b003      	add	sp, #12
 8005942:	4770      	bx	lr
 8005944:	2000000c 	.word	0x2000000c

08005948 <__ascii_mbtowc>:
 8005948:	b082      	sub	sp, #8
 800594a:	b901      	cbnz	r1, 800594e <__ascii_mbtowc+0x6>
 800594c:	a901      	add	r1, sp, #4
 800594e:	b142      	cbz	r2, 8005962 <__ascii_mbtowc+0x1a>
 8005950:	b14b      	cbz	r3, 8005966 <__ascii_mbtowc+0x1e>
 8005952:	7813      	ldrb	r3, [r2, #0]
 8005954:	600b      	str	r3, [r1, #0]
 8005956:	7812      	ldrb	r2, [r2, #0]
 8005958:	1e10      	subs	r0, r2, #0
 800595a:	bf18      	it	ne
 800595c:	2001      	movne	r0, #1
 800595e:	b002      	add	sp, #8
 8005960:	4770      	bx	lr
 8005962:	4610      	mov	r0, r2
 8005964:	e7fb      	b.n	800595e <__ascii_mbtowc+0x16>
 8005966:	f06f 0001 	mvn.w	r0, #1
 800596a:	e7f8      	b.n	800595e <__ascii_mbtowc+0x16>

0800596c <memmove>:
 800596c:	4288      	cmp	r0, r1
 800596e:	b510      	push	{r4, lr}
 8005970:	eb01 0402 	add.w	r4, r1, r2
 8005974:	d902      	bls.n	800597c <memmove+0x10>
 8005976:	4284      	cmp	r4, r0
 8005978:	4623      	mov	r3, r4
 800597a:	d807      	bhi.n	800598c <memmove+0x20>
 800597c:	1e43      	subs	r3, r0, #1
 800597e:	42a1      	cmp	r1, r4
 8005980:	d008      	beq.n	8005994 <memmove+0x28>
 8005982:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005986:	f803 2f01 	strb.w	r2, [r3, #1]!
 800598a:	e7f8      	b.n	800597e <memmove+0x12>
 800598c:	4601      	mov	r1, r0
 800598e:	4402      	add	r2, r0
 8005990:	428a      	cmp	r2, r1
 8005992:	d100      	bne.n	8005996 <memmove+0x2a>
 8005994:	bd10      	pop	{r4, pc}
 8005996:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800599a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800599e:	e7f7      	b.n	8005990 <memmove+0x24>

080059a0 <__malloc_lock>:
 80059a0:	4801      	ldr	r0, [pc, #4]	; (80059a8 <__malloc_lock+0x8>)
 80059a2:	f000 bc15 	b.w	80061d0 <__retarget_lock_acquire_recursive>
 80059a6:	bf00      	nop
 80059a8:	200002cc 	.word	0x200002cc

080059ac <__malloc_unlock>:
 80059ac:	4801      	ldr	r0, [pc, #4]	; (80059b4 <__malloc_unlock+0x8>)
 80059ae:	f000 bc10 	b.w	80061d2 <__retarget_lock_release_recursive>
 80059b2:	bf00      	nop
 80059b4:	200002cc 	.word	0x200002cc

080059b8 <_realloc_r>:
 80059b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ba:	4607      	mov	r7, r0
 80059bc:	4614      	mov	r4, r2
 80059be:	460e      	mov	r6, r1
 80059c0:	b921      	cbnz	r1, 80059cc <_realloc_r+0x14>
 80059c2:	4611      	mov	r1, r2
 80059c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80059c8:	f7ff bdc8 	b.w	800555c <_malloc_r>
 80059cc:	b922      	cbnz	r2, 80059d8 <_realloc_r+0x20>
 80059ce:	f7ff fd79 	bl	80054c4 <_free_r>
 80059d2:	4625      	mov	r5, r4
 80059d4:	4628      	mov	r0, r5
 80059d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059d8:	f000 fc60 	bl	800629c <_malloc_usable_size_r>
 80059dc:	42a0      	cmp	r0, r4
 80059de:	d20f      	bcs.n	8005a00 <_realloc_r+0x48>
 80059e0:	4621      	mov	r1, r4
 80059e2:	4638      	mov	r0, r7
 80059e4:	f7ff fdba 	bl	800555c <_malloc_r>
 80059e8:	4605      	mov	r5, r0
 80059ea:	2800      	cmp	r0, #0
 80059ec:	d0f2      	beq.n	80059d4 <_realloc_r+0x1c>
 80059ee:	4631      	mov	r1, r6
 80059f0:	4622      	mov	r2, r4
 80059f2:	f7ff f9c9 	bl	8004d88 <memcpy>
 80059f6:	4631      	mov	r1, r6
 80059f8:	4638      	mov	r0, r7
 80059fa:	f7ff fd63 	bl	80054c4 <_free_r>
 80059fe:	e7e9      	b.n	80059d4 <_realloc_r+0x1c>
 8005a00:	4635      	mov	r5, r6
 8005a02:	e7e7      	b.n	80059d4 <_realloc_r+0x1c>

08005a04 <__sfputc_r>:
 8005a04:	6893      	ldr	r3, [r2, #8]
 8005a06:	b410      	push	{r4}
 8005a08:	3b01      	subs	r3, #1
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	6093      	str	r3, [r2, #8]
 8005a0e:	da07      	bge.n	8005a20 <__sfputc_r+0x1c>
 8005a10:	6994      	ldr	r4, [r2, #24]
 8005a12:	42a3      	cmp	r3, r4
 8005a14:	db01      	blt.n	8005a1a <__sfputc_r+0x16>
 8005a16:	290a      	cmp	r1, #10
 8005a18:	d102      	bne.n	8005a20 <__sfputc_r+0x1c>
 8005a1a:	bc10      	pop	{r4}
 8005a1c:	f000 b94a 	b.w	8005cb4 <__swbuf_r>
 8005a20:	6813      	ldr	r3, [r2, #0]
 8005a22:	1c58      	adds	r0, r3, #1
 8005a24:	6010      	str	r0, [r2, #0]
 8005a26:	7019      	strb	r1, [r3, #0]
 8005a28:	4608      	mov	r0, r1
 8005a2a:	bc10      	pop	{r4}
 8005a2c:	4770      	bx	lr

08005a2e <__sfputs_r>:
 8005a2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a30:	4606      	mov	r6, r0
 8005a32:	460f      	mov	r7, r1
 8005a34:	4614      	mov	r4, r2
 8005a36:	18d5      	adds	r5, r2, r3
 8005a38:	42ac      	cmp	r4, r5
 8005a3a:	d101      	bne.n	8005a40 <__sfputs_r+0x12>
 8005a3c:	2000      	movs	r0, #0
 8005a3e:	e007      	b.n	8005a50 <__sfputs_r+0x22>
 8005a40:	463a      	mov	r2, r7
 8005a42:	4630      	mov	r0, r6
 8005a44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a48:	f7ff ffdc 	bl	8005a04 <__sfputc_r>
 8005a4c:	1c43      	adds	r3, r0, #1
 8005a4e:	d1f3      	bne.n	8005a38 <__sfputs_r+0xa>
 8005a50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005a54 <_vfiprintf_r>:
 8005a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a58:	460d      	mov	r5, r1
 8005a5a:	4614      	mov	r4, r2
 8005a5c:	4698      	mov	r8, r3
 8005a5e:	4606      	mov	r6, r0
 8005a60:	b09d      	sub	sp, #116	; 0x74
 8005a62:	b118      	cbz	r0, 8005a6c <_vfiprintf_r+0x18>
 8005a64:	6983      	ldr	r3, [r0, #24]
 8005a66:	b90b      	cbnz	r3, 8005a6c <_vfiprintf_r+0x18>
 8005a68:	f000 fb14 	bl	8006094 <__sinit>
 8005a6c:	4b89      	ldr	r3, [pc, #548]	; (8005c94 <_vfiprintf_r+0x240>)
 8005a6e:	429d      	cmp	r5, r3
 8005a70:	d11b      	bne.n	8005aaa <_vfiprintf_r+0x56>
 8005a72:	6875      	ldr	r5, [r6, #4]
 8005a74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a76:	07d9      	lsls	r1, r3, #31
 8005a78:	d405      	bmi.n	8005a86 <_vfiprintf_r+0x32>
 8005a7a:	89ab      	ldrh	r3, [r5, #12]
 8005a7c:	059a      	lsls	r2, r3, #22
 8005a7e:	d402      	bmi.n	8005a86 <_vfiprintf_r+0x32>
 8005a80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a82:	f000 fba5 	bl	80061d0 <__retarget_lock_acquire_recursive>
 8005a86:	89ab      	ldrh	r3, [r5, #12]
 8005a88:	071b      	lsls	r3, r3, #28
 8005a8a:	d501      	bpl.n	8005a90 <_vfiprintf_r+0x3c>
 8005a8c:	692b      	ldr	r3, [r5, #16]
 8005a8e:	b9eb      	cbnz	r3, 8005acc <_vfiprintf_r+0x78>
 8005a90:	4629      	mov	r1, r5
 8005a92:	4630      	mov	r0, r6
 8005a94:	f000 f96e 	bl	8005d74 <__swsetup_r>
 8005a98:	b1c0      	cbz	r0, 8005acc <_vfiprintf_r+0x78>
 8005a9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a9c:	07dc      	lsls	r4, r3, #31
 8005a9e:	d50e      	bpl.n	8005abe <_vfiprintf_r+0x6a>
 8005aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8005aa4:	b01d      	add	sp, #116	; 0x74
 8005aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aaa:	4b7b      	ldr	r3, [pc, #492]	; (8005c98 <_vfiprintf_r+0x244>)
 8005aac:	429d      	cmp	r5, r3
 8005aae:	d101      	bne.n	8005ab4 <_vfiprintf_r+0x60>
 8005ab0:	68b5      	ldr	r5, [r6, #8]
 8005ab2:	e7df      	b.n	8005a74 <_vfiprintf_r+0x20>
 8005ab4:	4b79      	ldr	r3, [pc, #484]	; (8005c9c <_vfiprintf_r+0x248>)
 8005ab6:	429d      	cmp	r5, r3
 8005ab8:	bf08      	it	eq
 8005aba:	68f5      	ldreq	r5, [r6, #12]
 8005abc:	e7da      	b.n	8005a74 <_vfiprintf_r+0x20>
 8005abe:	89ab      	ldrh	r3, [r5, #12]
 8005ac0:	0598      	lsls	r0, r3, #22
 8005ac2:	d4ed      	bmi.n	8005aa0 <_vfiprintf_r+0x4c>
 8005ac4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005ac6:	f000 fb84 	bl	80061d2 <__retarget_lock_release_recursive>
 8005aca:	e7e9      	b.n	8005aa0 <_vfiprintf_r+0x4c>
 8005acc:	2300      	movs	r3, #0
 8005ace:	9309      	str	r3, [sp, #36]	; 0x24
 8005ad0:	2320      	movs	r3, #32
 8005ad2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005ad6:	2330      	movs	r3, #48	; 0x30
 8005ad8:	f04f 0901 	mov.w	r9, #1
 8005adc:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ae0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005ca0 <_vfiprintf_r+0x24c>
 8005ae4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005ae8:	4623      	mov	r3, r4
 8005aea:	469a      	mov	sl, r3
 8005aec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005af0:	b10a      	cbz	r2, 8005af6 <_vfiprintf_r+0xa2>
 8005af2:	2a25      	cmp	r2, #37	; 0x25
 8005af4:	d1f9      	bne.n	8005aea <_vfiprintf_r+0x96>
 8005af6:	ebba 0b04 	subs.w	fp, sl, r4
 8005afa:	d00b      	beq.n	8005b14 <_vfiprintf_r+0xc0>
 8005afc:	465b      	mov	r3, fp
 8005afe:	4622      	mov	r2, r4
 8005b00:	4629      	mov	r1, r5
 8005b02:	4630      	mov	r0, r6
 8005b04:	f7ff ff93 	bl	8005a2e <__sfputs_r>
 8005b08:	3001      	adds	r0, #1
 8005b0a:	f000 80aa 	beq.w	8005c62 <_vfiprintf_r+0x20e>
 8005b0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b10:	445a      	add	r2, fp
 8005b12:	9209      	str	r2, [sp, #36]	; 0x24
 8005b14:	f89a 3000 	ldrb.w	r3, [sl]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	f000 80a2 	beq.w	8005c62 <_vfiprintf_r+0x20e>
 8005b1e:	2300      	movs	r3, #0
 8005b20:	f04f 32ff 	mov.w	r2, #4294967295
 8005b24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b28:	f10a 0a01 	add.w	sl, sl, #1
 8005b2c:	9304      	str	r3, [sp, #16]
 8005b2e:	9307      	str	r3, [sp, #28]
 8005b30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005b34:	931a      	str	r3, [sp, #104]	; 0x68
 8005b36:	4654      	mov	r4, sl
 8005b38:	2205      	movs	r2, #5
 8005b3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b3e:	4858      	ldr	r0, [pc, #352]	; (8005ca0 <_vfiprintf_r+0x24c>)
 8005b40:	f7ff f914 	bl	8004d6c <memchr>
 8005b44:	9a04      	ldr	r2, [sp, #16]
 8005b46:	b9d8      	cbnz	r0, 8005b80 <_vfiprintf_r+0x12c>
 8005b48:	06d1      	lsls	r1, r2, #27
 8005b4a:	bf44      	itt	mi
 8005b4c:	2320      	movmi	r3, #32
 8005b4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b52:	0713      	lsls	r3, r2, #28
 8005b54:	bf44      	itt	mi
 8005b56:	232b      	movmi	r3, #43	; 0x2b
 8005b58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b5c:	f89a 3000 	ldrb.w	r3, [sl]
 8005b60:	2b2a      	cmp	r3, #42	; 0x2a
 8005b62:	d015      	beq.n	8005b90 <_vfiprintf_r+0x13c>
 8005b64:	4654      	mov	r4, sl
 8005b66:	2000      	movs	r0, #0
 8005b68:	f04f 0c0a 	mov.w	ip, #10
 8005b6c:	9a07      	ldr	r2, [sp, #28]
 8005b6e:	4621      	mov	r1, r4
 8005b70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b74:	3b30      	subs	r3, #48	; 0x30
 8005b76:	2b09      	cmp	r3, #9
 8005b78:	d94e      	bls.n	8005c18 <_vfiprintf_r+0x1c4>
 8005b7a:	b1b0      	cbz	r0, 8005baa <_vfiprintf_r+0x156>
 8005b7c:	9207      	str	r2, [sp, #28]
 8005b7e:	e014      	b.n	8005baa <_vfiprintf_r+0x156>
 8005b80:	eba0 0308 	sub.w	r3, r0, r8
 8005b84:	fa09 f303 	lsl.w	r3, r9, r3
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	46a2      	mov	sl, r4
 8005b8c:	9304      	str	r3, [sp, #16]
 8005b8e:	e7d2      	b.n	8005b36 <_vfiprintf_r+0xe2>
 8005b90:	9b03      	ldr	r3, [sp, #12]
 8005b92:	1d19      	adds	r1, r3, #4
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	9103      	str	r1, [sp, #12]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	bfbb      	ittet	lt
 8005b9c:	425b      	neglt	r3, r3
 8005b9e:	f042 0202 	orrlt.w	r2, r2, #2
 8005ba2:	9307      	strge	r3, [sp, #28]
 8005ba4:	9307      	strlt	r3, [sp, #28]
 8005ba6:	bfb8      	it	lt
 8005ba8:	9204      	strlt	r2, [sp, #16]
 8005baa:	7823      	ldrb	r3, [r4, #0]
 8005bac:	2b2e      	cmp	r3, #46	; 0x2e
 8005bae:	d10c      	bne.n	8005bca <_vfiprintf_r+0x176>
 8005bb0:	7863      	ldrb	r3, [r4, #1]
 8005bb2:	2b2a      	cmp	r3, #42	; 0x2a
 8005bb4:	d135      	bne.n	8005c22 <_vfiprintf_r+0x1ce>
 8005bb6:	9b03      	ldr	r3, [sp, #12]
 8005bb8:	3402      	adds	r4, #2
 8005bba:	1d1a      	adds	r2, r3, #4
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	9203      	str	r2, [sp, #12]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	bfb8      	it	lt
 8005bc4:	f04f 33ff 	movlt.w	r3, #4294967295
 8005bc8:	9305      	str	r3, [sp, #20]
 8005bca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005cb0 <_vfiprintf_r+0x25c>
 8005bce:	2203      	movs	r2, #3
 8005bd0:	4650      	mov	r0, sl
 8005bd2:	7821      	ldrb	r1, [r4, #0]
 8005bd4:	f7ff f8ca 	bl	8004d6c <memchr>
 8005bd8:	b140      	cbz	r0, 8005bec <_vfiprintf_r+0x198>
 8005bda:	2340      	movs	r3, #64	; 0x40
 8005bdc:	eba0 000a 	sub.w	r0, r0, sl
 8005be0:	fa03 f000 	lsl.w	r0, r3, r0
 8005be4:	9b04      	ldr	r3, [sp, #16]
 8005be6:	3401      	adds	r4, #1
 8005be8:	4303      	orrs	r3, r0
 8005bea:	9304      	str	r3, [sp, #16]
 8005bec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bf0:	2206      	movs	r2, #6
 8005bf2:	482c      	ldr	r0, [pc, #176]	; (8005ca4 <_vfiprintf_r+0x250>)
 8005bf4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005bf8:	f7ff f8b8 	bl	8004d6c <memchr>
 8005bfc:	2800      	cmp	r0, #0
 8005bfe:	d03f      	beq.n	8005c80 <_vfiprintf_r+0x22c>
 8005c00:	4b29      	ldr	r3, [pc, #164]	; (8005ca8 <_vfiprintf_r+0x254>)
 8005c02:	bb1b      	cbnz	r3, 8005c4c <_vfiprintf_r+0x1f8>
 8005c04:	9b03      	ldr	r3, [sp, #12]
 8005c06:	3307      	adds	r3, #7
 8005c08:	f023 0307 	bic.w	r3, r3, #7
 8005c0c:	3308      	adds	r3, #8
 8005c0e:	9303      	str	r3, [sp, #12]
 8005c10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c12:	443b      	add	r3, r7
 8005c14:	9309      	str	r3, [sp, #36]	; 0x24
 8005c16:	e767      	b.n	8005ae8 <_vfiprintf_r+0x94>
 8005c18:	460c      	mov	r4, r1
 8005c1a:	2001      	movs	r0, #1
 8005c1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c20:	e7a5      	b.n	8005b6e <_vfiprintf_r+0x11a>
 8005c22:	2300      	movs	r3, #0
 8005c24:	f04f 0c0a 	mov.w	ip, #10
 8005c28:	4619      	mov	r1, r3
 8005c2a:	3401      	adds	r4, #1
 8005c2c:	9305      	str	r3, [sp, #20]
 8005c2e:	4620      	mov	r0, r4
 8005c30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c34:	3a30      	subs	r2, #48	; 0x30
 8005c36:	2a09      	cmp	r2, #9
 8005c38:	d903      	bls.n	8005c42 <_vfiprintf_r+0x1ee>
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d0c5      	beq.n	8005bca <_vfiprintf_r+0x176>
 8005c3e:	9105      	str	r1, [sp, #20]
 8005c40:	e7c3      	b.n	8005bca <_vfiprintf_r+0x176>
 8005c42:	4604      	mov	r4, r0
 8005c44:	2301      	movs	r3, #1
 8005c46:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c4a:	e7f0      	b.n	8005c2e <_vfiprintf_r+0x1da>
 8005c4c:	ab03      	add	r3, sp, #12
 8005c4e:	9300      	str	r3, [sp, #0]
 8005c50:	462a      	mov	r2, r5
 8005c52:	4630      	mov	r0, r6
 8005c54:	4b15      	ldr	r3, [pc, #84]	; (8005cac <_vfiprintf_r+0x258>)
 8005c56:	a904      	add	r1, sp, #16
 8005c58:	f7fd fe1e 	bl	8003898 <_printf_float>
 8005c5c:	4607      	mov	r7, r0
 8005c5e:	1c78      	adds	r0, r7, #1
 8005c60:	d1d6      	bne.n	8005c10 <_vfiprintf_r+0x1bc>
 8005c62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c64:	07d9      	lsls	r1, r3, #31
 8005c66:	d405      	bmi.n	8005c74 <_vfiprintf_r+0x220>
 8005c68:	89ab      	ldrh	r3, [r5, #12]
 8005c6a:	059a      	lsls	r2, r3, #22
 8005c6c:	d402      	bmi.n	8005c74 <_vfiprintf_r+0x220>
 8005c6e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c70:	f000 faaf 	bl	80061d2 <__retarget_lock_release_recursive>
 8005c74:	89ab      	ldrh	r3, [r5, #12]
 8005c76:	065b      	lsls	r3, r3, #25
 8005c78:	f53f af12 	bmi.w	8005aa0 <_vfiprintf_r+0x4c>
 8005c7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c7e:	e711      	b.n	8005aa4 <_vfiprintf_r+0x50>
 8005c80:	ab03      	add	r3, sp, #12
 8005c82:	9300      	str	r3, [sp, #0]
 8005c84:	462a      	mov	r2, r5
 8005c86:	4630      	mov	r0, r6
 8005c88:	4b08      	ldr	r3, [pc, #32]	; (8005cac <_vfiprintf_r+0x258>)
 8005c8a:	a904      	add	r1, sp, #16
 8005c8c:	f7fe f8a0 	bl	8003dd0 <_printf_i>
 8005c90:	e7e4      	b.n	8005c5c <_vfiprintf_r+0x208>
 8005c92:	bf00      	nop
 8005c94:	08007cfc 	.word	0x08007cfc
 8005c98:	08007d1c 	.word	0x08007d1c
 8005c9c:	08007cdc 	.word	0x08007cdc
 8005ca0:	08007b84 	.word	0x08007b84
 8005ca4:	08007b8e 	.word	0x08007b8e
 8005ca8:	08003899 	.word	0x08003899
 8005cac:	08005a2f 	.word	0x08005a2f
 8005cb0:	08007b8a 	.word	0x08007b8a

08005cb4 <__swbuf_r>:
 8005cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cb6:	460e      	mov	r6, r1
 8005cb8:	4614      	mov	r4, r2
 8005cba:	4605      	mov	r5, r0
 8005cbc:	b118      	cbz	r0, 8005cc6 <__swbuf_r+0x12>
 8005cbe:	6983      	ldr	r3, [r0, #24]
 8005cc0:	b90b      	cbnz	r3, 8005cc6 <__swbuf_r+0x12>
 8005cc2:	f000 f9e7 	bl	8006094 <__sinit>
 8005cc6:	4b21      	ldr	r3, [pc, #132]	; (8005d4c <__swbuf_r+0x98>)
 8005cc8:	429c      	cmp	r4, r3
 8005cca:	d12b      	bne.n	8005d24 <__swbuf_r+0x70>
 8005ccc:	686c      	ldr	r4, [r5, #4]
 8005cce:	69a3      	ldr	r3, [r4, #24]
 8005cd0:	60a3      	str	r3, [r4, #8]
 8005cd2:	89a3      	ldrh	r3, [r4, #12]
 8005cd4:	071a      	lsls	r2, r3, #28
 8005cd6:	d52f      	bpl.n	8005d38 <__swbuf_r+0x84>
 8005cd8:	6923      	ldr	r3, [r4, #16]
 8005cda:	b36b      	cbz	r3, 8005d38 <__swbuf_r+0x84>
 8005cdc:	6923      	ldr	r3, [r4, #16]
 8005cde:	6820      	ldr	r0, [r4, #0]
 8005ce0:	b2f6      	uxtb	r6, r6
 8005ce2:	1ac0      	subs	r0, r0, r3
 8005ce4:	6963      	ldr	r3, [r4, #20]
 8005ce6:	4637      	mov	r7, r6
 8005ce8:	4283      	cmp	r3, r0
 8005cea:	dc04      	bgt.n	8005cf6 <__swbuf_r+0x42>
 8005cec:	4621      	mov	r1, r4
 8005cee:	4628      	mov	r0, r5
 8005cf0:	f000 f93c 	bl	8005f6c <_fflush_r>
 8005cf4:	bb30      	cbnz	r0, 8005d44 <__swbuf_r+0x90>
 8005cf6:	68a3      	ldr	r3, [r4, #8]
 8005cf8:	3001      	adds	r0, #1
 8005cfa:	3b01      	subs	r3, #1
 8005cfc:	60a3      	str	r3, [r4, #8]
 8005cfe:	6823      	ldr	r3, [r4, #0]
 8005d00:	1c5a      	adds	r2, r3, #1
 8005d02:	6022      	str	r2, [r4, #0]
 8005d04:	701e      	strb	r6, [r3, #0]
 8005d06:	6963      	ldr	r3, [r4, #20]
 8005d08:	4283      	cmp	r3, r0
 8005d0a:	d004      	beq.n	8005d16 <__swbuf_r+0x62>
 8005d0c:	89a3      	ldrh	r3, [r4, #12]
 8005d0e:	07db      	lsls	r3, r3, #31
 8005d10:	d506      	bpl.n	8005d20 <__swbuf_r+0x6c>
 8005d12:	2e0a      	cmp	r6, #10
 8005d14:	d104      	bne.n	8005d20 <__swbuf_r+0x6c>
 8005d16:	4621      	mov	r1, r4
 8005d18:	4628      	mov	r0, r5
 8005d1a:	f000 f927 	bl	8005f6c <_fflush_r>
 8005d1e:	b988      	cbnz	r0, 8005d44 <__swbuf_r+0x90>
 8005d20:	4638      	mov	r0, r7
 8005d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d24:	4b0a      	ldr	r3, [pc, #40]	; (8005d50 <__swbuf_r+0x9c>)
 8005d26:	429c      	cmp	r4, r3
 8005d28:	d101      	bne.n	8005d2e <__swbuf_r+0x7a>
 8005d2a:	68ac      	ldr	r4, [r5, #8]
 8005d2c:	e7cf      	b.n	8005cce <__swbuf_r+0x1a>
 8005d2e:	4b09      	ldr	r3, [pc, #36]	; (8005d54 <__swbuf_r+0xa0>)
 8005d30:	429c      	cmp	r4, r3
 8005d32:	bf08      	it	eq
 8005d34:	68ec      	ldreq	r4, [r5, #12]
 8005d36:	e7ca      	b.n	8005cce <__swbuf_r+0x1a>
 8005d38:	4621      	mov	r1, r4
 8005d3a:	4628      	mov	r0, r5
 8005d3c:	f000 f81a 	bl	8005d74 <__swsetup_r>
 8005d40:	2800      	cmp	r0, #0
 8005d42:	d0cb      	beq.n	8005cdc <__swbuf_r+0x28>
 8005d44:	f04f 37ff 	mov.w	r7, #4294967295
 8005d48:	e7ea      	b.n	8005d20 <__swbuf_r+0x6c>
 8005d4a:	bf00      	nop
 8005d4c:	08007cfc 	.word	0x08007cfc
 8005d50:	08007d1c 	.word	0x08007d1c
 8005d54:	08007cdc 	.word	0x08007cdc

08005d58 <__ascii_wctomb>:
 8005d58:	4603      	mov	r3, r0
 8005d5a:	4608      	mov	r0, r1
 8005d5c:	b141      	cbz	r1, 8005d70 <__ascii_wctomb+0x18>
 8005d5e:	2aff      	cmp	r2, #255	; 0xff
 8005d60:	d904      	bls.n	8005d6c <__ascii_wctomb+0x14>
 8005d62:	228a      	movs	r2, #138	; 0x8a
 8005d64:	f04f 30ff 	mov.w	r0, #4294967295
 8005d68:	601a      	str	r2, [r3, #0]
 8005d6a:	4770      	bx	lr
 8005d6c:	2001      	movs	r0, #1
 8005d6e:	700a      	strb	r2, [r1, #0]
 8005d70:	4770      	bx	lr
	...

08005d74 <__swsetup_r>:
 8005d74:	4b32      	ldr	r3, [pc, #200]	; (8005e40 <__swsetup_r+0xcc>)
 8005d76:	b570      	push	{r4, r5, r6, lr}
 8005d78:	681d      	ldr	r5, [r3, #0]
 8005d7a:	4606      	mov	r6, r0
 8005d7c:	460c      	mov	r4, r1
 8005d7e:	b125      	cbz	r5, 8005d8a <__swsetup_r+0x16>
 8005d80:	69ab      	ldr	r3, [r5, #24]
 8005d82:	b913      	cbnz	r3, 8005d8a <__swsetup_r+0x16>
 8005d84:	4628      	mov	r0, r5
 8005d86:	f000 f985 	bl	8006094 <__sinit>
 8005d8a:	4b2e      	ldr	r3, [pc, #184]	; (8005e44 <__swsetup_r+0xd0>)
 8005d8c:	429c      	cmp	r4, r3
 8005d8e:	d10f      	bne.n	8005db0 <__swsetup_r+0x3c>
 8005d90:	686c      	ldr	r4, [r5, #4]
 8005d92:	89a3      	ldrh	r3, [r4, #12]
 8005d94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d98:	0719      	lsls	r1, r3, #28
 8005d9a:	d42c      	bmi.n	8005df6 <__swsetup_r+0x82>
 8005d9c:	06dd      	lsls	r5, r3, #27
 8005d9e:	d411      	bmi.n	8005dc4 <__swsetup_r+0x50>
 8005da0:	2309      	movs	r3, #9
 8005da2:	6033      	str	r3, [r6, #0]
 8005da4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005da8:	f04f 30ff 	mov.w	r0, #4294967295
 8005dac:	81a3      	strh	r3, [r4, #12]
 8005dae:	e03e      	b.n	8005e2e <__swsetup_r+0xba>
 8005db0:	4b25      	ldr	r3, [pc, #148]	; (8005e48 <__swsetup_r+0xd4>)
 8005db2:	429c      	cmp	r4, r3
 8005db4:	d101      	bne.n	8005dba <__swsetup_r+0x46>
 8005db6:	68ac      	ldr	r4, [r5, #8]
 8005db8:	e7eb      	b.n	8005d92 <__swsetup_r+0x1e>
 8005dba:	4b24      	ldr	r3, [pc, #144]	; (8005e4c <__swsetup_r+0xd8>)
 8005dbc:	429c      	cmp	r4, r3
 8005dbe:	bf08      	it	eq
 8005dc0:	68ec      	ldreq	r4, [r5, #12]
 8005dc2:	e7e6      	b.n	8005d92 <__swsetup_r+0x1e>
 8005dc4:	0758      	lsls	r0, r3, #29
 8005dc6:	d512      	bpl.n	8005dee <__swsetup_r+0x7a>
 8005dc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005dca:	b141      	cbz	r1, 8005dde <__swsetup_r+0x6a>
 8005dcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005dd0:	4299      	cmp	r1, r3
 8005dd2:	d002      	beq.n	8005dda <__swsetup_r+0x66>
 8005dd4:	4630      	mov	r0, r6
 8005dd6:	f7ff fb75 	bl	80054c4 <_free_r>
 8005dda:	2300      	movs	r3, #0
 8005ddc:	6363      	str	r3, [r4, #52]	; 0x34
 8005dde:	89a3      	ldrh	r3, [r4, #12]
 8005de0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005de4:	81a3      	strh	r3, [r4, #12]
 8005de6:	2300      	movs	r3, #0
 8005de8:	6063      	str	r3, [r4, #4]
 8005dea:	6923      	ldr	r3, [r4, #16]
 8005dec:	6023      	str	r3, [r4, #0]
 8005dee:	89a3      	ldrh	r3, [r4, #12]
 8005df0:	f043 0308 	orr.w	r3, r3, #8
 8005df4:	81a3      	strh	r3, [r4, #12]
 8005df6:	6923      	ldr	r3, [r4, #16]
 8005df8:	b94b      	cbnz	r3, 8005e0e <__swsetup_r+0x9a>
 8005dfa:	89a3      	ldrh	r3, [r4, #12]
 8005dfc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005e00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e04:	d003      	beq.n	8005e0e <__swsetup_r+0x9a>
 8005e06:	4621      	mov	r1, r4
 8005e08:	4630      	mov	r0, r6
 8005e0a:	f000 fa07 	bl	800621c <__smakebuf_r>
 8005e0e:	89a0      	ldrh	r0, [r4, #12]
 8005e10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005e14:	f010 0301 	ands.w	r3, r0, #1
 8005e18:	d00a      	beq.n	8005e30 <__swsetup_r+0xbc>
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	60a3      	str	r3, [r4, #8]
 8005e1e:	6963      	ldr	r3, [r4, #20]
 8005e20:	425b      	negs	r3, r3
 8005e22:	61a3      	str	r3, [r4, #24]
 8005e24:	6923      	ldr	r3, [r4, #16]
 8005e26:	b943      	cbnz	r3, 8005e3a <__swsetup_r+0xc6>
 8005e28:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005e2c:	d1ba      	bne.n	8005da4 <__swsetup_r+0x30>
 8005e2e:	bd70      	pop	{r4, r5, r6, pc}
 8005e30:	0781      	lsls	r1, r0, #30
 8005e32:	bf58      	it	pl
 8005e34:	6963      	ldrpl	r3, [r4, #20]
 8005e36:	60a3      	str	r3, [r4, #8]
 8005e38:	e7f4      	b.n	8005e24 <__swsetup_r+0xb0>
 8005e3a:	2000      	movs	r0, #0
 8005e3c:	e7f7      	b.n	8005e2e <__swsetup_r+0xba>
 8005e3e:	bf00      	nop
 8005e40:	2000000c 	.word	0x2000000c
 8005e44:	08007cfc 	.word	0x08007cfc
 8005e48:	08007d1c 	.word	0x08007d1c
 8005e4c:	08007cdc 	.word	0x08007cdc

08005e50 <abort>:
 8005e50:	2006      	movs	r0, #6
 8005e52:	b508      	push	{r3, lr}
 8005e54:	f000 fa52 	bl	80062fc <raise>
 8005e58:	2001      	movs	r0, #1
 8005e5a:	f7fb fab7 	bl	80013cc <_exit>
	...

08005e60 <__sflush_r>:
 8005e60:	898a      	ldrh	r2, [r1, #12]
 8005e62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e66:	4605      	mov	r5, r0
 8005e68:	0710      	lsls	r0, r2, #28
 8005e6a:	460c      	mov	r4, r1
 8005e6c:	d458      	bmi.n	8005f20 <__sflush_r+0xc0>
 8005e6e:	684b      	ldr	r3, [r1, #4]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	dc05      	bgt.n	8005e80 <__sflush_r+0x20>
 8005e74:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	dc02      	bgt.n	8005e80 <__sflush_r+0x20>
 8005e7a:	2000      	movs	r0, #0
 8005e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005e82:	2e00      	cmp	r6, #0
 8005e84:	d0f9      	beq.n	8005e7a <__sflush_r+0x1a>
 8005e86:	2300      	movs	r3, #0
 8005e88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005e8c:	682f      	ldr	r7, [r5, #0]
 8005e8e:	602b      	str	r3, [r5, #0]
 8005e90:	d032      	beq.n	8005ef8 <__sflush_r+0x98>
 8005e92:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005e94:	89a3      	ldrh	r3, [r4, #12]
 8005e96:	075a      	lsls	r2, r3, #29
 8005e98:	d505      	bpl.n	8005ea6 <__sflush_r+0x46>
 8005e9a:	6863      	ldr	r3, [r4, #4]
 8005e9c:	1ac0      	subs	r0, r0, r3
 8005e9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005ea0:	b10b      	cbz	r3, 8005ea6 <__sflush_r+0x46>
 8005ea2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005ea4:	1ac0      	subs	r0, r0, r3
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005eac:	4628      	mov	r0, r5
 8005eae:	6a21      	ldr	r1, [r4, #32]
 8005eb0:	47b0      	blx	r6
 8005eb2:	1c43      	adds	r3, r0, #1
 8005eb4:	89a3      	ldrh	r3, [r4, #12]
 8005eb6:	d106      	bne.n	8005ec6 <__sflush_r+0x66>
 8005eb8:	6829      	ldr	r1, [r5, #0]
 8005eba:	291d      	cmp	r1, #29
 8005ebc:	d82c      	bhi.n	8005f18 <__sflush_r+0xb8>
 8005ebe:	4a2a      	ldr	r2, [pc, #168]	; (8005f68 <__sflush_r+0x108>)
 8005ec0:	40ca      	lsrs	r2, r1
 8005ec2:	07d6      	lsls	r6, r2, #31
 8005ec4:	d528      	bpl.n	8005f18 <__sflush_r+0xb8>
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	6062      	str	r2, [r4, #4]
 8005eca:	6922      	ldr	r2, [r4, #16]
 8005ecc:	04d9      	lsls	r1, r3, #19
 8005ece:	6022      	str	r2, [r4, #0]
 8005ed0:	d504      	bpl.n	8005edc <__sflush_r+0x7c>
 8005ed2:	1c42      	adds	r2, r0, #1
 8005ed4:	d101      	bne.n	8005eda <__sflush_r+0x7a>
 8005ed6:	682b      	ldr	r3, [r5, #0]
 8005ed8:	b903      	cbnz	r3, 8005edc <__sflush_r+0x7c>
 8005eda:	6560      	str	r0, [r4, #84]	; 0x54
 8005edc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ede:	602f      	str	r7, [r5, #0]
 8005ee0:	2900      	cmp	r1, #0
 8005ee2:	d0ca      	beq.n	8005e7a <__sflush_r+0x1a>
 8005ee4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ee8:	4299      	cmp	r1, r3
 8005eea:	d002      	beq.n	8005ef2 <__sflush_r+0x92>
 8005eec:	4628      	mov	r0, r5
 8005eee:	f7ff fae9 	bl	80054c4 <_free_r>
 8005ef2:	2000      	movs	r0, #0
 8005ef4:	6360      	str	r0, [r4, #52]	; 0x34
 8005ef6:	e7c1      	b.n	8005e7c <__sflush_r+0x1c>
 8005ef8:	6a21      	ldr	r1, [r4, #32]
 8005efa:	2301      	movs	r3, #1
 8005efc:	4628      	mov	r0, r5
 8005efe:	47b0      	blx	r6
 8005f00:	1c41      	adds	r1, r0, #1
 8005f02:	d1c7      	bne.n	8005e94 <__sflush_r+0x34>
 8005f04:	682b      	ldr	r3, [r5, #0]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d0c4      	beq.n	8005e94 <__sflush_r+0x34>
 8005f0a:	2b1d      	cmp	r3, #29
 8005f0c:	d001      	beq.n	8005f12 <__sflush_r+0xb2>
 8005f0e:	2b16      	cmp	r3, #22
 8005f10:	d101      	bne.n	8005f16 <__sflush_r+0xb6>
 8005f12:	602f      	str	r7, [r5, #0]
 8005f14:	e7b1      	b.n	8005e7a <__sflush_r+0x1a>
 8005f16:	89a3      	ldrh	r3, [r4, #12]
 8005f18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f1c:	81a3      	strh	r3, [r4, #12]
 8005f1e:	e7ad      	b.n	8005e7c <__sflush_r+0x1c>
 8005f20:	690f      	ldr	r7, [r1, #16]
 8005f22:	2f00      	cmp	r7, #0
 8005f24:	d0a9      	beq.n	8005e7a <__sflush_r+0x1a>
 8005f26:	0793      	lsls	r3, r2, #30
 8005f28:	bf18      	it	ne
 8005f2a:	2300      	movne	r3, #0
 8005f2c:	680e      	ldr	r6, [r1, #0]
 8005f2e:	bf08      	it	eq
 8005f30:	694b      	ldreq	r3, [r1, #20]
 8005f32:	eba6 0807 	sub.w	r8, r6, r7
 8005f36:	600f      	str	r7, [r1, #0]
 8005f38:	608b      	str	r3, [r1, #8]
 8005f3a:	f1b8 0f00 	cmp.w	r8, #0
 8005f3e:	dd9c      	ble.n	8005e7a <__sflush_r+0x1a>
 8005f40:	4643      	mov	r3, r8
 8005f42:	463a      	mov	r2, r7
 8005f44:	4628      	mov	r0, r5
 8005f46:	6a21      	ldr	r1, [r4, #32]
 8005f48:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005f4a:	47b0      	blx	r6
 8005f4c:	2800      	cmp	r0, #0
 8005f4e:	dc06      	bgt.n	8005f5e <__sflush_r+0xfe>
 8005f50:	89a3      	ldrh	r3, [r4, #12]
 8005f52:	f04f 30ff 	mov.w	r0, #4294967295
 8005f56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f5a:	81a3      	strh	r3, [r4, #12]
 8005f5c:	e78e      	b.n	8005e7c <__sflush_r+0x1c>
 8005f5e:	4407      	add	r7, r0
 8005f60:	eba8 0800 	sub.w	r8, r8, r0
 8005f64:	e7e9      	b.n	8005f3a <__sflush_r+0xda>
 8005f66:	bf00      	nop
 8005f68:	20400001 	.word	0x20400001

08005f6c <_fflush_r>:
 8005f6c:	b538      	push	{r3, r4, r5, lr}
 8005f6e:	690b      	ldr	r3, [r1, #16]
 8005f70:	4605      	mov	r5, r0
 8005f72:	460c      	mov	r4, r1
 8005f74:	b913      	cbnz	r3, 8005f7c <_fflush_r+0x10>
 8005f76:	2500      	movs	r5, #0
 8005f78:	4628      	mov	r0, r5
 8005f7a:	bd38      	pop	{r3, r4, r5, pc}
 8005f7c:	b118      	cbz	r0, 8005f86 <_fflush_r+0x1a>
 8005f7e:	6983      	ldr	r3, [r0, #24]
 8005f80:	b90b      	cbnz	r3, 8005f86 <_fflush_r+0x1a>
 8005f82:	f000 f887 	bl	8006094 <__sinit>
 8005f86:	4b14      	ldr	r3, [pc, #80]	; (8005fd8 <_fflush_r+0x6c>)
 8005f88:	429c      	cmp	r4, r3
 8005f8a:	d11b      	bne.n	8005fc4 <_fflush_r+0x58>
 8005f8c:	686c      	ldr	r4, [r5, #4]
 8005f8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d0ef      	beq.n	8005f76 <_fflush_r+0xa>
 8005f96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005f98:	07d0      	lsls	r0, r2, #31
 8005f9a:	d404      	bmi.n	8005fa6 <_fflush_r+0x3a>
 8005f9c:	0599      	lsls	r1, r3, #22
 8005f9e:	d402      	bmi.n	8005fa6 <_fflush_r+0x3a>
 8005fa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005fa2:	f000 f915 	bl	80061d0 <__retarget_lock_acquire_recursive>
 8005fa6:	4628      	mov	r0, r5
 8005fa8:	4621      	mov	r1, r4
 8005faa:	f7ff ff59 	bl	8005e60 <__sflush_r>
 8005fae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005fb0:	4605      	mov	r5, r0
 8005fb2:	07da      	lsls	r2, r3, #31
 8005fb4:	d4e0      	bmi.n	8005f78 <_fflush_r+0xc>
 8005fb6:	89a3      	ldrh	r3, [r4, #12]
 8005fb8:	059b      	lsls	r3, r3, #22
 8005fba:	d4dd      	bmi.n	8005f78 <_fflush_r+0xc>
 8005fbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005fbe:	f000 f908 	bl	80061d2 <__retarget_lock_release_recursive>
 8005fc2:	e7d9      	b.n	8005f78 <_fflush_r+0xc>
 8005fc4:	4b05      	ldr	r3, [pc, #20]	; (8005fdc <_fflush_r+0x70>)
 8005fc6:	429c      	cmp	r4, r3
 8005fc8:	d101      	bne.n	8005fce <_fflush_r+0x62>
 8005fca:	68ac      	ldr	r4, [r5, #8]
 8005fcc:	e7df      	b.n	8005f8e <_fflush_r+0x22>
 8005fce:	4b04      	ldr	r3, [pc, #16]	; (8005fe0 <_fflush_r+0x74>)
 8005fd0:	429c      	cmp	r4, r3
 8005fd2:	bf08      	it	eq
 8005fd4:	68ec      	ldreq	r4, [r5, #12]
 8005fd6:	e7da      	b.n	8005f8e <_fflush_r+0x22>
 8005fd8:	08007cfc 	.word	0x08007cfc
 8005fdc:	08007d1c 	.word	0x08007d1c
 8005fe0:	08007cdc 	.word	0x08007cdc

08005fe4 <std>:
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	b510      	push	{r4, lr}
 8005fe8:	4604      	mov	r4, r0
 8005fea:	e9c0 3300 	strd	r3, r3, [r0]
 8005fee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ff2:	6083      	str	r3, [r0, #8]
 8005ff4:	8181      	strh	r1, [r0, #12]
 8005ff6:	6643      	str	r3, [r0, #100]	; 0x64
 8005ff8:	81c2      	strh	r2, [r0, #14]
 8005ffa:	6183      	str	r3, [r0, #24]
 8005ffc:	4619      	mov	r1, r3
 8005ffe:	2208      	movs	r2, #8
 8006000:	305c      	adds	r0, #92	; 0x5c
 8006002:	f7fd fba3 	bl	800374c <memset>
 8006006:	4b05      	ldr	r3, [pc, #20]	; (800601c <std+0x38>)
 8006008:	6224      	str	r4, [r4, #32]
 800600a:	6263      	str	r3, [r4, #36]	; 0x24
 800600c:	4b04      	ldr	r3, [pc, #16]	; (8006020 <std+0x3c>)
 800600e:	62a3      	str	r3, [r4, #40]	; 0x28
 8006010:	4b04      	ldr	r3, [pc, #16]	; (8006024 <std+0x40>)
 8006012:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006014:	4b04      	ldr	r3, [pc, #16]	; (8006028 <std+0x44>)
 8006016:	6323      	str	r3, [r4, #48]	; 0x30
 8006018:	bd10      	pop	{r4, pc}
 800601a:	bf00      	nop
 800601c:	08006335 	.word	0x08006335
 8006020:	08006357 	.word	0x08006357
 8006024:	0800638f 	.word	0x0800638f
 8006028:	080063b3 	.word	0x080063b3

0800602c <_cleanup_r>:
 800602c:	4901      	ldr	r1, [pc, #4]	; (8006034 <_cleanup_r+0x8>)
 800602e:	f000 b8af 	b.w	8006190 <_fwalk_reent>
 8006032:	bf00      	nop
 8006034:	08005f6d 	.word	0x08005f6d

08006038 <__sfmoreglue>:
 8006038:	b570      	push	{r4, r5, r6, lr}
 800603a:	2568      	movs	r5, #104	; 0x68
 800603c:	1e4a      	subs	r2, r1, #1
 800603e:	4355      	muls	r5, r2
 8006040:	460e      	mov	r6, r1
 8006042:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006046:	f7ff fa89 	bl	800555c <_malloc_r>
 800604a:	4604      	mov	r4, r0
 800604c:	b140      	cbz	r0, 8006060 <__sfmoreglue+0x28>
 800604e:	2100      	movs	r1, #0
 8006050:	e9c0 1600 	strd	r1, r6, [r0]
 8006054:	300c      	adds	r0, #12
 8006056:	60a0      	str	r0, [r4, #8]
 8006058:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800605c:	f7fd fb76 	bl	800374c <memset>
 8006060:	4620      	mov	r0, r4
 8006062:	bd70      	pop	{r4, r5, r6, pc}

08006064 <__sfp_lock_acquire>:
 8006064:	4801      	ldr	r0, [pc, #4]	; (800606c <__sfp_lock_acquire+0x8>)
 8006066:	f000 b8b3 	b.w	80061d0 <__retarget_lock_acquire_recursive>
 800606a:	bf00      	nop
 800606c:	200002d0 	.word	0x200002d0

08006070 <__sfp_lock_release>:
 8006070:	4801      	ldr	r0, [pc, #4]	; (8006078 <__sfp_lock_release+0x8>)
 8006072:	f000 b8ae 	b.w	80061d2 <__retarget_lock_release_recursive>
 8006076:	bf00      	nop
 8006078:	200002d0 	.word	0x200002d0

0800607c <__sinit_lock_acquire>:
 800607c:	4801      	ldr	r0, [pc, #4]	; (8006084 <__sinit_lock_acquire+0x8>)
 800607e:	f000 b8a7 	b.w	80061d0 <__retarget_lock_acquire_recursive>
 8006082:	bf00      	nop
 8006084:	200002cb 	.word	0x200002cb

08006088 <__sinit_lock_release>:
 8006088:	4801      	ldr	r0, [pc, #4]	; (8006090 <__sinit_lock_release+0x8>)
 800608a:	f000 b8a2 	b.w	80061d2 <__retarget_lock_release_recursive>
 800608e:	bf00      	nop
 8006090:	200002cb 	.word	0x200002cb

08006094 <__sinit>:
 8006094:	b510      	push	{r4, lr}
 8006096:	4604      	mov	r4, r0
 8006098:	f7ff fff0 	bl	800607c <__sinit_lock_acquire>
 800609c:	69a3      	ldr	r3, [r4, #24]
 800609e:	b11b      	cbz	r3, 80060a8 <__sinit+0x14>
 80060a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060a4:	f7ff bff0 	b.w	8006088 <__sinit_lock_release>
 80060a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80060ac:	6523      	str	r3, [r4, #80]	; 0x50
 80060ae:	4b13      	ldr	r3, [pc, #76]	; (80060fc <__sinit+0x68>)
 80060b0:	4a13      	ldr	r2, [pc, #76]	; (8006100 <__sinit+0x6c>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	62a2      	str	r2, [r4, #40]	; 0x28
 80060b6:	42a3      	cmp	r3, r4
 80060b8:	bf08      	it	eq
 80060ba:	2301      	moveq	r3, #1
 80060bc:	4620      	mov	r0, r4
 80060be:	bf08      	it	eq
 80060c0:	61a3      	streq	r3, [r4, #24]
 80060c2:	f000 f81f 	bl	8006104 <__sfp>
 80060c6:	6060      	str	r0, [r4, #4]
 80060c8:	4620      	mov	r0, r4
 80060ca:	f000 f81b 	bl	8006104 <__sfp>
 80060ce:	60a0      	str	r0, [r4, #8]
 80060d0:	4620      	mov	r0, r4
 80060d2:	f000 f817 	bl	8006104 <__sfp>
 80060d6:	2200      	movs	r2, #0
 80060d8:	2104      	movs	r1, #4
 80060da:	60e0      	str	r0, [r4, #12]
 80060dc:	6860      	ldr	r0, [r4, #4]
 80060de:	f7ff ff81 	bl	8005fe4 <std>
 80060e2:	2201      	movs	r2, #1
 80060e4:	2109      	movs	r1, #9
 80060e6:	68a0      	ldr	r0, [r4, #8]
 80060e8:	f7ff ff7c 	bl	8005fe4 <std>
 80060ec:	2202      	movs	r2, #2
 80060ee:	2112      	movs	r1, #18
 80060f0:	68e0      	ldr	r0, [r4, #12]
 80060f2:	f7ff ff77 	bl	8005fe4 <std>
 80060f6:	2301      	movs	r3, #1
 80060f8:	61a3      	str	r3, [r4, #24]
 80060fa:	e7d1      	b.n	80060a0 <__sinit+0xc>
 80060fc:	0800795c 	.word	0x0800795c
 8006100:	0800602d 	.word	0x0800602d

08006104 <__sfp>:
 8006104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006106:	4607      	mov	r7, r0
 8006108:	f7ff ffac 	bl	8006064 <__sfp_lock_acquire>
 800610c:	4b1e      	ldr	r3, [pc, #120]	; (8006188 <__sfp+0x84>)
 800610e:	681e      	ldr	r6, [r3, #0]
 8006110:	69b3      	ldr	r3, [r6, #24]
 8006112:	b913      	cbnz	r3, 800611a <__sfp+0x16>
 8006114:	4630      	mov	r0, r6
 8006116:	f7ff ffbd 	bl	8006094 <__sinit>
 800611a:	3648      	adds	r6, #72	; 0x48
 800611c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006120:	3b01      	subs	r3, #1
 8006122:	d503      	bpl.n	800612c <__sfp+0x28>
 8006124:	6833      	ldr	r3, [r6, #0]
 8006126:	b30b      	cbz	r3, 800616c <__sfp+0x68>
 8006128:	6836      	ldr	r6, [r6, #0]
 800612a:	e7f7      	b.n	800611c <__sfp+0x18>
 800612c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006130:	b9d5      	cbnz	r5, 8006168 <__sfp+0x64>
 8006132:	4b16      	ldr	r3, [pc, #88]	; (800618c <__sfp+0x88>)
 8006134:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006138:	60e3      	str	r3, [r4, #12]
 800613a:	6665      	str	r5, [r4, #100]	; 0x64
 800613c:	f000 f847 	bl	80061ce <__retarget_lock_init_recursive>
 8006140:	f7ff ff96 	bl	8006070 <__sfp_lock_release>
 8006144:	2208      	movs	r2, #8
 8006146:	4629      	mov	r1, r5
 8006148:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800614c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006150:	6025      	str	r5, [r4, #0]
 8006152:	61a5      	str	r5, [r4, #24]
 8006154:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006158:	f7fd faf8 	bl	800374c <memset>
 800615c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006160:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006164:	4620      	mov	r0, r4
 8006166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006168:	3468      	adds	r4, #104	; 0x68
 800616a:	e7d9      	b.n	8006120 <__sfp+0x1c>
 800616c:	2104      	movs	r1, #4
 800616e:	4638      	mov	r0, r7
 8006170:	f7ff ff62 	bl	8006038 <__sfmoreglue>
 8006174:	4604      	mov	r4, r0
 8006176:	6030      	str	r0, [r6, #0]
 8006178:	2800      	cmp	r0, #0
 800617a:	d1d5      	bne.n	8006128 <__sfp+0x24>
 800617c:	f7ff ff78 	bl	8006070 <__sfp_lock_release>
 8006180:	230c      	movs	r3, #12
 8006182:	603b      	str	r3, [r7, #0]
 8006184:	e7ee      	b.n	8006164 <__sfp+0x60>
 8006186:	bf00      	nop
 8006188:	0800795c 	.word	0x0800795c
 800618c:	ffff0001 	.word	0xffff0001

08006190 <_fwalk_reent>:
 8006190:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006194:	4606      	mov	r6, r0
 8006196:	4688      	mov	r8, r1
 8006198:	2700      	movs	r7, #0
 800619a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800619e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80061a2:	f1b9 0901 	subs.w	r9, r9, #1
 80061a6:	d505      	bpl.n	80061b4 <_fwalk_reent+0x24>
 80061a8:	6824      	ldr	r4, [r4, #0]
 80061aa:	2c00      	cmp	r4, #0
 80061ac:	d1f7      	bne.n	800619e <_fwalk_reent+0xe>
 80061ae:	4638      	mov	r0, r7
 80061b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061b4:	89ab      	ldrh	r3, [r5, #12]
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d907      	bls.n	80061ca <_fwalk_reent+0x3a>
 80061ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80061be:	3301      	adds	r3, #1
 80061c0:	d003      	beq.n	80061ca <_fwalk_reent+0x3a>
 80061c2:	4629      	mov	r1, r5
 80061c4:	4630      	mov	r0, r6
 80061c6:	47c0      	blx	r8
 80061c8:	4307      	orrs	r7, r0
 80061ca:	3568      	adds	r5, #104	; 0x68
 80061cc:	e7e9      	b.n	80061a2 <_fwalk_reent+0x12>

080061ce <__retarget_lock_init_recursive>:
 80061ce:	4770      	bx	lr

080061d0 <__retarget_lock_acquire_recursive>:
 80061d0:	4770      	bx	lr

080061d2 <__retarget_lock_release_recursive>:
 80061d2:	4770      	bx	lr

080061d4 <__swhatbuf_r>:
 80061d4:	b570      	push	{r4, r5, r6, lr}
 80061d6:	460e      	mov	r6, r1
 80061d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061dc:	4614      	mov	r4, r2
 80061de:	2900      	cmp	r1, #0
 80061e0:	461d      	mov	r5, r3
 80061e2:	b096      	sub	sp, #88	; 0x58
 80061e4:	da07      	bge.n	80061f6 <__swhatbuf_r+0x22>
 80061e6:	2300      	movs	r3, #0
 80061e8:	602b      	str	r3, [r5, #0]
 80061ea:	89b3      	ldrh	r3, [r6, #12]
 80061ec:	061a      	lsls	r2, r3, #24
 80061ee:	d410      	bmi.n	8006212 <__swhatbuf_r+0x3e>
 80061f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061f4:	e00e      	b.n	8006214 <__swhatbuf_r+0x40>
 80061f6:	466a      	mov	r2, sp
 80061f8:	f000 f902 	bl	8006400 <_fstat_r>
 80061fc:	2800      	cmp	r0, #0
 80061fe:	dbf2      	blt.n	80061e6 <__swhatbuf_r+0x12>
 8006200:	9a01      	ldr	r2, [sp, #4]
 8006202:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006206:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800620a:	425a      	negs	r2, r3
 800620c:	415a      	adcs	r2, r3
 800620e:	602a      	str	r2, [r5, #0]
 8006210:	e7ee      	b.n	80061f0 <__swhatbuf_r+0x1c>
 8006212:	2340      	movs	r3, #64	; 0x40
 8006214:	2000      	movs	r0, #0
 8006216:	6023      	str	r3, [r4, #0]
 8006218:	b016      	add	sp, #88	; 0x58
 800621a:	bd70      	pop	{r4, r5, r6, pc}

0800621c <__smakebuf_r>:
 800621c:	898b      	ldrh	r3, [r1, #12]
 800621e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006220:	079d      	lsls	r5, r3, #30
 8006222:	4606      	mov	r6, r0
 8006224:	460c      	mov	r4, r1
 8006226:	d507      	bpl.n	8006238 <__smakebuf_r+0x1c>
 8006228:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800622c:	6023      	str	r3, [r4, #0]
 800622e:	6123      	str	r3, [r4, #16]
 8006230:	2301      	movs	r3, #1
 8006232:	6163      	str	r3, [r4, #20]
 8006234:	b002      	add	sp, #8
 8006236:	bd70      	pop	{r4, r5, r6, pc}
 8006238:	466a      	mov	r2, sp
 800623a:	ab01      	add	r3, sp, #4
 800623c:	f7ff ffca 	bl	80061d4 <__swhatbuf_r>
 8006240:	9900      	ldr	r1, [sp, #0]
 8006242:	4605      	mov	r5, r0
 8006244:	4630      	mov	r0, r6
 8006246:	f7ff f989 	bl	800555c <_malloc_r>
 800624a:	b948      	cbnz	r0, 8006260 <__smakebuf_r+0x44>
 800624c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006250:	059a      	lsls	r2, r3, #22
 8006252:	d4ef      	bmi.n	8006234 <__smakebuf_r+0x18>
 8006254:	f023 0303 	bic.w	r3, r3, #3
 8006258:	f043 0302 	orr.w	r3, r3, #2
 800625c:	81a3      	strh	r3, [r4, #12]
 800625e:	e7e3      	b.n	8006228 <__smakebuf_r+0xc>
 8006260:	4b0d      	ldr	r3, [pc, #52]	; (8006298 <__smakebuf_r+0x7c>)
 8006262:	62b3      	str	r3, [r6, #40]	; 0x28
 8006264:	89a3      	ldrh	r3, [r4, #12]
 8006266:	6020      	str	r0, [r4, #0]
 8006268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800626c:	81a3      	strh	r3, [r4, #12]
 800626e:	9b00      	ldr	r3, [sp, #0]
 8006270:	6120      	str	r0, [r4, #16]
 8006272:	6163      	str	r3, [r4, #20]
 8006274:	9b01      	ldr	r3, [sp, #4]
 8006276:	b15b      	cbz	r3, 8006290 <__smakebuf_r+0x74>
 8006278:	4630      	mov	r0, r6
 800627a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800627e:	f000 f8d1 	bl	8006424 <_isatty_r>
 8006282:	b128      	cbz	r0, 8006290 <__smakebuf_r+0x74>
 8006284:	89a3      	ldrh	r3, [r4, #12]
 8006286:	f023 0303 	bic.w	r3, r3, #3
 800628a:	f043 0301 	orr.w	r3, r3, #1
 800628e:	81a3      	strh	r3, [r4, #12]
 8006290:	89a0      	ldrh	r0, [r4, #12]
 8006292:	4305      	orrs	r5, r0
 8006294:	81a5      	strh	r5, [r4, #12]
 8006296:	e7cd      	b.n	8006234 <__smakebuf_r+0x18>
 8006298:	0800602d 	.word	0x0800602d

0800629c <_malloc_usable_size_r>:
 800629c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062a0:	1f18      	subs	r0, r3, #4
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	bfbc      	itt	lt
 80062a6:	580b      	ldrlt	r3, [r1, r0]
 80062a8:	18c0      	addlt	r0, r0, r3
 80062aa:	4770      	bx	lr

080062ac <_raise_r>:
 80062ac:	291f      	cmp	r1, #31
 80062ae:	b538      	push	{r3, r4, r5, lr}
 80062b0:	4604      	mov	r4, r0
 80062b2:	460d      	mov	r5, r1
 80062b4:	d904      	bls.n	80062c0 <_raise_r+0x14>
 80062b6:	2316      	movs	r3, #22
 80062b8:	6003      	str	r3, [r0, #0]
 80062ba:	f04f 30ff 	mov.w	r0, #4294967295
 80062be:	bd38      	pop	{r3, r4, r5, pc}
 80062c0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80062c2:	b112      	cbz	r2, 80062ca <_raise_r+0x1e>
 80062c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80062c8:	b94b      	cbnz	r3, 80062de <_raise_r+0x32>
 80062ca:	4620      	mov	r0, r4
 80062cc:	f000 f830 	bl	8006330 <_getpid_r>
 80062d0:	462a      	mov	r2, r5
 80062d2:	4601      	mov	r1, r0
 80062d4:	4620      	mov	r0, r4
 80062d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80062da:	f000 b817 	b.w	800630c <_kill_r>
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d00a      	beq.n	80062f8 <_raise_r+0x4c>
 80062e2:	1c59      	adds	r1, r3, #1
 80062e4:	d103      	bne.n	80062ee <_raise_r+0x42>
 80062e6:	2316      	movs	r3, #22
 80062e8:	6003      	str	r3, [r0, #0]
 80062ea:	2001      	movs	r0, #1
 80062ec:	e7e7      	b.n	80062be <_raise_r+0x12>
 80062ee:	2400      	movs	r4, #0
 80062f0:	4628      	mov	r0, r5
 80062f2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80062f6:	4798      	blx	r3
 80062f8:	2000      	movs	r0, #0
 80062fa:	e7e0      	b.n	80062be <_raise_r+0x12>

080062fc <raise>:
 80062fc:	4b02      	ldr	r3, [pc, #8]	; (8006308 <raise+0xc>)
 80062fe:	4601      	mov	r1, r0
 8006300:	6818      	ldr	r0, [r3, #0]
 8006302:	f7ff bfd3 	b.w	80062ac <_raise_r>
 8006306:	bf00      	nop
 8006308:	2000000c 	.word	0x2000000c

0800630c <_kill_r>:
 800630c:	b538      	push	{r3, r4, r5, lr}
 800630e:	2300      	movs	r3, #0
 8006310:	4d06      	ldr	r5, [pc, #24]	; (800632c <_kill_r+0x20>)
 8006312:	4604      	mov	r4, r0
 8006314:	4608      	mov	r0, r1
 8006316:	4611      	mov	r1, r2
 8006318:	602b      	str	r3, [r5, #0]
 800631a:	f7fb f847 	bl	80013ac <_kill>
 800631e:	1c43      	adds	r3, r0, #1
 8006320:	d102      	bne.n	8006328 <_kill_r+0x1c>
 8006322:	682b      	ldr	r3, [r5, #0]
 8006324:	b103      	cbz	r3, 8006328 <_kill_r+0x1c>
 8006326:	6023      	str	r3, [r4, #0]
 8006328:	bd38      	pop	{r3, r4, r5, pc}
 800632a:	bf00      	nop
 800632c:	200002c4 	.word	0x200002c4

08006330 <_getpid_r>:
 8006330:	f7fb b835 	b.w	800139e <_getpid>

08006334 <__sread>:
 8006334:	b510      	push	{r4, lr}
 8006336:	460c      	mov	r4, r1
 8006338:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800633c:	f000 f894 	bl	8006468 <_read_r>
 8006340:	2800      	cmp	r0, #0
 8006342:	bfab      	itete	ge
 8006344:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006346:	89a3      	ldrhlt	r3, [r4, #12]
 8006348:	181b      	addge	r3, r3, r0
 800634a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800634e:	bfac      	ite	ge
 8006350:	6563      	strge	r3, [r4, #84]	; 0x54
 8006352:	81a3      	strhlt	r3, [r4, #12]
 8006354:	bd10      	pop	{r4, pc}

08006356 <__swrite>:
 8006356:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800635a:	461f      	mov	r7, r3
 800635c:	898b      	ldrh	r3, [r1, #12]
 800635e:	4605      	mov	r5, r0
 8006360:	05db      	lsls	r3, r3, #23
 8006362:	460c      	mov	r4, r1
 8006364:	4616      	mov	r6, r2
 8006366:	d505      	bpl.n	8006374 <__swrite+0x1e>
 8006368:	2302      	movs	r3, #2
 800636a:	2200      	movs	r2, #0
 800636c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006370:	f000 f868 	bl	8006444 <_lseek_r>
 8006374:	89a3      	ldrh	r3, [r4, #12]
 8006376:	4632      	mov	r2, r6
 8006378:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800637c:	81a3      	strh	r3, [r4, #12]
 800637e:	4628      	mov	r0, r5
 8006380:	463b      	mov	r3, r7
 8006382:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006386:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800638a:	f000 b817 	b.w	80063bc <_write_r>

0800638e <__sseek>:
 800638e:	b510      	push	{r4, lr}
 8006390:	460c      	mov	r4, r1
 8006392:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006396:	f000 f855 	bl	8006444 <_lseek_r>
 800639a:	1c43      	adds	r3, r0, #1
 800639c:	89a3      	ldrh	r3, [r4, #12]
 800639e:	bf15      	itete	ne
 80063a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80063a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80063a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80063aa:	81a3      	strheq	r3, [r4, #12]
 80063ac:	bf18      	it	ne
 80063ae:	81a3      	strhne	r3, [r4, #12]
 80063b0:	bd10      	pop	{r4, pc}

080063b2 <__sclose>:
 80063b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063b6:	f000 b813 	b.w	80063e0 <_close_r>
	...

080063bc <_write_r>:
 80063bc:	b538      	push	{r3, r4, r5, lr}
 80063be:	4604      	mov	r4, r0
 80063c0:	4608      	mov	r0, r1
 80063c2:	4611      	mov	r1, r2
 80063c4:	2200      	movs	r2, #0
 80063c6:	4d05      	ldr	r5, [pc, #20]	; (80063dc <_write_r+0x20>)
 80063c8:	602a      	str	r2, [r5, #0]
 80063ca:	461a      	mov	r2, r3
 80063cc:	f7fb f825 	bl	800141a <_write>
 80063d0:	1c43      	adds	r3, r0, #1
 80063d2:	d102      	bne.n	80063da <_write_r+0x1e>
 80063d4:	682b      	ldr	r3, [r5, #0]
 80063d6:	b103      	cbz	r3, 80063da <_write_r+0x1e>
 80063d8:	6023      	str	r3, [r4, #0]
 80063da:	bd38      	pop	{r3, r4, r5, pc}
 80063dc:	200002c4 	.word	0x200002c4

080063e0 <_close_r>:
 80063e0:	b538      	push	{r3, r4, r5, lr}
 80063e2:	2300      	movs	r3, #0
 80063e4:	4d05      	ldr	r5, [pc, #20]	; (80063fc <_close_r+0x1c>)
 80063e6:	4604      	mov	r4, r0
 80063e8:	4608      	mov	r0, r1
 80063ea:	602b      	str	r3, [r5, #0]
 80063ec:	f7fb f831 	bl	8001452 <_close>
 80063f0:	1c43      	adds	r3, r0, #1
 80063f2:	d102      	bne.n	80063fa <_close_r+0x1a>
 80063f4:	682b      	ldr	r3, [r5, #0]
 80063f6:	b103      	cbz	r3, 80063fa <_close_r+0x1a>
 80063f8:	6023      	str	r3, [r4, #0]
 80063fa:	bd38      	pop	{r3, r4, r5, pc}
 80063fc:	200002c4 	.word	0x200002c4

08006400 <_fstat_r>:
 8006400:	b538      	push	{r3, r4, r5, lr}
 8006402:	2300      	movs	r3, #0
 8006404:	4d06      	ldr	r5, [pc, #24]	; (8006420 <_fstat_r+0x20>)
 8006406:	4604      	mov	r4, r0
 8006408:	4608      	mov	r0, r1
 800640a:	4611      	mov	r1, r2
 800640c:	602b      	str	r3, [r5, #0]
 800640e:	f7fb f82b 	bl	8001468 <_fstat>
 8006412:	1c43      	adds	r3, r0, #1
 8006414:	d102      	bne.n	800641c <_fstat_r+0x1c>
 8006416:	682b      	ldr	r3, [r5, #0]
 8006418:	b103      	cbz	r3, 800641c <_fstat_r+0x1c>
 800641a:	6023      	str	r3, [r4, #0]
 800641c:	bd38      	pop	{r3, r4, r5, pc}
 800641e:	bf00      	nop
 8006420:	200002c4 	.word	0x200002c4

08006424 <_isatty_r>:
 8006424:	b538      	push	{r3, r4, r5, lr}
 8006426:	2300      	movs	r3, #0
 8006428:	4d05      	ldr	r5, [pc, #20]	; (8006440 <_isatty_r+0x1c>)
 800642a:	4604      	mov	r4, r0
 800642c:	4608      	mov	r0, r1
 800642e:	602b      	str	r3, [r5, #0]
 8006430:	f7fb f829 	bl	8001486 <_isatty>
 8006434:	1c43      	adds	r3, r0, #1
 8006436:	d102      	bne.n	800643e <_isatty_r+0x1a>
 8006438:	682b      	ldr	r3, [r5, #0]
 800643a:	b103      	cbz	r3, 800643e <_isatty_r+0x1a>
 800643c:	6023      	str	r3, [r4, #0]
 800643e:	bd38      	pop	{r3, r4, r5, pc}
 8006440:	200002c4 	.word	0x200002c4

08006444 <_lseek_r>:
 8006444:	b538      	push	{r3, r4, r5, lr}
 8006446:	4604      	mov	r4, r0
 8006448:	4608      	mov	r0, r1
 800644a:	4611      	mov	r1, r2
 800644c:	2200      	movs	r2, #0
 800644e:	4d05      	ldr	r5, [pc, #20]	; (8006464 <_lseek_r+0x20>)
 8006450:	602a      	str	r2, [r5, #0]
 8006452:	461a      	mov	r2, r3
 8006454:	f7fb f821 	bl	800149a <_lseek>
 8006458:	1c43      	adds	r3, r0, #1
 800645a:	d102      	bne.n	8006462 <_lseek_r+0x1e>
 800645c:	682b      	ldr	r3, [r5, #0]
 800645e:	b103      	cbz	r3, 8006462 <_lseek_r+0x1e>
 8006460:	6023      	str	r3, [r4, #0]
 8006462:	bd38      	pop	{r3, r4, r5, pc}
 8006464:	200002c4 	.word	0x200002c4

08006468 <_read_r>:
 8006468:	b538      	push	{r3, r4, r5, lr}
 800646a:	4604      	mov	r4, r0
 800646c:	4608      	mov	r0, r1
 800646e:	4611      	mov	r1, r2
 8006470:	2200      	movs	r2, #0
 8006472:	4d05      	ldr	r5, [pc, #20]	; (8006488 <_read_r+0x20>)
 8006474:	602a      	str	r2, [r5, #0]
 8006476:	461a      	mov	r2, r3
 8006478:	f7fa ffb2 	bl	80013e0 <_read>
 800647c:	1c43      	adds	r3, r0, #1
 800647e:	d102      	bne.n	8006486 <_read_r+0x1e>
 8006480:	682b      	ldr	r3, [r5, #0]
 8006482:	b103      	cbz	r3, 8006486 <_read_r+0x1e>
 8006484:	6023      	str	r3, [r4, #0]
 8006486:	bd38      	pop	{r3, r4, r5, pc}
 8006488:	200002c4 	.word	0x200002c4

0800648c <atan2>:
 800648c:	f000 b8d8 	b.w	8006640 <__ieee754_atan2>

08006490 <pow>:
 8006490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006494:	461f      	mov	r7, r3
 8006496:	4680      	mov	r8, r0
 8006498:	4689      	mov	r9, r1
 800649a:	4616      	mov	r6, r2
 800649c:	f000 f9a4 	bl	80067e8 <__ieee754_pow>
 80064a0:	4b4d      	ldr	r3, [pc, #308]	; (80065d8 <pow+0x148>)
 80064a2:	4604      	mov	r4, r0
 80064a4:	f993 3000 	ldrsb.w	r3, [r3]
 80064a8:	460d      	mov	r5, r1
 80064aa:	3301      	adds	r3, #1
 80064ac:	d015      	beq.n	80064da <pow+0x4a>
 80064ae:	4632      	mov	r2, r6
 80064b0:	463b      	mov	r3, r7
 80064b2:	4630      	mov	r0, r6
 80064b4:	4639      	mov	r1, r7
 80064b6:	f7fa faa9 	bl	8000a0c <__aeabi_dcmpun>
 80064ba:	b970      	cbnz	r0, 80064da <pow+0x4a>
 80064bc:	4642      	mov	r2, r8
 80064be:	464b      	mov	r3, r9
 80064c0:	4640      	mov	r0, r8
 80064c2:	4649      	mov	r1, r9
 80064c4:	f7fa faa2 	bl	8000a0c <__aeabi_dcmpun>
 80064c8:	2200      	movs	r2, #0
 80064ca:	2300      	movs	r3, #0
 80064cc:	b148      	cbz	r0, 80064e2 <pow+0x52>
 80064ce:	4630      	mov	r0, r6
 80064d0:	4639      	mov	r1, r7
 80064d2:	f7fa fa69 	bl	80009a8 <__aeabi_dcmpeq>
 80064d6:	2800      	cmp	r0, #0
 80064d8:	d17b      	bne.n	80065d2 <pow+0x142>
 80064da:	4620      	mov	r0, r4
 80064dc:	4629      	mov	r1, r5
 80064de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064e2:	4640      	mov	r0, r8
 80064e4:	4649      	mov	r1, r9
 80064e6:	f7fa fa5f 	bl	80009a8 <__aeabi_dcmpeq>
 80064ea:	b1e0      	cbz	r0, 8006526 <pow+0x96>
 80064ec:	2200      	movs	r2, #0
 80064ee:	2300      	movs	r3, #0
 80064f0:	4630      	mov	r0, r6
 80064f2:	4639      	mov	r1, r7
 80064f4:	f7fa fa58 	bl	80009a8 <__aeabi_dcmpeq>
 80064f8:	2800      	cmp	r0, #0
 80064fa:	d16a      	bne.n	80065d2 <pow+0x142>
 80064fc:	4630      	mov	r0, r6
 80064fe:	4639      	mov	r1, r7
 8006500:	f001 f8c3 	bl	800768a <finite>
 8006504:	2800      	cmp	r0, #0
 8006506:	d0e8      	beq.n	80064da <pow+0x4a>
 8006508:	2200      	movs	r2, #0
 800650a:	2300      	movs	r3, #0
 800650c:	4630      	mov	r0, r6
 800650e:	4639      	mov	r1, r7
 8006510:	f7fa fa54 	bl	80009bc <__aeabi_dcmplt>
 8006514:	2800      	cmp	r0, #0
 8006516:	d0e0      	beq.n	80064da <pow+0x4a>
 8006518:	f7fd f8ee 	bl	80036f8 <__errno>
 800651c:	2321      	movs	r3, #33	; 0x21
 800651e:	2400      	movs	r4, #0
 8006520:	6003      	str	r3, [r0, #0]
 8006522:	4d2e      	ldr	r5, [pc, #184]	; (80065dc <pow+0x14c>)
 8006524:	e7d9      	b.n	80064da <pow+0x4a>
 8006526:	4620      	mov	r0, r4
 8006528:	4629      	mov	r1, r5
 800652a:	f001 f8ae 	bl	800768a <finite>
 800652e:	bba8      	cbnz	r0, 800659c <pow+0x10c>
 8006530:	4640      	mov	r0, r8
 8006532:	4649      	mov	r1, r9
 8006534:	f001 f8a9 	bl	800768a <finite>
 8006538:	b380      	cbz	r0, 800659c <pow+0x10c>
 800653a:	4630      	mov	r0, r6
 800653c:	4639      	mov	r1, r7
 800653e:	f001 f8a4 	bl	800768a <finite>
 8006542:	b358      	cbz	r0, 800659c <pow+0x10c>
 8006544:	4622      	mov	r2, r4
 8006546:	462b      	mov	r3, r5
 8006548:	4620      	mov	r0, r4
 800654a:	4629      	mov	r1, r5
 800654c:	f7fa fa5e 	bl	8000a0c <__aeabi_dcmpun>
 8006550:	b160      	cbz	r0, 800656c <pow+0xdc>
 8006552:	f7fd f8d1 	bl	80036f8 <__errno>
 8006556:	2321      	movs	r3, #33	; 0x21
 8006558:	2200      	movs	r2, #0
 800655a:	6003      	str	r3, [r0, #0]
 800655c:	2300      	movs	r3, #0
 800655e:	4610      	mov	r0, r2
 8006560:	4619      	mov	r1, r3
 8006562:	f7fa f8e3 	bl	800072c <__aeabi_ddiv>
 8006566:	4604      	mov	r4, r0
 8006568:	460d      	mov	r5, r1
 800656a:	e7b6      	b.n	80064da <pow+0x4a>
 800656c:	f7fd f8c4 	bl	80036f8 <__errno>
 8006570:	2322      	movs	r3, #34	; 0x22
 8006572:	2200      	movs	r2, #0
 8006574:	6003      	str	r3, [r0, #0]
 8006576:	4649      	mov	r1, r9
 8006578:	2300      	movs	r3, #0
 800657a:	4640      	mov	r0, r8
 800657c:	f7fa fa1e 	bl	80009bc <__aeabi_dcmplt>
 8006580:	2400      	movs	r4, #0
 8006582:	b148      	cbz	r0, 8006598 <pow+0x108>
 8006584:	4630      	mov	r0, r6
 8006586:	4639      	mov	r1, r7
 8006588:	f001 f88c 	bl	80076a4 <rint>
 800658c:	4632      	mov	r2, r6
 800658e:	463b      	mov	r3, r7
 8006590:	f7fa fa0a 	bl	80009a8 <__aeabi_dcmpeq>
 8006594:	2800      	cmp	r0, #0
 8006596:	d0c4      	beq.n	8006522 <pow+0x92>
 8006598:	4d11      	ldr	r5, [pc, #68]	; (80065e0 <pow+0x150>)
 800659a:	e79e      	b.n	80064da <pow+0x4a>
 800659c:	2200      	movs	r2, #0
 800659e:	2300      	movs	r3, #0
 80065a0:	4620      	mov	r0, r4
 80065a2:	4629      	mov	r1, r5
 80065a4:	f7fa fa00 	bl	80009a8 <__aeabi_dcmpeq>
 80065a8:	2800      	cmp	r0, #0
 80065aa:	d096      	beq.n	80064da <pow+0x4a>
 80065ac:	4640      	mov	r0, r8
 80065ae:	4649      	mov	r1, r9
 80065b0:	f001 f86b 	bl	800768a <finite>
 80065b4:	2800      	cmp	r0, #0
 80065b6:	d090      	beq.n	80064da <pow+0x4a>
 80065b8:	4630      	mov	r0, r6
 80065ba:	4639      	mov	r1, r7
 80065bc:	f001 f865 	bl	800768a <finite>
 80065c0:	2800      	cmp	r0, #0
 80065c2:	d08a      	beq.n	80064da <pow+0x4a>
 80065c4:	f7fd f898 	bl	80036f8 <__errno>
 80065c8:	2322      	movs	r3, #34	; 0x22
 80065ca:	2400      	movs	r4, #0
 80065cc:	2500      	movs	r5, #0
 80065ce:	6003      	str	r3, [r0, #0]
 80065d0:	e783      	b.n	80064da <pow+0x4a>
 80065d2:	2400      	movs	r4, #0
 80065d4:	4d03      	ldr	r5, [pc, #12]	; (80065e4 <pow+0x154>)
 80065d6:	e780      	b.n	80064da <pow+0x4a>
 80065d8:	200001dc 	.word	0x200001dc
 80065dc:	fff00000 	.word	0xfff00000
 80065e0:	7ff00000 	.word	0x7ff00000
 80065e4:	3ff00000 	.word	0x3ff00000

080065e8 <sqrt>:
 80065e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ea:	4606      	mov	r6, r0
 80065ec:	460f      	mov	r7, r1
 80065ee:	f000 fe11 	bl	8007214 <__ieee754_sqrt>
 80065f2:	4b12      	ldr	r3, [pc, #72]	; (800663c <sqrt+0x54>)
 80065f4:	4604      	mov	r4, r0
 80065f6:	f993 3000 	ldrsb.w	r3, [r3]
 80065fa:	460d      	mov	r5, r1
 80065fc:	3301      	adds	r3, #1
 80065fe:	d019      	beq.n	8006634 <sqrt+0x4c>
 8006600:	4632      	mov	r2, r6
 8006602:	463b      	mov	r3, r7
 8006604:	4630      	mov	r0, r6
 8006606:	4639      	mov	r1, r7
 8006608:	f7fa fa00 	bl	8000a0c <__aeabi_dcmpun>
 800660c:	b990      	cbnz	r0, 8006634 <sqrt+0x4c>
 800660e:	2200      	movs	r2, #0
 8006610:	2300      	movs	r3, #0
 8006612:	4630      	mov	r0, r6
 8006614:	4639      	mov	r1, r7
 8006616:	f7fa f9d1 	bl	80009bc <__aeabi_dcmplt>
 800661a:	b158      	cbz	r0, 8006634 <sqrt+0x4c>
 800661c:	f7fd f86c 	bl	80036f8 <__errno>
 8006620:	2321      	movs	r3, #33	; 0x21
 8006622:	2200      	movs	r2, #0
 8006624:	6003      	str	r3, [r0, #0]
 8006626:	2300      	movs	r3, #0
 8006628:	4610      	mov	r0, r2
 800662a:	4619      	mov	r1, r3
 800662c:	f7fa f87e 	bl	800072c <__aeabi_ddiv>
 8006630:	4604      	mov	r4, r0
 8006632:	460d      	mov	r5, r1
 8006634:	4620      	mov	r0, r4
 8006636:	4629      	mov	r1, r5
 8006638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800663a:	bf00      	nop
 800663c:	200001dc 	.word	0x200001dc

08006640 <__ieee754_atan2>:
 8006640:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006644:	4692      	mov	sl, r2
 8006646:	4699      	mov	r9, r3
 8006648:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800664c:	461f      	mov	r7, r3
 800664e:	f1ca 0300 	rsb	r3, sl, #0
 8006652:	f8df e18c 	ldr.w	lr, [pc, #396]	; 80067e0 <__ieee754_atan2+0x1a0>
 8006656:	ea43 030a 	orr.w	r3, r3, sl
 800665a:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800665e:	4573      	cmp	r3, lr
 8006660:	4604      	mov	r4, r0
 8006662:	460d      	mov	r5, r1
 8006664:	d808      	bhi.n	8006678 <__ieee754_atan2+0x38>
 8006666:	4246      	negs	r6, r0
 8006668:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800666c:	4306      	orrs	r6, r0
 800666e:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 8006672:	4576      	cmp	r6, lr
 8006674:	468c      	mov	ip, r1
 8006676:	d908      	bls.n	800668a <__ieee754_atan2+0x4a>
 8006678:	4652      	mov	r2, sl
 800667a:	464b      	mov	r3, r9
 800667c:	4620      	mov	r0, r4
 800667e:	4629      	mov	r1, r5
 8006680:	f7f9 fd74 	bl	800016c <__adddf3>
 8006684:	4604      	mov	r4, r0
 8006686:	460d      	mov	r5, r1
 8006688:	e019      	b.n	80066be <__ieee754_atan2+0x7e>
 800668a:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 800668e:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8006692:	ea56 060a 	orrs.w	r6, r6, sl
 8006696:	d103      	bne.n	80066a0 <__ieee754_atan2+0x60>
 8006698:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800669c:	f000 be68 	b.w	8007370 <atan>
 80066a0:	17be      	asrs	r6, r7, #30
 80066a2:	f006 0602 	and.w	r6, r6, #2
 80066a6:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 80066aa:	ea53 0100 	orrs.w	r1, r3, r0
 80066ae:	d10a      	bne.n	80066c6 <__ieee754_atan2+0x86>
 80066b0:	2e02      	cmp	r6, #2
 80066b2:	d067      	beq.n	8006784 <__ieee754_atan2+0x144>
 80066b4:	2e03      	cmp	r6, #3
 80066b6:	d102      	bne.n	80066be <__ieee754_atan2+0x7e>
 80066b8:	a53b      	add	r5, pc, #236	; (adr r5, 80067a8 <__ieee754_atan2+0x168>)
 80066ba:	e9d5 4500 	ldrd	r4, r5, [r5]
 80066be:	4620      	mov	r0, r4
 80066c0:	4629      	mov	r1, r5
 80066c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066c6:	ea52 010a 	orrs.w	r1, r2, sl
 80066ca:	d106      	bne.n	80066da <__ieee754_atan2+0x9a>
 80066cc:	f1bc 0f00 	cmp.w	ip, #0
 80066d0:	da63      	bge.n	800679a <__ieee754_atan2+0x15a>
 80066d2:	a537      	add	r5, pc, #220	; (adr r5, 80067b0 <__ieee754_atan2+0x170>)
 80066d4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80066d8:	e7f1      	b.n	80066be <__ieee754_atan2+0x7e>
 80066da:	4572      	cmp	r2, lr
 80066dc:	d10f      	bne.n	80066fe <__ieee754_atan2+0xbe>
 80066de:	4293      	cmp	r3, r2
 80066e0:	f106 36ff 	add.w	r6, r6, #4294967295
 80066e4:	d107      	bne.n	80066f6 <__ieee754_atan2+0xb6>
 80066e6:	2e02      	cmp	r6, #2
 80066e8:	d850      	bhi.n	800678c <__ieee754_atan2+0x14c>
 80066ea:	4b3b      	ldr	r3, [pc, #236]	; (80067d8 <__ieee754_atan2+0x198>)
 80066ec:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80066f0:	e9d6 4500 	ldrd	r4, r5, [r6]
 80066f4:	e7e3      	b.n	80066be <__ieee754_atan2+0x7e>
 80066f6:	2e02      	cmp	r6, #2
 80066f8:	d84c      	bhi.n	8006794 <__ieee754_atan2+0x154>
 80066fa:	4b38      	ldr	r3, [pc, #224]	; (80067dc <__ieee754_atan2+0x19c>)
 80066fc:	e7f6      	b.n	80066ec <__ieee754_atan2+0xac>
 80066fe:	4573      	cmp	r3, lr
 8006700:	d0e4      	beq.n	80066cc <__ieee754_atan2+0x8c>
 8006702:	1a9b      	subs	r3, r3, r2
 8006704:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8006708:	ea4f 5223 	mov.w	r2, r3, asr #20
 800670c:	da20      	bge.n	8006750 <__ieee754_atan2+0x110>
 800670e:	2f00      	cmp	r7, #0
 8006710:	da01      	bge.n	8006716 <__ieee754_atan2+0xd6>
 8006712:	323c      	adds	r2, #60	; 0x3c
 8006714:	db20      	blt.n	8006758 <__ieee754_atan2+0x118>
 8006716:	4652      	mov	r2, sl
 8006718:	464b      	mov	r3, r9
 800671a:	4620      	mov	r0, r4
 800671c:	4629      	mov	r1, r5
 800671e:	f7fa f805 	bl	800072c <__aeabi_ddiv>
 8006722:	f000 ffaf 	bl	8007684 <fabs>
 8006726:	f000 fe23 	bl	8007370 <atan>
 800672a:	4604      	mov	r4, r0
 800672c:	460d      	mov	r5, r1
 800672e:	2e01      	cmp	r6, #1
 8006730:	d015      	beq.n	800675e <__ieee754_atan2+0x11e>
 8006732:	2e02      	cmp	r6, #2
 8006734:	d017      	beq.n	8006766 <__ieee754_atan2+0x126>
 8006736:	2e00      	cmp	r6, #0
 8006738:	d0c1      	beq.n	80066be <__ieee754_atan2+0x7e>
 800673a:	a31f      	add	r3, pc, #124	; (adr r3, 80067b8 <__ieee754_atan2+0x178>)
 800673c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006740:	4620      	mov	r0, r4
 8006742:	4629      	mov	r1, r5
 8006744:	f7f9 fd10 	bl	8000168 <__aeabi_dsub>
 8006748:	a31d      	add	r3, pc, #116	; (adr r3, 80067c0 <__ieee754_atan2+0x180>)
 800674a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800674e:	e016      	b.n	800677e <__ieee754_atan2+0x13e>
 8006750:	a51d      	add	r5, pc, #116	; (adr r5, 80067c8 <__ieee754_atan2+0x188>)
 8006752:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006756:	e7ea      	b.n	800672e <__ieee754_atan2+0xee>
 8006758:	2400      	movs	r4, #0
 800675a:	2500      	movs	r5, #0
 800675c:	e7e7      	b.n	800672e <__ieee754_atan2+0xee>
 800675e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006762:	461d      	mov	r5, r3
 8006764:	e7ab      	b.n	80066be <__ieee754_atan2+0x7e>
 8006766:	a314      	add	r3, pc, #80	; (adr r3, 80067b8 <__ieee754_atan2+0x178>)
 8006768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800676c:	4620      	mov	r0, r4
 800676e:	4629      	mov	r1, r5
 8006770:	f7f9 fcfa 	bl	8000168 <__aeabi_dsub>
 8006774:	4602      	mov	r2, r0
 8006776:	460b      	mov	r3, r1
 8006778:	a111      	add	r1, pc, #68	; (adr r1, 80067c0 <__ieee754_atan2+0x180>)
 800677a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800677e:	f7f9 fcf3 	bl	8000168 <__aeabi_dsub>
 8006782:	e77f      	b.n	8006684 <__ieee754_atan2+0x44>
 8006784:	a50e      	add	r5, pc, #56	; (adr r5, 80067c0 <__ieee754_atan2+0x180>)
 8006786:	e9d5 4500 	ldrd	r4, r5, [r5]
 800678a:	e798      	b.n	80066be <__ieee754_atan2+0x7e>
 800678c:	a510      	add	r5, pc, #64	; (adr r5, 80067d0 <__ieee754_atan2+0x190>)
 800678e:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006792:	e794      	b.n	80066be <__ieee754_atan2+0x7e>
 8006794:	2400      	movs	r4, #0
 8006796:	2500      	movs	r5, #0
 8006798:	e791      	b.n	80066be <__ieee754_atan2+0x7e>
 800679a:	a50b      	add	r5, pc, #44	; (adr r5, 80067c8 <__ieee754_atan2+0x188>)
 800679c:	e9d5 4500 	ldrd	r4, r5, [r5]
 80067a0:	e78d      	b.n	80066be <__ieee754_atan2+0x7e>
 80067a2:	bf00      	nop
 80067a4:	f3af 8000 	nop.w
 80067a8:	54442d18 	.word	0x54442d18
 80067ac:	c00921fb 	.word	0xc00921fb
 80067b0:	54442d18 	.word	0x54442d18
 80067b4:	bff921fb 	.word	0xbff921fb
 80067b8:	33145c07 	.word	0x33145c07
 80067bc:	3ca1a626 	.word	0x3ca1a626
 80067c0:	54442d18 	.word	0x54442d18
 80067c4:	400921fb 	.word	0x400921fb
 80067c8:	54442d18 	.word	0x54442d18
 80067cc:	3ff921fb 	.word	0x3ff921fb
 80067d0:	54442d18 	.word	0x54442d18
 80067d4:	3fe921fb 	.word	0x3fe921fb
 80067d8:	08007d40 	.word	0x08007d40
 80067dc:	08007d58 	.word	0x08007d58
 80067e0:	7ff00000 	.word	0x7ff00000
 80067e4:	00000000 	.word	0x00000000

080067e8 <__ieee754_pow>:
 80067e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067ec:	b093      	sub	sp, #76	; 0x4c
 80067ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80067f2:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 80067f6:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80067fa:	ea55 0302 	orrs.w	r3, r5, r2
 80067fe:	4607      	mov	r7, r0
 8006800:	4688      	mov	r8, r1
 8006802:	f000 84bf 	beq.w	8007184 <__ieee754_pow+0x99c>
 8006806:	4b7e      	ldr	r3, [pc, #504]	; (8006a00 <__ieee754_pow+0x218>)
 8006808:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800680c:	429c      	cmp	r4, r3
 800680e:	4689      	mov	r9, r1
 8006810:	4682      	mov	sl, r0
 8006812:	dc09      	bgt.n	8006828 <__ieee754_pow+0x40>
 8006814:	d103      	bne.n	800681e <__ieee754_pow+0x36>
 8006816:	b978      	cbnz	r0, 8006838 <__ieee754_pow+0x50>
 8006818:	42a5      	cmp	r5, r4
 800681a:	dd02      	ble.n	8006822 <__ieee754_pow+0x3a>
 800681c:	e00c      	b.n	8006838 <__ieee754_pow+0x50>
 800681e:	429d      	cmp	r5, r3
 8006820:	dc02      	bgt.n	8006828 <__ieee754_pow+0x40>
 8006822:	429d      	cmp	r5, r3
 8006824:	d10e      	bne.n	8006844 <__ieee754_pow+0x5c>
 8006826:	b16a      	cbz	r2, 8006844 <__ieee754_pow+0x5c>
 8006828:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800682c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006830:	ea54 030a 	orrs.w	r3, r4, sl
 8006834:	f000 84a6 	beq.w	8007184 <__ieee754_pow+0x99c>
 8006838:	4872      	ldr	r0, [pc, #456]	; (8006a04 <__ieee754_pow+0x21c>)
 800683a:	b013      	add	sp, #76	; 0x4c
 800683c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006840:	f000 bf2a 	b.w	8007698 <nan>
 8006844:	f1b9 0f00 	cmp.w	r9, #0
 8006848:	da39      	bge.n	80068be <__ieee754_pow+0xd6>
 800684a:	4b6f      	ldr	r3, [pc, #444]	; (8006a08 <__ieee754_pow+0x220>)
 800684c:	429d      	cmp	r5, r3
 800684e:	dc54      	bgt.n	80068fa <__ieee754_pow+0x112>
 8006850:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8006854:	429d      	cmp	r5, r3
 8006856:	f340 84a6 	ble.w	80071a6 <__ieee754_pow+0x9be>
 800685a:	152b      	asrs	r3, r5, #20
 800685c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006860:	2b14      	cmp	r3, #20
 8006862:	dd0f      	ble.n	8006884 <__ieee754_pow+0x9c>
 8006864:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8006868:	fa22 f103 	lsr.w	r1, r2, r3
 800686c:	fa01 f303 	lsl.w	r3, r1, r3
 8006870:	4293      	cmp	r3, r2
 8006872:	f040 8498 	bne.w	80071a6 <__ieee754_pow+0x9be>
 8006876:	f001 0101 	and.w	r1, r1, #1
 800687a:	f1c1 0302 	rsb	r3, r1, #2
 800687e:	9300      	str	r3, [sp, #0]
 8006880:	b182      	cbz	r2, 80068a4 <__ieee754_pow+0xbc>
 8006882:	e05e      	b.n	8006942 <__ieee754_pow+0x15a>
 8006884:	2a00      	cmp	r2, #0
 8006886:	d15a      	bne.n	800693e <__ieee754_pow+0x156>
 8006888:	f1c3 0314 	rsb	r3, r3, #20
 800688c:	fa45 f103 	asr.w	r1, r5, r3
 8006890:	fa01 f303 	lsl.w	r3, r1, r3
 8006894:	42ab      	cmp	r3, r5
 8006896:	f040 8483 	bne.w	80071a0 <__ieee754_pow+0x9b8>
 800689a:	f001 0101 	and.w	r1, r1, #1
 800689e:	f1c1 0302 	rsb	r3, r1, #2
 80068a2:	9300      	str	r3, [sp, #0]
 80068a4:	4b59      	ldr	r3, [pc, #356]	; (8006a0c <__ieee754_pow+0x224>)
 80068a6:	429d      	cmp	r5, r3
 80068a8:	d130      	bne.n	800690c <__ieee754_pow+0x124>
 80068aa:	2e00      	cmp	r6, #0
 80068ac:	f280 8474 	bge.w	8007198 <__ieee754_pow+0x9b0>
 80068b0:	463a      	mov	r2, r7
 80068b2:	4643      	mov	r3, r8
 80068b4:	2000      	movs	r0, #0
 80068b6:	4955      	ldr	r1, [pc, #340]	; (8006a0c <__ieee754_pow+0x224>)
 80068b8:	f7f9 ff38 	bl	800072c <__aeabi_ddiv>
 80068bc:	e02f      	b.n	800691e <__ieee754_pow+0x136>
 80068be:	2300      	movs	r3, #0
 80068c0:	9300      	str	r3, [sp, #0]
 80068c2:	2a00      	cmp	r2, #0
 80068c4:	d13d      	bne.n	8006942 <__ieee754_pow+0x15a>
 80068c6:	4b4e      	ldr	r3, [pc, #312]	; (8006a00 <__ieee754_pow+0x218>)
 80068c8:	429d      	cmp	r5, r3
 80068ca:	d1eb      	bne.n	80068a4 <__ieee754_pow+0xbc>
 80068cc:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80068d0:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80068d4:	ea53 030a 	orrs.w	r3, r3, sl
 80068d8:	f000 8454 	beq.w	8007184 <__ieee754_pow+0x99c>
 80068dc:	4b4c      	ldr	r3, [pc, #304]	; (8006a10 <__ieee754_pow+0x228>)
 80068de:	429c      	cmp	r4, r3
 80068e0:	dd0d      	ble.n	80068fe <__ieee754_pow+0x116>
 80068e2:	2e00      	cmp	r6, #0
 80068e4:	f280 8454 	bge.w	8007190 <__ieee754_pow+0x9a8>
 80068e8:	f04f 0b00 	mov.w	fp, #0
 80068ec:	f04f 0c00 	mov.w	ip, #0
 80068f0:	4658      	mov	r0, fp
 80068f2:	4661      	mov	r1, ip
 80068f4:	b013      	add	sp, #76	; 0x4c
 80068f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068fa:	2302      	movs	r3, #2
 80068fc:	e7e0      	b.n	80068c0 <__ieee754_pow+0xd8>
 80068fe:	2e00      	cmp	r6, #0
 8006900:	daf2      	bge.n	80068e8 <__ieee754_pow+0x100>
 8006902:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8006906:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800690a:	e7f1      	b.n	80068f0 <__ieee754_pow+0x108>
 800690c:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8006910:	d108      	bne.n	8006924 <__ieee754_pow+0x13c>
 8006912:	463a      	mov	r2, r7
 8006914:	4643      	mov	r3, r8
 8006916:	4638      	mov	r0, r7
 8006918:	4641      	mov	r1, r8
 800691a:	f7f9 fddd 	bl	80004d8 <__aeabi_dmul>
 800691e:	4683      	mov	fp, r0
 8006920:	468c      	mov	ip, r1
 8006922:	e7e5      	b.n	80068f0 <__ieee754_pow+0x108>
 8006924:	4b3b      	ldr	r3, [pc, #236]	; (8006a14 <__ieee754_pow+0x22c>)
 8006926:	429e      	cmp	r6, r3
 8006928:	d10b      	bne.n	8006942 <__ieee754_pow+0x15a>
 800692a:	f1b9 0f00 	cmp.w	r9, #0
 800692e:	db08      	blt.n	8006942 <__ieee754_pow+0x15a>
 8006930:	4638      	mov	r0, r7
 8006932:	4641      	mov	r1, r8
 8006934:	b013      	add	sp, #76	; 0x4c
 8006936:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800693a:	f000 bc6b 	b.w	8007214 <__ieee754_sqrt>
 800693e:	2300      	movs	r3, #0
 8006940:	9300      	str	r3, [sp, #0]
 8006942:	4638      	mov	r0, r7
 8006944:	4641      	mov	r1, r8
 8006946:	f000 fe9d 	bl	8007684 <fabs>
 800694a:	4683      	mov	fp, r0
 800694c:	468c      	mov	ip, r1
 800694e:	f1ba 0f00 	cmp.w	sl, #0
 8006952:	d129      	bne.n	80069a8 <__ieee754_pow+0x1c0>
 8006954:	b124      	cbz	r4, 8006960 <__ieee754_pow+0x178>
 8006956:	4b2d      	ldr	r3, [pc, #180]	; (8006a0c <__ieee754_pow+0x224>)
 8006958:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800695c:	429a      	cmp	r2, r3
 800695e:	d123      	bne.n	80069a8 <__ieee754_pow+0x1c0>
 8006960:	2e00      	cmp	r6, #0
 8006962:	da07      	bge.n	8006974 <__ieee754_pow+0x18c>
 8006964:	465a      	mov	r2, fp
 8006966:	4663      	mov	r3, ip
 8006968:	2000      	movs	r0, #0
 800696a:	4928      	ldr	r1, [pc, #160]	; (8006a0c <__ieee754_pow+0x224>)
 800696c:	f7f9 fede 	bl	800072c <__aeabi_ddiv>
 8006970:	4683      	mov	fp, r0
 8006972:	468c      	mov	ip, r1
 8006974:	f1b9 0f00 	cmp.w	r9, #0
 8006978:	daba      	bge.n	80068f0 <__ieee754_pow+0x108>
 800697a:	9b00      	ldr	r3, [sp, #0]
 800697c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006980:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006984:	4323      	orrs	r3, r4
 8006986:	d108      	bne.n	800699a <__ieee754_pow+0x1b2>
 8006988:	465a      	mov	r2, fp
 800698a:	4663      	mov	r3, ip
 800698c:	4658      	mov	r0, fp
 800698e:	4661      	mov	r1, ip
 8006990:	f7f9 fbea 	bl	8000168 <__aeabi_dsub>
 8006994:	4602      	mov	r2, r0
 8006996:	460b      	mov	r3, r1
 8006998:	e78e      	b.n	80068b8 <__ieee754_pow+0xd0>
 800699a:	9b00      	ldr	r3, [sp, #0]
 800699c:	2b01      	cmp	r3, #1
 800699e:	d1a7      	bne.n	80068f0 <__ieee754_pow+0x108>
 80069a0:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 80069a4:	469c      	mov	ip, r3
 80069a6:	e7a3      	b.n	80068f0 <__ieee754_pow+0x108>
 80069a8:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 80069ac:	3b01      	subs	r3, #1
 80069ae:	930c      	str	r3, [sp, #48]	; 0x30
 80069b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80069b2:	9b00      	ldr	r3, [sp, #0]
 80069b4:	4313      	orrs	r3, r2
 80069b6:	d104      	bne.n	80069c2 <__ieee754_pow+0x1da>
 80069b8:	463a      	mov	r2, r7
 80069ba:	4643      	mov	r3, r8
 80069bc:	4638      	mov	r0, r7
 80069be:	4641      	mov	r1, r8
 80069c0:	e7e6      	b.n	8006990 <__ieee754_pow+0x1a8>
 80069c2:	4b15      	ldr	r3, [pc, #84]	; (8006a18 <__ieee754_pow+0x230>)
 80069c4:	429d      	cmp	r5, r3
 80069c6:	f340 80f9 	ble.w	8006bbc <__ieee754_pow+0x3d4>
 80069ca:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80069ce:	429d      	cmp	r5, r3
 80069d0:	4b0f      	ldr	r3, [pc, #60]	; (8006a10 <__ieee754_pow+0x228>)
 80069d2:	dd09      	ble.n	80069e8 <__ieee754_pow+0x200>
 80069d4:	429c      	cmp	r4, r3
 80069d6:	dc0c      	bgt.n	80069f2 <__ieee754_pow+0x20a>
 80069d8:	2e00      	cmp	r6, #0
 80069da:	da85      	bge.n	80068e8 <__ieee754_pow+0x100>
 80069dc:	a306      	add	r3, pc, #24	; (adr r3, 80069f8 <__ieee754_pow+0x210>)
 80069de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e2:	4610      	mov	r0, r2
 80069e4:	4619      	mov	r1, r3
 80069e6:	e798      	b.n	800691a <__ieee754_pow+0x132>
 80069e8:	429c      	cmp	r4, r3
 80069ea:	dbf5      	blt.n	80069d8 <__ieee754_pow+0x1f0>
 80069ec:	4b07      	ldr	r3, [pc, #28]	; (8006a0c <__ieee754_pow+0x224>)
 80069ee:	429c      	cmp	r4, r3
 80069f0:	dd14      	ble.n	8006a1c <__ieee754_pow+0x234>
 80069f2:	2e00      	cmp	r6, #0
 80069f4:	dcf2      	bgt.n	80069dc <__ieee754_pow+0x1f4>
 80069f6:	e777      	b.n	80068e8 <__ieee754_pow+0x100>
 80069f8:	8800759c 	.word	0x8800759c
 80069fc:	7e37e43c 	.word	0x7e37e43c
 8006a00:	7ff00000 	.word	0x7ff00000
 8006a04:	08007bd0 	.word	0x08007bd0
 8006a08:	433fffff 	.word	0x433fffff
 8006a0c:	3ff00000 	.word	0x3ff00000
 8006a10:	3fefffff 	.word	0x3fefffff
 8006a14:	3fe00000 	.word	0x3fe00000
 8006a18:	41e00000 	.word	0x41e00000
 8006a1c:	4661      	mov	r1, ip
 8006a1e:	2200      	movs	r2, #0
 8006a20:	4658      	mov	r0, fp
 8006a22:	4b61      	ldr	r3, [pc, #388]	; (8006ba8 <__ieee754_pow+0x3c0>)
 8006a24:	f7f9 fba0 	bl	8000168 <__aeabi_dsub>
 8006a28:	a355      	add	r3, pc, #340	; (adr r3, 8006b80 <__ieee754_pow+0x398>)
 8006a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a2e:	4604      	mov	r4, r0
 8006a30:	460d      	mov	r5, r1
 8006a32:	f7f9 fd51 	bl	80004d8 <__aeabi_dmul>
 8006a36:	a354      	add	r3, pc, #336	; (adr r3, 8006b88 <__ieee754_pow+0x3a0>)
 8006a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a3c:	4606      	mov	r6, r0
 8006a3e:	460f      	mov	r7, r1
 8006a40:	4620      	mov	r0, r4
 8006a42:	4629      	mov	r1, r5
 8006a44:	f7f9 fd48 	bl	80004d8 <__aeabi_dmul>
 8006a48:	2200      	movs	r2, #0
 8006a4a:	4682      	mov	sl, r0
 8006a4c:	468b      	mov	fp, r1
 8006a4e:	4620      	mov	r0, r4
 8006a50:	4629      	mov	r1, r5
 8006a52:	4b56      	ldr	r3, [pc, #344]	; (8006bac <__ieee754_pow+0x3c4>)
 8006a54:	f7f9 fd40 	bl	80004d8 <__aeabi_dmul>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	460b      	mov	r3, r1
 8006a5c:	a14c      	add	r1, pc, #304	; (adr r1, 8006b90 <__ieee754_pow+0x3a8>)
 8006a5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a62:	f7f9 fb81 	bl	8000168 <__aeabi_dsub>
 8006a66:	4622      	mov	r2, r4
 8006a68:	462b      	mov	r3, r5
 8006a6a:	f7f9 fd35 	bl	80004d8 <__aeabi_dmul>
 8006a6e:	4602      	mov	r2, r0
 8006a70:	460b      	mov	r3, r1
 8006a72:	2000      	movs	r0, #0
 8006a74:	494e      	ldr	r1, [pc, #312]	; (8006bb0 <__ieee754_pow+0x3c8>)
 8006a76:	f7f9 fb77 	bl	8000168 <__aeabi_dsub>
 8006a7a:	4622      	mov	r2, r4
 8006a7c:	462b      	mov	r3, r5
 8006a7e:	4680      	mov	r8, r0
 8006a80:	4689      	mov	r9, r1
 8006a82:	4620      	mov	r0, r4
 8006a84:	4629      	mov	r1, r5
 8006a86:	f7f9 fd27 	bl	80004d8 <__aeabi_dmul>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	460b      	mov	r3, r1
 8006a8e:	4640      	mov	r0, r8
 8006a90:	4649      	mov	r1, r9
 8006a92:	f7f9 fd21 	bl	80004d8 <__aeabi_dmul>
 8006a96:	a340      	add	r3, pc, #256	; (adr r3, 8006b98 <__ieee754_pow+0x3b0>)
 8006a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a9c:	f7f9 fd1c 	bl	80004d8 <__aeabi_dmul>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	460b      	mov	r3, r1
 8006aa4:	4650      	mov	r0, sl
 8006aa6:	4659      	mov	r1, fp
 8006aa8:	f7f9 fb5e 	bl	8000168 <__aeabi_dsub>
 8006aac:	f04f 0a00 	mov.w	sl, #0
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	460b      	mov	r3, r1
 8006ab4:	4604      	mov	r4, r0
 8006ab6:	460d      	mov	r5, r1
 8006ab8:	4630      	mov	r0, r6
 8006aba:	4639      	mov	r1, r7
 8006abc:	f7f9 fb56 	bl	800016c <__adddf3>
 8006ac0:	4632      	mov	r2, r6
 8006ac2:	463b      	mov	r3, r7
 8006ac4:	4650      	mov	r0, sl
 8006ac6:	468b      	mov	fp, r1
 8006ac8:	f7f9 fb4e 	bl	8000168 <__aeabi_dsub>
 8006acc:	4602      	mov	r2, r0
 8006ace:	460b      	mov	r3, r1
 8006ad0:	4620      	mov	r0, r4
 8006ad2:	4629      	mov	r1, r5
 8006ad4:	f7f9 fb48 	bl	8000168 <__aeabi_dsub>
 8006ad8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006adc:	9b00      	ldr	r3, [sp, #0]
 8006ade:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ae0:	3b01      	subs	r3, #1
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	f04f 0600 	mov.w	r6, #0
 8006ae8:	f04f 0200 	mov.w	r2, #0
 8006aec:	bf0c      	ite	eq
 8006aee:	4b31      	ldreq	r3, [pc, #196]	; (8006bb4 <__ieee754_pow+0x3cc>)
 8006af0:	4b2d      	ldrne	r3, [pc, #180]	; (8006ba8 <__ieee754_pow+0x3c0>)
 8006af2:	4604      	mov	r4, r0
 8006af4:	460d      	mov	r5, r1
 8006af6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006afa:	e9cd 2300 	strd	r2, r3, [sp]
 8006afe:	4632      	mov	r2, r6
 8006b00:	463b      	mov	r3, r7
 8006b02:	f7f9 fb31 	bl	8000168 <__aeabi_dsub>
 8006b06:	4652      	mov	r2, sl
 8006b08:	465b      	mov	r3, fp
 8006b0a:	f7f9 fce5 	bl	80004d8 <__aeabi_dmul>
 8006b0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006b12:	4680      	mov	r8, r0
 8006b14:	4689      	mov	r9, r1
 8006b16:	4620      	mov	r0, r4
 8006b18:	4629      	mov	r1, r5
 8006b1a:	f7f9 fcdd 	bl	80004d8 <__aeabi_dmul>
 8006b1e:	4602      	mov	r2, r0
 8006b20:	460b      	mov	r3, r1
 8006b22:	4640      	mov	r0, r8
 8006b24:	4649      	mov	r1, r9
 8006b26:	f7f9 fb21 	bl	800016c <__adddf3>
 8006b2a:	4632      	mov	r2, r6
 8006b2c:	463b      	mov	r3, r7
 8006b2e:	4680      	mov	r8, r0
 8006b30:	4689      	mov	r9, r1
 8006b32:	4650      	mov	r0, sl
 8006b34:	4659      	mov	r1, fp
 8006b36:	f7f9 fccf 	bl	80004d8 <__aeabi_dmul>
 8006b3a:	4604      	mov	r4, r0
 8006b3c:	460d      	mov	r5, r1
 8006b3e:	460b      	mov	r3, r1
 8006b40:	4602      	mov	r2, r0
 8006b42:	4649      	mov	r1, r9
 8006b44:	4640      	mov	r0, r8
 8006b46:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006b4a:	f7f9 fb0f 	bl	800016c <__adddf3>
 8006b4e:	4b1a      	ldr	r3, [pc, #104]	; (8006bb8 <__ieee754_pow+0x3d0>)
 8006b50:	4682      	mov	sl, r0
 8006b52:	4299      	cmp	r1, r3
 8006b54:	460f      	mov	r7, r1
 8006b56:	460e      	mov	r6, r1
 8006b58:	f340 82ed 	ble.w	8007136 <__ieee754_pow+0x94e>
 8006b5c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8006b60:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8006b64:	4303      	orrs	r3, r0
 8006b66:	f000 81e7 	beq.w	8006f38 <__ieee754_pow+0x750>
 8006b6a:	a30d      	add	r3, pc, #52	; (adr r3, 8006ba0 <__ieee754_pow+0x3b8>)
 8006b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b70:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006b74:	f7f9 fcb0 	bl	80004d8 <__aeabi_dmul>
 8006b78:	a309      	add	r3, pc, #36	; (adr r3, 8006ba0 <__ieee754_pow+0x3b8>)
 8006b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b7e:	e6cc      	b.n	800691a <__ieee754_pow+0x132>
 8006b80:	60000000 	.word	0x60000000
 8006b84:	3ff71547 	.word	0x3ff71547
 8006b88:	f85ddf44 	.word	0xf85ddf44
 8006b8c:	3e54ae0b 	.word	0x3e54ae0b
 8006b90:	55555555 	.word	0x55555555
 8006b94:	3fd55555 	.word	0x3fd55555
 8006b98:	652b82fe 	.word	0x652b82fe
 8006b9c:	3ff71547 	.word	0x3ff71547
 8006ba0:	8800759c 	.word	0x8800759c
 8006ba4:	7e37e43c 	.word	0x7e37e43c
 8006ba8:	3ff00000 	.word	0x3ff00000
 8006bac:	3fd00000 	.word	0x3fd00000
 8006bb0:	3fe00000 	.word	0x3fe00000
 8006bb4:	bff00000 	.word	0xbff00000
 8006bb8:	408fffff 	.word	0x408fffff
 8006bbc:	4bd4      	ldr	r3, [pc, #848]	; (8006f10 <__ieee754_pow+0x728>)
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	ea09 0303 	and.w	r3, r9, r3
 8006bc4:	b943      	cbnz	r3, 8006bd8 <__ieee754_pow+0x3f0>
 8006bc6:	4658      	mov	r0, fp
 8006bc8:	4661      	mov	r1, ip
 8006bca:	4bd2      	ldr	r3, [pc, #840]	; (8006f14 <__ieee754_pow+0x72c>)
 8006bcc:	f7f9 fc84 	bl	80004d8 <__aeabi_dmul>
 8006bd0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8006bd4:	4683      	mov	fp, r0
 8006bd6:	460c      	mov	r4, r1
 8006bd8:	1523      	asrs	r3, r4, #20
 8006bda:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006bde:	4413      	add	r3, r2
 8006be0:	930b      	str	r3, [sp, #44]	; 0x2c
 8006be2:	4bcd      	ldr	r3, [pc, #820]	; (8006f18 <__ieee754_pow+0x730>)
 8006be4:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006be8:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8006bec:	429c      	cmp	r4, r3
 8006bee:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006bf2:	dd08      	ble.n	8006c06 <__ieee754_pow+0x41e>
 8006bf4:	4bc9      	ldr	r3, [pc, #804]	; (8006f1c <__ieee754_pow+0x734>)
 8006bf6:	429c      	cmp	r4, r3
 8006bf8:	f340 819c 	ble.w	8006f34 <__ieee754_pow+0x74c>
 8006bfc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bfe:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8006c02:	3301      	adds	r3, #1
 8006c04:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c06:	2600      	movs	r6, #0
 8006c08:	00f3      	lsls	r3, r6, #3
 8006c0a:	930d      	str	r3, [sp, #52]	; 0x34
 8006c0c:	4bc4      	ldr	r3, [pc, #784]	; (8006f20 <__ieee754_pow+0x738>)
 8006c0e:	4658      	mov	r0, fp
 8006c10:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006c14:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006c18:	4629      	mov	r1, r5
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8006c20:	4623      	mov	r3, r4
 8006c22:	f7f9 faa1 	bl	8000168 <__aeabi_dsub>
 8006c26:	46da      	mov	sl, fp
 8006c28:	462b      	mov	r3, r5
 8006c2a:	4652      	mov	r2, sl
 8006c2c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8006c30:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006c34:	f7f9 fa9a 	bl	800016c <__adddf3>
 8006c38:	4602      	mov	r2, r0
 8006c3a:	460b      	mov	r3, r1
 8006c3c:	2000      	movs	r0, #0
 8006c3e:	49b9      	ldr	r1, [pc, #740]	; (8006f24 <__ieee754_pow+0x73c>)
 8006c40:	f7f9 fd74 	bl	800072c <__aeabi_ddiv>
 8006c44:	4602      	mov	r2, r0
 8006c46:	460b      	mov	r3, r1
 8006c48:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006c4c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006c50:	f7f9 fc42 	bl	80004d8 <__aeabi_dmul>
 8006c54:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006c58:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8006c5c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006c60:	2300      	movs	r3, #0
 8006c62:	2200      	movs	r2, #0
 8006c64:	46ab      	mov	fp, r5
 8006c66:	106d      	asrs	r5, r5, #1
 8006c68:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006c6c:	9304      	str	r3, [sp, #16]
 8006c6e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8006c72:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006c76:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8006c7a:	4640      	mov	r0, r8
 8006c7c:	4649      	mov	r1, r9
 8006c7e:	4614      	mov	r4, r2
 8006c80:	461d      	mov	r5, r3
 8006c82:	f7f9 fc29 	bl	80004d8 <__aeabi_dmul>
 8006c86:	4602      	mov	r2, r0
 8006c88:	460b      	mov	r3, r1
 8006c8a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006c8e:	f7f9 fa6b 	bl	8000168 <__aeabi_dsub>
 8006c92:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006c96:	4606      	mov	r6, r0
 8006c98:	460f      	mov	r7, r1
 8006c9a:	4620      	mov	r0, r4
 8006c9c:	4629      	mov	r1, r5
 8006c9e:	f7f9 fa63 	bl	8000168 <__aeabi_dsub>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	4650      	mov	r0, sl
 8006ca8:	4659      	mov	r1, fp
 8006caa:	f7f9 fa5d 	bl	8000168 <__aeabi_dsub>
 8006cae:	4642      	mov	r2, r8
 8006cb0:	464b      	mov	r3, r9
 8006cb2:	f7f9 fc11 	bl	80004d8 <__aeabi_dmul>
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	460b      	mov	r3, r1
 8006cba:	4630      	mov	r0, r6
 8006cbc:	4639      	mov	r1, r7
 8006cbe:	f7f9 fa53 	bl	8000168 <__aeabi_dsub>
 8006cc2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006cc6:	f7f9 fc07 	bl	80004d8 <__aeabi_dmul>
 8006cca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006cce:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006cd2:	4610      	mov	r0, r2
 8006cd4:	4619      	mov	r1, r3
 8006cd6:	f7f9 fbff 	bl	80004d8 <__aeabi_dmul>
 8006cda:	a37b      	add	r3, pc, #492	; (adr r3, 8006ec8 <__ieee754_pow+0x6e0>)
 8006cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce0:	4604      	mov	r4, r0
 8006ce2:	460d      	mov	r5, r1
 8006ce4:	f7f9 fbf8 	bl	80004d8 <__aeabi_dmul>
 8006ce8:	a379      	add	r3, pc, #484	; (adr r3, 8006ed0 <__ieee754_pow+0x6e8>)
 8006cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cee:	f7f9 fa3d 	bl	800016c <__adddf3>
 8006cf2:	4622      	mov	r2, r4
 8006cf4:	462b      	mov	r3, r5
 8006cf6:	f7f9 fbef 	bl	80004d8 <__aeabi_dmul>
 8006cfa:	a377      	add	r3, pc, #476	; (adr r3, 8006ed8 <__ieee754_pow+0x6f0>)
 8006cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d00:	f7f9 fa34 	bl	800016c <__adddf3>
 8006d04:	4622      	mov	r2, r4
 8006d06:	462b      	mov	r3, r5
 8006d08:	f7f9 fbe6 	bl	80004d8 <__aeabi_dmul>
 8006d0c:	a374      	add	r3, pc, #464	; (adr r3, 8006ee0 <__ieee754_pow+0x6f8>)
 8006d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d12:	f7f9 fa2b 	bl	800016c <__adddf3>
 8006d16:	4622      	mov	r2, r4
 8006d18:	462b      	mov	r3, r5
 8006d1a:	f7f9 fbdd 	bl	80004d8 <__aeabi_dmul>
 8006d1e:	a372      	add	r3, pc, #456	; (adr r3, 8006ee8 <__ieee754_pow+0x700>)
 8006d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d24:	f7f9 fa22 	bl	800016c <__adddf3>
 8006d28:	4622      	mov	r2, r4
 8006d2a:	462b      	mov	r3, r5
 8006d2c:	f7f9 fbd4 	bl	80004d8 <__aeabi_dmul>
 8006d30:	a36f      	add	r3, pc, #444	; (adr r3, 8006ef0 <__ieee754_pow+0x708>)
 8006d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d36:	f7f9 fa19 	bl	800016c <__adddf3>
 8006d3a:	4622      	mov	r2, r4
 8006d3c:	4606      	mov	r6, r0
 8006d3e:	460f      	mov	r7, r1
 8006d40:	462b      	mov	r3, r5
 8006d42:	4620      	mov	r0, r4
 8006d44:	4629      	mov	r1, r5
 8006d46:	f7f9 fbc7 	bl	80004d8 <__aeabi_dmul>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	460b      	mov	r3, r1
 8006d4e:	4630      	mov	r0, r6
 8006d50:	4639      	mov	r1, r7
 8006d52:	f7f9 fbc1 	bl	80004d8 <__aeabi_dmul>
 8006d56:	4604      	mov	r4, r0
 8006d58:	460d      	mov	r5, r1
 8006d5a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d5e:	4642      	mov	r2, r8
 8006d60:	464b      	mov	r3, r9
 8006d62:	f7f9 fa03 	bl	800016c <__adddf3>
 8006d66:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006d6a:	f7f9 fbb5 	bl	80004d8 <__aeabi_dmul>
 8006d6e:	4622      	mov	r2, r4
 8006d70:	462b      	mov	r3, r5
 8006d72:	f7f9 f9fb 	bl	800016c <__adddf3>
 8006d76:	4642      	mov	r2, r8
 8006d78:	4606      	mov	r6, r0
 8006d7a:	460f      	mov	r7, r1
 8006d7c:	464b      	mov	r3, r9
 8006d7e:	4640      	mov	r0, r8
 8006d80:	4649      	mov	r1, r9
 8006d82:	f7f9 fba9 	bl	80004d8 <__aeabi_dmul>
 8006d86:	2200      	movs	r2, #0
 8006d88:	4b67      	ldr	r3, [pc, #412]	; (8006f28 <__ieee754_pow+0x740>)
 8006d8a:	4682      	mov	sl, r0
 8006d8c:	468b      	mov	fp, r1
 8006d8e:	f7f9 f9ed 	bl	800016c <__adddf3>
 8006d92:	4632      	mov	r2, r6
 8006d94:	463b      	mov	r3, r7
 8006d96:	f7f9 f9e9 	bl	800016c <__adddf3>
 8006d9a:	9c04      	ldr	r4, [sp, #16]
 8006d9c:	460d      	mov	r5, r1
 8006d9e:	4622      	mov	r2, r4
 8006da0:	460b      	mov	r3, r1
 8006da2:	4640      	mov	r0, r8
 8006da4:	4649      	mov	r1, r9
 8006da6:	f7f9 fb97 	bl	80004d8 <__aeabi_dmul>
 8006daa:	2200      	movs	r2, #0
 8006dac:	4680      	mov	r8, r0
 8006dae:	4689      	mov	r9, r1
 8006db0:	4620      	mov	r0, r4
 8006db2:	4629      	mov	r1, r5
 8006db4:	4b5c      	ldr	r3, [pc, #368]	; (8006f28 <__ieee754_pow+0x740>)
 8006db6:	f7f9 f9d7 	bl	8000168 <__aeabi_dsub>
 8006dba:	4652      	mov	r2, sl
 8006dbc:	465b      	mov	r3, fp
 8006dbe:	f7f9 f9d3 	bl	8000168 <__aeabi_dsub>
 8006dc2:	4602      	mov	r2, r0
 8006dc4:	460b      	mov	r3, r1
 8006dc6:	4630      	mov	r0, r6
 8006dc8:	4639      	mov	r1, r7
 8006dca:	f7f9 f9cd 	bl	8000168 <__aeabi_dsub>
 8006dce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006dd2:	f7f9 fb81 	bl	80004d8 <__aeabi_dmul>
 8006dd6:	4622      	mov	r2, r4
 8006dd8:	4606      	mov	r6, r0
 8006dda:	460f      	mov	r7, r1
 8006ddc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006de0:	462b      	mov	r3, r5
 8006de2:	f7f9 fb79 	bl	80004d8 <__aeabi_dmul>
 8006de6:	4602      	mov	r2, r0
 8006de8:	460b      	mov	r3, r1
 8006dea:	4630      	mov	r0, r6
 8006dec:	4639      	mov	r1, r7
 8006dee:	f7f9 f9bd 	bl	800016c <__adddf3>
 8006df2:	4606      	mov	r6, r0
 8006df4:	460f      	mov	r7, r1
 8006df6:	4602      	mov	r2, r0
 8006df8:	460b      	mov	r3, r1
 8006dfa:	4640      	mov	r0, r8
 8006dfc:	4649      	mov	r1, r9
 8006dfe:	f7f9 f9b5 	bl	800016c <__adddf3>
 8006e02:	a33d      	add	r3, pc, #244	; (adr r3, 8006ef8 <__ieee754_pow+0x710>)
 8006e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e08:	9c04      	ldr	r4, [sp, #16]
 8006e0a:	460d      	mov	r5, r1
 8006e0c:	4620      	mov	r0, r4
 8006e0e:	f7f9 fb63 	bl	80004d8 <__aeabi_dmul>
 8006e12:	4642      	mov	r2, r8
 8006e14:	464b      	mov	r3, r9
 8006e16:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006e1a:	4620      	mov	r0, r4
 8006e1c:	4629      	mov	r1, r5
 8006e1e:	f7f9 f9a3 	bl	8000168 <__aeabi_dsub>
 8006e22:	4602      	mov	r2, r0
 8006e24:	460b      	mov	r3, r1
 8006e26:	4630      	mov	r0, r6
 8006e28:	4639      	mov	r1, r7
 8006e2a:	f7f9 f99d 	bl	8000168 <__aeabi_dsub>
 8006e2e:	a334      	add	r3, pc, #208	; (adr r3, 8006f00 <__ieee754_pow+0x718>)
 8006e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e34:	f7f9 fb50 	bl	80004d8 <__aeabi_dmul>
 8006e38:	a333      	add	r3, pc, #204	; (adr r3, 8006f08 <__ieee754_pow+0x720>)
 8006e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e3e:	4606      	mov	r6, r0
 8006e40:	460f      	mov	r7, r1
 8006e42:	4620      	mov	r0, r4
 8006e44:	4629      	mov	r1, r5
 8006e46:	f7f9 fb47 	bl	80004d8 <__aeabi_dmul>
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	460b      	mov	r3, r1
 8006e4e:	4630      	mov	r0, r6
 8006e50:	4639      	mov	r1, r7
 8006e52:	f7f9 f98b 	bl	800016c <__adddf3>
 8006e56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006e58:	4b34      	ldr	r3, [pc, #208]	; (8006f2c <__ieee754_pow+0x744>)
 8006e5a:	4413      	add	r3, r2
 8006e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e60:	f7f9 f984 	bl	800016c <__adddf3>
 8006e64:	4680      	mov	r8, r0
 8006e66:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006e68:	4689      	mov	r9, r1
 8006e6a:	f7f9 facb 	bl	8000404 <__aeabi_i2d>
 8006e6e:	4604      	mov	r4, r0
 8006e70:	460d      	mov	r5, r1
 8006e72:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006e74:	4b2e      	ldr	r3, [pc, #184]	; (8006f30 <__ieee754_pow+0x748>)
 8006e76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e7a:	4413      	add	r3, r2
 8006e7c:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006e80:	4642      	mov	r2, r8
 8006e82:	464b      	mov	r3, r9
 8006e84:	f7f9 f972 	bl	800016c <__adddf3>
 8006e88:	4632      	mov	r2, r6
 8006e8a:	463b      	mov	r3, r7
 8006e8c:	f7f9 f96e 	bl	800016c <__adddf3>
 8006e90:	4622      	mov	r2, r4
 8006e92:	462b      	mov	r3, r5
 8006e94:	f7f9 f96a 	bl	800016c <__adddf3>
 8006e98:	f8dd a010 	ldr.w	sl, [sp, #16]
 8006e9c:	4622      	mov	r2, r4
 8006e9e:	462b      	mov	r3, r5
 8006ea0:	4650      	mov	r0, sl
 8006ea2:	468b      	mov	fp, r1
 8006ea4:	f7f9 f960 	bl	8000168 <__aeabi_dsub>
 8006ea8:	4632      	mov	r2, r6
 8006eaa:	463b      	mov	r3, r7
 8006eac:	f7f9 f95c 	bl	8000168 <__aeabi_dsub>
 8006eb0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006eb4:	f7f9 f958 	bl	8000168 <__aeabi_dsub>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	460b      	mov	r3, r1
 8006ebc:	4640      	mov	r0, r8
 8006ebe:	4649      	mov	r1, r9
 8006ec0:	e608      	b.n	8006ad4 <__ieee754_pow+0x2ec>
 8006ec2:	bf00      	nop
 8006ec4:	f3af 8000 	nop.w
 8006ec8:	4a454eef 	.word	0x4a454eef
 8006ecc:	3fca7e28 	.word	0x3fca7e28
 8006ed0:	93c9db65 	.word	0x93c9db65
 8006ed4:	3fcd864a 	.word	0x3fcd864a
 8006ed8:	a91d4101 	.word	0xa91d4101
 8006edc:	3fd17460 	.word	0x3fd17460
 8006ee0:	518f264d 	.word	0x518f264d
 8006ee4:	3fd55555 	.word	0x3fd55555
 8006ee8:	db6fabff 	.word	0xdb6fabff
 8006eec:	3fdb6db6 	.word	0x3fdb6db6
 8006ef0:	33333303 	.word	0x33333303
 8006ef4:	3fe33333 	.word	0x3fe33333
 8006ef8:	e0000000 	.word	0xe0000000
 8006efc:	3feec709 	.word	0x3feec709
 8006f00:	dc3a03fd 	.word	0xdc3a03fd
 8006f04:	3feec709 	.word	0x3feec709
 8006f08:	145b01f5 	.word	0x145b01f5
 8006f0c:	be3e2fe0 	.word	0xbe3e2fe0
 8006f10:	7ff00000 	.word	0x7ff00000
 8006f14:	43400000 	.word	0x43400000
 8006f18:	0003988e 	.word	0x0003988e
 8006f1c:	000bb679 	.word	0x000bb679
 8006f20:	08007d70 	.word	0x08007d70
 8006f24:	3ff00000 	.word	0x3ff00000
 8006f28:	40080000 	.word	0x40080000
 8006f2c:	08007d90 	.word	0x08007d90
 8006f30:	08007d80 	.word	0x08007d80
 8006f34:	2601      	movs	r6, #1
 8006f36:	e667      	b.n	8006c08 <__ieee754_pow+0x420>
 8006f38:	a39d      	add	r3, pc, #628	; (adr r3, 80071b0 <__ieee754_pow+0x9c8>)
 8006f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f3e:	4640      	mov	r0, r8
 8006f40:	4649      	mov	r1, r9
 8006f42:	f7f9 f913 	bl	800016c <__adddf3>
 8006f46:	4622      	mov	r2, r4
 8006f48:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f4c:	462b      	mov	r3, r5
 8006f4e:	4650      	mov	r0, sl
 8006f50:	4639      	mov	r1, r7
 8006f52:	f7f9 f909 	bl	8000168 <__aeabi_dsub>
 8006f56:	4602      	mov	r2, r0
 8006f58:	460b      	mov	r3, r1
 8006f5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f5e:	f7f9 fd4b 	bl	80009f8 <__aeabi_dcmpgt>
 8006f62:	2800      	cmp	r0, #0
 8006f64:	f47f ae01 	bne.w	8006b6a <__ieee754_pow+0x382>
 8006f68:	4aa5      	ldr	r2, [pc, #660]	; (8007200 <__ieee754_pow+0xa18>)
 8006f6a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	f340 8103 	ble.w	800717a <__ieee754_pow+0x992>
 8006f74:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006f78:	2000      	movs	r0, #0
 8006f7a:	151b      	asrs	r3, r3, #20
 8006f7c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006f80:	fa4a f303 	asr.w	r3, sl, r3
 8006f84:	4433      	add	r3, r6
 8006f86:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8006f8a:	4f9e      	ldr	r7, [pc, #632]	; (8007204 <__ieee754_pow+0xa1c>)
 8006f8c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8006f90:	4117      	asrs	r7, r2
 8006f92:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8006f96:	ea23 0107 	bic.w	r1, r3, r7
 8006f9a:	f1c2 0214 	rsb	r2, r2, #20
 8006f9e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8006fa2:	460b      	mov	r3, r1
 8006fa4:	fa4a fa02 	asr.w	sl, sl, r2
 8006fa8:	2e00      	cmp	r6, #0
 8006faa:	4602      	mov	r2, r0
 8006fac:	4629      	mov	r1, r5
 8006fae:	4620      	mov	r0, r4
 8006fb0:	bfb8      	it	lt
 8006fb2:	f1ca 0a00 	rsblt	sl, sl, #0
 8006fb6:	f7f9 f8d7 	bl	8000168 <__aeabi_dsub>
 8006fba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006fbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fc2:	2400      	movs	r4, #0
 8006fc4:	4642      	mov	r2, r8
 8006fc6:	464b      	mov	r3, r9
 8006fc8:	f7f9 f8d0 	bl	800016c <__adddf3>
 8006fcc:	a37a      	add	r3, pc, #488	; (adr r3, 80071b8 <__ieee754_pow+0x9d0>)
 8006fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd2:	4620      	mov	r0, r4
 8006fd4:	460d      	mov	r5, r1
 8006fd6:	f7f9 fa7f 	bl	80004d8 <__aeabi_dmul>
 8006fda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006fde:	4606      	mov	r6, r0
 8006fe0:	460f      	mov	r7, r1
 8006fe2:	4620      	mov	r0, r4
 8006fe4:	4629      	mov	r1, r5
 8006fe6:	f7f9 f8bf 	bl	8000168 <__aeabi_dsub>
 8006fea:	4602      	mov	r2, r0
 8006fec:	460b      	mov	r3, r1
 8006fee:	4640      	mov	r0, r8
 8006ff0:	4649      	mov	r1, r9
 8006ff2:	f7f9 f8b9 	bl	8000168 <__aeabi_dsub>
 8006ff6:	a372      	add	r3, pc, #456	; (adr r3, 80071c0 <__ieee754_pow+0x9d8>)
 8006ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ffc:	f7f9 fa6c 	bl	80004d8 <__aeabi_dmul>
 8007000:	a371      	add	r3, pc, #452	; (adr r3, 80071c8 <__ieee754_pow+0x9e0>)
 8007002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007006:	4680      	mov	r8, r0
 8007008:	4689      	mov	r9, r1
 800700a:	4620      	mov	r0, r4
 800700c:	4629      	mov	r1, r5
 800700e:	f7f9 fa63 	bl	80004d8 <__aeabi_dmul>
 8007012:	4602      	mov	r2, r0
 8007014:	460b      	mov	r3, r1
 8007016:	4640      	mov	r0, r8
 8007018:	4649      	mov	r1, r9
 800701a:	f7f9 f8a7 	bl	800016c <__adddf3>
 800701e:	4604      	mov	r4, r0
 8007020:	460d      	mov	r5, r1
 8007022:	4602      	mov	r2, r0
 8007024:	460b      	mov	r3, r1
 8007026:	4630      	mov	r0, r6
 8007028:	4639      	mov	r1, r7
 800702a:	f7f9 f89f 	bl	800016c <__adddf3>
 800702e:	4632      	mov	r2, r6
 8007030:	463b      	mov	r3, r7
 8007032:	4680      	mov	r8, r0
 8007034:	4689      	mov	r9, r1
 8007036:	f7f9 f897 	bl	8000168 <__aeabi_dsub>
 800703a:	4602      	mov	r2, r0
 800703c:	460b      	mov	r3, r1
 800703e:	4620      	mov	r0, r4
 8007040:	4629      	mov	r1, r5
 8007042:	f7f9 f891 	bl	8000168 <__aeabi_dsub>
 8007046:	4642      	mov	r2, r8
 8007048:	4606      	mov	r6, r0
 800704a:	460f      	mov	r7, r1
 800704c:	464b      	mov	r3, r9
 800704e:	4640      	mov	r0, r8
 8007050:	4649      	mov	r1, r9
 8007052:	f7f9 fa41 	bl	80004d8 <__aeabi_dmul>
 8007056:	a35e      	add	r3, pc, #376	; (adr r3, 80071d0 <__ieee754_pow+0x9e8>)
 8007058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800705c:	4604      	mov	r4, r0
 800705e:	460d      	mov	r5, r1
 8007060:	f7f9 fa3a 	bl	80004d8 <__aeabi_dmul>
 8007064:	a35c      	add	r3, pc, #368	; (adr r3, 80071d8 <__ieee754_pow+0x9f0>)
 8007066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800706a:	f7f9 f87d 	bl	8000168 <__aeabi_dsub>
 800706e:	4622      	mov	r2, r4
 8007070:	462b      	mov	r3, r5
 8007072:	f7f9 fa31 	bl	80004d8 <__aeabi_dmul>
 8007076:	a35a      	add	r3, pc, #360	; (adr r3, 80071e0 <__ieee754_pow+0x9f8>)
 8007078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800707c:	f7f9 f876 	bl	800016c <__adddf3>
 8007080:	4622      	mov	r2, r4
 8007082:	462b      	mov	r3, r5
 8007084:	f7f9 fa28 	bl	80004d8 <__aeabi_dmul>
 8007088:	a357      	add	r3, pc, #348	; (adr r3, 80071e8 <__ieee754_pow+0xa00>)
 800708a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800708e:	f7f9 f86b 	bl	8000168 <__aeabi_dsub>
 8007092:	4622      	mov	r2, r4
 8007094:	462b      	mov	r3, r5
 8007096:	f7f9 fa1f 	bl	80004d8 <__aeabi_dmul>
 800709a:	a355      	add	r3, pc, #340	; (adr r3, 80071f0 <__ieee754_pow+0xa08>)
 800709c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a0:	f7f9 f864 	bl	800016c <__adddf3>
 80070a4:	4622      	mov	r2, r4
 80070a6:	462b      	mov	r3, r5
 80070a8:	f7f9 fa16 	bl	80004d8 <__aeabi_dmul>
 80070ac:	4602      	mov	r2, r0
 80070ae:	460b      	mov	r3, r1
 80070b0:	4640      	mov	r0, r8
 80070b2:	4649      	mov	r1, r9
 80070b4:	f7f9 f858 	bl	8000168 <__aeabi_dsub>
 80070b8:	4604      	mov	r4, r0
 80070ba:	460d      	mov	r5, r1
 80070bc:	4602      	mov	r2, r0
 80070be:	460b      	mov	r3, r1
 80070c0:	4640      	mov	r0, r8
 80070c2:	4649      	mov	r1, r9
 80070c4:	f7f9 fa08 	bl	80004d8 <__aeabi_dmul>
 80070c8:	2200      	movs	r2, #0
 80070ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80070ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80070d2:	4620      	mov	r0, r4
 80070d4:	4629      	mov	r1, r5
 80070d6:	f7f9 f847 	bl	8000168 <__aeabi_dsub>
 80070da:	4602      	mov	r2, r0
 80070dc:	460b      	mov	r3, r1
 80070de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070e2:	f7f9 fb23 	bl	800072c <__aeabi_ddiv>
 80070e6:	4632      	mov	r2, r6
 80070e8:	4604      	mov	r4, r0
 80070ea:	460d      	mov	r5, r1
 80070ec:	463b      	mov	r3, r7
 80070ee:	4640      	mov	r0, r8
 80070f0:	4649      	mov	r1, r9
 80070f2:	f7f9 f9f1 	bl	80004d8 <__aeabi_dmul>
 80070f6:	4632      	mov	r2, r6
 80070f8:	463b      	mov	r3, r7
 80070fa:	f7f9 f837 	bl	800016c <__adddf3>
 80070fe:	4602      	mov	r2, r0
 8007100:	460b      	mov	r3, r1
 8007102:	4620      	mov	r0, r4
 8007104:	4629      	mov	r1, r5
 8007106:	f7f9 f82f 	bl	8000168 <__aeabi_dsub>
 800710a:	4642      	mov	r2, r8
 800710c:	464b      	mov	r3, r9
 800710e:	f7f9 f82b 	bl	8000168 <__aeabi_dsub>
 8007112:	4602      	mov	r2, r0
 8007114:	460b      	mov	r3, r1
 8007116:	2000      	movs	r0, #0
 8007118:	493b      	ldr	r1, [pc, #236]	; (8007208 <__ieee754_pow+0xa20>)
 800711a:	f7f9 f825 	bl	8000168 <__aeabi_dsub>
 800711e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8007122:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8007126:	da2b      	bge.n	8007180 <__ieee754_pow+0x998>
 8007128:	4652      	mov	r2, sl
 800712a:	f000 fb45 	bl	80077b8 <scalbn>
 800712e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007132:	f7ff bbf2 	b.w	800691a <__ieee754_pow+0x132>
 8007136:	4b35      	ldr	r3, [pc, #212]	; (800720c <__ieee754_pow+0xa24>)
 8007138:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800713c:	429f      	cmp	r7, r3
 800713e:	f77f af13 	ble.w	8006f68 <__ieee754_pow+0x780>
 8007142:	4b33      	ldr	r3, [pc, #204]	; (8007210 <__ieee754_pow+0xa28>)
 8007144:	440b      	add	r3, r1
 8007146:	4303      	orrs	r3, r0
 8007148:	d00b      	beq.n	8007162 <__ieee754_pow+0x97a>
 800714a:	a32b      	add	r3, pc, #172	; (adr r3, 80071f8 <__ieee754_pow+0xa10>)
 800714c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007150:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007154:	f7f9 f9c0 	bl	80004d8 <__aeabi_dmul>
 8007158:	a327      	add	r3, pc, #156	; (adr r3, 80071f8 <__ieee754_pow+0xa10>)
 800715a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800715e:	f7ff bbdc 	b.w	800691a <__ieee754_pow+0x132>
 8007162:	4622      	mov	r2, r4
 8007164:	462b      	mov	r3, r5
 8007166:	f7f8 ffff 	bl	8000168 <__aeabi_dsub>
 800716a:	4642      	mov	r2, r8
 800716c:	464b      	mov	r3, r9
 800716e:	f7f9 fc39 	bl	80009e4 <__aeabi_dcmpge>
 8007172:	2800      	cmp	r0, #0
 8007174:	f43f aef8 	beq.w	8006f68 <__ieee754_pow+0x780>
 8007178:	e7e7      	b.n	800714a <__ieee754_pow+0x962>
 800717a:	f04f 0a00 	mov.w	sl, #0
 800717e:	e71e      	b.n	8006fbe <__ieee754_pow+0x7d6>
 8007180:	4621      	mov	r1, r4
 8007182:	e7d4      	b.n	800712e <__ieee754_pow+0x946>
 8007184:	f04f 0b00 	mov.w	fp, #0
 8007188:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8007208 <__ieee754_pow+0xa20>
 800718c:	f7ff bbb0 	b.w	80068f0 <__ieee754_pow+0x108>
 8007190:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8007194:	f7ff bbac 	b.w	80068f0 <__ieee754_pow+0x108>
 8007198:	4638      	mov	r0, r7
 800719a:	4641      	mov	r1, r8
 800719c:	f7ff bbbf 	b.w	800691e <__ieee754_pow+0x136>
 80071a0:	9200      	str	r2, [sp, #0]
 80071a2:	f7ff bb7f 	b.w	80068a4 <__ieee754_pow+0xbc>
 80071a6:	2300      	movs	r3, #0
 80071a8:	f7ff bb69 	b.w	800687e <__ieee754_pow+0x96>
 80071ac:	f3af 8000 	nop.w
 80071b0:	652b82fe 	.word	0x652b82fe
 80071b4:	3c971547 	.word	0x3c971547
 80071b8:	00000000 	.word	0x00000000
 80071bc:	3fe62e43 	.word	0x3fe62e43
 80071c0:	fefa39ef 	.word	0xfefa39ef
 80071c4:	3fe62e42 	.word	0x3fe62e42
 80071c8:	0ca86c39 	.word	0x0ca86c39
 80071cc:	be205c61 	.word	0xbe205c61
 80071d0:	72bea4d0 	.word	0x72bea4d0
 80071d4:	3e663769 	.word	0x3e663769
 80071d8:	c5d26bf1 	.word	0xc5d26bf1
 80071dc:	3ebbbd41 	.word	0x3ebbbd41
 80071e0:	af25de2c 	.word	0xaf25de2c
 80071e4:	3f11566a 	.word	0x3f11566a
 80071e8:	16bebd93 	.word	0x16bebd93
 80071ec:	3f66c16c 	.word	0x3f66c16c
 80071f0:	5555553e 	.word	0x5555553e
 80071f4:	3fc55555 	.word	0x3fc55555
 80071f8:	c2f8f359 	.word	0xc2f8f359
 80071fc:	01a56e1f 	.word	0x01a56e1f
 8007200:	3fe00000 	.word	0x3fe00000
 8007204:	000fffff 	.word	0x000fffff
 8007208:	3ff00000 	.word	0x3ff00000
 800720c:	4090cbff 	.word	0x4090cbff
 8007210:	3f6f3400 	.word	0x3f6f3400

08007214 <__ieee754_sqrt>:
 8007214:	f8df c150 	ldr.w	ip, [pc, #336]	; 8007368 <__ieee754_sqrt+0x154>
 8007218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800721c:	ea3c 0c01 	bics.w	ip, ip, r1
 8007220:	460b      	mov	r3, r1
 8007222:	4606      	mov	r6, r0
 8007224:	460d      	mov	r5, r1
 8007226:	460a      	mov	r2, r1
 8007228:	4607      	mov	r7, r0
 800722a:	4604      	mov	r4, r0
 800722c:	d10e      	bne.n	800724c <__ieee754_sqrt+0x38>
 800722e:	4602      	mov	r2, r0
 8007230:	f7f9 f952 	bl	80004d8 <__aeabi_dmul>
 8007234:	4602      	mov	r2, r0
 8007236:	460b      	mov	r3, r1
 8007238:	4630      	mov	r0, r6
 800723a:	4629      	mov	r1, r5
 800723c:	f7f8 ff96 	bl	800016c <__adddf3>
 8007240:	4606      	mov	r6, r0
 8007242:	460d      	mov	r5, r1
 8007244:	4630      	mov	r0, r6
 8007246:	4629      	mov	r1, r5
 8007248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800724c:	2900      	cmp	r1, #0
 800724e:	dc0d      	bgt.n	800726c <__ieee754_sqrt+0x58>
 8007250:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8007254:	ea5c 0707 	orrs.w	r7, ip, r7
 8007258:	d0f4      	beq.n	8007244 <__ieee754_sqrt+0x30>
 800725a:	b139      	cbz	r1, 800726c <__ieee754_sqrt+0x58>
 800725c:	4602      	mov	r2, r0
 800725e:	f7f8 ff83 	bl	8000168 <__aeabi_dsub>
 8007262:	4602      	mov	r2, r0
 8007264:	460b      	mov	r3, r1
 8007266:	f7f9 fa61 	bl	800072c <__aeabi_ddiv>
 800726a:	e7e9      	b.n	8007240 <__ieee754_sqrt+0x2c>
 800726c:	1512      	asrs	r2, r2, #20
 800726e:	d074      	beq.n	800735a <__ieee754_sqrt+0x146>
 8007270:	2000      	movs	r0, #0
 8007272:	07d5      	lsls	r5, r2, #31
 8007274:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007278:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 800727c:	bf5e      	ittt	pl
 800727e:	0fe3      	lsrpl	r3, r4, #31
 8007280:	0064      	lslpl	r4, r4, #1
 8007282:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 8007286:	0fe3      	lsrs	r3, r4, #31
 8007288:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800728c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8007290:	2516      	movs	r5, #22
 8007292:	4601      	mov	r1, r0
 8007294:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007298:	1076      	asrs	r6, r6, #1
 800729a:	0064      	lsls	r4, r4, #1
 800729c:	188f      	adds	r7, r1, r2
 800729e:	429f      	cmp	r7, r3
 80072a0:	bfde      	ittt	le
 80072a2:	1bdb      	suble	r3, r3, r7
 80072a4:	18b9      	addle	r1, r7, r2
 80072a6:	1880      	addle	r0, r0, r2
 80072a8:	005b      	lsls	r3, r3, #1
 80072aa:	3d01      	subs	r5, #1
 80072ac:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80072b0:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80072b4:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80072b8:	d1f0      	bne.n	800729c <__ieee754_sqrt+0x88>
 80072ba:	462a      	mov	r2, r5
 80072bc:	f04f 0e20 	mov.w	lr, #32
 80072c0:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 80072c4:	428b      	cmp	r3, r1
 80072c6:	eb07 0c05 	add.w	ip, r7, r5
 80072ca:	dc02      	bgt.n	80072d2 <__ieee754_sqrt+0xbe>
 80072cc:	d113      	bne.n	80072f6 <__ieee754_sqrt+0xe2>
 80072ce:	45a4      	cmp	ip, r4
 80072d0:	d811      	bhi.n	80072f6 <__ieee754_sqrt+0xe2>
 80072d2:	f1bc 0f00 	cmp.w	ip, #0
 80072d6:	eb0c 0507 	add.w	r5, ip, r7
 80072da:	da43      	bge.n	8007364 <__ieee754_sqrt+0x150>
 80072dc:	2d00      	cmp	r5, #0
 80072de:	db41      	blt.n	8007364 <__ieee754_sqrt+0x150>
 80072e0:	f101 0801 	add.w	r8, r1, #1
 80072e4:	1a5b      	subs	r3, r3, r1
 80072e6:	4641      	mov	r1, r8
 80072e8:	45a4      	cmp	ip, r4
 80072ea:	bf88      	it	hi
 80072ec:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80072f0:	eba4 040c 	sub.w	r4, r4, ip
 80072f4:	443a      	add	r2, r7
 80072f6:	005b      	lsls	r3, r3, #1
 80072f8:	f1be 0e01 	subs.w	lr, lr, #1
 80072fc:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8007300:	ea4f 0757 	mov.w	r7, r7, lsr #1
 8007304:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8007308:	d1dc      	bne.n	80072c4 <__ieee754_sqrt+0xb0>
 800730a:	4323      	orrs	r3, r4
 800730c:	d006      	beq.n	800731c <__ieee754_sqrt+0x108>
 800730e:	1c54      	adds	r4, r2, #1
 8007310:	bf0b      	itete	eq
 8007312:	4672      	moveq	r2, lr
 8007314:	3201      	addne	r2, #1
 8007316:	3001      	addeq	r0, #1
 8007318:	f022 0201 	bicne.w	r2, r2, #1
 800731c:	1043      	asrs	r3, r0, #1
 800731e:	07c1      	lsls	r1, r0, #31
 8007320:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8007324:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007328:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800732c:	bf48      	it	mi
 800732e:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8007332:	4610      	mov	r0, r2
 8007334:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8007338:	e782      	b.n	8007240 <__ieee754_sqrt+0x2c>
 800733a:	0ae3      	lsrs	r3, r4, #11
 800733c:	3915      	subs	r1, #21
 800733e:	0564      	lsls	r4, r4, #21
 8007340:	2b00      	cmp	r3, #0
 8007342:	d0fa      	beq.n	800733a <__ieee754_sqrt+0x126>
 8007344:	02de      	lsls	r6, r3, #11
 8007346:	d50a      	bpl.n	800735e <__ieee754_sqrt+0x14a>
 8007348:	f1c2 0020 	rsb	r0, r2, #32
 800734c:	fa24 f000 	lsr.w	r0, r4, r0
 8007350:	1e55      	subs	r5, r2, #1
 8007352:	4094      	lsls	r4, r2
 8007354:	4303      	orrs	r3, r0
 8007356:	1b4a      	subs	r2, r1, r5
 8007358:	e78a      	b.n	8007270 <__ieee754_sqrt+0x5c>
 800735a:	4611      	mov	r1, r2
 800735c:	e7f0      	b.n	8007340 <__ieee754_sqrt+0x12c>
 800735e:	005b      	lsls	r3, r3, #1
 8007360:	3201      	adds	r2, #1
 8007362:	e7ef      	b.n	8007344 <__ieee754_sqrt+0x130>
 8007364:	4688      	mov	r8, r1
 8007366:	e7bd      	b.n	80072e4 <__ieee754_sqrt+0xd0>
 8007368:	7ff00000 	.word	0x7ff00000
 800736c:	00000000 	.word	0x00000000

08007370 <atan>:
 8007370:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007374:	4bb6      	ldr	r3, [pc, #728]	; (8007650 <atan+0x2e0>)
 8007376:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800737a:	429e      	cmp	r6, r3
 800737c:	4604      	mov	r4, r0
 800737e:	460d      	mov	r5, r1
 8007380:	468b      	mov	fp, r1
 8007382:	dd17      	ble.n	80073b4 <atan+0x44>
 8007384:	4bb3      	ldr	r3, [pc, #716]	; (8007654 <atan+0x2e4>)
 8007386:	429e      	cmp	r6, r3
 8007388:	dc01      	bgt.n	800738e <atan+0x1e>
 800738a:	d109      	bne.n	80073a0 <atan+0x30>
 800738c:	b140      	cbz	r0, 80073a0 <atan+0x30>
 800738e:	4622      	mov	r2, r4
 8007390:	462b      	mov	r3, r5
 8007392:	4620      	mov	r0, r4
 8007394:	4629      	mov	r1, r5
 8007396:	f7f8 fee9 	bl	800016c <__adddf3>
 800739a:	4604      	mov	r4, r0
 800739c:	460d      	mov	r5, r1
 800739e:	e005      	b.n	80073ac <atan+0x3c>
 80073a0:	f1bb 0f00 	cmp.w	fp, #0
 80073a4:	4cac      	ldr	r4, [pc, #688]	; (8007658 <atan+0x2e8>)
 80073a6:	f300 8121 	bgt.w	80075ec <atan+0x27c>
 80073aa:	4dac      	ldr	r5, [pc, #688]	; (800765c <atan+0x2ec>)
 80073ac:	4620      	mov	r0, r4
 80073ae:	4629      	mov	r1, r5
 80073b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073b4:	4baa      	ldr	r3, [pc, #680]	; (8007660 <atan+0x2f0>)
 80073b6:	429e      	cmp	r6, r3
 80073b8:	dc11      	bgt.n	80073de <atan+0x6e>
 80073ba:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80073be:	429e      	cmp	r6, r3
 80073c0:	dc0a      	bgt.n	80073d8 <atan+0x68>
 80073c2:	a38b      	add	r3, pc, #556	; (adr r3, 80075f0 <atan+0x280>)
 80073c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c8:	f7f8 fed0 	bl	800016c <__adddf3>
 80073cc:	2200      	movs	r2, #0
 80073ce:	4ba5      	ldr	r3, [pc, #660]	; (8007664 <atan+0x2f4>)
 80073d0:	f7f9 fb12 	bl	80009f8 <__aeabi_dcmpgt>
 80073d4:	2800      	cmp	r0, #0
 80073d6:	d1e9      	bne.n	80073ac <atan+0x3c>
 80073d8:	f04f 3aff 	mov.w	sl, #4294967295
 80073dc:	e027      	b.n	800742e <atan+0xbe>
 80073de:	f000 f951 	bl	8007684 <fabs>
 80073e2:	4ba1      	ldr	r3, [pc, #644]	; (8007668 <atan+0x2f8>)
 80073e4:	4604      	mov	r4, r0
 80073e6:	429e      	cmp	r6, r3
 80073e8:	460d      	mov	r5, r1
 80073ea:	f300 80b8 	bgt.w	800755e <atan+0x1ee>
 80073ee:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80073f2:	429e      	cmp	r6, r3
 80073f4:	f300 809c 	bgt.w	8007530 <atan+0x1c0>
 80073f8:	4602      	mov	r2, r0
 80073fa:	460b      	mov	r3, r1
 80073fc:	f7f8 feb6 	bl	800016c <__adddf3>
 8007400:	2200      	movs	r2, #0
 8007402:	4b98      	ldr	r3, [pc, #608]	; (8007664 <atan+0x2f4>)
 8007404:	f7f8 feb0 	bl	8000168 <__aeabi_dsub>
 8007408:	2200      	movs	r2, #0
 800740a:	4606      	mov	r6, r0
 800740c:	460f      	mov	r7, r1
 800740e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007412:	4620      	mov	r0, r4
 8007414:	4629      	mov	r1, r5
 8007416:	f7f8 fea9 	bl	800016c <__adddf3>
 800741a:	4602      	mov	r2, r0
 800741c:	460b      	mov	r3, r1
 800741e:	4630      	mov	r0, r6
 8007420:	4639      	mov	r1, r7
 8007422:	f7f9 f983 	bl	800072c <__aeabi_ddiv>
 8007426:	f04f 0a00 	mov.w	sl, #0
 800742a:	4604      	mov	r4, r0
 800742c:	460d      	mov	r5, r1
 800742e:	4622      	mov	r2, r4
 8007430:	462b      	mov	r3, r5
 8007432:	4620      	mov	r0, r4
 8007434:	4629      	mov	r1, r5
 8007436:	f7f9 f84f 	bl	80004d8 <__aeabi_dmul>
 800743a:	4602      	mov	r2, r0
 800743c:	460b      	mov	r3, r1
 800743e:	4680      	mov	r8, r0
 8007440:	4689      	mov	r9, r1
 8007442:	f7f9 f849 	bl	80004d8 <__aeabi_dmul>
 8007446:	a36c      	add	r3, pc, #432	; (adr r3, 80075f8 <atan+0x288>)
 8007448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800744c:	4606      	mov	r6, r0
 800744e:	460f      	mov	r7, r1
 8007450:	f7f9 f842 	bl	80004d8 <__aeabi_dmul>
 8007454:	a36a      	add	r3, pc, #424	; (adr r3, 8007600 <atan+0x290>)
 8007456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800745a:	f7f8 fe87 	bl	800016c <__adddf3>
 800745e:	4632      	mov	r2, r6
 8007460:	463b      	mov	r3, r7
 8007462:	f7f9 f839 	bl	80004d8 <__aeabi_dmul>
 8007466:	a368      	add	r3, pc, #416	; (adr r3, 8007608 <atan+0x298>)
 8007468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800746c:	f7f8 fe7e 	bl	800016c <__adddf3>
 8007470:	4632      	mov	r2, r6
 8007472:	463b      	mov	r3, r7
 8007474:	f7f9 f830 	bl	80004d8 <__aeabi_dmul>
 8007478:	a365      	add	r3, pc, #404	; (adr r3, 8007610 <atan+0x2a0>)
 800747a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800747e:	f7f8 fe75 	bl	800016c <__adddf3>
 8007482:	4632      	mov	r2, r6
 8007484:	463b      	mov	r3, r7
 8007486:	f7f9 f827 	bl	80004d8 <__aeabi_dmul>
 800748a:	a363      	add	r3, pc, #396	; (adr r3, 8007618 <atan+0x2a8>)
 800748c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007490:	f7f8 fe6c 	bl	800016c <__adddf3>
 8007494:	4632      	mov	r2, r6
 8007496:	463b      	mov	r3, r7
 8007498:	f7f9 f81e 	bl	80004d8 <__aeabi_dmul>
 800749c:	a360      	add	r3, pc, #384	; (adr r3, 8007620 <atan+0x2b0>)
 800749e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a2:	f7f8 fe63 	bl	800016c <__adddf3>
 80074a6:	4642      	mov	r2, r8
 80074a8:	464b      	mov	r3, r9
 80074aa:	f7f9 f815 	bl	80004d8 <__aeabi_dmul>
 80074ae:	a35e      	add	r3, pc, #376	; (adr r3, 8007628 <atan+0x2b8>)
 80074b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b4:	4680      	mov	r8, r0
 80074b6:	4689      	mov	r9, r1
 80074b8:	4630      	mov	r0, r6
 80074ba:	4639      	mov	r1, r7
 80074bc:	f7f9 f80c 	bl	80004d8 <__aeabi_dmul>
 80074c0:	a35b      	add	r3, pc, #364	; (adr r3, 8007630 <atan+0x2c0>)
 80074c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c6:	f7f8 fe4f 	bl	8000168 <__aeabi_dsub>
 80074ca:	4632      	mov	r2, r6
 80074cc:	463b      	mov	r3, r7
 80074ce:	f7f9 f803 	bl	80004d8 <__aeabi_dmul>
 80074d2:	a359      	add	r3, pc, #356	; (adr r3, 8007638 <atan+0x2c8>)
 80074d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d8:	f7f8 fe46 	bl	8000168 <__aeabi_dsub>
 80074dc:	4632      	mov	r2, r6
 80074de:	463b      	mov	r3, r7
 80074e0:	f7f8 fffa 	bl	80004d8 <__aeabi_dmul>
 80074e4:	a356      	add	r3, pc, #344	; (adr r3, 8007640 <atan+0x2d0>)
 80074e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ea:	f7f8 fe3d 	bl	8000168 <__aeabi_dsub>
 80074ee:	4632      	mov	r2, r6
 80074f0:	463b      	mov	r3, r7
 80074f2:	f7f8 fff1 	bl	80004d8 <__aeabi_dmul>
 80074f6:	a354      	add	r3, pc, #336	; (adr r3, 8007648 <atan+0x2d8>)
 80074f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074fc:	f7f8 fe34 	bl	8000168 <__aeabi_dsub>
 8007500:	4632      	mov	r2, r6
 8007502:	463b      	mov	r3, r7
 8007504:	f7f8 ffe8 	bl	80004d8 <__aeabi_dmul>
 8007508:	4602      	mov	r2, r0
 800750a:	460b      	mov	r3, r1
 800750c:	4640      	mov	r0, r8
 800750e:	4649      	mov	r1, r9
 8007510:	f7f8 fe2c 	bl	800016c <__adddf3>
 8007514:	4622      	mov	r2, r4
 8007516:	462b      	mov	r3, r5
 8007518:	f7f8 ffde 	bl	80004d8 <__aeabi_dmul>
 800751c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8007520:	4602      	mov	r2, r0
 8007522:	460b      	mov	r3, r1
 8007524:	d144      	bne.n	80075b0 <atan+0x240>
 8007526:	4620      	mov	r0, r4
 8007528:	4629      	mov	r1, r5
 800752a:	f7f8 fe1d 	bl	8000168 <__aeabi_dsub>
 800752e:	e734      	b.n	800739a <atan+0x2a>
 8007530:	2200      	movs	r2, #0
 8007532:	4b4c      	ldr	r3, [pc, #304]	; (8007664 <atan+0x2f4>)
 8007534:	f7f8 fe18 	bl	8000168 <__aeabi_dsub>
 8007538:	2200      	movs	r2, #0
 800753a:	4606      	mov	r6, r0
 800753c:	460f      	mov	r7, r1
 800753e:	4620      	mov	r0, r4
 8007540:	4629      	mov	r1, r5
 8007542:	4b48      	ldr	r3, [pc, #288]	; (8007664 <atan+0x2f4>)
 8007544:	f7f8 fe12 	bl	800016c <__adddf3>
 8007548:	4602      	mov	r2, r0
 800754a:	460b      	mov	r3, r1
 800754c:	4630      	mov	r0, r6
 800754e:	4639      	mov	r1, r7
 8007550:	f7f9 f8ec 	bl	800072c <__aeabi_ddiv>
 8007554:	f04f 0a01 	mov.w	sl, #1
 8007558:	4604      	mov	r4, r0
 800755a:	460d      	mov	r5, r1
 800755c:	e767      	b.n	800742e <atan+0xbe>
 800755e:	4b43      	ldr	r3, [pc, #268]	; (800766c <atan+0x2fc>)
 8007560:	429e      	cmp	r6, r3
 8007562:	da1a      	bge.n	800759a <atan+0x22a>
 8007564:	2200      	movs	r2, #0
 8007566:	4b42      	ldr	r3, [pc, #264]	; (8007670 <atan+0x300>)
 8007568:	f7f8 fdfe 	bl	8000168 <__aeabi_dsub>
 800756c:	2200      	movs	r2, #0
 800756e:	4606      	mov	r6, r0
 8007570:	460f      	mov	r7, r1
 8007572:	4620      	mov	r0, r4
 8007574:	4629      	mov	r1, r5
 8007576:	4b3e      	ldr	r3, [pc, #248]	; (8007670 <atan+0x300>)
 8007578:	f7f8 ffae 	bl	80004d8 <__aeabi_dmul>
 800757c:	2200      	movs	r2, #0
 800757e:	4b39      	ldr	r3, [pc, #228]	; (8007664 <atan+0x2f4>)
 8007580:	f7f8 fdf4 	bl	800016c <__adddf3>
 8007584:	4602      	mov	r2, r0
 8007586:	460b      	mov	r3, r1
 8007588:	4630      	mov	r0, r6
 800758a:	4639      	mov	r1, r7
 800758c:	f7f9 f8ce 	bl	800072c <__aeabi_ddiv>
 8007590:	f04f 0a02 	mov.w	sl, #2
 8007594:	4604      	mov	r4, r0
 8007596:	460d      	mov	r5, r1
 8007598:	e749      	b.n	800742e <atan+0xbe>
 800759a:	4602      	mov	r2, r0
 800759c:	460b      	mov	r3, r1
 800759e:	2000      	movs	r0, #0
 80075a0:	4934      	ldr	r1, [pc, #208]	; (8007674 <atan+0x304>)
 80075a2:	f7f9 f8c3 	bl	800072c <__aeabi_ddiv>
 80075a6:	f04f 0a03 	mov.w	sl, #3
 80075aa:	4604      	mov	r4, r0
 80075ac:	460d      	mov	r5, r1
 80075ae:	e73e      	b.n	800742e <atan+0xbe>
 80075b0:	4b31      	ldr	r3, [pc, #196]	; (8007678 <atan+0x308>)
 80075b2:	4e32      	ldr	r6, [pc, #200]	; (800767c <atan+0x30c>)
 80075b4:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80075b8:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 80075bc:	e9da 2300 	ldrd	r2, r3, [sl]
 80075c0:	f7f8 fdd2 	bl	8000168 <__aeabi_dsub>
 80075c4:	4622      	mov	r2, r4
 80075c6:	462b      	mov	r3, r5
 80075c8:	f7f8 fdce 	bl	8000168 <__aeabi_dsub>
 80075cc:	4602      	mov	r2, r0
 80075ce:	460b      	mov	r3, r1
 80075d0:	e9d6 0100 	ldrd	r0, r1, [r6]
 80075d4:	f7f8 fdc8 	bl	8000168 <__aeabi_dsub>
 80075d8:	f1bb 0f00 	cmp.w	fp, #0
 80075dc:	4604      	mov	r4, r0
 80075de:	460d      	mov	r5, r1
 80075e0:	f6bf aee4 	bge.w	80073ac <atan+0x3c>
 80075e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80075e8:	461d      	mov	r5, r3
 80075ea:	e6df      	b.n	80073ac <atan+0x3c>
 80075ec:	4d24      	ldr	r5, [pc, #144]	; (8007680 <atan+0x310>)
 80075ee:	e6dd      	b.n	80073ac <atan+0x3c>
 80075f0:	8800759c 	.word	0x8800759c
 80075f4:	7e37e43c 	.word	0x7e37e43c
 80075f8:	e322da11 	.word	0xe322da11
 80075fc:	3f90ad3a 	.word	0x3f90ad3a
 8007600:	24760deb 	.word	0x24760deb
 8007604:	3fa97b4b 	.word	0x3fa97b4b
 8007608:	a0d03d51 	.word	0xa0d03d51
 800760c:	3fb10d66 	.word	0x3fb10d66
 8007610:	c54c206e 	.word	0xc54c206e
 8007614:	3fb745cd 	.word	0x3fb745cd
 8007618:	920083ff 	.word	0x920083ff
 800761c:	3fc24924 	.word	0x3fc24924
 8007620:	5555550d 	.word	0x5555550d
 8007624:	3fd55555 	.word	0x3fd55555
 8007628:	2c6a6c2f 	.word	0x2c6a6c2f
 800762c:	bfa2b444 	.word	0xbfa2b444
 8007630:	52defd9a 	.word	0x52defd9a
 8007634:	3fadde2d 	.word	0x3fadde2d
 8007638:	af749a6d 	.word	0xaf749a6d
 800763c:	3fb3b0f2 	.word	0x3fb3b0f2
 8007640:	fe231671 	.word	0xfe231671
 8007644:	3fbc71c6 	.word	0x3fbc71c6
 8007648:	9998ebc4 	.word	0x9998ebc4
 800764c:	3fc99999 	.word	0x3fc99999
 8007650:	440fffff 	.word	0x440fffff
 8007654:	7ff00000 	.word	0x7ff00000
 8007658:	54442d18 	.word	0x54442d18
 800765c:	bff921fb 	.word	0xbff921fb
 8007660:	3fdbffff 	.word	0x3fdbffff
 8007664:	3ff00000 	.word	0x3ff00000
 8007668:	3ff2ffff 	.word	0x3ff2ffff
 800766c:	40038000 	.word	0x40038000
 8007670:	3ff80000 	.word	0x3ff80000
 8007674:	bff00000 	.word	0xbff00000
 8007678:	08007dc0 	.word	0x08007dc0
 800767c:	08007da0 	.word	0x08007da0
 8007680:	3ff921fb 	.word	0x3ff921fb

08007684 <fabs>:
 8007684:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007688:	4770      	bx	lr

0800768a <finite>:
 800768a:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800768e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8007692:	0fc0      	lsrs	r0, r0, #31
 8007694:	4770      	bx	lr
	...

08007698 <nan>:
 8007698:	2000      	movs	r0, #0
 800769a:	4901      	ldr	r1, [pc, #4]	; (80076a0 <nan+0x8>)
 800769c:	4770      	bx	lr
 800769e:	bf00      	nop
 80076a0:	7ff80000 	.word	0x7ff80000

080076a4 <rint>:
 80076a4:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 80076a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80076aa:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 80076ae:	2f13      	cmp	r7, #19
 80076b0:	4602      	mov	r2, r0
 80076b2:	460b      	mov	r3, r1
 80076b4:	460c      	mov	r4, r1
 80076b6:	4605      	mov	r5, r0
 80076b8:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 80076bc:	dc59      	bgt.n	8007772 <rint+0xce>
 80076be:	2f00      	cmp	r7, #0
 80076c0:	da2a      	bge.n	8007718 <rint+0x74>
 80076c2:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80076c6:	4301      	orrs	r1, r0
 80076c8:	d022      	beq.n	8007710 <rint+0x6c>
 80076ca:	f3c3 0113 	ubfx	r1, r3, #0, #20
 80076ce:	4301      	orrs	r1, r0
 80076d0:	424d      	negs	r5, r1
 80076d2:	430d      	orrs	r5, r1
 80076d4:	4936      	ldr	r1, [pc, #216]	; (80077b0 <rint+0x10c>)
 80076d6:	0c5c      	lsrs	r4, r3, #17
 80076d8:	0b2d      	lsrs	r5, r5, #12
 80076da:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 80076de:	0464      	lsls	r4, r4, #17
 80076e0:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80076e4:	ea45 0304 	orr.w	r3, r5, r4
 80076e8:	e9d1 4500 	ldrd	r4, r5, [r1]
 80076ec:	4620      	mov	r0, r4
 80076ee:	4629      	mov	r1, r5
 80076f0:	f7f8 fd3c 	bl	800016c <__adddf3>
 80076f4:	e9cd 0100 	strd	r0, r1, [sp]
 80076f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80076fc:	462b      	mov	r3, r5
 80076fe:	4622      	mov	r2, r4
 8007700:	f7f8 fd32 	bl	8000168 <__aeabi_dsub>
 8007704:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007708:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 800770c:	4602      	mov	r2, r0
 800770e:	460b      	mov	r3, r1
 8007710:	4610      	mov	r0, r2
 8007712:	4619      	mov	r1, r3
 8007714:	b003      	add	sp, #12
 8007716:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007718:	4926      	ldr	r1, [pc, #152]	; (80077b4 <rint+0x110>)
 800771a:	4139      	asrs	r1, r7
 800771c:	ea03 0001 	and.w	r0, r3, r1
 8007720:	4310      	orrs	r0, r2
 8007722:	d0f5      	beq.n	8007710 <rint+0x6c>
 8007724:	084b      	lsrs	r3, r1, #1
 8007726:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 800772a:	ea52 0501 	orrs.w	r5, r2, r1
 800772e:	d00c      	beq.n	800774a <rint+0xa6>
 8007730:	ea24 0303 	bic.w	r3, r4, r3
 8007734:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 8007738:	2f13      	cmp	r7, #19
 800773a:	bf0c      	ite	eq
 800773c:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 8007740:	2500      	movne	r5, #0
 8007742:	fa44 f707 	asr.w	r7, r4, r7
 8007746:	ea43 0407 	orr.w	r4, r3, r7
 800774a:	4919      	ldr	r1, [pc, #100]	; (80077b0 <rint+0x10c>)
 800774c:	4623      	mov	r3, r4
 800774e:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 8007752:	462a      	mov	r2, r5
 8007754:	e9d6 4500 	ldrd	r4, r5, [r6]
 8007758:	4620      	mov	r0, r4
 800775a:	4629      	mov	r1, r5
 800775c:	f7f8 fd06 	bl	800016c <__adddf3>
 8007760:	e9cd 0100 	strd	r0, r1, [sp]
 8007764:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007768:	4622      	mov	r2, r4
 800776a:	462b      	mov	r3, r5
 800776c:	f7f8 fcfc 	bl	8000168 <__aeabi_dsub>
 8007770:	e7cc      	b.n	800770c <rint+0x68>
 8007772:	2f33      	cmp	r7, #51	; 0x33
 8007774:	dd05      	ble.n	8007782 <rint+0xde>
 8007776:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 800777a:	d1c9      	bne.n	8007710 <rint+0x6c>
 800777c:	f7f8 fcf6 	bl	800016c <__adddf3>
 8007780:	e7c4      	b.n	800770c <rint+0x68>
 8007782:	f04f 31ff 	mov.w	r1, #4294967295
 8007786:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 800778a:	fa21 f10c 	lsr.w	r1, r1, ip
 800778e:	4208      	tst	r0, r1
 8007790:	d0be      	beq.n	8007710 <rint+0x6c>
 8007792:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 8007796:	bf18      	it	ne
 8007798:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 800779c:	ea4f 0351 	mov.w	r3, r1, lsr #1
 80077a0:	bf1e      	ittt	ne
 80077a2:	ea20 0303 	bicne.w	r3, r0, r3
 80077a6:	fa45 fc0c 	asrne.w	ip, r5, ip
 80077aa:	ea43 050c 	orrne.w	r5, r3, ip
 80077ae:	e7cc      	b.n	800774a <rint+0xa6>
 80077b0:	08007de0 	.word	0x08007de0
 80077b4:	000fffff 	.word	0x000fffff

080077b8 <scalbn>:
 80077b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077ba:	f3c1 560a 	ubfx	r6, r1, #20, #11
 80077be:	4604      	mov	r4, r0
 80077c0:	460d      	mov	r5, r1
 80077c2:	4617      	mov	r7, r2
 80077c4:	460b      	mov	r3, r1
 80077c6:	b996      	cbnz	r6, 80077ee <scalbn+0x36>
 80077c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80077cc:	4303      	orrs	r3, r0
 80077ce:	d039      	beq.n	8007844 <scalbn+0x8c>
 80077d0:	4b35      	ldr	r3, [pc, #212]	; (80078a8 <scalbn+0xf0>)
 80077d2:	2200      	movs	r2, #0
 80077d4:	f7f8 fe80 	bl	80004d8 <__aeabi_dmul>
 80077d8:	4b34      	ldr	r3, [pc, #208]	; (80078ac <scalbn+0xf4>)
 80077da:	4604      	mov	r4, r0
 80077dc:	429f      	cmp	r7, r3
 80077de:	460d      	mov	r5, r1
 80077e0:	da0f      	bge.n	8007802 <scalbn+0x4a>
 80077e2:	a32d      	add	r3, pc, #180	; (adr r3, 8007898 <scalbn+0xe0>)
 80077e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e8:	f7f8 fe76 	bl	80004d8 <__aeabi_dmul>
 80077ec:	e006      	b.n	80077fc <scalbn+0x44>
 80077ee:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80077f2:	4296      	cmp	r6, r2
 80077f4:	d10a      	bne.n	800780c <scalbn+0x54>
 80077f6:	4602      	mov	r2, r0
 80077f8:	f7f8 fcb8 	bl	800016c <__adddf3>
 80077fc:	4604      	mov	r4, r0
 80077fe:	460d      	mov	r5, r1
 8007800:	e020      	b.n	8007844 <scalbn+0x8c>
 8007802:	460b      	mov	r3, r1
 8007804:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8007808:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800780c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8007810:	19b9      	adds	r1, r7, r6
 8007812:	4291      	cmp	r1, r2
 8007814:	dd0e      	ble.n	8007834 <scalbn+0x7c>
 8007816:	a322      	add	r3, pc, #136	; (adr r3, 80078a0 <scalbn+0xe8>)
 8007818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800781c:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8007820:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8007824:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8007828:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800782c:	4820      	ldr	r0, [pc, #128]	; (80078b0 <scalbn+0xf8>)
 800782e:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8007832:	e7d9      	b.n	80077e8 <scalbn+0x30>
 8007834:	2900      	cmp	r1, #0
 8007836:	dd08      	ble.n	800784a <scalbn+0x92>
 8007838:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800783c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007840:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8007844:	4620      	mov	r0, r4
 8007846:	4629      	mov	r1, r5
 8007848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800784a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800784e:	da16      	bge.n	800787e <scalbn+0xc6>
 8007850:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007854:	429f      	cmp	r7, r3
 8007856:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800785a:	dd08      	ble.n	800786e <scalbn+0xb6>
 800785c:	4c15      	ldr	r4, [pc, #84]	; (80078b4 <scalbn+0xfc>)
 800785e:	4814      	ldr	r0, [pc, #80]	; (80078b0 <scalbn+0xf8>)
 8007860:	f363 74df 	bfi	r4, r3, #31, #1
 8007864:	a30e      	add	r3, pc, #56	; (adr r3, 80078a0 <scalbn+0xe8>)
 8007866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800786a:	4621      	mov	r1, r4
 800786c:	e7bc      	b.n	80077e8 <scalbn+0x30>
 800786e:	4c12      	ldr	r4, [pc, #72]	; (80078b8 <scalbn+0x100>)
 8007870:	4812      	ldr	r0, [pc, #72]	; (80078bc <scalbn+0x104>)
 8007872:	f363 74df 	bfi	r4, r3, #31, #1
 8007876:	a308      	add	r3, pc, #32	; (adr r3, 8007898 <scalbn+0xe0>)
 8007878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800787c:	e7f5      	b.n	800786a <scalbn+0xb2>
 800787e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007882:	3136      	adds	r1, #54	; 0x36
 8007884:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007888:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800788c:	4620      	mov	r0, r4
 800788e:	4629      	mov	r1, r5
 8007890:	2200      	movs	r2, #0
 8007892:	4b0b      	ldr	r3, [pc, #44]	; (80078c0 <scalbn+0x108>)
 8007894:	e7a8      	b.n	80077e8 <scalbn+0x30>
 8007896:	bf00      	nop
 8007898:	c2f8f359 	.word	0xc2f8f359
 800789c:	01a56e1f 	.word	0x01a56e1f
 80078a0:	8800759c 	.word	0x8800759c
 80078a4:	7e37e43c 	.word	0x7e37e43c
 80078a8:	43500000 	.word	0x43500000
 80078ac:	ffff3cb0 	.word	0xffff3cb0
 80078b0:	8800759c 	.word	0x8800759c
 80078b4:	7e37e43c 	.word	0x7e37e43c
 80078b8:	01a56e1f 	.word	0x01a56e1f
 80078bc:	c2f8f359 	.word	0xc2f8f359
 80078c0:	3c900000 	.word	0x3c900000

080078c4 <_init>:
 80078c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078c6:	bf00      	nop
 80078c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078ca:	bc08      	pop	{r3}
 80078cc:	469e      	mov	lr, r3
 80078ce:	4770      	bx	lr

080078d0 <_fini>:
 80078d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078d2:	bf00      	nop
 80078d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078d6:	bc08      	pop	{r3}
 80078d8:	469e      	mov	lr, r3
 80078da:	4770      	bx	lr
