
U3.2_LCD I2C Library.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002810  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  0800291c  0800291c  0001291c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029b0  080029b0  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  080029b0  080029b0  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  080029b0  080029b0  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029b0  080029b0  000129b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029b4  080029b4  000129b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  080029b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000009c  20000098  08002a50  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  08002a50  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000893f  00000000  00000000  000200c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000169c  00000000  00000000  00028a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000730  00000000  00000000  0002a0a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006a0  00000000  00000000  0002a7d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001715c  00000000  00000000  0002ae70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000092a4  00000000  00000000  00041fcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082d24  00000000  00000000  0004b270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cdf94  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002040  00000000  00000000  000cdfe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000098 	.word	0x20000098
 8000128:	00000000 	.word	0x00000000
 800012c:	08002904 	.word	0x08002904

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000009c 	.word	0x2000009c
 8000148:	08002904 	.word	0x08002904

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000162:	f000 fa63 	bl	800062c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000166:	f000 f8d3 	bl	8000310 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016a:	f000 f93b 	bl	80003e4 <MX_GPIO_Init>
  MX_I2C2_Init();
 800016e:	f000 f90b 	bl	8000388 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  LCD_Init(&hlcd, &hi2c2, 20, 4, 0x4E);
 8000172:	234e      	movs	r3, #78	; 0x4e
 8000174:	9300      	str	r3, [sp, #0]
 8000176:	2304      	movs	r3, #4
 8000178:	2214      	movs	r2, #20
 800017a:	4958      	ldr	r1, [pc, #352]	; (80002dc <main+0x180>)
 800017c:	4858      	ldr	r0, [pc, #352]	; (80002e0 <main+0x184>)
 800017e:	f001 fd93 	bl	8001ca8 <LCD_Init>
  LCD_Backlight(&hlcd);
 8000182:	4857      	ldr	r0, [pc, #348]	; (80002e0 <main+0x184>)
 8000184:	f001 fec6 	bl	8001f14 <LCD_Backlight>
  HAL_Delay(2000);
 8000188:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800018c:	f000 fab0 	bl	80006f0 <HAL_Delay>
//  LCD_Create_Char(&hlcd, 1, arrow_char);
//  LCD_Set_Cursor(&hlcd, 0, 2);
//  LCD_Write_Custom_Char(&hlcd, 1);
//  LCD_Cursor_Blink(&hlcd);

  LCD_Create_Char(&hlcd, 0, P);
 8000190:	4a54      	ldr	r2, [pc, #336]	; (80002e4 <main+0x188>)
 8000192:	2100      	movs	r1, #0
 8000194:	4852      	ldr	r0, [pc, #328]	; (80002e0 <main+0x184>)
 8000196:	f001 fe91 	bl	8001ebc <LCD_Create_Char>
  LCD_Set_Cursor(&hlcd, 7, 0);
 800019a:	2200      	movs	r2, #0
 800019c:	2107      	movs	r1, #7
 800019e:	4850      	ldr	r0, [pc, #320]	; (80002e0 <main+0x184>)
 80001a0:	f001 fe60 	bl	8001e64 <LCD_Set_Cursor>
  LCD_Write_Custom_Char(&hlcd, 0);
 80001a4:	2100      	movs	r1, #0
 80001a6:	484e      	ldr	r0, [pc, #312]	; (80002e0 <main+0x184>)
 80001a8:	f001 fe3e 	bl	8001e28 <LCD_Write_Custom_Char>

  LCD_Create_Char(&hlcd, 1, r);
 80001ac:	4a4e      	ldr	r2, [pc, #312]	; (80002e8 <main+0x18c>)
 80001ae:	2101      	movs	r1, #1
 80001b0:	484b      	ldr	r0, [pc, #300]	; (80002e0 <main+0x184>)
 80001b2:	f001 fe83 	bl	8001ebc <LCD_Create_Char>
  LCD_Set_Cursor(&hlcd, 8, 0);
 80001b6:	2200      	movs	r2, #0
 80001b8:	2108      	movs	r1, #8
 80001ba:	4849      	ldr	r0, [pc, #292]	; (80002e0 <main+0x184>)
 80001bc:	f001 fe52 	bl	8001e64 <LCD_Set_Cursor>
  LCD_Write_Custom_Char(&hlcd, 1);
 80001c0:	2101      	movs	r1, #1
 80001c2:	4847      	ldr	r0, [pc, #284]	; (80002e0 <main+0x184>)
 80001c4:	f001 fe30 	bl	8001e28 <LCD_Write_Custom_Char>

  LCD_Create_Char(&hlcd, 2, o);
 80001c8:	4a48      	ldr	r2, [pc, #288]	; (80002ec <main+0x190>)
 80001ca:	2102      	movs	r1, #2
 80001cc:	4844      	ldr	r0, [pc, #272]	; (80002e0 <main+0x184>)
 80001ce:	f001 fe75 	bl	8001ebc <LCD_Create_Char>
  LCD_Set_Cursor(&hlcd, 9, 0);
 80001d2:	2200      	movs	r2, #0
 80001d4:	2109      	movs	r1, #9
 80001d6:	4842      	ldr	r0, [pc, #264]	; (80002e0 <main+0x184>)
 80001d8:	f001 fe44 	bl	8001e64 <LCD_Set_Cursor>
  LCD_Write_Custom_Char(&hlcd, 2);
 80001dc:	2102      	movs	r1, #2
 80001de:	4840      	ldr	r0, [pc, #256]	; (80002e0 <main+0x184>)
 80001e0:	f001 fe22 	bl	8001e28 <LCD_Write_Custom_Char>

  LCD_Create_Char(&hlcd, 3, s);
 80001e4:	4a42      	ldr	r2, [pc, #264]	; (80002f0 <main+0x194>)
 80001e6:	2103      	movs	r1, #3
 80001e8:	483d      	ldr	r0, [pc, #244]	; (80002e0 <main+0x184>)
 80001ea:	f001 fe67 	bl	8001ebc <LCD_Create_Char>
  LCD_Set_Cursor(&hlcd, 10, 0);
 80001ee:	2200      	movs	r2, #0
 80001f0:	210a      	movs	r1, #10
 80001f2:	483b      	ldr	r0, [pc, #236]	; (80002e0 <main+0x184>)
 80001f4:	f001 fe36 	bl	8001e64 <LCD_Set_Cursor>
  LCD_Write_Custom_Char(&hlcd, 3);
 80001f8:	2103      	movs	r1, #3
 80001fa:	4839      	ldr	r0, [pc, #228]	; (80002e0 <main+0x184>)
 80001fc:	f001 fe14 	bl	8001e28 <LCD_Write_Custom_Char>

  LCD_Create_Char(&hlcd, 4, V);
 8000200:	4a3c      	ldr	r2, [pc, #240]	; (80002f4 <main+0x198>)
 8000202:	2104      	movs	r1, #4
 8000204:	4836      	ldr	r0, [pc, #216]	; (80002e0 <main+0x184>)
 8000206:	f001 fe59 	bl	8001ebc <LCD_Create_Char>
  LCD_Set_Cursor(&hlcd, 11, 0);
 800020a:	2200      	movs	r2, #0
 800020c:	210b      	movs	r1, #11
 800020e:	4834      	ldr	r0, [pc, #208]	; (80002e0 <main+0x184>)
 8000210:	f001 fe28 	bl	8001e64 <LCD_Set_Cursor>
  LCD_Write_Custom_Char(&hlcd, 4);
 8000214:	2104      	movs	r1, #4
 8000216:	4832      	ldr	r0, [pc, #200]	; (80002e0 <main+0x184>)
 8000218:	f001 fe06 	bl	8001e28 <LCD_Write_Custom_Char>

  LCD_Set_Cursor(&hlcd, 2, 1);
 800021c:	2201      	movs	r2, #1
 800021e:	2102      	movs	r1, #2
 8000220:	482f      	ldr	r0, [pc, #188]	; (80002e0 <main+0x184>)
 8000222:	f001 fe1f 	bl	8001e64 <LCD_Set_Cursor>
  LCD_Write(&hlcd, "Operator System");
 8000226:	4934      	ldr	r1, [pc, #208]	; (80002f8 <main+0x19c>)
 8000228:	482d      	ldr	r0, [pc, #180]	; (80002e0 <main+0x184>)
 800022a:	f001 fda5 	bl	8001d78 <LCD_Write>

  LCD_Set_Cursor(&hlcd, 5, 2);
 800022e:	2202      	movs	r2, #2
 8000230:	2105      	movs	r1, #5
 8000232:	482b      	ldr	r0, [pc, #172]	; (80002e0 <main+0x184>)
 8000234:	f001 fe16 	bl	8001e64 <LCD_Set_Cursor>
  LCD_Write(&hlcd, "Version 1.0");
 8000238:	4930      	ldr	r1, [pc, #192]	; (80002fc <main+0x1a0>)
 800023a:	4829      	ldr	r0, [pc, #164]	; (80002e0 <main+0x184>)
 800023c:	f001 fd9c 	bl	8001d78 <LCD_Write>

  HAL_Delay(5000);
 8000240:	f241 3088 	movw	r0, #5000	; 0x1388
 8000244:	f000 fa54 	bl	80006f0 <HAL_Delay>

  LCD_clear(&hlcd);
 8000248:	4825      	ldr	r0, [pc, #148]	; (80002e0 <main+0x184>)
 800024a:	f001 fdfc 	bl	8001e46 <LCD_clear>

  LCD_Set_Cursor(&hlcd, 6, 1);
 800024e:	2201      	movs	r2, #1
 8000250:	2106      	movs	r1, #6
 8000252:	4823      	ldr	r0, [pc, #140]	; (80002e0 <main+0x184>)
 8000254:	f001 fe06 	bl	8001e64 <LCD_Set_Cursor>
  LCD_Write(&hlcd, "Welcome!");
 8000258:	4929      	ldr	r1, [pc, #164]	; (8000300 <main+0x1a4>)
 800025a:	4821      	ldr	r0, [pc, #132]	; (80002e0 <main+0x184>)
 800025c:	f001 fd8c 	bl	8001d78 <LCD_Write>
  LCD_Set_Cursor(&hlcd, 5, 2);
 8000260:	2202      	movs	r2, #2
 8000262:	2105      	movs	r1, #5
 8000264:	481e      	ldr	r0, [pc, #120]	; (80002e0 <main+0x184>)
 8000266:	f001 fdfd 	bl	8001e64 <LCD_Set_Cursor>
  LCD_Write(&hlcd, "Loading");
 800026a:	4926      	ldr	r1, [pc, #152]	; (8000304 <main+0x1a8>)
 800026c:	481c      	ldr	r0, [pc, #112]	; (80002e0 <main+0x184>)
 800026e:	f001 fd83 	bl	8001d78 <LCD_Write>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  for(int i = 0; i < 3; i++){
 8000272:	2300      	movs	r3, #0
 8000274:	607b      	str	r3, [r7, #4]
 8000276:	e013      	b.n	80002a0 <main+0x144>
		  LCD_Set_Cursor(&hlcd, 12 + i, 2);
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	b2db      	uxtb	r3, r3
 800027c:	330c      	adds	r3, #12
 800027e:	b2db      	uxtb	r3, r3
 8000280:	2202      	movs	r2, #2
 8000282:	4619      	mov	r1, r3
 8000284:	4816      	ldr	r0, [pc, #88]	; (80002e0 <main+0x184>)
 8000286:	f001 fded 	bl	8001e64 <LCD_Set_Cursor>
		  LCD_Write(&hlcd, ".");
 800028a:	491f      	ldr	r1, [pc, #124]	; (8000308 <main+0x1ac>)
 800028c:	4814      	ldr	r0, [pc, #80]	; (80002e0 <main+0x184>)
 800028e:	f001 fd73 	bl	8001d78 <LCD_Write>
		  HAL_Delay(500);
 8000292:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000296:	f000 fa2b 	bl	80006f0 <HAL_Delay>
	  for(int i = 0; i < 3; i++){
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	3301      	adds	r3, #1
 800029e:	607b      	str	r3, [r7, #4]
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	2b02      	cmp	r3, #2
 80002a4:	dde8      	ble.n	8000278 <main+0x11c>
	  }
	  for(int i = 0; i < 3; i++){
 80002a6:	2300      	movs	r3, #0
 80002a8:	603b      	str	r3, [r7, #0]
 80002aa:	e00f      	b.n	80002cc <main+0x170>
		  LCD_Set_Cursor(&hlcd, 12 + i, 2);
 80002ac:	683b      	ldr	r3, [r7, #0]
 80002ae:	b2db      	uxtb	r3, r3
 80002b0:	330c      	adds	r3, #12
 80002b2:	b2db      	uxtb	r3, r3
 80002b4:	2202      	movs	r2, #2
 80002b6:	4619      	mov	r1, r3
 80002b8:	4809      	ldr	r0, [pc, #36]	; (80002e0 <main+0x184>)
 80002ba:	f001 fdd3 	bl	8001e64 <LCD_Set_Cursor>
		  LCD_Write(&hlcd, " ");
 80002be:	4913      	ldr	r1, [pc, #76]	; (800030c <main+0x1b0>)
 80002c0:	4807      	ldr	r0, [pc, #28]	; (80002e0 <main+0x184>)
 80002c2:	f001 fd59 	bl	8001d78 <LCD_Write>
	  for(int i = 0; i < 3; i++){
 80002c6:	683b      	ldr	r3, [r7, #0]
 80002c8:	3301      	adds	r3, #1
 80002ca:	603b      	str	r3, [r7, #0]
 80002cc:	683b      	ldr	r3, [r7, #0]
 80002ce:	2b02      	cmp	r3, #2
 80002d0:	ddec      	ble.n	80002ac <main+0x150>
	  }
	  HAL_Delay(500);
 80002d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002d6:	f000 fa0b 	bl	80006f0 <HAL_Delay>
	  for(int i = 0; i < 3; i++){
 80002da:	e7ca      	b.n	8000272 <main+0x116>
 80002dc:	200000c0 	.word	0x200000c0
 80002e0:	20000114 	.word	0x20000114
 80002e4:	20000000 	.word	0x20000000
 80002e8:	20000008 	.word	0x20000008
 80002ec:	20000010 	.word	0x20000010
 80002f0:	20000018 	.word	0x20000018
 80002f4:	20000020 	.word	0x20000020
 80002f8:	0800291c 	.word	0x0800291c
 80002fc:	0800292c 	.word	0x0800292c
 8000300:	08002938 	.word	0x08002938
 8000304:	08002944 	.word	0x08002944
 8000308:	0800294c 	.word	0x0800294c
 800030c:	08002950 	.word	0x08002950

08000310 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b090      	sub	sp, #64	; 0x40
 8000314:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000316:	f107 0318 	add.w	r3, r7, #24
 800031a:	2228      	movs	r2, #40	; 0x28
 800031c:	2100      	movs	r1, #0
 800031e:	4618      	mov	r0, r3
 8000320:	f001 feae 	bl	8002080 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000324:	1d3b      	adds	r3, r7, #4
 8000326:	2200      	movs	r2, #0
 8000328:	601a      	str	r2, [r3, #0]
 800032a:	605a      	str	r2, [r3, #4]
 800032c:	609a      	str	r2, [r3, #8]
 800032e:	60da      	str	r2, [r3, #12]
 8000330:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000332:	2302      	movs	r3, #2
 8000334:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000336:	2301      	movs	r3, #1
 8000338:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800033a:	2310      	movs	r3, #16
 800033c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800033e:	2300      	movs	r3, #0
 8000340:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000342:	f107 0318 	add.w	r3, r7, #24
 8000346:	4618      	mov	r0, r3
 8000348:	f001 f8a8 	bl	800149c <HAL_RCC_OscConfig>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000352:	f000 f869 	bl	8000428 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000356:	230f      	movs	r3, #15
 8000358:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800035a:	2300      	movs	r3, #0
 800035c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800035e:	2300      	movs	r3, #0
 8000360:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000362:	2300      	movs	r3, #0
 8000364:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000366:	2300      	movs	r3, #0
 8000368:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800036a:	1d3b      	adds	r3, r7, #4
 800036c:	2100      	movs	r1, #0
 800036e:	4618      	mov	r0, r3
 8000370:	f001 fb14 	bl	800199c <HAL_RCC_ClockConfig>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800037a:	f000 f855 	bl	8000428 <Error_Handler>
  }
}
 800037e:	bf00      	nop
 8000380:	3740      	adds	r7, #64	; 0x40
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}
	...

08000388 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800038c:	4b12      	ldr	r3, [pc, #72]	; (80003d8 <MX_I2C2_Init+0x50>)
 800038e:	4a13      	ldr	r2, [pc, #76]	; (80003dc <MX_I2C2_Init+0x54>)
 8000390:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000392:	4b11      	ldr	r3, [pc, #68]	; (80003d8 <MX_I2C2_Init+0x50>)
 8000394:	4a12      	ldr	r2, [pc, #72]	; (80003e0 <MX_I2C2_Init+0x58>)
 8000396:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000398:	4b0f      	ldr	r3, [pc, #60]	; (80003d8 <MX_I2C2_Init+0x50>)
 800039a:	2200      	movs	r2, #0
 800039c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800039e:	4b0e      	ldr	r3, [pc, #56]	; (80003d8 <MX_I2C2_Init+0x50>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003a4:	4b0c      	ldr	r3, [pc, #48]	; (80003d8 <MX_I2C2_Init+0x50>)
 80003a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80003aa:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003ac:	4b0a      	ldr	r3, [pc, #40]	; (80003d8 <MX_I2C2_Init+0x50>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80003b2:	4b09      	ldr	r3, [pc, #36]	; (80003d8 <MX_I2C2_Init+0x50>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003b8:	4b07      	ldr	r3, [pc, #28]	; (80003d8 <MX_I2C2_Init+0x50>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003be:	4b06      	ldr	r3, [pc, #24]	; (80003d8 <MX_I2C2_Init+0x50>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80003c4:	4804      	ldr	r0, [pc, #16]	; (80003d8 <MX_I2C2_Init+0x50>)
 80003c6:	f000 fc1f 	bl	8000c08 <HAL_I2C_Init>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d001      	beq.n	80003d4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80003d0:	f000 f82a 	bl	8000428 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80003d4:	bf00      	nop
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	200000c0 	.word	0x200000c0
 80003dc:	40005800 	.word	0x40005800
 80003e0:	000186a0 	.word	0x000186a0

080003e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	b083      	sub	sp, #12
 80003e8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003ea:	4b0e      	ldr	r3, [pc, #56]	; (8000424 <MX_GPIO_Init+0x40>)
 80003ec:	699b      	ldr	r3, [r3, #24]
 80003ee:	4a0d      	ldr	r2, [pc, #52]	; (8000424 <MX_GPIO_Init+0x40>)
 80003f0:	f043 0308 	orr.w	r3, r3, #8
 80003f4:	6193      	str	r3, [r2, #24]
 80003f6:	4b0b      	ldr	r3, [pc, #44]	; (8000424 <MX_GPIO_Init+0x40>)
 80003f8:	699b      	ldr	r3, [r3, #24]
 80003fa:	f003 0308 	and.w	r3, r3, #8
 80003fe:	607b      	str	r3, [r7, #4]
 8000400:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000402:	4b08      	ldr	r3, [pc, #32]	; (8000424 <MX_GPIO_Init+0x40>)
 8000404:	699b      	ldr	r3, [r3, #24]
 8000406:	4a07      	ldr	r2, [pc, #28]	; (8000424 <MX_GPIO_Init+0x40>)
 8000408:	f043 0304 	orr.w	r3, r3, #4
 800040c:	6193      	str	r3, [r2, #24]
 800040e:	4b05      	ldr	r3, [pc, #20]	; (8000424 <MX_GPIO_Init+0x40>)
 8000410:	699b      	ldr	r3, [r3, #24]
 8000412:	f003 0304 	and.w	r3, r3, #4
 8000416:	603b      	str	r3, [r7, #0]
 8000418:	683b      	ldr	r3, [r7, #0]

}
 800041a:	bf00      	nop
 800041c:	370c      	adds	r7, #12
 800041e:	46bd      	mov	sp, r7
 8000420:	bc80      	pop	{r7}
 8000422:	4770      	bx	lr
 8000424:	40021000 	.word	0x40021000

08000428 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800042c:	b672      	cpsid	i
}
 800042e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000430:	e7fe      	b.n	8000430 <Error_Handler+0x8>
	...

08000434 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000434:	b480      	push	{r7}
 8000436:	b085      	sub	sp, #20
 8000438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800043a:	4b15      	ldr	r3, [pc, #84]	; (8000490 <HAL_MspInit+0x5c>)
 800043c:	699b      	ldr	r3, [r3, #24]
 800043e:	4a14      	ldr	r2, [pc, #80]	; (8000490 <HAL_MspInit+0x5c>)
 8000440:	f043 0301 	orr.w	r3, r3, #1
 8000444:	6193      	str	r3, [r2, #24]
 8000446:	4b12      	ldr	r3, [pc, #72]	; (8000490 <HAL_MspInit+0x5c>)
 8000448:	699b      	ldr	r3, [r3, #24]
 800044a:	f003 0301 	and.w	r3, r3, #1
 800044e:	60bb      	str	r3, [r7, #8]
 8000450:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000452:	4b0f      	ldr	r3, [pc, #60]	; (8000490 <HAL_MspInit+0x5c>)
 8000454:	69db      	ldr	r3, [r3, #28]
 8000456:	4a0e      	ldr	r2, [pc, #56]	; (8000490 <HAL_MspInit+0x5c>)
 8000458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800045c:	61d3      	str	r3, [r2, #28]
 800045e:	4b0c      	ldr	r3, [pc, #48]	; (8000490 <HAL_MspInit+0x5c>)
 8000460:	69db      	ldr	r3, [r3, #28]
 8000462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000466:	607b      	str	r3, [r7, #4]
 8000468:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800046a:	4b0a      	ldr	r3, [pc, #40]	; (8000494 <HAL_MspInit+0x60>)
 800046c:	685b      	ldr	r3, [r3, #4]
 800046e:	60fb      	str	r3, [r7, #12]
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000476:	60fb      	str	r3, [r7, #12]
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800047e:	60fb      	str	r3, [r7, #12]
 8000480:	4a04      	ldr	r2, [pc, #16]	; (8000494 <HAL_MspInit+0x60>)
 8000482:	68fb      	ldr	r3, [r7, #12]
 8000484:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000486:	bf00      	nop
 8000488:	3714      	adds	r7, #20
 800048a:	46bd      	mov	sp, r7
 800048c:	bc80      	pop	{r7}
 800048e:	4770      	bx	lr
 8000490:	40021000 	.word	0x40021000
 8000494:	40010000 	.word	0x40010000

08000498 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b088      	sub	sp, #32
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a0:	f107 0310 	add.w	r3, r7, #16
 80004a4:	2200      	movs	r2, #0
 80004a6:	601a      	str	r2, [r3, #0]
 80004a8:	605a      	str	r2, [r3, #4]
 80004aa:	609a      	str	r2, [r3, #8]
 80004ac:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	4a16      	ldr	r2, [pc, #88]	; (800050c <HAL_I2C_MspInit+0x74>)
 80004b4:	4293      	cmp	r3, r2
 80004b6:	d124      	bne.n	8000502 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004b8:	4b15      	ldr	r3, [pc, #84]	; (8000510 <HAL_I2C_MspInit+0x78>)
 80004ba:	699b      	ldr	r3, [r3, #24]
 80004bc:	4a14      	ldr	r2, [pc, #80]	; (8000510 <HAL_I2C_MspInit+0x78>)
 80004be:	f043 0308 	orr.w	r3, r3, #8
 80004c2:	6193      	str	r3, [r2, #24]
 80004c4:	4b12      	ldr	r3, [pc, #72]	; (8000510 <HAL_I2C_MspInit+0x78>)
 80004c6:	699b      	ldr	r3, [r3, #24]
 80004c8:	f003 0308 	and.w	r3, r3, #8
 80004cc:	60fb      	str	r3, [r7, #12]
 80004ce:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80004d0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80004d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004d6:	2312      	movs	r3, #18
 80004d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004da:	2303      	movs	r3, #3
 80004dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004de:	f107 0310 	add.w	r3, r7, #16
 80004e2:	4619      	mov	r1, r3
 80004e4:	480b      	ldr	r0, [pc, #44]	; (8000514 <HAL_I2C_MspInit+0x7c>)
 80004e6:	f000 fa0b 	bl	8000900 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80004ea:	4b09      	ldr	r3, [pc, #36]	; (8000510 <HAL_I2C_MspInit+0x78>)
 80004ec:	69db      	ldr	r3, [r3, #28]
 80004ee:	4a08      	ldr	r2, [pc, #32]	; (8000510 <HAL_I2C_MspInit+0x78>)
 80004f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004f4:	61d3      	str	r3, [r2, #28]
 80004f6:	4b06      	ldr	r3, [pc, #24]	; (8000510 <HAL_I2C_MspInit+0x78>)
 80004f8:	69db      	ldr	r3, [r3, #28]
 80004fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80004fe:	60bb      	str	r3, [r7, #8]
 8000500:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000502:	bf00      	nop
 8000504:	3720      	adds	r7, #32
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	40005800 	.word	0x40005800
 8000510:	40021000 	.word	0x40021000
 8000514:	40010c00 	.word	0x40010c00

08000518 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800051c:	e7fe      	b.n	800051c <NMI_Handler+0x4>

0800051e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800051e:	b480      	push	{r7}
 8000520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000522:	e7fe      	b.n	8000522 <HardFault_Handler+0x4>

08000524 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000528:	e7fe      	b.n	8000528 <MemManage_Handler+0x4>

0800052a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800052a:	b480      	push	{r7}
 800052c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800052e:	e7fe      	b.n	800052e <BusFault_Handler+0x4>

08000530 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000534:	e7fe      	b.n	8000534 <UsageFault_Handler+0x4>

08000536 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000536:	b480      	push	{r7}
 8000538:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800053a:	bf00      	nop
 800053c:	46bd      	mov	sp, r7
 800053e:	bc80      	pop	{r7}
 8000540:	4770      	bx	lr

08000542 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000542:	b480      	push	{r7}
 8000544:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000546:	bf00      	nop
 8000548:	46bd      	mov	sp, r7
 800054a:	bc80      	pop	{r7}
 800054c:	4770      	bx	lr

0800054e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800054e:	b480      	push	{r7}
 8000550:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000552:	bf00      	nop
 8000554:	46bd      	mov	sp, r7
 8000556:	bc80      	pop	{r7}
 8000558:	4770      	bx	lr

0800055a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800055a:	b580      	push	{r7, lr}
 800055c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800055e:	f000 f8ab 	bl	80006b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000562:	bf00      	nop
 8000564:	bd80      	pop	{r7, pc}
	...

08000568 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000570:	4a14      	ldr	r2, [pc, #80]	; (80005c4 <_sbrk+0x5c>)
 8000572:	4b15      	ldr	r3, [pc, #84]	; (80005c8 <_sbrk+0x60>)
 8000574:	1ad3      	subs	r3, r2, r3
 8000576:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000578:	697b      	ldr	r3, [r7, #20]
 800057a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800057c:	4b13      	ldr	r3, [pc, #76]	; (80005cc <_sbrk+0x64>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d102      	bne.n	800058a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000584:	4b11      	ldr	r3, [pc, #68]	; (80005cc <_sbrk+0x64>)
 8000586:	4a12      	ldr	r2, [pc, #72]	; (80005d0 <_sbrk+0x68>)
 8000588:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800058a:	4b10      	ldr	r3, [pc, #64]	; (80005cc <_sbrk+0x64>)
 800058c:	681a      	ldr	r2, [r3, #0]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	4413      	add	r3, r2
 8000592:	693a      	ldr	r2, [r7, #16]
 8000594:	429a      	cmp	r2, r3
 8000596:	d207      	bcs.n	80005a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000598:	f001 fd48 	bl	800202c <__errno>
 800059c:	4603      	mov	r3, r0
 800059e:	220c      	movs	r2, #12
 80005a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005a2:	f04f 33ff 	mov.w	r3, #4294967295
 80005a6:	e009      	b.n	80005bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005a8:	4b08      	ldr	r3, [pc, #32]	; (80005cc <_sbrk+0x64>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005ae:	4b07      	ldr	r3, [pc, #28]	; (80005cc <_sbrk+0x64>)
 80005b0:	681a      	ldr	r2, [r3, #0]
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	4413      	add	r3, r2
 80005b6:	4a05      	ldr	r2, [pc, #20]	; (80005cc <_sbrk+0x64>)
 80005b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005ba:	68fb      	ldr	r3, [r7, #12]
}
 80005bc:	4618      	mov	r0, r3
 80005be:	3718      	adds	r7, #24
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	20005000 	.word	0x20005000
 80005c8:	00000400 	.word	0x00000400
 80005cc:	200000b4 	.word	0x200000b4
 80005d0:	20000138 	.word	0x20000138

080005d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	bc80      	pop	{r7}
 80005de:	4770      	bx	lr

080005e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005e0:	480c      	ldr	r0, [pc, #48]	; (8000614 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80005e2:	490d      	ldr	r1, [pc, #52]	; (8000618 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80005e4:	4a0d      	ldr	r2, [pc, #52]	; (800061c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80005e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005e8:	e002      	b.n	80005f0 <LoopCopyDataInit>

080005ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005ee:	3304      	adds	r3, #4

080005f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005f4:	d3f9      	bcc.n	80005ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005f6:	4a0a      	ldr	r2, [pc, #40]	; (8000620 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80005f8:	4c0a      	ldr	r4, [pc, #40]	; (8000624 <LoopFillZerobss+0x22>)
  movs r3, #0
 80005fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005fc:	e001      	b.n	8000602 <LoopFillZerobss>

080005fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000600:	3204      	adds	r2, #4

08000602 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000602:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000604:	d3fb      	bcc.n	80005fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000606:	f7ff ffe5 	bl	80005d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800060a:	f001 fd15 	bl	8002038 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800060e:	f7ff fda5 	bl	800015c <main>
  bx lr
 8000612:	4770      	bx	lr
  ldr r0, =_sdata
 8000614:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000618:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 800061c:	080029b8 	.word	0x080029b8
  ldr r2, =_sbss
 8000620:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8000624:	20000134 	.word	0x20000134

08000628 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000628:	e7fe      	b.n	8000628 <ADC1_2_IRQHandler>
	...

0800062c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000630:	4b08      	ldr	r3, [pc, #32]	; (8000654 <HAL_Init+0x28>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a07      	ldr	r2, [pc, #28]	; (8000654 <HAL_Init+0x28>)
 8000636:	f043 0310 	orr.w	r3, r3, #16
 800063a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800063c:	2003      	movs	r0, #3
 800063e:	f000 f92b 	bl	8000898 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000642:	200f      	movs	r0, #15
 8000644:	f000 f808 	bl	8000658 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000648:	f7ff fef4 	bl	8000434 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800064c:	2300      	movs	r3, #0
}
 800064e:	4618      	mov	r0, r3
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	40022000 	.word	0x40022000

08000658 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000660:	4b12      	ldr	r3, [pc, #72]	; (80006ac <HAL_InitTick+0x54>)
 8000662:	681a      	ldr	r2, [r3, #0]
 8000664:	4b12      	ldr	r3, [pc, #72]	; (80006b0 <HAL_InitTick+0x58>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	4619      	mov	r1, r3
 800066a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800066e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000672:	fbb2 f3f3 	udiv	r3, r2, r3
 8000676:	4618      	mov	r0, r3
 8000678:	f000 f935 	bl	80008e6 <HAL_SYSTICK_Config>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000682:	2301      	movs	r3, #1
 8000684:	e00e      	b.n	80006a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	2b0f      	cmp	r3, #15
 800068a:	d80a      	bhi.n	80006a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800068c:	2200      	movs	r2, #0
 800068e:	6879      	ldr	r1, [r7, #4]
 8000690:	f04f 30ff 	mov.w	r0, #4294967295
 8000694:	f000 f90b 	bl	80008ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000698:	4a06      	ldr	r2, [pc, #24]	; (80006b4 <HAL_InitTick+0x5c>)
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800069e:	2300      	movs	r3, #0
 80006a0:	e000      	b.n	80006a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006a2:	2301      	movs	r3, #1
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	3708      	adds	r7, #8
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	20000028 	.word	0x20000028
 80006b0:	20000030 	.word	0x20000030
 80006b4:	2000002c 	.word	0x2000002c

080006b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006bc:	4b05      	ldr	r3, [pc, #20]	; (80006d4 <HAL_IncTick+0x1c>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	461a      	mov	r2, r3
 80006c2:	4b05      	ldr	r3, [pc, #20]	; (80006d8 <HAL_IncTick+0x20>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4413      	add	r3, r2
 80006c8:	4a03      	ldr	r2, [pc, #12]	; (80006d8 <HAL_IncTick+0x20>)
 80006ca:	6013      	str	r3, [r2, #0]
}
 80006cc:	bf00      	nop
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bc80      	pop	{r7}
 80006d2:	4770      	bx	lr
 80006d4:	20000030 	.word	0x20000030
 80006d8:	20000120 	.word	0x20000120

080006dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  return uwTick;
 80006e0:	4b02      	ldr	r3, [pc, #8]	; (80006ec <HAL_GetTick+0x10>)
 80006e2:	681b      	ldr	r3, [r3, #0]
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bc80      	pop	{r7}
 80006ea:	4770      	bx	lr
 80006ec:	20000120 	.word	0x20000120

080006f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006f8:	f7ff fff0 	bl	80006dc <HAL_GetTick>
 80006fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000708:	d005      	beq.n	8000716 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800070a:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <HAL_Delay+0x44>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	461a      	mov	r2, r3
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	4413      	add	r3, r2
 8000714:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000716:	bf00      	nop
 8000718:	f7ff ffe0 	bl	80006dc <HAL_GetTick>
 800071c:	4602      	mov	r2, r0
 800071e:	68bb      	ldr	r3, [r7, #8]
 8000720:	1ad3      	subs	r3, r2, r3
 8000722:	68fa      	ldr	r2, [r7, #12]
 8000724:	429a      	cmp	r2, r3
 8000726:	d8f7      	bhi.n	8000718 <HAL_Delay+0x28>
  {
  }
}
 8000728:	bf00      	nop
 800072a:	bf00      	nop
 800072c:	3710      	adds	r7, #16
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	20000030 	.word	0x20000030

08000738 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000738:	b480      	push	{r7}
 800073a:	b085      	sub	sp, #20
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	f003 0307 	and.w	r3, r3, #7
 8000746:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000748:	4b0c      	ldr	r3, [pc, #48]	; (800077c <__NVIC_SetPriorityGrouping+0x44>)
 800074a:	68db      	ldr	r3, [r3, #12]
 800074c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800074e:	68ba      	ldr	r2, [r7, #8]
 8000750:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000754:	4013      	ands	r3, r2
 8000756:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000760:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000764:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000768:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800076a:	4a04      	ldr	r2, [pc, #16]	; (800077c <__NVIC_SetPriorityGrouping+0x44>)
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	60d3      	str	r3, [r2, #12]
}
 8000770:	bf00      	nop
 8000772:	3714      	adds	r7, #20
 8000774:	46bd      	mov	sp, r7
 8000776:	bc80      	pop	{r7}
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	e000ed00 	.word	0xe000ed00

08000780 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000784:	4b04      	ldr	r3, [pc, #16]	; (8000798 <__NVIC_GetPriorityGrouping+0x18>)
 8000786:	68db      	ldr	r3, [r3, #12]
 8000788:	0a1b      	lsrs	r3, r3, #8
 800078a:	f003 0307 	and.w	r3, r3, #7
}
 800078e:	4618      	mov	r0, r3
 8000790:	46bd      	mov	sp, r7
 8000792:	bc80      	pop	{r7}
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	e000ed00 	.word	0xe000ed00

0800079c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	6039      	str	r1, [r7, #0]
 80007a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	db0a      	blt.n	80007c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	b2da      	uxtb	r2, r3
 80007b4:	490c      	ldr	r1, [pc, #48]	; (80007e8 <__NVIC_SetPriority+0x4c>)
 80007b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ba:	0112      	lsls	r2, r2, #4
 80007bc:	b2d2      	uxtb	r2, r2
 80007be:	440b      	add	r3, r1
 80007c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007c4:	e00a      	b.n	80007dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	b2da      	uxtb	r2, r3
 80007ca:	4908      	ldr	r1, [pc, #32]	; (80007ec <__NVIC_SetPriority+0x50>)
 80007cc:	79fb      	ldrb	r3, [r7, #7]
 80007ce:	f003 030f 	and.w	r3, r3, #15
 80007d2:	3b04      	subs	r3, #4
 80007d4:	0112      	lsls	r2, r2, #4
 80007d6:	b2d2      	uxtb	r2, r2
 80007d8:	440b      	add	r3, r1
 80007da:	761a      	strb	r2, [r3, #24]
}
 80007dc:	bf00      	nop
 80007de:	370c      	adds	r7, #12
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bc80      	pop	{r7}
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	e000e100 	.word	0xe000e100
 80007ec:	e000ed00 	.word	0xe000ed00

080007f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b089      	sub	sp, #36	; 0x24
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	60f8      	str	r0, [r7, #12]
 80007f8:	60b9      	str	r1, [r7, #8]
 80007fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	f003 0307 	and.w	r3, r3, #7
 8000802:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000804:	69fb      	ldr	r3, [r7, #28]
 8000806:	f1c3 0307 	rsb	r3, r3, #7
 800080a:	2b04      	cmp	r3, #4
 800080c:	bf28      	it	cs
 800080e:	2304      	movcs	r3, #4
 8000810:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000812:	69fb      	ldr	r3, [r7, #28]
 8000814:	3304      	adds	r3, #4
 8000816:	2b06      	cmp	r3, #6
 8000818:	d902      	bls.n	8000820 <NVIC_EncodePriority+0x30>
 800081a:	69fb      	ldr	r3, [r7, #28]
 800081c:	3b03      	subs	r3, #3
 800081e:	e000      	b.n	8000822 <NVIC_EncodePriority+0x32>
 8000820:	2300      	movs	r3, #0
 8000822:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000824:	f04f 32ff 	mov.w	r2, #4294967295
 8000828:	69bb      	ldr	r3, [r7, #24]
 800082a:	fa02 f303 	lsl.w	r3, r2, r3
 800082e:	43da      	mvns	r2, r3
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	401a      	ands	r2, r3
 8000834:	697b      	ldr	r3, [r7, #20]
 8000836:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000838:	f04f 31ff 	mov.w	r1, #4294967295
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	fa01 f303 	lsl.w	r3, r1, r3
 8000842:	43d9      	mvns	r1, r3
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000848:	4313      	orrs	r3, r2
         );
}
 800084a:	4618      	mov	r0, r3
 800084c:	3724      	adds	r7, #36	; 0x24
 800084e:	46bd      	mov	sp, r7
 8000850:	bc80      	pop	{r7}
 8000852:	4770      	bx	lr

08000854 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	3b01      	subs	r3, #1
 8000860:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000864:	d301      	bcc.n	800086a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000866:	2301      	movs	r3, #1
 8000868:	e00f      	b.n	800088a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800086a:	4a0a      	ldr	r2, [pc, #40]	; (8000894 <SysTick_Config+0x40>)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	3b01      	subs	r3, #1
 8000870:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000872:	210f      	movs	r1, #15
 8000874:	f04f 30ff 	mov.w	r0, #4294967295
 8000878:	f7ff ff90 	bl	800079c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800087c:	4b05      	ldr	r3, [pc, #20]	; (8000894 <SysTick_Config+0x40>)
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000882:	4b04      	ldr	r3, [pc, #16]	; (8000894 <SysTick_Config+0x40>)
 8000884:	2207      	movs	r2, #7
 8000886:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000888:	2300      	movs	r3, #0
}
 800088a:	4618      	mov	r0, r3
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	e000e010 	.word	0xe000e010

08000898 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008a0:	6878      	ldr	r0, [r7, #4]
 80008a2:	f7ff ff49 	bl	8000738 <__NVIC_SetPriorityGrouping>
}
 80008a6:	bf00      	nop
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}

080008ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008ae:	b580      	push	{r7, lr}
 80008b0:	b086      	sub	sp, #24
 80008b2:	af00      	add	r7, sp, #0
 80008b4:	4603      	mov	r3, r0
 80008b6:	60b9      	str	r1, [r7, #8]
 80008b8:	607a      	str	r2, [r7, #4]
 80008ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008bc:	2300      	movs	r3, #0
 80008be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008c0:	f7ff ff5e 	bl	8000780 <__NVIC_GetPriorityGrouping>
 80008c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008c6:	687a      	ldr	r2, [r7, #4]
 80008c8:	68b9      	ldr	r1, [r7, #8]
 80008ca:	6978      	ldr	r0, [r7, #20]
 80008cc:	f7ff ff90 	bl	80007f0 <NVIC_EncodePriority>
 80008d0:	4602      	mov	r2, r0
 80008d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008d6:	4611      	mov	r1, r2
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff ff5f 	bl	800079c <__NVIC_SetPriority>
}
 80008de:	bf00      	nop
 80008e0:	3718      	adds	r7, #24
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008e6:	b580      	push	{r7, lr}
 80008e8:	b082      	sub	sp, #8
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008ee:	6878      	ldr	r0, [r7, #4]
 80008f0:	f7ff ffb0 	bl	8000854 <SysTick_Config>
 80008f4:	4603      	mov	r3, r0
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
	...

08000900 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000900:	b480      	push	{r7}
 8000902:	b08b      	sub	sp, #44	; 0x2c
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800090e:	2300      	movs	r3, #0
 8000910:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000912:	e169      	b.n	8000be8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000914:	2201      	movs	r2, #1
 8000916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000918:	fa02 f303 	lsl.w	r3, r2, r3
 800091c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	69fa      	ldr	r2, [r7, #28]
 8000924:	4013      	ands	r3, r2
 8000926:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000928:	69ba      	ldr	r2, [r7, #24]
 800092a:	69fb      	ldr	r3, [r7, #28]
 800092c:	429a      	cmp	r2, r3
 800092e:	f040 8158 	bne.w	8000be2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	685b      	ldr	r3, [r3, #4]
 8000936:	4a9a      	ldr	r2, [pc, #616]	; (8000ba0 <HAL_GPIO_Init+0x2a0>)
 8000938:	4293      	cmp	r3, r2
 800093a:	d05e      	beq.n	80009fa <HAL_GPIO_Init+0xfa>
 800093c:	4a98      	ldr	r2, [pc, #608]	; (8000ba0 <HAL_GPIO_Init+0x2a0>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d875      	bhi.n	8000a2e <HAL_GPIO_Init+0x12e>
 8000942:	4a98      	ldr	r2, [pc, #608]	; (8000ba4 <HAL_GPIO_Init+0x2a4>)
 8000944:	4293      	cmp	r3, r2
 8000946:	d058      	beq.n	80009fa <HAL_GPIO_Init+0xfa>
 8000948:	4a96      	ldr	r2, [pc, #600]	; (8000ba4 <HAL_GPIO_Init+0x2a4>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d86f      	bhi.n	8000a2e <HAL_GPIO_Init+0x12e>
 800094e:	4a96      	ldr	r2, [pc, #600]	; (8000ba8 <HAL_GPIO_Init+0x2a8>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d052      	beq.n	80009fa <HAL_GPIO_Init+0xfa>
 8000954:	4a94      	ldr	r2, [pc, #592]	; (8000ba8 <HAL_GPIO_Init+0x2a8>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d869      	bhi.n	8000a2e <HAL_GPIO_Init+0x12e>
 800095a:	4a94      	ldr	r2, [pc, #592]	; (8000bac <HAL_GPIO_Init+0x2ac>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d04c      	beq.n	80009fa <HAL_GPIO_Init+0xfa>
 8000960:	4a92      	ldr	r2, [pc, #584]	; (8000bac <HAL_GPIO_Init+0x2ac>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d863      	bhi.n	8000a2e <HAL_GPIO_Init+0x12e>
 8000966:	4a92      	ldr	r2, [pc, #584]	; (8000bb0 <HAL_GPIO_Init+0x2b0>)
 8000968:	4293      	cmp	r3, r2
 800096a:	d046      	beq.n	80009fa <HAL_GPIO_Init+0xfa>
 800096c:	4a90      	ldr	r2, [pc, #576]	; (8000bb0 <HAL_GPIO_Init+0x2b0>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d85d      	bhi.n	8000a2e <HAL_GPIO_Init+0x12e>
 8000972:	2b12      	cmp	r3, #18
 8000974:	d82a      	bhi.n	80009cc <HAL_GPIO_Init+0xcc>
 8000976:	2b12      	cmp	r3, #18
 8000978:	d859      	bhi.n	8000a2e <HAL_GPIO_Init+0x12e>
 800097a:	a201      	add	r2, pc, #4	; (adr r2, 8000980 <HAL_GPIO_Init+0x80>)
 800097c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000980:	080009fb 	.word	0x080009fb
 8000984:	080009d5 	.word	0x080009d5
 8000988:	080009e7 	.word	0x080009e7
 800098c:	08000a29 	.word	0x08000a29
 8000990:	08000a2f 	.word	0x08000a2f
 8000994:	08000a2f 	.word	0x08000a2f
 8000998:	08000a2f 	.word	0x08000a2f
 800099c:	08000a2f 	.word	0x08000a2f
 80009a0:	08000a2f 	.word	0x08000a2f
 80009a4:	08000a2f 	.word	0x08000a2f
 80009a8:	08000a2f 	.word	0x08000a2f
 80009ac:	08000a2f 	.word	0x08000a2f
 80009b0:	08000a2f 	.word	0x08000a2f
 80009b4:	08000a2f 	.word	0x08000a2f
 80009b8:	08000a2f 	.word	0x08000a2f
 80009bc:	08000a2f 	.word	0x08000a2f
 80009c0:	08000a2f 	.word	0x08000a2f
 80009c4:	080009dd 	.word	0x080009dd
 80009c8:	080009f1 	.word	0x080009f1
 80009cc:	4a79      	ldr	r2, [pc, #484]	; (8000bb4 <HAL_GPIO_Init+0x2b4>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d013      	beq.n	80009fa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80009d2:	e02c      	b.n	8000a2e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	68db      	ldr	r3, [r3, #12]
 80009d8:	623b      	str	r3, [r7, #32]
          break;
 80009da:	e029      	b.n	8000a30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	68db      	ldr	r3, [r3, #12]
 80009e0:	3304      	adds	r3, #4
 80009e2:	623b      	str	r3, [r7, #32]
          break;
 80009e4:	e024      	b.n	8000a30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	68db      	ldr	r3, [r3, #12]
 80009ea:	3308      	adds	r3, #8
 80009ec:	623b      	str	r3, [r7, #32]
          break;
 80009ee:	e01f      	b.n	8000a30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	68db      	ldr	r3, [r3, #12]
 80009f4:	330c      	adds	r3, #12
 80009f6:	623b      	str	r3, [r7, #32]
          break;
 80009f8:	e01a      	b.n	8000a30 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	689b      	ldr	r3, [r3, #8]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d102      	bne.n	8000a08 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a02:	2304      	movs	r3, #4
 8000a04:	623b      	str	r3, [r7, #32]
          break;
 8000a06:	e013      	b.n	8000a30 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	689b      	ldr	r3, [r3, #8]
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d105      	bne.n	8000a1c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a10:	2308      	movs	r3, #8
 8000a12:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	69fa      	ldr	r2, [r7, #28]
 8000a18:	611a      	str	r2, [r3, #16]
          break;
 8000a1a:	e009      	b.n	8000a30 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a1c:	2308      	movs	r3, #8
 8000a1e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	69fa      	ldr	r2, [r7, #28]
 8000a24:	615a      	str	r2, [r3, #20]
          break;
 8000a26:	e003      	b.n	8000a30 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	623b      	str	r3, [r7, #32]
          break;
 8000a2c:	e000      	b.n	8000a30 <HAL_GPIO_Init+0x130>
          break;
 8000a2e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a30:	69bb      	ldr	r3, [r7, #24]
 8000a32:	2bff      	cmp	r3, #255	; 0xff
 8000a34:	d801      	bhi.n	8000a3a <HAL_GPIO_Init+0x13a>
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	e001      	b.n	8000a3e <HAL_GPIO_Init+0x13e>
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	3304      	adds	r3, #4
 8000a3e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a40:	69bb      	ldr	r3, [r7, #24]
 8000a42:	2bff      	cmp	r3, #255	; 0xff
 8000a44:	d802      	bhi.n	8000a4c <HAL_GPIO_Init+0x14c>
 8000a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a48:	009b      	lsls	r3, r3, #2
 8000a4a:	e002      	b.n	8000a52 <HAL_GPIO_Init+0x152>
 8000a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a4e:	3b08      	subs	r3, #8
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	210f      	movs	r1, #15
 8000a5a:	693b      	ldr	r3, [r7, #16]
 8000a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a60:	43db      	mvns	r3, r3
 8000a62:	401a      	ands	r2, r3
 8000a64:	6a39      	ldr	r1, [r7, #32]
 8000a66:	693b      	ldr	r3, [r7, #16]
 8000a68:	fa01 f303 	lsl.w	r3, r1, r3
 8000a6c:	431a      	orrs	r2, r3
 8000a6e:	697b      	ldr	r3, [r7, #20]
 8000a70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	f000 80b1 	beq.w	8000be2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a80:	4b4d      	ldr	r3, [pc, #308]	; (8000bb8 <HAL_GPIO_Init+0x2b8>)
 8000a82:	699b      	ldr	r3, [r3, #24]
 8000a84:	4a4c      	ldr	r2, [pc, #304]	; (8000bb8 <HAL_GPIO_Init+0x2b8>)
 8000a86:	f043 0301 	orr.w	r3, r3, #1
 8000a8a:	6193      	str	r3, [r2, #24]
 8000a8c:	4b4a      	ldr	r3, [pc, #296]	; (8000bb8 <HAL_GPIO_Init+0x2b8>)
 8000a8e:	699b      	ldr	r3, [r3, #24]
 8000a90:	f003 0301 	and.w	r3, r3, #1
 8000a94:	60bb      	str	r3, [r7, #8]
 8000a96:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a98:	4a48      	ldr	r2, [pc, #288]	; (8000bbc <HAL_GPIO_Init+0x2bc>)
 8000a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a9c:	089b      	lsrs	r3, r3, #2
 8000a9e:	3302      	adds	r3, #2
 8000aa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aa4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa8:	f003 0303 	and.w	r3, r3, #3
 8000aac:	009b      	lsls	r3, r3, #2
 8000aae:	220f      	movs	r2, #15
 8000ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab4:	43db      	mvns	r3, r3
 8000ab6:	68fa      	ldr	r2, [r7, #12]
 8000ab8:	4013      	ands	r3, r2
 8000aba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	4a40      	ldr	r2, [pc, #256]	; (8000bc0 <HAL_GPIO_Init+0x2c0>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d013      	beq.n	8000aec <HAL_GPIO_Init+0x1ec>
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	4a3f      	ldr	r2, [pc, #252]	; (8000bc4 <HAL_GPIO_Init+0x2c4>)
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d00d      	beq.n	8000ae8 <HAL_GPIO_Init+0x1e8>
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	4a3e      	ldr	r2, [pc, #248]	; (8000bc8 <HAL_GPIO_Init+0x2c8>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d007      	beq.n	8000ae4 <HAL_GPIO_Init+0x1e4>
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	4a3d      	ldr	r2, [pc, #244]	; (8000bcc <HAL_GPIO_Init+0x2cc>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d101      	bne.n	8000ae0 <HAL_GPIO_Init+0x1e0>
 8000adc:	2303      	movs	r3, #3
 8000ade:	e006      	b.n	8000aee <HAL_GPIO_Init+0x1ee>
 8000ae0:	2304      	movs	r3, #4
 8000ae2:	e004      	b.n	8000aee <HAL_GPIO_Init+0x1ee>
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	e002      	b.n	8000aee <HAL_GPIO_Init+0x1ee>
 8000ae8:	2301      	movs	r3, #1
 8000aea:	e000      	b.n	8000aee <HAL_GPIO_Init+0x1ee>
 8000aec:	2300      	movs	r3, #0
 8000aee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000af0:	f002 0203 	and.w	r2, r2, #3
 8000af4:	0092      	lsls	r2, r2, #2
 8000af6:	4093      	lsls	r3, r2
 8000af8:	68fa      	ldr	r2, [r7, #12]
 8000afa:	4313      	orrs	r3, r2
 8000afc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000afe:	492f      	ldr	r1, [pc, #188]	; (8000bbc <HAL_GPIO_Init+0x2bc>)
 8000b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b02:	089b      	lsrs	r3, r3, #2
 8000b04:	3302      	adds	r3, #2
 8000b06:	68fa      	ldr	r2, [r7, #12]
 8000b08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d006      	beq.n	8000b26 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b18:	4b2d      	ldr	r3, [pc, #180]	; (8000bd0 <HAL_GPIO_Init+0x2d0>)
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	492c      	ldr	r1, [pc, #176]	; (8000bd0 <HAL_GPIO_Init+0x2d0>)
 8000b1e:	69bb      	ldr	r3, [r7, #24]
 8000b20:	4313      	orrs	r3, r2
 8000b22:	600b      	str	r3, [r1, #0]
 8000b24:	e006      	b.n	8000b34 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b26:	4b2a      	ldr	r3, [pc, #168]	; (8000bd0 <HAL_GPIO_Init+0x2d0>)
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	69bb      	ldr	r3, [r7, #24]
 8000b2c:	43db      	mvns	r3, r3
 8000b2e:	4928      	ldr	r1, [pc, #160]	; (8000bd0 <HAL_GPIO_Init+0x2d0>)
 8000b30:	4013      	ands	r3, r2
 8000b32:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d006      	beq.n	8000b4e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b40:	4b23      	ldr	r3, [pc, #140]	; (8000bd0 <HAL_GPIO_Init+0x2d0>)
 8000b42:	685a      	ldr	r2, [r3, #4]
 8000b44:	4922      	ldr	r1, [pc, #136]	; (8000bd0 <HAL_GPIO_Init+0x2d0>)
 8000b46:	69bb      	ldr	r3, [r7, #24]
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	604b      	str	r3, [r1, #4]
 8000b4c:	e006      	b.n	8000b5c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b4e:	4b20      	ldr	r3, [pc, #128]	; (8000bd0 <HAL_GPIO_Init+0x2d0>)
 8000b50:	685a      	ldr	r2, [r3, #4]
 8000b52:	69bb      	ldr	r3, [r7, #24]
 8000b54:	43db      	mvns	r3, r3
 8000b56:	491e      	ldr	r1, [pc, #120]	; (8000bd0 <HAL_GPIO_Init+0x2d0>)
 8000b58:	4013      	ands	r3, r2
 8000b5a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d006      	beq.n	8000b76 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b68:	4b19      	ldr	r3, [pc, #100]	; (8000bd0 <HAL_GPIO_Init+0x2d0>)
 8000b6a:	689a      	ldr	r2, [r3, #8]
 8000b6c:	4918      	ldr	r1, [pc, #96]	; (8000bd0 <HAL_GPIO_Init+0x2d0>)
 8000b6e:	69bb      	ldr	r3, [r7, #24]
 8000b70:	4313      	orrs	r3, r2
 8000b72:	608b      	str	r3, [r1, #8]
 8000b74:	e006      	b.n	8000b84 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b76:	4b16      	ldr	r3, [pc, #88]	; (8000bd0 <HAL_GPIO_Init+0x2d0>)
 8000b78:	689a      	ldr	r2, [r3, #8]
 8000b7a:	69bb      	ldr	r3, [r7, #24]
 8000b7c:	43db      	mvns	r3, r3
 8000b7e:	4914      	ldr	r1, [pc, #80]	; (8000bd0 <HAL_GPIO_Init+0x2d0>)
 8000b80:	4013      	ands	r3, r2
 8000b82:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d021      	beq.n	8000bd4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b90:	4b0f      	ldr	r3, [pc, #60]	; (8000bd0 <HAL_GPIO_Init+0x2d0>)
 8000b92:	68da      	ldr	r2, [r3, #12]
 8000b94:	490e      	ldr	r1, [pc, #56]	; (8000bd0 <HAL_GPIO_Init+0x2d0>)
 8000b96:	69bb      	ldr	r3, [r7, #24]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	60cb      	str	r3, [r1, #12]
 8000b9c:	e021      	b.n	8000be2 <HAL_GPIO_Init+0x2e2>
 8000b9e:	bf00      	nop
 8000ba0:	10320000 	.word	0x10320000
 8000ba4:	10310000 	.word	0x10310000
 8000ba8:	10220000 	.word	0x10220000
 8000bac:	10210000 	.word	0x10210000
 8000bb0:	10120000 	.word	0x10120000
 8000bb4:	10110000 	.word	0x10110000
 8000bb8:	40021000 	.word	0x40021000
 8000bbc:	40010000 	.word	0x40010000
 8000bc0:	40010800 	.word	0x40010800
 8000bc4:	40010c00 	.word	0x40010c00
 8000bc8:	40011000 	.word	0x40011000
 8000bcc:	40011400 	.word	0x40011400
 8000bd0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000bd4:	4b0b      	ldr	r3, [pc, #44]	; (8000c04 <HAL_GPIO_Init+0x304>)
 8000bd6:	68da      	ldr	r2, [r3, #12]
 8000bd8:	69bb      	ldr	r3, [r7, #24]
 8000bda:	43db      	mvns	r3, r3
 8000bdc:	4909      	ldr	r1, [pc, #36]	; (8000c04 <HAL_GPIO_Init+0x304>)
 8000bde:	4013      	ands	r3, r2
 8000be0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be4:	3301      	adds	r3, #1
 8000be6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bee:	fa22 f303 	lsr.w	r3, r2, r3
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f47f ae8e 	bne.w	8000914 <HAL_GPIO_Init+0x14>
  }
}
 8000bf8:	bf00      	nop
 8000bfa:	bf00      	nop
 8000bfc:	372c      	adds	r7, #44	; 0x2c
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bc80      	pop	{r7}
 8000c02:	4770      	bx	lr
 8000c04:	40010400 	.word	0x40010400

08000c08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d101      	bne.n	8000c1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
 8000c18:	e12b      	b.n	8000e72 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d106      	bne.n	8000c34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2200      	movs	r2, #0
 8000c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000c2e:	6878      	ldr	r0, [r7, #4]
 8000c30:	f7ff fc32 	bl	8000498 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2224      	movs	r2, #36	; 0x24
 8000c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f022 0201 	bic.w	r2, r2, #1
 8000c4a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000c5a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000c6a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000c6c:	f000 ffea 	bl	8001c44 <HAL_RCC_GetPCLK1Freq>
 8000c70:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	4a81      	ldr	r2, [pc, #516]	; (8000e7c <HAL_I2C_Init+0x274>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d807      	bhi.n	8000c8c <HAL_I2C_Init+0x84>
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	4a80      	ldr	r2, [pc, #512]	; (8000e80 <HAL_I2C_Init+0x278>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	bf94      	ite	ls
 8000c84:	2301      	movls	r3, #1
 8000c86:	2300      	movhi	r3, #0
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	e006      	b.n	8000c9a <HAL_I2C_Init+0x92>
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	4a7d      	ldr	r2, [pc, #500]	; (8000e84 <HAL_I2C_Init+0x27c>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	bf94      	ite	ls
 8000c94:	2301      	movls	r3, #1
 8000c96:	2300      	movhi	r3, #0
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e0e7      	b.n	8000e72 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	4a78      	ldr	r2, [pc, #480]	; (8000e88 <HAL_I2C_Init+0x280>)
 8000ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8000caa:	0c9b      	lsrs	r3, r3, #18
 8000cac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	68ba      	ldr	r2, [r7, #8]
 8000cbe:	430a      	orrs	r2, r1
 8000cc0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	6a1b      	ldr	r3, [r3, #32]
 8000cc8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	4a6a      	ldr	r2, [pc, #424]	; (8000e7c <HAL_I2C_Init+0x274>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d802      	bhi.n	8000cdc <HAL_I2C_Init+0xd4>
 8000cd6:	68bb      	ldr	r3, [r7, #8]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	e009      	b.n	8000cf0 <HAL_I2C_Init+0xe8>
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000ce2:	fb02 f303 	mul.w	r3, r2, r3
 8000ce6:	4a69      	ldr	r2, [pc, #420]	; (8000e8c <HAL_I2C_Init+0x284>)
 8000ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8000cec:	099b      	lsrs	r3, r3, #6
 8000cee:	3301      	adds	r3, #1
 8000cf0:	687a      	ldr	r2, [r7, #4]
 8000cf2:	6812      	ldr	r2, [r2, #0]
 8000cf4:	430b      	orrs	r3, r1
 8000cf6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	69db      	ldr	r3, [r3, #28]
 8000cfe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000d02:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	495c      	ldr	r1, [pc, #368]	; (8000e7c <HAL_I2C_Init+0x274>)
 8000d0c:	428b      	cmp	r3, r1
 8000d0e:	d819      	bhi.n	8000d44 <HAL_I2C_Init+0x13c>
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	1e59      	subs	r1, r3, #1
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	005b      	lsls	r3, r3, #1
 8000d1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d1e:	1c59      	adds	r1, r3, #1
 8000d20:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000d24:	400b      	ands	r3, r1
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d00a      	beq.n	8000d40 <HAL_I2C_Init+0x138>
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	1e59      	subs	r1, r3, #1
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	005b      	lsls	r3, r3, #1
 8000d34:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d38:	3301      	adds	r3, #1
 8000d3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d3e:	e051      	b.n	8000de4 <HAL_I2C_Init+0x1dc>
 8000d40:	2304      	movs	r3, #4
 8000d42:	e04f      	b.n	8000de4 <HAL_I2C_Init+0x1dc>
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	689b      	ldr	r3, [r3, #8]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d111      	bne.n	8000d70 <HAL_I2C_Init+0x168>
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	1e58      	subs	r0, r3, #1
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6859      	ldr	r1, [r3, #4]
 8000d54:	460b      	mov	r3, r1
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	440b      	add	r3, r1
 8000d5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d5e:	3301      	adds	r3, #1
 8000d60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	bf0c      	ite	eq
 8000d68:	2301      	moveq	r3, #1
 8000d6a:	2300      	movne	r3, #0
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	e012      	b.n	8000d96 <HAL_I2C_Init+0x18e>
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	1e58      	subs	r0, r3, #1
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6859      	ldr	r1, [r3, #4]
 8000d78:	460b      	mov	r3, r1
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	440b      	add	r3, r1
 8000d7e:	0099      	lsls	r1, r3, #2
 8000d80:	440b      	add	r3, r1
 8000d82:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d86:	3301      	adds	r3, #1
 8000d88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	bf0c      	ite	eq
 8000d90:	2301      	moveq	r3, #1
 8000d92:	2300      	movne	r3, #0
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <HAL_I2C_Init+0x196>
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e022      	b.n	8000de4 <HAL_I2C_Init+0x1dc>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	689b      	ldr	r3, [r3, #8]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d10e      	bne.n	8000dc4 <HAL_I2C_Init+0x1bc>
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	1e58      	subs	r0, r3, #1
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6859      	ldr	r1, [r3, #4]
 8000dae:	460b      	mov	r3, r1
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	440b      	add	r3, r1
 8000db4:	fbb0 f3f3 	udiv	r3, r0, r3
 8000db8:	3301      	adds	r3, #1
 8000dba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000dbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000dc2:	e00f      	b.n	8000de4 <HAL_I2C_Init+0x1dc>
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	1e58      	subs	r0, r3, #1
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6859      	ldr	r1, [r3, #4]
 8000dcc:	460b      	mov	r3, r1
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	440b      	add	r3, r1
 8000dd2:	0099      	lsls	r1, r3, #2
 8000dd4:	440b      	add	r3, r1
 8000dd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8000dda:	3301      	adds	r3, #1
 8000ddc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000de0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000de4:	6879      	ldr	r1, [r7, #4]
 8000de6:	6809      	ldr	r1, [r1, #0]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	69da      	ldr	r2, [r3, #28]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6a1b      	ldr	r3, [r3, #32]
 8000dfe:	431a      	orrs	r2, r3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	430a      	orrs	r2, r1
 8000e06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000e12:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000e16:	687a      	ldr	r2, [r7, #4]
 8000e18:	6911      	ldr	r1, [r2, #16]
 8000e1a:	687a      	ldr	r2, [r7, #4]
 8000e1c:	68d2      	ldr	r2, [r2, #12]
 8000e1e:	4311      	orrs	r1, r2
 8000e20:	687a      	ldr	r2, [r7, #4]
 8000e22:	6812      	ldr	r2, [r2, #0]
 8000e24:	430b      	orrs	r3, r1
 8000e26:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	68db      	ldr	r3, [r3, #12]
 8000e2e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	695a      	ldr	r2, [r3, #20]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	699b      	ldr	r3, [r3, #24]
 8000e3a:	431a      	orrs	r2, r3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	430a      	orrs	r2, r1
 8000e42:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f042 0201 	orr.w	r2, r2, #1
 8000e52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2200      	movs	r2, #0
 8000e58:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2220      	movs	r2, #32
 8000e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2200      	movs	r2, #0
 8000e66:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000e70:	2300      	movs	r3, #0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3710      	adds	r7, #16
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	000186a0 	.word	0x000186a0
 8000e80:	001e847f 	.word	0x001e847f
 8000e84:	003d08ff 	.word	0x003d08ff
 8000e88:	431bde83 	.word	0x431bde83
 8000e8c:	10624dd3 	.word	0x10624dd3

08000e90 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b088      	sub	sp, #32
 8000e94:	af02      	add	r7, sp, #8
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	607a      	str	r2, [r7, #4]
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	460b      	mov	r3, r1
 8000e9e:	817b      	strh	r3, [r7, #10]
 8000ea0:	4613      	mov	r3, r2
 8000ea2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000ea4:	f7ff fc1a 	bl	80006dc <HAL_GetTick>
 8000ea8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	2b20      	cmp	r3, #32
 8000eb4:	f040 80e0 	bne.w	8001078 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	9300      	str	r3, [sp, #0]
 8000ebc:	2319      	movs	r3, #25
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	4970      	ldr	r1, [pc, #448]	; (8001084 <HAL_I2C_Master_Transmit+0x1f4>)
 8000ec2:	68f8      	ldr	r0, [r7, #12]
 8000ec4:	f000 f964 	bl	8001190 <I2C_WaitOnFlagUntilTimeout>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	e0d3      	b.n	800107a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d101      	bne.n	8000ee0 <HAL_I2C_Master_Transmit+0x50>
 8000edc:	2302      	movs	r3, #2
 8000ede:	e0cc      	b.n	800107a <HAL_I2C_Master_Transmit+0x1ea>
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f003 0301 	and.w	r3, r3, #1
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d007      	beq.n	8000f06 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f042 0201 	orr.w	r2, r2, #1
 8000f04:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f14:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	2221      	movs	r2, #33	; 0x21
 8000f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	2210      	movs	r2, #16
 8000f22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	893a      	ldrh	r2, [r7, #8]
 8000f36:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f3c:	b29a      	uxth	r2, r3
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	4a50      	ldr	r2, [pc, #320]	; (8001088 <HAL_I2C_Master_Transmit+0x1f8>)
 8000f46:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8000f48:	8979      	ldrh	r1, [r7, #10]
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	6a3a      	ldr	r2, [r7, #32]
 8000f4e:	68f8      	ldr	r0, [r7, #12]
 8000f50:	f000 f89c 	bl	800108c <I2C_MasterRequestWrite>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e08d      	b.n	800107a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000f5e:	2300      	movs	r3, #0
 8000f60:	613b      	str	r3, [r7, #16]
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	695b      	ldr	r3, [r3, #20]
 8000f68:	613b      	str	r3, [r7, #16]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	613b      	str	r3, [r7, #16]
 8000f72:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8000f74:	e066      	b.n	8001044 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f76:	697a      	ldr	r2, [r7, #20]
 8000f78:	6a39      	ldr	r1, [r7, #32]
 8000f7a:	68f8      	ldr	r0, [r7, #12]
 8000f7c:	f000 f9de 	bl	800133c <I2C_WaitOnTXEFlagUntilTimeout>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d00d      	beq.n	8000fa2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8a:	2b04      	cmp	r3, #4
 8000f8c:	d107      	bne.n	8000f9e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f9c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e06b      	b.n	800107a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa6:	781a      	ldrb	r2, [r3, #0]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb2:	1c5a      	adds	r2, r3, #1
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	3b01      	subs	r3, #1
 8000fc0:	b29a      	uxth	r2, r3
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	b29a      	uxth	r2, r3
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	695b      	ldr	r3, [r3, #20]
 8000fd8:	f003 0304 	and.w	r3, r3, #4
 8000fdc:	2b04      	cmp	r3, #4
 8000fde:	d11b      	bne.n	8001018 <HAL_I2C_Master_Transmit+0x188>
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d017      	beq.n	8001018 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fec:	781a      	ldrb	r2, [r3, #0]
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff8:	1c5a      	adds	r2, r3, #1
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001002:	b29b      	uxth	r3, r3
 8001004:	3b01      	subs	r3, #1
 8001006:	b29a      	uxth	r2, r3
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001010:	3b01      	subs	r3, #1
 8001012:	b29a      	uxth	r2, r3
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001018:	697a      	ldr	r2, [r7, #20]
 800101a:	6a39      	ldr	r1, [r7, #32]
 800101c:	68f8      	ldr	r0, [r7, #12]
 800101e:	f000 f9ce 	bl	80013be <I2C_WaitOnBTFFlagUntilTimeout>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d00d      	beq.n	8001044 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102c:	2b04      	cmp	r3, #4
 800102e:	d107      	bne.n	8001040 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800103e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	e01a      	b.n	800107a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001048:	2b00      	cmp	r3, #0
 800104a:	d194      	bne.n	8000f76 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800105a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	2220      	movs	r2, #32
 8001060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	2200      	movs	r2, #0
 8001068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	2200      	movs	r2, #0
 8001070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001074:	2300      	movs	r3, #0
 8001076:	e000      	b.n	800107a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001078:	2302      	movs	r3, #2
  }
}
 800107a:	4618      	mov	r0, r3
 800107c:	3718      	adds	r7, #24
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	00100002 	.word	0x00100002
 8001088:	ffff0000 	.word	0xffff0000

0800108c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b088      	sub	sp, #32
 8001090:	af02      	add	r7, sp, #8
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	607a      	str	r2, [r7, #4]
 8001096:	603b      	str	r3, [r7, #0]
 8001098:	460b      	mov	r3, r1
 800109a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010a0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	2b08      	cmp	r3, #8
 80010a6:	d006      	beq.n	80010b6 <I2C_MasterRequestWrite+0x2a>
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d003      	beq.n	80010b6 <I2C_MasterRequestWrite+0x2a>
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80010b4:	d108      	bne.n	80010c8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	e00b      	b.n	80010e0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010cc:	2b12      	cmp	r3, #18
 80010ce:	d107      	bne.n	80010e0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80010de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	9300      	str	r3, [sp, #0]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2200      	movs	r2, #0
 80010e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80010ec:	68f8      	ldr	r0, [r7, #12]
 80010ee:	f000 f84f 	bl	8001190 <I2C_WaitOnFlagUntilTimeout>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d00d      	beq.n	8001114 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001102:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001106:	d103      	bne.n	8001110 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800110e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001110:	2303      	movs	r3, #3
 8001112:	e035      	b.n	8001180 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	691b      	ldr	r3, [r3, #16]
 8001118:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800111c:	d108      	bne.n	8001130 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800111e:	897b      	ldrh	r3, [r7, #10]
 8001120:	b2db      	uxtb	r3, r3
 8001122:	461a      	mov	r2, r3
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800112c:	611a      	str	r2, [r3, #16]
 800112e:	e01b      	b.n	8001168 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001130:	897b      	ldrh	r3, [r7, #10]
 8001132:	11db      	asrs	r3, r3, #7
 8001134:	b2db      	uxtb	r3, r3
 8001136:	f003 0306 	and.w	r3, r3, #6
 800113a:	b2db      	uxtb	r3, r3
 800113c:	f063 030f 	orn	r3, r3, #15
 8001140:	b2da      	uxtb	r2, r3
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	490e      	ldr	r1, [pc, #56]	; (8001188 <I2C_MasterRequestWrite+0xfc>)
 800114e:	68f8      	ldr	r0, [r7, #12]
 8001150:	f000 f875 	bl	800123e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e010      	b.n	8001180 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800115e:	897b      	ldrh	r3, [r7, #10]
 8001160:	b2da      	uxtb	r2, r3
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	4907      	ldr	r1, [pc, #28]	; (800118c <I2C_MasterRequestWrite+0x100>)
 800116e:	68f8      	ldr	r0, [r7, #12]
 8001170:	f000 f865 	bl	800123e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e000      	b.n	8001180 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800117e:	2300      	movs	r3, #0
}
 8001180:	4618      	mov	r0, r3
 8001182:	3718      	adds	r7, #24
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	00010008 	.word	0x00010008
 800118c:	00010002 	.word	0x00010002

08001190 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	603b      	str	r3, [r7, #0]
 800119c:	4613      	mov	r3, r2
 800119e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80011a0:	e025      	b.n	80011ee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011a8:	d021      	beq.n	80011ee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80011aa:	f7ff fa97 	bl	80006dc <HAL_GetTick>
 80011ae:	4602      	mov	r2, r0
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	683a      	ldr	r2, [r7, #0]
 80011b6:	429a      	cmp	r2, r3
 80011b8:	d302      	bcc.n	80011c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d116      	bne.n	80011ee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	2200      	movs	r2, #0
 80011c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	2220      	movs	r2, #32
 80011ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	2200      	movs	r2, #0
 80011d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011da:	f043 0220 	orr.w	r2, r3, #32
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	2200      	movs	r2, #0
 80011e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e023      	b.n	8001236 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	0c1b      	lsrs	r3, r3, #16
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d10d      	bne.n	8001214 <I2C_WaitOnFlagUntilTimeout+0x84>
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	695b      	ldr	r3, [r3, #20]
 80011fe:	43da      	mvns	r2, r3
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	4013      	ands	r3, r2
 8001204:	b29b      	uxth	r3, r3
 8001206:	2b00      	cmp	r3, #0
 8001208:	bf0c      	ite	eq
 800120a:	2301      	moveq	r3, #1
 800120c:	2300      	movne	r3, #0
 800120e:	b2db      	uxtb	r3, r3
 8001210:	461a      	mov	r2, r3
 8001212:	e00c      	b.n	800122e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	699b      	ldr	r3, [r3, #24]
 800121a:	43da      	mvns	r2, r3
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	4013      	ands	r3, r2
 8001220:	b29b      	uxth	r3, r3
 8001222:	2b00      	cmp	r3, #0
 8001224:	bf0c      	ite	eq
 8001226:	2301      	moveq	r3, #1
 8001228:	2300      	movne	r3, #0
 800122a:	b2db      	uxtb	r3, r3
 800122c:	461a      	mov	r2, r3
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	429a      	cmp	r2, r3
 8001232:	d0b6      	beq.n	80011a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	b084      	sub	sp, #16
 8001242:	af00      	add	r7, sp, #0
 8001244:	60f8      	str	r0, [r7, #12]
 8001246:	60b9      	str	r1, [r7, #8]
 8001248:	607a      	str	r2, [r7, #4]
 800124a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800124c:	e051      	b.n	80012f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	695b      	ldr	r3, [r3, #20]
 8001254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001258:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800125c:	d123      	bne.n	80012a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800126c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001276:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	2200      	movs	r2, #0
 800127c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	2220      	movs	r2, #32
 8001282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	2200      	movs	r2, #0
 800128a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	f043 0204 	orr.w	r2, r3, #4
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	2200      	movs	r2, #0
 800129e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e046      	b.n	8001334 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012ac:	d021      	beq.n	80012f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80012ae:	f7ff fa15 	bl	80006dc <HAL_GetTick>
 80012b2:	4602      	mov	r2, r0
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d302      	bcc.n	80012c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d116      	bne.n	80012f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	2200      	movs	r2, #0
 80012c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	2220      	movs	r2, #32
 80012ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	2200      	movs	r2, #0
 80012d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	f043 0220 	orr.w	r2, r3, #32
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	2200      	movs	r2, #0
 80012ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e020      	b.n	8001334 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	0c1b      	lsrs	r3, r3, #16
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d10c      	bne.n	8001316 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	695b      	ldr	r3, [r3, #20]
 8001302:	43da      	mvns	r2, r3
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	4013      	ands	r3, r2
 8001308:	b29b      	uxth	r3, r3
 800130a:	2b00      	cmp	r3, #0
 800130c:	bf14      	ite	ne
 800130e:	2301      	movne	r3, #1
 8001310:	2300      	moveq	r3, #0
 8001312:	b2db      	uxtb	r3, r3
 8001314:	e00b      	b.n	800132e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	43da      	mvns	r2, r3
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	4013      	ands	r3, r2
 8001322:	b29b      	uxth	r3, r3
 8001324:	2b00      	cmp	r3, #0
 8001326:	bf14      	ite	ne
 8001328:	2301      	movne	r3, #1
 800132a:	2300      	moveq	r3, #0
 800132c:	b2db      	uxtb	r3, r3
 800132e:	2b00      	cmp	r3, #0
 8001330:	d18d      	bne.n	800124e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001332:	2300      	movs	r3, #0
}
 8001334:	4618      	mov	r0, r3
 8001336:	3710      	adds	r7, #16
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001348:	e02d      	b.n	80013a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800134a:	68f8      	ldr	r0, [r7, #12]
 800134c:	f000 f878 	bl	8001440 <I2C_IsAcknowledgeFailed>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e02d      	b.n	80013b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001360:	d021      	beq.n	80013a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001362:	f7ff f9bb 	bl	80006dc <HAL_GetTick>
 8001366:	4602      	mov	r2, r0
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	68ba      	ldr	r2, [r7, #8]
 800136e:	429a      	cmp	r2, r3
 8001370:	d302      	bcc.n	8001378 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d116      	bne.n	80013a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	2200      	movs	r2, #0
 800137c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	2220      	movs	r2, #32
 8001382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	2200      	movs	r2, #0
 800138a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	f043 0220 	orr.w	r2, r3, #32
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	2200      	movs	r2, #0
 800139e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e007      	b.n	80013b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	695b      	ldr	r3, [r3, #20]
 80013ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013b0:	2b80      	cmp	r3, #128	; 0x80
 80013b2:	d1ca      	bne.n	800134a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	b084      	sub	sp, #16
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	60f8      	str	r0, [r7, #12]
 80013c6:	60b9      	str	r1, [r7, #8]
 80013c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80013ca:	e02d      	b.n	8001428 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80013cc:	68f8      	ldr	r0, [r7, #12]
 80013ce:	f000 f837 	bl	8001440 <I2C_IsAcknowledgeFailed>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e02d      	b.n	8001438 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013e2:	d021      	beq.n	8001428 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013e4:	f7ff f97a 	bl	80006dc <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	68ba      	ldr	r2, [r7, #8]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d302      	bcc.n	80013fa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d116      	bne.n	8001428 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	2200      	movs	r2, #0
 80013fe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	2220      	movs	r2, #32
 8001404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	2200      	movs	r2, #0
 800140c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001414:	f043 0220 	orr.w	r2, r3, #32
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	2200      	movs	r2, #0
 8001420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	e007      	b.n	8001438 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	695b      	ldr	r3, [r3, #20]
 800142e:	f003 0304 	and.w	r3, r3, #4
 8001432:	2b04      	cmp	r3, #4
 8001434:	d1ca      	bne.n	80013cc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001436:	2300      	movs	r3, #0
}
 8001438:	4618      	mov	r0, r3
 800143a:	3710      	adds	r7, #16
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}

08001440 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	695b      	ldr	r3, [r3, #20]
 800144e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001452:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001456:	d11b      	bne.n	8001490 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001460:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2200      	movs	r2, #0
 8001466:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2220      	movs	r2, #32
 800146c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2200      	movs	r2, #0
 8001474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147c:	f043 0204 	orr.w	r2, r3, #4
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2200      	movs	r2, #0
 8001488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e000      	b.n	8001492 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	bc80      	pop	{r7}
 800149a:	4770      	bx	lr

0800149c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d101      	bne.n	80014ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e26c      	b.n	8001988 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	f000 8087 	beq.w	80015ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014bc:	4b92      	ldr	r3, [pc, #584]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f003 030c 	and.w	r3, r3, #12
 80014c4:	2b04      	cmp	r3, #4
 80014c6:	d00c      	beq.n	80014e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014c8:	4b8f      	ldr	r3, [pc, #572]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f003 030c 	and.w	r3, r3, #12
 80014d0:	2b08      	cmp	r3, #8
 80014d2:	d112      	bne.n	80014fa <HAL_RCC_OscConfig+0x5e>
 80014d4:	4b8c      	ldr	r3, [pc, #560]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014e0:	d10b      	bne.n	80014fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014e2:	4b89      	ldr	r3, [pc, #548]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d06c      	beq.n	80015c8 <HAL_RCC_OscConfig+0x12c>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d168      	bne.n	80015c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e246      	b.n	8001988 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001502:	d106      	bne.n	8001512 <HAL_RCC_OscConfig+0x76>
 8001504:	4b80      	ldr	r3, [pc, #512]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a7f      	ldr	r2, [pc, #508]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 800150a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800150e:	6013      	str	r3, [r2, #0]
 8001510:	e02e      	b.n	8001570 <HAL_RCC_OscConfig+0xd4>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d10c      	bne.n	8001534 <HAL_RCC_OscConfig+0x98>
 800151a:	4b7b      	ldr	r3, [pc, #492]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a7a      	ldr	r2, [pc, #488]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 8001520:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001524:	6013      	str	r3, [r2, #0]
 8001526:	4b78      	ldr	r3, [pc, #480]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a77      	ldr	r2, [pc, #476]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 800152c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001530:	6013      	str	r3, [r2, #0]
 8001532:	e01d      	b.n	8001570 <HAL_RCC_OscConfig+0xd4>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800153c:	d10c      	bne.n	8001558 <HAL_RCC_OscConfig+0xbc>
 800153e:	4b72      	ldr	r3, [pc, #456]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a71      	ldr	r2, [pc, #452]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 8001544:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001548:	6013      	str	r3, [r2, #0]
 800154a:	4b6f      	ldr	r3, [pc, #444]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a6e      	ldr	r2, [pc, #440]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 8001550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001554:	6013      	str	r3, [r2, #0]
 8001556:	e00b      	b.n	8001570 <HAL_RCC_OscConfig+0xd4>
 8001558:	4b6b      	ldr	r3, [pc, #428]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a6a      	ldr	r2, [pc, #424]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 800155e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001562:	6013      	str	r3, [r2, #0]
 8001564:	4b68      	ldr	r3, [pc, #416]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a67      	ldr	r2, [pc, #412]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 800156a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800156e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d013      	beq.n	80015a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001578:	f7ff f8b0 	bl	80006dc <HAL_GetTick>
 800157c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800157e:	e008      	b.n	8001592 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001580:	f7ff f8ac 	bl	80006dc <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b64      	cmp	r3, #100	; 0x64
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e1fa      	b.n	8001988 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001592:	4b5d      	ldr	r3, [pc, #372]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d0f0      	beq.n	8001580 <HAL_RCC_OscConfig+0xe4>
 800159e:	e014      	b.n	80015ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a0:	f7ff f89c 	bl	80006dc <HAL_GetTick>
 80015a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015a6:	e008      	b.n	80015ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015a8:	f7ff f898 	bl	80006dc <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b64      	cmp	r3, #100	; 0x64
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e1e6      	b.n	8001988 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ba:	4b53      	ldr	r3, [pc, #332]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d1f0      	bne.n	80015a8 <HAL_RCC_OscConfig+0x10c>
 80015c6:	e000      	b.n	80015ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d063      	beq.n	800169e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015d6:	4b4c      	ldr	r3, [pc, #304]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f003 030c 	and.w	r3, r3, #12
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d00b      	beq.n	80015fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80015e2:	4b49      	ldr	r3, [pc, #292]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f003 030c 	and.w	r3, r3, #12
 80015ea:	2b08      	cmp	r3, #8
 80015ec:	d11c      	bne.n	8001628 <HAL_RCC_OscConfig+0x18c>
 80015ee:	4b46      	ldr	r3, [pc, #280]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d116      	bne.n	8001628 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015fa:	4b43      	ldr	r3, [pc, #268]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	2b00      	cmp	r3, #0
 8001604:	d005      	beq.n	8001612 <HAL_RCC_OscConfig+0x176>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	691b      	ldr	r3, [r3, #16]
 800160a:	2b01      	cmp	r3, #1
 800160c:	d001      	beq.n	8001612 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e1ba      	b.n	8001988 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001612:	4b3d      	ldr	r3, [pc, #244]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	695b      	ldr	r3, [r3, #20]
 800161e:	00db      	lsls	r3, r3, #3
 8001620:	4939      	ldr	r1, [pc, #228]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 8001622:	4313      	orrs	r3, r2
 8001624:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001626:	e03a      	b.n	800169e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	691b      	ldr	r3, [r3, #16]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d020      	beq.n	8001672 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001630:	4b36      	ldr	r3, [pc, #216]	; (800170c <HAL_RCC_OscConfig+0x270>)
 8001632:	2201      	movs	r2, #1
 8001634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001636:	f7ff f851 	bl	80006dc <HAL_GetTick>
 800163a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800163c:	e008      	b.n	8001650 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800163e:	f7ff f84d 	bl	80006dc <HAL_GetTick>
 8001642:	4602      	mov	r2, r0
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	2b02      	cmp	r3, #2
 800164a:	d901      	bls.n	8001650 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e19b      	b.n	8001988 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001650:	4b2d      	ldr	r3, [pc, #180]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0302 	and.w	r3, r3, #2
 8001658:	2b00      	cmp	r3, #0
 800165a:	d0f0      	beq.n	800163e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800165c:	4b2a      	ldr	r3, [pc, #168]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	695b      	ldr	r3, [r3, #20]
 8001668:	00db      	lsls	r3, r3, #3
 800166a:	4927      	ldr	r1, [pc, #156]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 800166c:	4313      	orrs	r3, r2
 800166e:	600b      	str	r3, [r1, #0]
 8001670:	e015      	b.n	800169e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001672:	4b26      	ldr	r3, [pc, #152]	; (800170c <HAL_RCC_OscConfig+0x270>)
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001678:	f7ff f830 	bl	80006dc <HAL_GetTick>
 800167c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001680:	f7ff f82c 	bl	80006dc <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b02      	cmp	r3, #2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e17a      	b.n	8001988 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001692:	4b1d      	ldr	r3, [pc, #116]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1f0      	bne.n	8001680 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0308 	and.w	r3, r3, #8
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d03a      	beq.n	8001720 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	699b      	ldr	r3, [r3, #24]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d019      	beq.n	80016e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016b2:	4b17      	ldr	r3, [pc, #92]	; (8001710 <HAL_RCC_OscConfig+0x274>)
 80016b4:	2201      	movs	r2, #1
 80016b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016b8:	f7ff f810 	bl	80006dc <HAL_GetTick>
 80016bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016c0:	f7ff f80c 	bl	80006dc <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e15a      	b.n	8001988 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016d2:	4b0d      	ldr	r3, [pc, #52]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 80016d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d0f0      	beq.n	80016c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80016de:	2001      	movs	r0, #1
 80016e0:	f000 fac4 	bl	8001c6c <RCC_Delay>
 80016e4:	e01c      	b.n	8001720 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016e6:	4b0a      	ldr	r3, [pc, #40]	; (8001710 <HAL_RCC_OscConfig+0x274>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ec:	f7fe fff6 	bl	80006dc <HAL_GetTick>
 80016f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016f2:	e00f      	b.n	8001714 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016f4:	f7fe fff2 	bl	80006dc <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d908      	bls.n	8001714 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e140      	b.n	8001988 <HAL_RCC_OscConfig+0x4ec>
 8001706:	bf00      	nop
 8001708:	40021000 	.word	0x40021000
 800170c:	42420000 	.word	0x42420000
 8001710:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001714:	4b9e      	ldr	r3, [pc, #632]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 8001716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001718:	f003 0302 	and.w	r3, r3, #2
 800171c:	2b00      	cmp	r3, #0
 800171e:	d1e9      	bne.n	80016f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0304 	and.w	r3, r3, #4
 8001728:	2b00      	cmp	r3, #0
 800172a:	f000 80a6 	beq.w	800187a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800172e:	2300      	movs	r3, #0
 8001730:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001732:	4b97      	ldr	r3, [pc, #604]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 8001734:	69db      	ldr	r3, [r3, #28]
 8001736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d10d      	bne.n	800175a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800173e:	4b94      	ldr	r3, [pc, #592]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 8001740:	69db      	ldr	r3, [r3, #28]
 8001742:	4a93      	ldr	r2, [pc, #588]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 8001744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001748:	61d3      	str	r3, [r2, #28]
 800174a:	4b91      	ldr	r3, [pc, #580]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 800174c:	69db      	ldr	r3, [r3, #28]
 800174e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001752:	60bb      	str	r3, [r7, #8]
 8001754:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001756:	2301      	movs	r3, #1
 8001758:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800175a:	4b8e      	ldr	r3, [pc, #568]	; (8001994 <HAL_RCC_OscConfig+0x4f8>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001762:	2b00      	cmp	r3, #0
 8001764:	d118      	bne.n	8001798 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001766:	4b8b      	ldr	r3, [pc, #556]	; (8001994 <HAL_RCC_OscConfig+0x4f8>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a8a      	ldr	r2, [pc, #552]	; (8001994 <HAL_RCC_OscConfig+0x4f8>)
 800176c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001770:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001772:	f7fe ffb3 	bl	80006dc <HAL_GetTick>
 8001776:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001778:	e008      	b.n	800178c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800177a:	f7fe ffaf 	bl	80006dc <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	2b64      	cmp	r3, #100	; 0x64
 8001786:	d901      	bls.n	800178c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e0fd      	b.n	8001988 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800178c:	4b81      	ldr	r3, [pc, #516]	; (8001994 <HAL_RCC_OscConfig+0x4f8>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001794:	2b00      	cmp	r3, #0
 8001796:	d0f0      	beq.n	800177a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d106      	bne.n	80017ae <HAL_RCC_OscConfig+0x312>
 80017a0:	4b7b      	ldr	r3, [pc, #492]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 80017a2:	6a1b      	ldr	r3, [r3, #32]
 80017a4:	4a7a      	ldr	r2, [pc, #488]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 80017a6:	f043 0301 	orr.w	r3, r3, #1
 80017aa:	6213      	str	r3, [r2, #32]
 80017ac:	e02d      	b.n	800180a <HAL_RCC_OscConfig+0x36e>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d10c      	bne.n	80017d0 <HAL_RCC_OscConfig+0x334>
 80017b6:	4b76      	ldr	r3, [pc, #472]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 80017b8:	6a1b      	ldr	r3, [r3, #32]
 80017ba:	4a75      	ldr	r2, [pc, #468]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 80017bc:	f023 0301 	bic.w	r3, r3, #1
 80017c0:	6213      	str	r3, [r2, #32]
 80017c2:	4b73      	ldr	r3, [pc, #460]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 80017c4:	6a1b      	ldr	r3, [r3, #32]
 80017c6:	4a72      	ldr	r2, [pc, #456]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 80017c8:	f023 0304 	bic.w	r3, r3, #4
 80017cc:	6213      	str	r3, [r2, #32]
 80017ce:	e01c      	b.n	800180a <HAL_RCC_OscConfig+0x36e>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	2b05      	cmp	r3, #5
 80017d6:	d10c      	bne.n	80017f2 <HAL_RCC_OscConfig+0x356>
 80017d8:	4b6d      	ldr	r3, [pc, #436]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 80017da:	6a1b      	ldr	r3, [r3, #32]
 80017dc:	4a6c      	ldr	r2, [pc, #432]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 80017de:	f043 0304 	orr.w	r3, r3, #4
 80017e2:	6213      	str	r3, [r2, #32]
 80017e4:	4b6a      	ldr	r3, [pc, #424]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 80017e6:	6a1b      	ldr	r3, [r3, #32]
 80017e8:	4a69      	ldr	r2, [pc, #420]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 80017ea:	f043 0301 	orr.w	r3, r3, #1
 80017ee:	6213      	str	r3, [r2, #32]
 80017f0:	e00b      	b.n	800180a <HAL_RCC_OscConfig+0x36e>
 80017f2:	4b67      	ldr	r3, [pc, #412]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 80017f4:	6a1b      	ldr	r3, [r3, #32]
 80017f6:	4a66      	ldr	r2, [pc, #408]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 80017f8:	f023 0301 	bic.w	r3, r3, #1
 80017fc:	6213      	str	r3, [r2, #32]
 80017fe:	4b64      	ldr	r3, [pc, #400]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 8001800:	6a1b      	ldr	r3, [r3, #32]
 8001802:	4a63      	ldr	r2, [pc, #396]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 8001804:	f023 0304 	bic.w	r3, r3, #4
 8001808:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d015      	beq.n	800183e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001812:	f7fe ff63 	bl	80006dc <HAL_GetTick>
 8001816:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001818:	e00a      	b.n	8001830 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800181a:	f7fe ff5f 	bl	80006dc <HAL_GetTick>
 800181e:	4602      	mov	r2, r0
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	f241 3288 	movw	r2, #5000	; 0x1388
 8001828:	4293      	cmp	r3, r2
 800182a:	d901      	bls.n	8001830 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800182c:	2303      	movs	r3, #3
 800182e:	e0ab      	b.n	8001988 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001830:	4b57      	ldr	r3, [pc, #348]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 8001832:	6a1b      	ldr	r3, [r3, #32]
 8001834:	f003 0302 	and.w	r3, r3, #2
 8001838:	2b00      	cmp	r3, #0
 800183a:	d0ee      	beq.n	800181a <HAL_RCC_OscConfig+0x37e>
 800183c:	e014      	b.n	8001868 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800183e:	f7fe ff4d 	bl	80006dc <HAL_GetTick>
 8001842:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001844:	e00a      	b.n	800185c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001846:	f7fe ff49 	bl	80006dc <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	f241 3288 	movw	r2, #5000	; 0x1388
 8001854:	4293      	cmp	r3, r2
 8001856:	d901      	bls.n	800185c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e095      	b.n	8001988 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800185c:	4b4c      	ldr	r3, [pc, #304]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 800185e:	6a1b      	ldr	r3, [r3, #32]
 8001860:	f003 0302 	and.w	r3, r3, #2
 8001864:	2b00      	cmp	r3, #0
 8001866:	d1ee      	bne.n	8001846 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001868:	7dfb      	ldrb	r3, [r7, #23]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d105      	bne.n	800187a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800186e:	4b48      	ldr	r3, [pc, #288]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 8001870:	69db      	ldr	r3, [r3, #28]
 8001872:	4a47      	ldr	r2, [pc, #284]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 8001874:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001878:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	2b00      	cmp	r3, #0
 8001880:	f000 8081 	beq.w	8001986 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001884:	4b42      	ldr	r3, [pc, #264]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f003 030c 	and.w	r3, r3, #12
 800188c:	2b08      	cmp	r3, #8
 800188e:	d061      	beq.n	8001954 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	69db      	ldr	r3, [r3, #28]
 8001894:	2b02      	cmp	r3, #2
 8001896:	d146      	bne.n	8001926 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001898:	4b3f      	ldr	r3, [pc, #252]	; (8001998 <HAL_RCC_OscConfig+0x4fc>)
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800189e:	f7fe ff1d 	bl	80006dc <HAL_GetTick>
 80018a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018a4:	e008      	b.n	80018b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018a6:	f7fe ff19 	bl	80006dc <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d901      	bls.n	80018b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e067      	b.n	8001988 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018b8:	4b35      	ldr	r3, [pc, #212]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d1f0      	bne.n	80018a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6a1b      	ldr	r3, [r3, #32]
 80018c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018cc:	d108      	bne.n	80018e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018ce:	4b30      	ldr	r3, [pc, #192]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	492d      	ldr	r1, [pc, #180]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 80018dc:	4313      	orrs	r3, r2
 80018de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018e0:	4b2b      	ldr	r3, [pc, #172]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6a19      	ldr	r1, [r3, #32]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f0:	430b      	orrs	r3, r1
 80018f2:	4927      	ldr	r1, [pc, #156]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 80018f4:	4313      	orrs	r3, r2
 80018f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018f8:	4b27      	ldr	r3, [pc, #156]	; (8001998 <HAL_RCC_OscConfig+0x4fc>)
 80018fa:	2201      	movs	r2, #1
 80018fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018fe:	f7fe feed 	bl	80006dc <HAL_GetTick>
 8001902:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001904:	e008      	b.n	8001918 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001906:	f7fe fee9 	bl	80006dc <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	2b02      	cmp	r3, #2
 8001912:	d901      	bls.n	8001918 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e037      	b.n	8001988 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001918:	4b1d      	ldr	r3, [pc, #116]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d0f0      	beq.n	8001906 <HAL_RCC_OscConfig+0x46a>
 8001924:	e02f      	b.n	8001986 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001926:	4b1c      	ldr	r3, [pc, #112]	; (8001998 <HAL_RCC_OscConfig+0x4fc>)
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800192c:	f7fe fed6 	bl	80006dc <HAL_GetTick>
 8001930:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001932:	e008      	b.n	8001946 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001934:	f7fe fed2 	bl	80006dc <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b02      	cmp	r3, #2
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e020      	b.n	8001988 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001946:	4b12      	ldr	r3, [pc, #72]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1f0      	bne.n	8001934 <HAL_RCC_OscConfig+0x498>
 8001952:	e018      	b.n	8001986 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	69db      	ldr	r3, [r3, #28]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d101      	bne.n	8001960 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e013      	b.n	8001988 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001960:	4b0b      	ldr	r3, [pc, #44]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a1b      	ldr	r3, [r3, #32]
 8001970:	429a      	cmp	r2, r3
 8001972:	d106      	bne.n	8001982 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800197e:	429a      	cmp	r2, r3
 8001980:	d001      	beq.n	8001986 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e000      	b.n	8001988 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001986:	2300      	movs	r3, #0
}
 8001988:	4618      	mov	r0, r3
 800198a:	3718      	adds	r7, #24
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40021000 	.word	0x40021000
 8001994:	40007000 	.word	0x40007000
 8001998:	42420060 	.word	0x42420060

0800199c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d101      	bne.n	80019b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e0d0      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019b0:	4b6a      	ldr	r3, [pc, #424]	; (8001b5c <HAL_RCC_ClockConfig+0x1c0>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0307 	and.w	r3, r3, #7
 80019b8:	683a      	ldr	r2, [r7, #0]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d910      	bls.n	80019e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019be:	4b67      	ldr	r3, [pc, #412]	; (8001b5c <HAL_RCC_ClockConfig+0x1c0>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f023 0207 	bic.w	r2, r3, #7
 80019c6:	4965      	ldr	r1, [pc, #404]	; (8001b5c <HAL_RCC_ClockConfig+0x1c0>)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ce:	4b63      	ldr	r3, [pc, #396]	; (8001b5c <HAL_RCC_ClockConfig+0x1c0>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0307 	and.w	r3, r3, #7
 80019d6:	683a      	ldr	r2, [r7, #0]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d001      	beq.n	80019e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e0b8      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0302 	and.w	r3, r3, #2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d020      	beq.n	8001a2e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0304 	and.w	r3, r3, #4
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d005      	beq.n	8001a04 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019f8:	4b59      	ldr	r3, [pc, #356]	; (8001b60 <HAL_RCC_ClockConfig+0x1c4>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	4a58      	ldr	r2, [pc, #352]	; (8001b60 <HAL_RCC_ClockConfig+0x1c4>)
 80019fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a02:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0308 	and.w	r3, r3, #8
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d005      	beq.n	8001a1c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a10:	4b53      	ldr	r3, [pc, #332]	; (8001b60 <HAL_RCC_ClockConfig+0x1c4>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	4a52      	ldr	r2, [pc, #328]	; (8001b60 <HAL_RCC_ClockConfig+0x1c4>)
 8001a16:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001a1a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a1c:	4b50      	ldr	r3, [pc, #320]	; (8001b60 <HAL_RCC_ClockConfig+0x1c4>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	494d      	ldr	r1, [pc, #308]	; (8001b60 <HAL_RCC_ClockConfig+0x1c4>)
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d040      	beq.n	8001abc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d107      	bne.n	8001a52 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a42:	4b47      	ldr	r3, [pc, #284]	; (8001b60 <HAL_RCC_ClockConfig+0x1c4>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d115      	bne.n	8001a7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e07f      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d107      	bne.n	8001a6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a5a:	4b41      	ldr	r3, [pc, #260]	; (8001b60 <HAL_RCC_ClockConfig+0x1c4>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d109      	bne.n	8001a7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e073      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a6a:	4b3d      	ldr	r3, [pc, #244]	; (8001b60 <HAL_RCC_ClockConfig+0x1c4>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d101      	bne.n	8001a7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e06b      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a7a:	4b39      	ldr	r3, [pc, #228]	; (8001b60 <HAL_RCC_ClockConfig+0x1c4>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f023 0203 	bic.w	r2, r3, #3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	4936      	ldr	r1, [pc, #216]	; (8001b60 <HAL_RCC_ClockConfig+0x1c4>)
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a8c:	f7fe fe26 	bl	80006dc <HAL_GetTick>
 8001a90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a92:	e00a      	b.n	8001aaa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a94:	f7fe fe22 	bl	80006dc <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e053      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aaa:	4b2d      	ldr	r3, [pc, #180]	; (8001b60 <HAL_RCC_ClockConfig+0x1c4>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f003 020c 	and.w	r2, r3, #12
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d1eb      	bne.n	8001a94 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001abc:	4b27      	ldr	r3, [pc, #156]	; (8001b5c <HAL_RCC_ClockConfig+0x1c0>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0307 	and.w	r3, r3, #7
 8001ac4:	683a      	ldr	r2, [r7, #0]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d210      	bcs.n	8001aec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aca:	4b24      	ldr	r3, [pc, #144]	; (8001b5c <HAL_RCC_ClockConfig+0x1c0>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f023 0207 	bic.w	r2, r3, #7
 8001ad2:	4922      	ldr	r1, [pc, #136]	; (8001b5c <HAL_RCC_ClockConfig+0x1c0>)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ada:	4b20      	ldr	r3, [pc, #128]	; (8001b5c <HAL_RCC_ClockConfig+0x1c0>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	683a      	ldr	r2, [r7, #0]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d001      	beq.n	8001aec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e032      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0304 	and.w	r3, r3, #4
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d008      	beq.n	8001b0a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001af8:	4b19      	ldr	r3, [pc, #100]	; (8001b60 <HAL_RCC_ClockConfig+0x1c4>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	4916      	ldr	r1, [pc, #88]	; (8001b60 <HAL_RCC_ClockConfig+0x1c4>)
 8001b06:	4313      	orrs	r3, r2
 8001b08:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0308 	and.w	r3, r3, #8
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d009      	beq.n	8001b2a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b16:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <HAL_RCC_ClockConfig+0x1c4>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	691b      	ldr	r3, [r3, #16]
 8001b22:	00db      	lsls	r3, r3, #3
 8001b24:	490e      	ldr	r1, [pc, #56]	; (8001b60 <HAL_RCC_ClockConfig+0x1c4>)
 8001b26:	4313      	orrs	r3, r2
 8001b28:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b2a:	f000 f821 	bl	8001b70 <HAL_RCC_GetSysClockFreq>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	4b0b      	ldr	r3, [pc, #44]	; (8001b60 <HAL_RCC_ClockConfig+0x1c4>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	091b      	lsrs	r3, r3, #4
 8001b36:	f003 030f 	and.w	r3, r3, #15
 8001b3a:	490a      	ldr	r1, [pc, #40]	; (8001b64 <HAL_RCC_ClockConfig+0x1c8>)
 8001b3c:	5ccb      	ldrb	r3, [r1, r3]
 8001b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b42:	4a09      	ldr	r2, [pc, #36]	; (8001b68 <HAL_RCC_ClockConfig+0x1cc>)
 8001b44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b46:	4b09      	ldr	r3, [pc, #36]	; (8001b6c <HAL_RCC_ClockConfig+0x1d0>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7fe fd84 	bl	8000658 <HAL_InitTick>

  return HAL_OK;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3710      	adds	r7, #16
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40022000 	.word	0x40022000
 8001b60:	40021000 	.word	0x40021000
 8001b64:	08002964 	.word	0x08002964
 8001b68:	20000028 	.word	0x20000028
 8001b6c:	2000002c 	.word	0x2000002c

08001b70 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b70:	b490      	push	{r4, r7}
 8001b72:	b08a      	sub	sp, #40	; 0x28
 8001b74:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001b76:	4b2a      	ldr	r3, [pc, #168]	; (8001c20 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001b78:	1d3c      	adds	r4, r7, #4
 8001b7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001b80:	f240 2301 	movw	r3, #513	; 0x201
 8001b84:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b86:	2300      	movs	r3, #0
 8001b88:	61fb      	str	r3, [r7, #28]
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	61bb      	str	r3, [r7, #24]
 8001b8e:	2300      	movs	r3, #0
 8001b90:	627b      	str	r3, [r7, #36]	; 0x24
 8001b92:	2300      	movs	r3, #0
 8001b94:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001b96:	2300      	movs	r3, #0
 8001b98:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b9a:	4b22      	ldr	r3, [pc, #136]	; (8001c24 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	f003 030c 	and.w	r3, r3, #12
 8001ba6:	2b04      	cmp	r3, #4
 8001ba8:	d002      	beq.n	8001bb0 <HAL_RCC_GetSysClockFreq+0x40>
 8001baa:	2b08      	cmp	r3, #8
 8001bac:	d003      	beq.n	8001bb6 <HAL_RCC_GetSysClockFreq+0x46>
 8001bae:	e02d      	b.n	8001c0c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001bb0:	4b1d      	ldr	r3, [pc, #116]	; (8001c28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bb2:	623b      	str	r3, [r7, #32]
      break;
 8001bb4:	e02d      	b.n	8001c12 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	0c9b      	lsrs	r3, r3, #18
 8001bba:	f003 030f 	and.w	r3, r3, #15
 8001bbe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001bc2:	4413      	add	r3, r2
 8001bc4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001bc8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d013      	beq.n	8001bfc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001bd4:	4b13      	ldr	r3, [pc, #76]	; (8001c24 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	0c5b      	lsrs	r3, r3, #17
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001be2:	4413      	add	r3, r2
 8001be4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001be8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	4a0e      	ldr	r2, [pc, #56]	; (8001c28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bee:	fb02 f203 	mul.w	r2, r2, r3
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf8:	627b      	str	r3, [r7, #36]	; 0x24
 8001bfa:	e004      	b.n	8001c06 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	4a0b      	ldr	r2, [pc, #44]	; (8001c2c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c00:	fb02 f303 	mul.w	r3, r2, r3
 8001c04:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c08:	623b      	str	r3, [r7, #32]
      break;
 8001c0a:	e002      	b.n	8001c12 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c0c:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c0e:	623b      	str	r3, [r7, #32]
      break;
 8001c10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c12:	6a3b      	ldr	r3, [r7, #32]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3728      	adds	r7, #40	; 0x28
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bc90      	pop	{r4, r7}
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	08002954 	.word	0x08002954
 8001c24:	40021000 	.word	0x40021000
 8001c28:	007a1200 	.word	0x007a1200
 8001c2c:	003d0900 	.word	0x003d0900

08001c30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c34:	4b02      	ldr	r3, [pc, #8]	; (8001c40 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c36:	681b      	ldr	r3, [r3, #0]
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bc80      	pop	{r7}
 8001c3e:	4770      	bx	lr
 8001c40:	20000028 	.word	0x20000028

08001c44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c48:	f7ff fff2 	bl	8001c30 <HAL_RCC_GetHCLKFreq>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	4b05      	ldr	r3, [pc, #20]	; (8001c64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	0a1b      	lsrs	r3, r3, #8
 8001c54:	f003 0307 	and.w	r3, r3, #7
 8001c58:	4903      	ldr	r1, [pc, #12]	; (8001c68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c5a:	5ccb      	ldrb	r3, [r1, r3]
 8001c5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40021000 	.word	0x40021000
 8001c68:	08002974 	.word	0x08002974

08001c6c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c74:	4b0a      	ldr	r3, [pc, #40]	; (8001ca0 <RCC_Delay+0x34>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a0a      	ldr	r2, [pc, #40]	; (8001ca4 <RCC_Delay+0x38>)
 8001c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c7e:	0a5b      	lsrs	r3, r3, #9
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	fb02 f303 	mul.w	r3, r2, r3
 8001c86:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c88:	bf00      	nop
  }
  while (Delay --);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	1e5a      	subs	r2, r3, #1
 8001c8e:	60fa      	str	r2, [r7, #12]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d1f9      	bne.n	8001c88 <RCC_Delay+0x1c>
}
 8001c94:	bf00      	nop
 8001c96:	bf00      	nop
 8001c98:	3714      	adds	r7, #20
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bc80      	pop	{r7}
 8001c9e:	4770      	bx	lr
 8001ca0:	20000028 	.word	0x20000028
 8001ca4:	10624dd3 	.word	0x10624dd3

08001ca8 <LCD_Init>:
#include "LCD_I2C.h"

void LCD_Init(LCD_I2C_HandleTypeDef *lcd, I2C_HandleTypeDef *hi2c, uint8_t cols, uint8_t rows, uint8_t SLAVE_ADDRESS){
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	4611      	mov	r1, r2
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	71fb      	strb	r3, [r7, #7]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	71bb      	strb	r3, [r7, #6]
	lcd->SLAVE_ADDRESS = SLAVE_ADDRESS;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	7e3a      	ldrb	r2, [r7, #24]
 8001cc2:	709a      	strb	r2, [r3, #2]
	lcd->LCD_Backlight_Value = LCD_NOBACKLIGHT;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	70da      	strb	r2, [r3, #3]
	lcd->LCD_Columns = cols;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	79fa      	ldrb	r2, [r7, #7]
 8001cce:	701a      	strb	r2, [r3, #0]
	lcd->LCD_Rows = rows;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	79ba      	ldrb	r2, [r7, #6]
 8001cd4:	705a      	strb	r2, [r3, #1]
	lcd->hi2c = hi2c;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	68ba      	ldr	r2, [r7, #8]
 8001cda:	609a      	str	r2, [r3, #8]
	lcd->LCD_Display_Option = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2204      	movs	r2, #4
 8001ce0:	711a      	strb	r2, [r3, #4]

	// 4 bit initialization
	HAL_Delay(50);  // wait for >40ms
 8001ce2:	2032      	movs	r0, #50	; 0x32
 8001ce4:	f7fe fd04 	bl	80006f0 <HAL_Delay>
	LCD_Send_Command(lcd, 0x30);
 8001ce8:	2130      	movs	r1, #48	; 0x30
 8001cea:	68f8      	ldr	r0, [r7, #12]
 8001cec:	f000 f921 	bl	8001f32 <LCD_Send_Command>
	HAL_Delay(5);  // wait for >4.1ms
 8001cf0:	2005      	movs	r0, #5
 8001cf2:	f7fe fcfd 	bl	80006f0 <HAL_Delay>
	LCD_Send_Command(lcd, 0x30);
 8001cf6:	2130      	movs	r1, #48	; 0x30
 8001cf8:	68f8      	ldr	r0, [r7, #12]
 8001cfa:	f000 f91a 	bl	8001f32 <LCD_Send_Command>
	HAL_Delay(1);  // wait for >100us
 8001cfe:	2001      	movs	r0, #1
 8001d00:	f7fe fcf6 	bl	80006f0 <HAL_Delay>
	LCD_Send_Command(lcd, 0x30);
 8001d04:	2130      	movs	r1, #48	; 0x30
 8001d06:	68f8      	ldr	r0, [r7, #12]
 8001d08:	f000 f913 	bl	8001f32 <LCD_Send_Command>
	HAL_Delay(10);
 8001d0c:	200a      	movs	r0, #10
 8001d0e:	f7fe fcef 	bl	80006f0 <HAL_Delay>
	LCD_Send_Command(lcd, 0x20);  // 4bit mode
 8001d12:	2120      	movs	r1, #32
 8001d14:	68f8      	ldr	r0, [r7, #12]
 8001d16:	f000 f90c 	bl	8001f32 <LCD_Send_Command>
	HAL_Delay(10);
 8001d1a:	200a      	movs	r0, #10
 8001d1c:	f7fe fce8 	bl	80006f0 <HAL_Delay>

	// Display initialization
	LCD_Send_Command(lcd, 0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001d20:	2128      	movs	r1, #40	; 0x28
 8001d22:	68f8      	ldr	r0, [r7, #12]
 8001d24:	f000 f905 	bl	8001f32 <LCD_Send_Command>
	HAL_Delay(1);
 8001d28:	2001      	movs	r0, #1
 8001d2a:	f7fe fce1 	bl	80006f0 <HAL_Delay>
	LCD_Send_Command(lcd, 0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001d2e:	2108      	movs	r1, #8
 8001d30:	68f8      	ldr	r0, [r7, #12]
 8001d32:	f000 f8fe 	bl	8001f32 <LCD_Send_Command>
	HAL_Delay(1);
 8001d36:	2001      	movs	r0, #1
 8001d38:	f7fe fcda 	bl	80006f0 <HAL_Delay>
	LCD_Send_Command(lcd, 0x01);  // clear display
 8001d3c:	2101      	movs	r1, #1
 8001d3e:	68f8      	ldr	r0, [r7, #12]
 8001d40:	f000 f8f7 	bl	8001f32 <LCD_Send_Command>
	HAL_Delay(1);
 8001d44:	2001      	movs	r0, #1
 8001d46:	f7fe fcd3 	bl	80006f0 <HAL_Delay>
	HAL_Delay(1);
 8001d4a:	2001      	movs	r0, #1
 8001d4c:	f7fe fcd0 	bl	80006f0 <HAL_Delay>
	LCD_Send_Command(lcd, 0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001d50:	2106      	movs	r1, #6
 8001d52:	68f8      	ldr	r0, [r7, #12]
 8001d54:	f000 f8ed 	bl	8001f32 <LCD_Send_Command>
	HAL_Delay(1);
 8001d58:	2001      	movs	r0, #1
 8001d5a:	f7fe fcc9 	bl	80006f0 <HAL_Delay>
	LCD_Send_Command(lcd, LCD_DISPLAYCONTROL | lcd->LCD_Display_Option); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	791b      	ldrb	r3, [r3, #4]
 8001d62:	f043 0308 	orr.w	r3, r3, #8
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	4619      	mov	r1, r3
 8001d6a:	68f8      	ldr	r0, [r7, #12]
 8001d6c:	f000 f8e1 	bl	8001f32 <LCD_Send_Command>
}
 8001d70:	bf00      	nop
 8001d72:	3710      	adds	r7, #16
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <LCD_Write>:

void LCD_Write(LCD_I2C_HandleTypeDef *lcd, const char *str, ...){
 8001d78:	b40e      	push	{r1, r2, r3}
 8001d7a:	b5b0      	push	{r4, r5, r7, lr}
 8001d7c:	b087      	sub	sp, #28
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
 8001d82:	466b      	mov	r3, sp
 8001d84:	461d      	mov	r5, r3
	char stringArray[lcd->LCD_Columns];
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	781c      	ldrb	r4, [r3, #0]
 8001d8a:	4623      	mov	r3, r4
 8001d8c:	3b01      	subs	r3, #1
 8001d8e:	613b      	str	r3, [r7, #16]
 8001d90:	b2e0      	uxtb	r0, r4
 8001d92:	f04f 0100 	mov.w	r1, #0
 8001d96:	f04f 0200 	mov.w	r2, #0
 8001d9a:	f04f 0300 	mov.w	r3, #0
 8001d9e:	00cb      	lsls	r3, r1, #3
 8001da0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001da4:	00c2      	lsls	r2, r0, #3
 8001da6:	b2e0      	uxtb	r0, r4
 8001da8:	f04f 0100 	mov.w	r1, #0
 8001dac:	f04f 0200 	mov.w	r2, #0
 8001db0:	f04f 0300 	mov.w	r3, #0
 8001db4:	00cb      	lsls	r3, r1, #3
 8001db6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001dba:	00c2      	lsls	r2, r0, #3
 8001dbc:	4623      	mov	r3, r4
 8001dbe:	3307      	adds	r3, #7
 8001dc0:	08db      	lsrs	r3, r3, #3
 8001dc2:	00db      	lsls	r3, r3, #3
 8001dc4:	ebad 0d03 	sub.w	sp, sp, r3
 8001dc8:	466b      	mov	r3, sp
 8001dca:	3300      	adds	r3, #0
 8001dcc:	60fb      	str	r3, [r7, #12]

	va_list args;
	va_start(args, str);
 8001dce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001dd2:	60bb      	str	r3, [r7, #8]
	vsprintf(stringArray, str, args);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	68ba      	ldr	r2, [r7, #8]
 8001dd8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f000 f96e 	bl	80020bc <vsiprintf>
	va_end(args);

	for(int i = 0; i < strlen(stringArray) && i < lcd->LCD_Columns; i++){
 8001de0:	2300      	movs	r3, #0
 8001de2:	617b      	str	r3, [r7, #20]
 8001de4:	e00a      	b.n	8001dfc <LCD_Write+0x84>
		LCD_Send_Data(lcd, stringArray[i]);
 8001de6:	68fa      	ldr	r2, [r7, #12]
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	4413      	add	r3, r2
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	4619      	mov	r1, r3
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f000 f8d9 	bl	8001fa8 <LCD_Send_Data>
	for(int i = 0; i < strlen(stringArray) && i < lcd->LCD_Columns; i++){
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	3301      	adds	r3, #1
 8001dfa:	617b      	str	r3, [r7, #20]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7fe f9a4 	bl	800014c <strlen>
 8001e04:	4602      	mov	r2, r0
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d905      	bls.n	8001e18 <LCD_Write+0xa0>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	461a      	mov	r2, r3
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	4293      	cmp	r3, r2
 8001e16:	dbe6      	blt.n	8001de6 <LCD_Write+0x6e>
 8001e18:	46ad      	mov	sp, r5
	}
}
 8001e1a:	bf00      	nop
 8001e1c:	371c      	adds	r7, #28
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001e24:	b003      	add	sp, #12
 8001e26:	4770      	bx	lr

08001e28 <LCD_Write_Custom_Char>:

void LCD_Write_Custom_Char(LCD_I2C_HandleTypeDef *lcd, char location){
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	460b      	mov	r3, r1
 8001e32:	70fb      	strb	r3, [r7, #3]
	LCD_Send_Data(lcd, location);
 8001e34:	78fb      	ldrb	r3, [r7, #3]
 8001e36:	4619      	mov	r1, r3
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f000 f8b5 	bl	8001fa8 <LCD_Send_Data>
}
 8001e3e:	bf00      	nop
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <LCD_clear>:

void LCD_clear(LCD_I2C_HandleTypeDef *lcd){
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b082      	sub	sp, #8
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
	LCD_Send_Command(lcd, LCD_CLEARDISPLAY);
 8001e4e:	2101      	movs	r1, #1
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f000 f86e 	bl	8001f32 <LCD_Send_Command>
	HAL_Delay(2);
 8001e56:	2002      	movs	r0, #2
 8001e58:	f7fe fc4a 	bl	80006f0 <HAL_Delay>
}
 8001e5c:	bf00      	nop
 8001e5e:	3708      	adds	r7, #8
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <LCD_Set_Cursor>:

void LCD_Set_Cursor(LCD_I2C_HandleTypeDef *lcd, uint8_t col, uint8_t row){
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	70fb      	strb	r3, [r7, #3]
 8001e70:	4613      	mov	r3, r2
 8001e72:	70bb      	strb	r3, [r7, #2]
	uint8_t row_Offets[] = {0x00, 0x40, 0x14, 0x54};
 8001e74:	4b10      	ldr	r3, [pc, #64]	; (8001eb8 <LCD_Set_Cursor+0x54>)
 8001e76:	60fb      	str	r3, [r7, #12]
	if(row > lcd->LCD_Rows) row = lcd->LCD_Rows - 1;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	785b      	ldrb	r3, [r3, #1]
 8001e7c:	78ba      	ldrb	r2, [r7, #2]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d903      	bls.n	8001e8a <LCD_Set_Cursor+0x26>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	785b      	ldrb	r3, [r3, #1]
 8001e86:	3b01      	subs	r3, #1
 8001e88:	70bb      	strb	r3, [r7, #2]
	LCD_Send_Command(lcd, LCD_SETDDRAMADDR | (col + row_Offets[row]));
 8001e8a:	78bb      	ldrb	r3, [r7, #2]
 8001e8c:	f107 0210 	add.w	r2, r7, #16
 8001e90:	4413      	add	r3, r2
 8001e92:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 8001e96:	78fb      	ldrb	r3, [r7, #3]
 8001e98:	4413      	add	r3, r2
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	b25b      	sxtb	r3, r3
 8001e9e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ea2:	b25b      	sxtb	r3, r3
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f000 f842 	bl	8001f32 <LCD_Send_Command>
}
 8001eae:	bf00      	nop
 8001eb0:	3710      	adds	r7, #16
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	54144000 	.word	0x54144000

08001ebc <LCD_Create_Char>:

void LCD_Create_Char(LCD_I2C_HandleTypeDef *lcd, uint8_t location, uint8_t charMap[]){
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	607a      	str	r2, [r7, #4]
 8001ec8:	72fb      	strb	r3, [r7, #11]
	location &= 7; // only have 8 locations 0-7.
 8001eca:	7afb      	ldrb	r3, [r7, #11]
 8001ecc:	f003 0307 	and.w	r3, r3, #7
 8001ed0:	72fb      	strb	r3, [r7, #11]
	location <<= 3;
 8001ed2:	7afb      	ldrb	r3, [r7, #11]
 8001ed4:	00db      	lsls	r3, r3, #3
 8001ed6:	72fb      	strb	r3, [r7, #11]
	LCD_Send_Command(lcd, LCD_SETCGRAMADDR | location);
 8001ed8:	7afb      	ldrb	r3, [r7, #11]
 8001eda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	68f8      	ldr	r0, [r7, #12]
 8001ee4:	f000 f825 	bl	8001f32 <LCD_Send_Command>
	for(int i = 0; i < 8; i++) LCD_Send_Data(lcd, charMap[i]);
 8001ee8:	2300      	movs	r3, #0
 8001eea:	617b      	str	r3, [r7, #20]
 8001eec:	e00a      	b.n	8001f04 <LCD_Create_Char+0x48>
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	68f8      	ldr	r0, [r7, #12]
 8001efa:	f000 f855 	bl	8001fa8 <LCD_Send_Data>
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	3301      	adds	r3, #1
 8001f02:	617b      	str	r3, [r7, #20]
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	2b07      	cmp	r3, #7
 8001f08:	ddf1      	ble.n	8001eee <LCD_Create_Char+0x32>
}
 8001f0a:	bf00      	nop
 8001f0c:	bf00      	nop
 8001f0e:	3718      	adds	r7, #24
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <LCD_Backlight>:

void LCD_Backlight(LCD_I2C_HandleTypeDef *lcd){
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
	lcd->LCD_Backlight_Value = LCD_BACKLIGHT;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2208      	movs	r2, #8
 8001f20:	70da      	strb	r2, [r3, #3]
	LCD_Send_Command(lcd, 0);
 8001f22:	2100      	movs	r1, #0
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f000 f804 	bl	8001f32 <LCD_Send_Command>
}
 8001f2a:	bf00      	nop
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <LCD_Send_Command>:
void LCD_Display_Off(LCD_I2C_HandleTypeDef *lcd){
	lcd->LCD_Display_Option &= ~LCD_DISPLAYON;
	LCD_Send_Command(lcd, LCD_DISPLAYCONTROL | lcd->LCD_Display_Option);
}

void LCD_Send_Command(LCD_I2C_HandleTypeDef *lcd, char cmd){
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b086      	sub	sp, #24
 8001f36:	af02      	add	r7, sp, #8
 8001f38:	6078      	str	r0, [r7, #4]
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	70fb      	strb	r3, [r7, #3]
	char data_H, data_L;
	uint8_t I2C_Bufer[4];
	data_H = cmd & 0xF0;
 8001f3e:	78fb      	ldrb	r3, [r7, #3]
 8001f40:	f023 030f 	bic.w	r3, r3, #15
 8001f44:	73fb      	strb	r3, [r7, #15]
	data_L = (cmd << 4) & 0xF0;
 8001f46:	78fb      	ldrb	r3, [r7, #3]
 8001f48:	011b      	lsls	r3, r3, #4
 8001f4a:	73bb      	strb	r3, [r7, #14]

	I2C_Bufer[0] = data_H | lcd->LCD_Backlight_Value | En;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	78da      	ldrb	r2, [r3, #3]
 8001f50:	7bfb      	ldrb	r3, [r7, #15]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	f043 0304 	orr.w	r3, r3, #4
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	723b      	strb	r3, [r7, #8]
	I2C_Bufer[1] = data_H | lcd->LCD_Backlight_Value;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	78da      	ldrb	r2, [r3, #3]
 8001f62:	7bfb      	ldrb	r3, [r7, #15]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	727b      	strb	r3, [r7, #9]
	I2C_Bufer[2] = data_L | lcd->LCD_Backlight_Value | En;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	78da      	ldrb	r2, [r3, #3]
 8001f6e:	7bbb      	ldrb	r3, [r7, #14]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	f043 0304 	orr.w	r3, r3, #4
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	72bb      	strb	r3, [r7, #10]
	I2C_Bufer[3] = data_L | lcd->LCD_Backlight_Value;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	78da      	ldrb	r2, [r3, #3]
 8001f80:	7bbb      	ldrb	r3, [r7, #14]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->SLAVE_ADDRESS, I2C_Bufer, 4, 100);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6898      	ldr	r0, [r3, #8]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	789b      	ldrb	r3, [r3, #2]
 8001f90:	b299      	uxth	r1, r3
 8001f92:	f107 0208 	add.w	r2, r7, #8
 8001f96:	2364      	movs	r3, #100	; 0x64
 8001f98:	9300      	str	r3, [sp, #0]
 8001f9a:	2304      	movs	r3, #4
 8001f9c:	f7fe ff78 	bl	8000e90 <HAL_I2C_Master_Transmit>
}
 8001fa0:	bf00      	nop
 8001fa2:	3710      	adds	r7, #16
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <LCD_Send_Data>:

void LCD_Send_Data(LCD_I2C_HandleTypeDef *lcd, char data){
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b086      	sub	sp, #24
 8001fac:	af02      	add	r7, sp, #8
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	70fb      	strb	r3, [r7, #3]
	char data_H, data_L;
	uint8_t I2C_Bufer[4];
	data_H = data & 0xF0;
 8001fb4:	78fb      	ldrb	r3, [r7, #3]
 8001fb6:	f023 030f 	bic.w	r3, r3, #15
 8001fba:	73fb      	strb	r3, [r7, #15]
	data_L = (data << 4) & 0xF0;
 8001fbc:	78fb      	ldrb	r3, [r7, #3]
 8001fbe:	011b      	lsls	r3, r3, #4
 8001fc0:	73bb      	strb	r3, [r7, #14]

	I2C_Bufer[0] = data_H | lcd->LCD_Backlight_Value | En | Rs;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	78da      	ldrb	r2, [r3, #3]
 8001fc6:	7bfb      	ldrb	r3, [r7, #15]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	f043 0305 	orr.w	r3, r3, #5
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	723b      	strb	r3, [r7, #8]
	I2C_Bufer[1] = data_H | lcd->LCD_Backlight_Value | Rs;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	78da      	ldrb	r2, [r3, #3]
 8001fd8:	7bfb      	ldrb	r3, [r7, #15]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	f043 0301 	orr.w	r3, r3, #1
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	727b      	strb	r3, [r7, #9]
	I2C_Bufer[2] = data_L | lcd->LCD_Backlight_Value | En | Rs;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	78da      	ldrb	r2, [r3, #3]
 8001fea:	7bbb      	ldrb	r3, [r7, #14]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	f043 0305 	orr.w	r3, r3, #5
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	72bb      	strb	r3, [r7, #10]
	I2C_Bufer[3] = data_L | lcd->LCD_Backlight_Value | Rs;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	78da      	ldrb	r2, [r3, #3]
 8001ffc:	7bbb      	ldrb	r3, [r7, #14]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	b2db      	uxtb	r3, r3
 8002002:	f043 0301 	orr.w	r3, r3, #1
 8002006:	b2db      	uxtb	r3, r3
 8002008:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(lcd->hi2c, lcd->SLAVE_ADDRESS, I2C_Bufer, 4, 100);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6898      	ldr	r0, [r3, #8]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	789b      	ldrb	r3, [r3, #2]
 8002012:	b299      	uxth	r1, r3
 8002014:	f107 0208 	add.w	r2, r7, #8
 8002018:	2364      	movs	r3, #100	; 0x64
 800201a:	9300      	str	r3, [sp, #0]
 800201c:	2304      	movs	r3, #4
 800201e:	f7fe ff37 	bl	8000e90 <HAL_I2C_Master_Transmit>
}
 8002022:	bf00      	nop
 8002024:	3710      	adds	r7, #16
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
	...

0800202c <__errno>:
 800202c:	4b01      	ldr	r3, [pc, #4]	; (8002034 <__errno+0x8>)
 800202e:	6818      	ldr	r0, [r3, #0]
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	20000034 	.word	0x20000034

08002038 <__libc_init_array>:
 8002038:	b570      	push	{r4, r5, r6, lr}
 800203a:	2600      	movs	r6, #0
 800203c:	4d0c      	ldr	r5, [pc, #48]	; (8002070 <__libc_init_array+0x38>)
 800203e:	4c0d      	ldr	r4, [pc, #52]	; (8002074 <__libc_init_array+0x3c>)
 8002040:	1b64      	subs	r4, r4, r5
 8002042:	10a4      	asrs	r4, r4, #2
 8002044:	42a6      	cmp	r6, r4
 8002046:	d109      	bne.n	800205c <__libc_init_array+0x24>
 8002048:	f000 fc5c 	bl	8002904 <_init>
 800204c:	2600      	movs	r6, #0
 800204e:	4d0a      	ldr	r5, [pc, #40]	; (8002078 <__libc_init_array+0x40>)
 8002050:	4c0a      	ldr	r4, [pc, #40]	; (800207c <__libc_init_array+0x44>)
 8002052:	1b64      	subs	r4, r4, r5
 8002054:	10a4      	asrs	r4, r4, #2
 8002056:	42a6      	cmp	r6, r4
 8002058:	d105      	bne.n	8002066 <__libc_init_array+0x2e>
 800205a:	bd70      	pop	{r4, r5, r6, pc}
 800205c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002060:	4798      	blx	r3
 8002062:	3601      	adds	r6, #1
 8002064:	e7ee      	b.n	8002044 <__libc_init_array+0xc>
 8002066:	f855 3b04 	ldr.w	r3, [r5], #4
 800206a:	4798      	blx	r3
 800206c:	3601      	adds	r6, #1
 800206e:	e7f2      	b.n	8002056 <__libc_init_array+0x1e>
 8002070:	080029b0 	.word	0x080029b0
 8002074:	080029b0 	.word	0x080029b0
 8002078:	080029b0 	.word	0x080029b0
 800207c:	080029b4 	.word	0x080029b4

08002080 <memset>:
 8002080:	4603      	mov	r3, r0
 8002082:	4402      	add	r2, r0
 8002084:	4293      	cmp	r3, r2
 8002086:	d100      	bne.n	800208a <memset+0xa>
 8002088:	4770      	bx	lr
 800208a:	f803 1b01 	strb.w	r1, [r3], #1
 800208e:	e7f9      	b.n	8002084 <memset+0x4>

08002090 <_vsiprintf_r>:
 8002090:	b500      	push	{lr}
 8002092:	b09b      	sub	sp, #108	; 0x6c
 8002094:	9100      	str	r1, [sp, #0]
 8002096:	9104      	str	r1, [sp, #16]
 8002098:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800209c:	9105      	str	r1, [sp, #20]
 800209e:	9102      	str	r1, [sp, #8]
 80020a0:	4905      	ldr	r1, [pc, #20]	; (80020b8 <_vsiprintf_r+0x28>)
 80020a2:	9103      	str	r1, [sp, #12]
 80020a4:	4669      	mov	r1, sp
 80020a6:	f000 f86f 	bl	8002188 <_svfiprintf_r>
 80020aa:	2200      	movs	r2, #0
 80020ac:	9b00      	ldr	r3, [sp, #0]
 80020ae:	701a      	strb	r2, [r3, #0]
 80020b0:	b01b      	add	sp, #108	; 0x6c
 80020b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80020b6:	bf00      	nop
 80020b8:	ffff0208 	.word	0xffff0208

080020bc <vsiprintf>:
 80020bc:	4613      	mov	r3, r2
 80020be:	460a      	mov	r2, r1
 80020c0:	4601      	mov	r1, r0
 80020c2:	4802      	ldr	r0, [pc, #8]	; (80020cc <vsiprintf+0x10>)
 80020c4:	6800      	ldr	r0, [r0, #0]
 80020c6:	f7ff bfe3 	b.w	8002090 <_vsiprintf_r>
 80020ca:	bf00      	nop
 80020cc:	20000034 	.word	0x20000034

080020d0 <__ssputs_r>:
 80020d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80020d4:	688e      	ldr	r6, [r1, #8]
 80020d6:	4682      	mov	sl, r0
 80020d8:	429e      	cmp	r6, r3
 80020da:	460c      	mov	r4, r1
 80020dc:	4690      	mov	r8, r2
 80020de:	461f      	mov	r7, r3
 80020e0:	d838      	bhi.n	8002154 <__ssputs_r+0x84>
 80020e2:	898a      	ldrh	r2, [r1, #12]
 80020e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80020e8:	d032      	beq.n	8002150 <__ssputs_r+0x80>
 80020ea:	6825      	ldr	r5, [r4, #0]
 80020ec:	6909      	ldr	r1, [r1, #16]
 80020ee:	3301      	adds	r3, #1
 80020f0:	eba5 0901 	sub.w	r9, r5, r1
 80020f4:	6965      	ldr	r5, [r4, #20]
 80020f6:	444b      	add	r3, r9
 80020f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80020fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002100:	106d      	asrs	r5, r5, #1
 8002102:	429d      	cmp	r5, r3
 8002104:	bf38      	it	cc
 8002106:	461d      	movcc	r5, r3
 8002108:	0553      	lsls	r3, r2, #21
 800210a:	d531      	bpl.n	8002170 <__ssputs_r+0xa0>
 800210c:	4629      	mov	r1, r5
 800210e:	f000 fb53 	bl	80027b8 <_malloc_r>
 8002112:	4606      	mov	r6, r0
 8002114:	b950      	cbnz	r0, 800212c <__ssputs_r+0x5c>
 8002116:	230c      	movs	r3, #12
 8002118:	f04f 30ff 	mov.w	r0, #4294967295
 800211c:	f8ca 3000 	str.w	r3, [sl]
 8002120:	89a3      	ldrh	r3, [r4, #12]
 8002122:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002126:	81a3      	strh	r3, [r4, #12]
 8002128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800212c:	464a      	mov	r2, r9
 800212e:	6921      	ldr	r1, [r4, #16]
 8002130:	f000 face 	bl	80026d0 <memcpy>
 8002134:	89a3      	ldrh	r3, [r4, #12]
 8002136:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800213a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800213e:	81a3      	strh	r3, [r4, #12]
 8002140:	6126      	str	r6, [r4, #16]
 8002142:	444e      	add	r6, r9
 8002144:	6026      	str	r6, [r4, #0]
 8002146:	463e      	mov	r6, r7
 8002148:	6165      	str	r5, [r4, #20]
 800214a:	eba5 0509 	sub.w	r5, r5, r9
 800214e:	60a5      	str	r5, [r4, #8]
 8002150:	42be      	cmp	r6, r7
 8002152:	d900      	bls.n	8002156 <__ssputs_r+0x86>
 8002154:	463e      	mov	r6, r7
 8002156:	4632      	mov	r2, r6
 8002158:	4641      	mov	r1, r8
 800215a:	6820      	ldr	r0, [r4, #0]
 800215c:	f000 fac6 	bl	80026ec <memmove>
 8002160:	68a3      	ldr	r3, [r4, #8]
 8002162:	6822      	ldr	r2, [r4, #0]
 8002164:	1b9b      	subs	r3, r3, r6
 8002166:	4432      	add	r2, r6
 8002168:	2000      	movs	r0, #0
 800216a:	60a3      	str	r3, [r4, #8]
 800216c:	6022      	str	r2, [r4, #0]
 800216e:	e7db      	b.n	8002128 <__ssputs_r+0x58>
 8002170:	462a      	mov	r2, r5
 8002172:	f000 fb7b 	bl	800286c <_realloc_r>
 8002176:	4606      	mov	r6, r0
 8002178:	2800      	cmp	r0, #0
 800217a:	d1e1      	bne.n	8002140 <__ssputs_r+0x70>
 800217c:	4650      	mov	r0, sl
 800217e:	6921      	ldr	r1, [r4, #16]
 8002180:	f000 face 	bl	8002720 <_free_r>
 8002184:	e7c7      	b.n	8002116 <__ssputs_r+0x46>
	...

08002188 <_svfiprintf_r>:
 8002188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800218c:	4698      	mov	r8, r3
 800218e:	898b      	ldrh	r3, [r1, #12]
 8002190:	4607      	mov	r7, r0
 8002192:	061b      	lsls	r3, r3, #24
 8002194:	460d      	mov	r5, r1
 8002196:	4614      	mov	r4, r2
 8002198:	b09d      	sub	sp, #116	; 0x74
 800219a:	d50e      	bpl.n	80021ba <_svfiprintf_r+0x32>
 800219c:	690b      	ldr	r3, [r1, #16]
 800219e:	b963      	cbnz	r3, 80021ba <_svfiprintf_r+0x32>
 80021a0:	2140      	movs	r1, #64	; 0x40
 80021a2:	f000 fb09 	bl	80027b8 <_malloc_r>
 80021a6:	6028      	str	r0, [r5, #0]
 80021a8:	6128      	str	r0, [r5, #16]
 80021aa:	b920      	cbnz	r0, 80021b6 <_svfiprintf_r+0x2e>
 80021ac:	230c      	movs	r3, #12
 80021ae:	603b      	str	r3, [r7, #0]
 80021b0:	f04f 30ff 	mov.w	r0, #4294967295
 80021b4:	e0d1      	b.n	800235a <_svfiprintf_r+0x1d2>
 80021b6:	2340      	movs	r3, #64	; 0x40
 80021b8:	616b      	str	r3, [r5, #20]
 80021ba:	2300      	movs	r3, #0
 80021bc:	9309      	str	r3, [sp, #36]	; 0x24
 80021be:	2320      	movs	r3, #32
 80021c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80021c4:	2330      	movs	r3, #48	; 0x30
 80021c6:	f04f 0901 	mov.w	r9, #1
 80021ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80021ce:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002374 <_svfiprintf_r+0x1ec>
 80021d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80021d6:	4623      	mov	r3, r4
 80021d8:	469a      	mov	sl, r3
 80021da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80021de:	b10a      	cbz	r2, 80021e4 <_svfiprintf_r+0x5c>
 80021e0:	2a25      	cmp	r2, #37	; 0x25
 80021e2:	d1f9      	bne.n	80021d8 <_svfiprintf_r+0x50>
 80021e4:	ebba 0b04 	subs.w	fp, sl, r4
 80021e8:	d00b      	beq.n	8002202 <_svfiprintf_r+0x7a>
 80021ea:	465b      	mov	r3, fp
 80021ec:	4622      	mov	r2, r4
 80021ee:	4629      	mov	r1, r5
 80021f0:	4638      	mov	r0, r7
 80021f2:	f7ff ff6d 	bl	80020d0 <__ssputs_r>
 80021f6:	3001      	adds	r0, #1
 80021f8:	f000 80aa 	beq.w	8002350 <_svfiprintf_r+0x1c8>
 80021fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80021fe:	445a      	add	r2, fp
 8002200:	9209      	str	r2, [sp, #36]	; 0x24
 8002202:	f89a 3000 	ldrb.w	r3, [sl]
 8002206:	2b00      	cmp	r3, #0
 8002208:	f000 80a2 	beq.w	8002350 <_svfiprintf_r+0x1c8>
 800220c:	2300      	movs	r3, #0
 800220e:	f04f 32ff 	mov.w	r2, #4294967295
 8002212:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002216:	f10a 0a01 	add.w	sl, sl, #1
 800221a:	9304      	str	r3, [sp, #16]
 800221c:	9307      	str	r3, [sp, #28]
 800221e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002222:	931a      	str	r3, [sp, #104]	; 0x68
 8002224:	4654      	mov	r4, sl
 8002226:	2205      	movs	r2, #5
 8002228:	f814 1b01 	ldrb.w	r1, [r4], #1
 800222c:	4851      	ldr	r0, [pc, #324]	; (8002374 <_svfiprintf_r+0x1ec>)
 800222e:	f000 fa41 	bl	80026b4 <memchr>
 8002232:	9a04      	ldr	r2, [sp, #16]
 8002234:	b9d8      	cbnz	r0, 800226e <_svfiprintf_r+0xe6>
 8002236:	06d0      	lsls	r0, r2, #27
 8002238:	bf44      	itt	mi
 800223a:	2320      	movmi	r3, #32
 800223c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002240:	0711      	lsls	r1, r2, #28
 8002242:	bf44      	itt	mi
 8002244:	232b      	movmi	r3, #43	; 0x2b
 8002246:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800224a:	f89a 3000 	ldrb.w	r3, [sl]
 800224e:	2b2a      	cmp	r3, #42	; 0x2a
 8002250:	d015      	beq.n	800227e <_svfiprintf_r+0xf6>
 8002252:	4654      	mov	r4, sl
 8002254:	2000      	movs	r0, #0
 8002256:	f04f 0c0a 	mov.w	ip, #10
 800225a:	9a07      	ldr	r2, [sp, #28]
 800225c:	4621      	mov	r1, r4
 800225e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002262:	3b30      	subs	r3, #48	; 0x30
 8002264:	2b09      	cmp	r3, #9
 8002266:	d94e      	bls.n	8002306 <_svfiprintf_r+0x17e>
 8002268:	b1b0      	cbz	r0, 8002298 <_svfiprintf_r+0x110>
 800226a:	9207      	str	r2, [sp, #28]
 800226c:	e014      	b.n	8002298 <_svfiprintf_r+0x110>
 800226e:	eba0 0308 	sub.w	r3, r0, r8
 8002272:	fa09 f303 	lsl.w	r3, r9, r3
 8002276:	4313      	orrs	r3, r2
 8002278:	46a2      	mov	sl, r4
 800227a:	9304      	str	r3, [sp, #16]
 800227c:	e7d2      	b.n	8002224 <_svfiprintf_r+0x9c>
 800227e:	9b03      	ldr	r3, [sp, #12]
 8002280:	1d19      	adds	r1, r3, #4
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	9103      	str	r1, [sp, #12]
 8002286:	2b00      	cmp	r3, #0
 8002288:	bfbb      	ittet	lt
 800228a:	425b      	neglt	r3, r3
 800228c:	f042 0202 	orrlt.w	r2, r2, #2
 8002290:	9307      	strge	r3, [sp, #28]
 8002292:	9307      	strlt	r3, [sp, #28]
 8002294:	bfb8      	it	lt
 8002296:	9204      	strlt	r2, [sp, #16]
 8002298:	7823      	ldrb	r3, [r4, #0]
 800229a:	2b2e      	cmp	r3, #46	; 0x2e
 800229c:	d10c      	bne.n	80022b8 <_svfiprintf_r+0x130>
 800229e:	7863      	ldrb	r3, [r4, #1]
 80022a0:	2b2a      	cmp	r3, #42	; 0x2a
 80022a2:	d135      	bne.n	8002310 <_svfiprintf_r+0x188>
 80022a4:	9b03      	ldr	r3, [sp, #12]
 80022a6:	3402      	adds	r4, #2
 80022a8:	1d1a      	adds	r2, r3, #4
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	9203      	str	r2, [sp, #12]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	bfb8      	it	lt
 80022b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80022b6:	9305      	str	r3, [sp, #20]
 80022b8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002384 <_svfiprintf_r+0x1fc>
 80022bc:	2203      	movs	r2, #3
 80022be:	4650      	mov	r0, sl
 80022c0:	7821      	ldrb	r1, [r4, #0]
 80022c2:	f000 f9f7 	bl	80026b4 <memchr>
 80022c6:	b140      	cbz	r0, 80022da <_svfiprintf_r+0x152>
 80022c8:	2340      	movs	r3, #64	; 0x40
 80022ca:	eba0 000a 	sub.w	r0, r0, sl
 80022ce:	fa03 f000 	lsl.w	r0, r3, r0
 80022d2:	9b04      	ldr	r3, [sp, #16]
 80022d4:	3401      	adds	r4, #1
 80022d6:	4303      	orrs	r3, r0
 80022d8:	9304      	str	r3, [sp, #16]
 80022da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80022de:	2206      	movs	r2, #6
 80022e0:	4825      	ldr	r0, [pc, #148]	; (8002378 <_svfiprintf_r+0x1f0>)
 80022e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80022e6:	f000 f9e5 	bl	80026b4 <memchr>
 80022ea:	2800      	cmp	r0, #0
 80022ec:	d038      	beq.n	8002360 <_svfiprintf_r+0x1d8>
 80022ee:	4b23      	ldr	r3, [pc, #140]	; (800237c <_svfiprintf_r+0x1f4>)
 80022f0:	bb1b      	cbnz	r3, 800233a <_svfiprintf_r+0x1b2>
 80022f2:	9b03      	ldr	r3, [sp, #12]
 80022f4:	3307      	adds	r3, #7
 80022f6:	f023 0307 	bic.w	r3, r3, #7
 80022fa:	3308      	adds	r3, #8
 80022fc:	9303      	str	r3, [sp, #12]
 80022fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002300:	4433      	add	r3, r6
 8002302:	9309      	str	r3, [sp, #36]	; 0x24
 8002304:	e767      	b.n	80021d6 <_svfiprintf_r+0x4e>
 8002306:	460c      	mov	r4, r1
 8002308:	2001      	movs	r0, #1
 800230a:	fb0c 3202 	mla	r2, ip, r2, r3
 800230e:	e7a5      	b.n	800225c <_svfiprintf_r+0xd4>
 8002310:	2300      	movs	r3, #0
 8002312:	f04f 0c0a 	mov.w	ip, #10
 8002316:	4619      	mov	r1, r3
 8002318:	3401      	adds	r4, #1
 800231a:	9305      	str	r3, [sp, #20]
 800231c:	4620      	mov	r0, r4
 800231e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002322:	3a30      	subs	r2, #48	; 0x30
 8002324:	2a09      	cmp	r2, #9
 8002326:	d903      	bls.n	8002330 <_svfiprintf_r+0x1a8>
 8002328:	2b00      	cmp	r3, #0
 800232a:	d0c5      	beq.n	80022b8 <_svfiprintf_r+0x130>
 800232c:	9105      	str	r1, [sp, #20]
 800232e:	e7c3      	b.n	80022b8 <_svfiprintf_r+0x130>
 8002330:	4604      	mov	r4, r0
 8002332:	2301      	movs	r3, #1
 8002334:	fb0c 2101 	mla	r1, ip, r1, r2
 8002338:	e7f0      	b.n	800231c <_svfiprintf_r+0x194>
 800233a:	ab03      	add	r3, sp, #12
 800233c:	9300      	str	r3, [sp, #0]
 800233e:	462a      	mov	r2, r5
 8002340:	4638      	mov	r0, r7
 8002342:	4b0f      	ldr	r3, [pc, #60]	; (8002380 <_svfiprintf_r+0x1f8>)
 8002344:	a904      	add	r1, sp, #16
 8002346:	f3af 8000 	nop.w
 800234a:	1c42      	adds	r2, r0, #1
 800234c:	4606      	mov	r6, r0
 800234e:	d1d6      	bne.n	80022fe <_svfiprintf_r+0x176>
 8002350:	89ab      	ldrh	r3, [r5, #12]
 8002352:	065b      	lsls	r3, r3, #25
 8002354:	f53f af2c 	bmi.w	80021b0 <_svfiprintf_r+0x28>
 8002358:	9809      	ldr	r0, [sp, #36]	; 0x24
 800235a:	b01d      	add	sp, #116	; 0x74
 800235c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002360:	ab03      	add	r3, sp, #12
 8002362:	9300      	str	r3, [sp, #0]
 8002364:	462a      	mov	r2, r5
 8002366:	4638      	mov	r0, r7
 8002368:	4b05      	ldr	r3, [pc, #20]	; (8002380 <_svfiprintf_r+0x1f8>)
 800236a:	a904      	add	r1, sp, #16
 800236c:	f000 f87c 	bl	8002468 <_printf_i>
 8002370:	e7eb      	b.n	800234a <_svfiprintf_r+0x1c2>
 8002372:	bf00      	nop
 8002374:	0800297c 	.word	0x0800297c
 8002378:	08002986 	.word	0x08002986
 800237c:	00000000 	.word	0x00000000
 8002380:	080020d1 	.word	0x080020d1
 8002384:	08002982 	.word	0x08002982

08002388 <_printf_common>:
 8002388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800238c:	4616      	mov	r6, r2
 800238e:	4699      	mov	r9, r3
 8002390:	688a      	ldr	r2, [r1, #8]
 8002392:	690b      	ldr	r3, [r1, #16]
 8002394:	4607      	mov	r7, r0
 8002396:	4293      	cmp	r3, r2
 8002398:	bfb8      	it	lt
 800239a:	4613      	movlt	r3, r2
 800239c:	6033      	str	r3, [r6, #0]
 800239e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80023a2:	460c      	mov	r4, r1
 80023a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80023a8:	b10a      	cbz	r2, 80023ae <_printf_common+0x26>
 80023aa:	3301      	adds	r3, #1
 80023ac:	6033      	str	r3, [r6, #0]
 80023ae:	6823      	ldr	r3, [r4, #0]
 80023b0:	0699      	lsls	r1, r3, #26
 80023b2:	bf42      	ittt	mi
 80023b4:	6833      	ldrmi	r3, [r6, #0]
 80023b6:	3302      	addmi	r3, #2
 80023b8:	6033      	strmi	r3, [r6, #0]
 80023ba:	6825      	ldr	r5, [r4, #0]
 80023bc:	f015 0506 	ands.w	r5, r5, #6
 80023c0:	d106      	bne.n	80023d0 <_printf_common+0x48>
 80023c2:	f104 0a19 	add.w	sl, r4, #25
 80023c6:	68e3      	ldr	r3, [r4, #12]
 80023c8:	6832      	ldr	r2, [r6, #0]
 80023ca:	1a9b      	subs	r3, r3, r2
 80023cc:	42ab      	cmp	r3, r5
 80023ce:	dc28      	bgt.n	8002422 <_printf_common+0x9a>
 80023d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80023d4:	1e13      	subs	r3, r2, #0
 80023d6:	6822      	ldr	r2, [r4, #0]
 80023d8:	bf18      	it	ne
 80023da:	2301      	movne	r3, #1
 80023dc:	0692      	lsls	r2, r2, #26
 80023de:	d42d      	bmi.n	800243c <_printf_common+0xb4>
 80023e0:	4649      	mov	r1, r9
 80023e2:	4638      	mov	r0, r7
 80023e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80023e8:	47c0      	blx	r8
 80023ea:	3001      	adds	r0, #1
 80023ec:	d020      	beq.n	8002430 <_printf_common+0xa8>
 80023ee:	6823      	ldr	r3, [r4, #0]
 80023f0:	68e5      	ldr	r5, [r4, #12]
 80023f2:	f003 0306 	and.w	r3, r3, #6
 80023f6:	2b04      	cmp	r3, #4
 80023f8:	bf18      	it	ne
 80023fa:	2500      	movne	r5, #0
 80023fc:	6832      	ldr	r2, [r6, #0]
 80023fe:	f04f 0600 	mov.w	r6, #0
 8002402:	68a3      	ldr	r3, [r4, #8]
 8002404:	bf08      	it	eq
 8002406:	1aad      	subeq	r5, r5, r2
 8002408:	6922      	ldr	r2, [r4, #16]
 800240a:	bf08      	it	eq
 800240c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002410:	4293      	cmp	r3, r2
 8002412:	bfc4      	itt	gt
 8002414:	1a9b      	subgt	r3, r3, r2
 8002416:	18ed      	addgt	r5, r5, r3
 8002418:	341a      	adds	r4, #26
 800241a:	42b5      	cmp	r5, r6
 800241c:	d11a      	bne.n	8002454 <_printf_common+0xcc>
 800241e:	2000      	movs	r0, #0
 8002420:	e008      	b.n	8002434 <_printf_common+0xac>
 8002422:	2301      	movs	r3, #1
 8002424:	4652      	mov	r2, sl
 8002426:	4649      	mov	r1, r9
 8002428:	4638      	mov	r0, r7
 800242a:	47c0      	blx	r8
 800242c:	3001      	adds	r0, #1
 800242e:	d103      	bne.n	8002438 <_printf_common+0xb0>
 8002430:	f04f 30ff 	mov.w	r0, #4294967295
 8002434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002438:	3501      	adds	r5, #1
 800243a:	e7c4      	b.n	80023c6 <_printf_common+0x3e>
 800243c:	2030      	movs	r0, #48	; 0x30
 800243e:	18e1      	adds	r1, r4, r3
 8002440:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002444:	1c5a      	adds	r2, r3, #1
 8002446:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800244a:	4422      	add	r2, r4
 800244c:	3302      	adds	r3, #2
 800244e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002452:	e7c5      	b.n	80023e0 <_printf_common+0x58>
 8002454:	2301      	movs	r3, #1
 8002456:	4622      	mov	r2, r4
 8002458:	4649      	mov	r1, r9
 800245a:	4638      	mov	r0, r7
 800245c:	47c0      	blx	r8
 800245e:	3001      	adds	r0, #1
 8002460:	d0e6      	beq.n	8002430 <_printf_common+0xa8>
 8002462:	3601      	adds	r6, #1
 8002464:	e7d9      	b.n	800241a <_printf_common+0x92>
	...

08002468 <_printf_i>:
 8002468:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800246c:	460c      	mov	r4, r1
 800246e:	7e27      	ldrb	r7, [r4, #24]
 8002470:	4691      	mov	r9, r2
 8002472:	2f78      	cmp	r7, #120	; 0x78
 8002474:	4680      	mov	r8, r0
 8002476:	469a      	mov	sl, r3
 8002478:	990c      	ldr	r1, [sp, #48]	; 0x30
 800247a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800247e:	d807      	bhi.n	8002490 <_printf_i+0x28>
 8002480:	2f62      	cmp	r7, #98	; 0x62
 8002482:	d80a      	bhi.n	800249a <_printf_i+0x32>
 8002484:	2f00      	cmp	r7, #0
 8002486:	f000 80d9 	beq.w	800263c <_printf_i+0x1d4>
 800248a:	2f58      	cmp	r7, #88	; 0x58
 800248c:	f000 80a4 	beq.w	80025d8 <_printf_i+0x170>
 8002490:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002494:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002498:	e03a      	b.n	8002510 <_printf_i+0xa8>
 800249a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800249e:	2b15      	cmp	r3, #21
 80024a0:	d8f6      	bhi.n	8002490 <_printf_i+0x28>
 80024a2:	a001      	add	r0, pc, #4	; (adr r0, 80024a8 <_printf_i+0x40>)
 80024a4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80024a8:	08002501 	.word	0x08002501
 80024ac:	08002515 	.word	0x08002515
 80024b0:	08002491 	.word	0x08002491
 80024b4:	08002491 	.word	0x08002491
 80024b8:	08002491 	.word	0x08002491
 80024bc:	08002491 	.word	0x08002491
 80024c0:	08002515 	.word	0x08002515
 80024c4:	08002491 	.word	0x08002491
 80024c8:	08002491 	.word	0x08002491
 80024cc:	08002491 	.word	0x08002491
 80024d0:	08002491 	.word	0x08002491
 80024d4:	08002623 	.word	0x08002623
 80024d8:	08002545 	.word	0x08002545
 80024dc:	08002605 	.word	0x08002605
 80024e0:	08002491 	.word	0x08002491
 80024e4:	08002491 	.word	0x08002491
 80024e8:	08002645 	.word	0x08002645
 80024ec:	08002491 	.word	0x08002491
 80024f0:	08002545 	.word	0x08002545
 80024f4:	08002491 	.word	0x08002491
 80024f8:	08002491 	.word	0x08002491
 80024fc:	0800260d 	.word	0x0800260d
 8002500:	680b      	ldr	r3, [r1, #0]
 8002502:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002506:	1d1a      	adds	r2, r3, #4
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	600a      	str	r2, [r1, #0]
 800250c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002510:	2301      	movs	r3, #1
 8002512:	e0a4      	b.n	800265e <_printf_i+0x1f6>
 8002514:	6825      	ldr	r5, [r4, #0]
 8002516:	6808      	ldr	r0, [r1, #0]
 8002518:	062e      	lsls	r6, r5, #24
 800251a:	f100 0304 	add.w	r3, r0, #4
 800251e:	d50a      	bpl.n	8002536 <_printf_i+0xce>
 8002520:	6805      	ldr	r5, [r0, #0]
 8002522:	600b      	str	r3, [r1, #0]
 8002524:	2d00      	cmp	r5, #0
 8002526:	da03      	bge.n	8002530 <_printf_i+0xc8>
 8002528:	232d      	movs	r3, #45	; 0x2d
 800252a:	426d      	negs	r5, r5
 800252c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002530:	230a      	movs	r3, #10
 8002532:	485e      	ldr	r0, [pc, #376]	; (80026ac <_printf_i+0x244>)
 8002534:	e019      	b.n	800256a <_printf_i+0x102>
 8002536:	f015 0f40 	tst.w	r5, #64	; 0x40
 800253a:	6805      	ldr	r5, [r0, #0]
 800253c:	600b      	str	r3, [r1, #0]
 800253e:	bf18      	it	ne
 8002540:	b22d      	sxthne	r5, r5
 8002542:	e7ef      	b.n	8002524 <_printf_i+0xbc>
 8002544:	680b      	ldr	r3, [r1, #0]
 8002546:	6825      	ldr	r5, [r4, #0]
 8002548:	1d18      	adds	r0, r3, #4
 800254a:	6008      	str	r0, [r1, #0]
 800254c:	0628      	lsls	r0, r5, #24
 800254e:	d501      	bpl.n	8002554 <_printf_i+0xec>
 8002550:	681d      	ldr	r5, [r3, #0]
 8002552:	e002      	b.n	800255a <_printf_i+0xf2>
 8002554:	0669      	lsls	r1, r5, #25
 8002556:	d5fb      	bpl.n	8002550 <_printf_i+0xe8>
 8002558:	881d      	ldrh	r5, [r3, #0]
 800255a:	2f6f      	cmp	r7, #111	; 0x6f
 800255c:	bf0c      	ite	eq
 800255e:	2308      	moveq	r3, #8
 8002560:	230a      	movne	r3, #10
 8002562:	4852      	ldr	r0, [pc, #328]	; (80026ac <_printf_i+0x244>)
 8002564:	2100      	movs	r1, #0
 8002566:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800256a:	6866      	ldr	r6, [r4, #4]
 800256c:	2e00      	cmp	r6, #0
 800256e:	bfa8      	it	ge
 8002570:	6821      	ldrge	r1, [r4, #0]
 8002572:	60a6      	str	r6, [r4, #8]
 8002574:	bfa4      	itt	ge
 8002576:	f021 0104 	bicge.w	r1, r1, #4
 800257a:	6021      	strge	r1, [r4, #0]
 800257c:	b90d      	cbnz	r5, 8002582 <_printf_i+0x11a>
 800257e:	2e00      	cmp	r6, #0
 8002580:	d04d      	beq.n	800261e <_printf_i+0x1b6>
 8002582:	4616      	mov	r6, r2
 8002584:	fbb5 f1f3 	udiv	r1, r5, r3
 8002588:	fb03 5711 	mls	r7, r3, r1, r5
 800258c:	5dc7      	ldrb	r7, [r0, r7]
 800258e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002592:	462f      	mov	r7, r5
 8002594:	42bb      	cmp	r3, r7
 8002596:	460d      	mov	r5, r1
 8002598:	d9f4      	bls.n	8002584 <_printf_i+0x11c>
 800259a:	2b08      	cmp	r3, #8
 800259c:	d10b      	bne.n	80025b6 <_printf_i+0x14e>
 800259e:	6823      	ldr	r3, [r4, #0]
 80025a0:	07df      	lsls	r7, r3, #31
 80025a2:	d508      	bpl.n	80025b6 <_printf_i+0x14e>
 80025a4:	6923      	ldr	r3, [r4, #16]
 80025a6:	6861      	ldr	r1, [r4, #4]
 80025a8:	4299      	cmp	r1, r3
 80025aa:	bfde      	ittt	le
 80025ac:	2330      	movle	r3, #48	; 0x30
 80025ae:	f806 3c01 	strble.w	r3, [r6, #-1]
 80025b2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80025b6:	1b92      	subs	r2, r2, r6
 80025b8:	6122      	str	r2, [r4, #16]
 80025ba:	464b      	mov	r3, r9
 80025bc:	4621      	mov	r1, r4
 80025be:	4640      	mov	r0, r8
 80025c0:	f8cd a000 	str.w	sl, [sp]
 80025c4:	aa03      	add	r2, sp, #12
 80025c6:	f7ff fedf 	bl	8002388 <_printf_common>
 80025ca:	3001      	adds	r0, #1
 80025cc:	d14c      	bne.n	8002668 <_printf_i+0x200>
 80025ce:	f04f 30ff 	mov.w	r0, #4294967295
 80025d2:	b004      	add	sp, #16
 80025d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025d8:	4834      	ldr	r0, [pc, #208]	; (80026ac <_printf_i+0x244>)
 80025da:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80025de:	680e      	ldr	r6, [r1, #0]
 80025e0:	6823      	ldr	r3, [r4, #0]
 80025e2:	f856 5b04 	ldr.w	r5, [r6], #4
 80025e6:	061f      	lsls	r7, r3, #24
 80025e8:	600e      	str	r6, [r1, #0]
 80025ea:	d514      	bpl.n	8002616 <_printf_i+0x1ae>
 80025ec:	07d9      	lsls	r1, r3, #31
 80025ee:	bf44      	itt	mi
 80025f0:	f043 0320 	orrmi.w	r3, r3, #32
 80025f4:	6023      	strmi	r3, [r4, #0]
 80025f6:	b91d      	cbnz	r5, 8002600 <_printf_i+0x198>
 80025f8:	6823      	ldr	r3, [r4, #0]
 80025fa:	f023 0320 	bic.w	r3, r3, #32
 80025fe:	6023      	str	r3, [r4, #0]
 8002600:	2310      	movs	r3, #16
 8002602:	e7af      	b.n	8002564 <_printf_i+0xfc>
 8002604:	6823      	ldr	r3, [r4, #0]
 8002606:	f043 0320 	orr.w	r3, r3, #32
 800260a:	6023      	str	r3, [r4, #0]
 800260c:	2378      	movs	r3, #120	; 0x78
 800260e:	4828      	ldr	r0, [pc, #160]	; (80026b0 <_printf_i+0x248>)
 8002610:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002614:	e7e3      	b.n	80025de <_printf_i+0x176>
 8002616:	065e      	lsls	r6, r3, #25
 8002618:	bf48      	it	mi
 800261a:	b2ad      	uxthmi	r5, r5
 800261c:	e7e6      	b.n	80025ec <_printf_i+0x184>
 800261e:	4616      	mov	r6, r2
 8002620:	e7bb      	b.n	800259a <_printf_i+0x132>
 8002622:	680b      	ldr	r3, [r1, #0]
 8002624:	6826      	ldr	r6, [r4, #0]
 8002626:	1d1d      	adds	r5, r3, #4
 8002628:	6960      	ldr	r0, [r4, #20]
 800262a:	600d      	str	r5, [r1, #0]
 800262c:	0635      	lsls	r5, r6, #24
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	d501      	bpl.n	8002636 <_printf_i+0x1ce>
 8002632:	6018      	str	r0, [r3, #0]
 8002634:	e002      	b.n	800263c <_printf_i+0x1d4>
 8002636:	0671      	lsls	r1, r6, #25
 8002638:	d5fb      	bpl.n	8002632 <_printf_i+0x1ca>
 800263a:	8018      	strh	r0, [r3, #0]
 800263c:	2300      	movs	r3, #0
 800263e:	4616      	mov	r6, r2
 8002640:	6123      	str	r3, [r4, #16]
 8002642:	e7ba      	b.n	80025ba <_printf_i+0x152>
 8002644:	680b      	ldr	r3, [r1, #0]
 8002646:	1d1a      	adds	r2, r3, #4
 8002648:	600a      	str	r2, [r1, #0]
 800264a:	681e      	ldr	r6, [r3, #0]
 800264c:	2100      	movs	r1, #0
 800264e:	4630      	mov	r0, r6
 8002650:	6862      	ldr	r2, [r4, #4]
 8002652:	f000 f82f 	bl	80026b4 <memchr>
 8002656:	b108      	cbz	r0, 800265c <_printf_i+0x1f4>
 8002658:	1b80      	subs	r0, r0, r6
 800265a:	6060      	str	r0, [r4, #4]
 800265c:	6863      	ldr	r3, [r4, #4]
 800265e:	6123      	str	r3, [r4, #16]
 8002660:	2300      	movs	r3, #0
 8002662:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002666:	e7a8      	b.n	80025ba <_printf_i+0x152>
 8002668:	4632      	mov	r2, r6
 800266a:	4649      	mov	r1, r9
 800266c:	4640      	mov	r0, r8
 800266e:	6923      	ldr	r3, [r4, #16]
 8002670:	47d0      	blx	sl
 8002672:	3001      	adds	r0, #1
 8002674:	d0ab      	beq.n	80025ce <_printf_i+0x166>
 8002676:	6823      	ldr	r3, [r4, #0]
 8002678:	079b      	lsls	r3, r3, #30
 800267a:	d413      	bmi.n	80026a4 <_printf_i+0x23c>
 800267c:	68e0      	ldr	r0, [r4, #12]
 800267e:	9b03      	ldr	r3, [sp, #12]
 8002680:	4298      	cmp	r0, r3
 8002682:	bfb8      	it	lt
 8002684:	4618      	movlt	r0, r3
 8002686:	e7a4      	b.n	80025d2 <_printf_i+0x16a>
 8002688:	2301      	movs	r3, #1
 800268a:	4632      	mov	r2, r6
 800268c:	4649      	mov	r1, r9
 800268e:	4640      	mov	r0, r8
 8002690:	47d0      	blx	sl
 8002692:	3001      	adds	r0, #1
 8002694:	d09b      	beq.n	80025ce <_printf_i+0x166>
 8002696:	3501      	adds	r5, #1
 8002698:	68e3      	ldr	r3, [r4, #12]
 800269a:	9903      	ldr	r1, [sp, #12]
 800269c:	1a5b      	subs	r3, r3, r1
 800269e:	42ab      	cmp	r3, r5
 80026a0:	dcf2      	bgt.n	8002688 <_printf_i+0x220>
 80026a2:	e7eb      	b.n	800267c <_printf_i+0x214>
 80026a4:	2500      	movs	r5, #0
 80026a6:	f104 0619 	add.w	r6, r4, #25
 80026aa:	e7f5      	b.n	8002698 <_printf_i+0x230>
 80026ac:	0800298d 	.word	0x0800298d
 80026b0:	0800299e 	.word	0x0800299e

080026b4 <memchr>:
 80026b4:	4603      	mov	r3, r0
 80026b6:	b510      	push	{r4, lr}
 80026b8:	b2c9      	uxtb	r1, r1
 80026ba:	4402      	add	r2, r0
 80026bc:	4293      	cmp	r3, r2
 80026be:	4618      	mov	r0, r3
 80026c0:	d101      	bne.n	80026c6 <memchr+0x12>
 80026c2:	2000      	movs	r0, #0
 80026c4:	e003      	b.n	80026ce <memchr+0x1a>
 80026c6:	7804      	ldrb	r4, [r0, #0]
 80026c8:	3301      	adds	r3, #1
 80026ca:	428c      	cmp	r4, r1
 80026cc:	d1f6      	bne.n	80026bc <memchr+0x8>
 80026ce:	bd10      	pop	{r4, pc}

080026d0 <memcpy>:
 80026d0:	440a      	add	r2, r1
 80026d2:	4291      	cmp	r1, r2
 80026d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80026d8:	d100      	bne.n	80026dc <memcpy+0xc>
 80026da:	4770      	bx	lr
 80026dc:	b510      	push	{r4, lr}
 80026de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80026e2:	4291      	cmp	r1, r2
 80026e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80026e8:	d1f9      	bne.n	80026de <memcpy+0xe>
 80026ea:	bd10      	pop	{r4, pc}

080026ec <memmove>:
 80026ec:	4288      	cmp	r0, r1
 80026ee:	b510      	push	{r4, lr}
 80026f0:	eb01 0402 	add.w	r4, r1, r2
 80026f4:	d902      	bls.n	80026fc <memmove+0x10>
 80026f6:	4284      	cmp	r4, r0
 80026f8:	4623      	mov	r3, r4
 80026fa:	d807      	bhi.n	800270c <memmove+0x20>
 80026fc:	1e43      	subs	r3, r0, #1
 80026fe:	42a1      	cmp	r1, r4
 8002700:	d008      	beq.n	8002714 <memmove+0x28>
 8002702:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002706:	f803 2f01 	strb.w	r2, [r3, #1]!
 800270a:	e7f8      	b.n	80026fe <memmove+0x12>
 800270c:	4601      	mov	r1, r0
 800270e:	4402      	add	r2, r0
 8002710:	428a      	cmp	r2, r1
 8002712:	d100      	bne.n	8002716 <memmove+0x2a>
 8002714:	bd10      	pop	{r4, pc}
 8002716:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800271a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800271e:	e7f7      	b.n	8002710 <memmove+0x24>

08002720 <_free_r>:
 8002720:	b538      	push	{r3, r4, r5, lr}
 8002722:	4605      	mov	r5, r0
 8002724:	2900      	cmp	r1, #0
 8002726:	d043      	beq.n	80027b0 <_free_r+0x90>
 8002728:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800272c:	1f0c      	subs	r4, r1, #4
 800272e:	2b00      	cmp	r3, #0
 8002730:	bfb8      	it	lt
 8002732:	18e4      	addlt	r4, r4, r3
 8002734:	f000 f8d0 	bl	80028d8 <__malloc_lock>
 8002738:	4a1e      	ldr	r2, [pc, #120]	; (80027b4 <_free_r+0x94>)
 800273a:	6813      	ldr	r3, [r2, #0]
 800273c:	4610      	mov	r0, r2
 800273e:	b933      	cbnz	r3, 800274e <_free_r+0x2e>
 8002740:	6063      	str	r3, [r4, #4]
 8002742:	6014      	str	r4, [r2, #0]
 8002744:	4628      	mov	r0, r5
 8002746:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800274a:	f000 b8cb 	b.w	80028e4 <__malloc_unlock>
 800274e:	42a3      	cmp	r3, r4
 8002750:	d90a      	bls.n	8002768 <_free_r+0x48>
 8002752:	6821      	ldr	r1, [r4, #0]
 8002754:	1862      	adds	r2, r4, r1
 8002756:	4293      	cmp	r3, r2
 8002758:	bf01      	itttt	eq
 800275a:	681a      	ldreq	r2, [r3, #0]
 800275c:	685b      	ldreq	r3, [r3, #4]
 800275e:	1852      	addeq	r2, r2, r1
 8002760:	6022      	streq	r2, [r4, #0]
 8002762:	6063      	str	r3, [r4, #4]
 8002764:	6004      	str	r4, [r0, #0]
 8002766:	e7ed      	b.n	8002744 <_free_r+0x24>
 8002768:	461a      	mov	r2, r3
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	b10b      	cbz	r3, 8002772 <_free_r+0x52>
 800276e:	42a3      	cmp	r3, r4
 8002770:	d9fa      	bls.n	8002768 <_free_r+0x48>
 8002772:	6811      	ldr	r1, [r2, #0]
 8002774:	1850      	adds	r0, r2, r1
 8002776:	42a0      	cmp	r0, r4
 8002778:	d10b      	bne.n	8002792 <_free_r+0x72>
 800277a:	6820      	ldr	r0, [r4, #0]
 800277c:	4401      	add	r1, r0
 800277e:	1850      	adds	r0, r2, r1
 8002780:	4283      	cmp	r3, r0
 8002782:	6011      	str	r1, [r2, #0]
 8002784:	d1de      	bne.n	8002744 <_free_r+0x24>
 8002786:	6818      	ldr	r0, [r3, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	4401      	add	r1, r0
 800278c:	6011      	str	r1, [r2, #0]
 800278e:	6053      	str	r3, [r2, #4]
 8002790:	e7d8      	b.n	8002744 <_free_r+0x24>
 8002792:	d902      	bls.n	800279a <_free_r+0x7a>
 8002794:	230c      	movs	r3, #12
 8002796:	602b      	str	r3, [r5, #0]
 8002798:	e7d4      	b.n	8002744 <_free_r+0x24>
 800279a:	6820      	ldr	r0, [r4, #0]
 800279c:	1821      	adds	r1, r4, r0
 800279e:	428b      	cmp	r3, r1
 80027a0:	bf01      	itttt	eq
 80027a2:	6819      	ldreq	r1, [r3, #0]
 80027a4:	685b      	ldreq	r3, [r3, #4]
 80027a6:	1809      	addeq	r1, r1, r0
 80027a8:	6021      	streq	r1, [r4, #0]
 80027aa:	6063      	str	r3, [r4, #4]
 80027ac:	6054      	str	r4, [r2, #4]
 80027ae:	e7c9      	b.n	8002744 <_free_r+0x24>
 80027b0:	bd38      	pop	{r3, r4, r5, pc}
 80027b2:	bf00      	nop
 80027b4:	200000b8 	.word	0x200000b8

080027b8 <_malloc_r>:
 80027b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027ba:	1ccd      	adds	r5, r1, #3
 80027bc:	f025 0503 	bic.w	r5, r5, #3
 80027c0:	3508      	adds	r5, #8
 80027c2:	2d0c      	cmp	r5, #12
 80027c4:	bf38      	it	cc
 80027c6:	250c      	movcc	r5, #12
 80027c8:	2d00      	cmp	r5, #0
 80027ca:	4606      	mov	r6, r0
 80027cc:	db01      	blt.n	80027d2 <_malloc_r+0x1a>
 80027ce:	42a9      	cmp	r1, r5
 80027d0:	d903      	bls.n	80027da <_malloc_r+0x22>
 80027d2:	230c      	movs	r3, #12
 80027d4:	6033      	str	r3, [r6, #0]
 80027d6:	2000      	movs	r0, #0
 80027d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027da:	f000 f87d 	bl	80028d8 <__malloc_lock>
 80027de:	4921      	ldr	r1, [pc, #132]	; (8002864 <_malloc_r+0xac>)
 80027e0:	680a      	ldr	r2, [r1, #0]
 80027e2:	4614      	mov	r4, r2
 80027e4:	b99c      	cbnz	r4, 800280e <_malloc_r+0x56>
 80027e6:	4f20      	ldr	r7, [pc, #128]	; (8002868 <_malloc_r+0xb0>)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	b923      	cbnz	r3, 80027f6 <_malloc_r+0x3e>
 80027ec:	4621      	mov	r1, r4
 80027ee:	4630      	mov	r0, r6
 80027f0:	f000 f862 	bl	80028b8 <_sbrk_r>
 80027f4:	6038      	str	r0, [r7, #0]
 80027f6:	4629      	mov	r1, r5
 80027f8:	4630      	mov	r0, r6
 80027fa:	f000 f85d 	bl	80028b8 <_sbrk_r>
 80027fe:	1c43      	adds	r3, r0, #1
 8002800:	d123      	bne.n	800284a <_malloc_r+0x92>
 8002802:	230c      	movs	r3, #12
 8002804:	4630      	mov	r0, r6
 8002806:	6033      	str	r3, [r6, #0]
 8002808:	f000 f86c 	bl	80028e4 <__malloc_unlock>
 800280c:	e7e3      	b.n	80027d6 <_malloc_r+0x1e>
 800280e:	6823      	ldr	r3, [r4, #0]
 8002810:	1b5b      	subs	r3, r3, r5
 8002812:	d417      	bmi.n	8002844 <_malloc_r+0x8c>
 8002814:	2b0b      	cmp	r3, #11
 8002816:	d903      	bls.n	8002820 <_malloc_r+0x68>
 8002818:	6023      	str	r3, [r4, #0]
 800281a:	441c      	add	r4, r3
 800281c:	6025      	str	r5, [r4, #0]
 800281e:	e004      	b.n	800282a <_malloc_r+0x72>
 8002820:	6863      	ldr	r3, [r4, #4]
 8002822:	42a2      	cmp	r2, r4
 8002824:	bf0c      	ite	eq
 8002826:	600b      	streq	r3, [r1, #0]
 8002828:	6053      	strne	r3, [r2, #4]
 800282a:	4630      	mov	r0, r6
 800282c:	f000 f85a 	bl	80028e4 <__malloc_unlock>
 8002830:	f104 000b 	add.w	r0, r4, #11
 8002834:	1d23      	adds	r3, r4, #4
 8002836:	f020 0007 	bic.w	r0, r0, #7
 800283a:	1ac2      	subs	r2, r0, r3
 800283c:	d0cc      	beq.n	80027d8 <_malloc_r+0x20>
 800283e:	1a1b      	subs	r3, r3, r0
 8002840:	50a3      	str	r3, [r4, r2]
 8002842:	e7c9      	b.n	80027d8 <_malloc_r+0x20>
 8002844:	4622      	mov	r2, r4
 8002846:	6864      	ldr	r4, [r4, #4]
 8002848:	e7cc      	b.n	80027e4 <_malloc_r+0x2c>
 800284a:	1cc4      	adds	r4, r0, #3
 800284c:	f024 0403 	bic.w	r4, r4, #3
 8002850:	42a0      	cmp	r0, r4
 8002852:	d0e3      	beq.n	800281c <_malloc_r+0x64>
 8002854:	1a21      	subs	r1, r4, r0
 8002856:	4630      	mov	r0, r6
 8002858:	f000 f82e 	bl	80028b8 <_sbrk_r>
 800285c:	3001      	adds	r0, #1
 800285e:	d1dd      	bne.n	800281c <_malloc_r+0x64>
 8002860:	e7cf      	b.n	8002802 <_malloc_r+0x4a>
 8002862:	bf00      	nop
 8002864:	200000b8 	.word	0x200000b8
 8002868:	200000bc 	.word	0x200000bc

0800286c <_realloc_r>:
 800286c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800286e:	4607      	mov	r7, r0
 8002870:	4614      	mov	r4, r2
 8002872:	460e      	mov	r6, r1
 8002874:	b921      	cbnz	r1, 8002880 <_realloc_r+0x14>
 8002876:	4611      	mov	r1, r2
 8002878:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800287c:	f7ff bf9c 	b.w	80027b8 <_malloc_r>
 8002880:	b922      	cbnz	r2, 800288c <_realloc_r+0x20>
 8002882:	f7ff ff4d 	bl	8002720 <_free_r>
 8002886:	4625      	mov	r5, r4
 8002888:	4628      	mov	r0, r5
 800288a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800288c:	f000 f830 	bl	80028f0 <_malloc_usable_size_r>
 8002890:	42a0      	cmp	r0, r4
 8002892:	d20f      	bcs.n	80028b4 <_realloc_r+0x48>
 8002894:	4621      	mov	r1, r4
 8002896:	4638      	mov	r0, r7
 8002898:	f7ff ff8e 	bl	80027b8 <_malloc_r>
 800289c:	4605      	mov	r5, r0
 800289e:	2800      	cmp	r0, #0
 80028a0:	d0f2      	beq.n	8002888 <_realloc_r+0x1c>
 80028a2:	4631      	mov	r1, r6
 80028a4:	4622      	mov	r2, r4
 80028a6:	f7ff ff13 	bl	80026d0 <memcpy>
 80028aa:	4631      	mov	r1, r6
 80028ac:	4638      	mov	r0, r7
 80028ae:	f7ff ff37 	bl	8002720 <_free_r>
 80028b2:	e7e9      	b.n	8002888 <_realloc_r+0x1c>
 80028b4:	4635      	mov	r5, r6
 80028b6:	e7e7      	b.n	8002888 <_realloc_r+0x1c>

080028b8 <_sbrk_r>:
 80028b8:	b538      	push	{r3, r4, r5, lr}
 80028ba:	2300      	movs	r3, #0
 80028bc:	4d05      	ldr	r5, [pc, #20]	; (80028d4 <_sbrk_r+0x1c>)
 80028be:	4604      	mov	r4, r0
 80028c0:	4608      	mov	r0, r1
 80028c2:	602b      	str	r3, [r5, #0]
 80028c4:	f7fd fe50 	bl	8000568 <_sbrk>
 80028c8:	1c43      	adds	r3, r0, #1
 80028ca:	d102      	bne.n	80028d2 <_sbrk_r+0x1a>
 80028cc:	682b      	ldr	r3, [r5, #0]
 80028ce:	b103      	cbz	r3, 80028d2 <_sbrk_r+0x1a>
 80028d0:	6023      	str	r3, [r4, #0]
 80028d2:	bd38      	pop	{r3, r4, r5, pc}
 80028d4:	20000124 	.word	0x20000124

080028d8 <__malloc_lock>:
 80028d8:	4801      	ldr	r0, [pc, #4]	; (80028e0 <__malloc_lock+0x8>)
 80028da:	f000 b811 	b.w	8002900 <__retarget_lock_acquire_recursive>
 80028de:	bf00      	nop
 80028e0:	2000012c 	.word	0x2000012c

080028e4 <__malloc_unlock>:
 80028e4:	4801      	ldr	r0, [pc, #4]	; (80028ec <__malloc_unlock+0x8>)
 80028e6:	f000 b80c 	b.w	8002902 <__retarget_lock_release_recursive>
 80028ea:	bf00      	nop
 80028ec:	2000012c 	.word	0x2000012c

080028f0 <_malloc_usable_size_r>:
 80028f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80028f4:	1f18      	subs	r0, r3, #4
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	bfbc      	itt	lt
 80028fa:	580b      	ldrlt	r3, [r1, r0]
 80028fc:	18c0      	addlt	r0, r0, r3
 80028fe:	4770      	bx	lr

08002900 <__retarget_lock_acquire_recursive>:
 8002900:	4770      	bx	lr

08002902 <__retarget_lock_release_recursive>:
 8002902:	4770      	bx	lr

08002904 <_init>:
 8002904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002906:	bf00      	nop
 8002908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800290a:	bc08      	pop	{r3}
 800290c:	469e      	mov	lr, r3
 800290e:	4770      	bx	lr

08002910 <_fini>:
 8002910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002912:	bf00      	nop
 8002914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002916:	bc08      	pop	{r3}
 8002918:	469e      	mov	lr, r3
 800291a:	4770      	bx	lr
