
U3.3_Keypad Library.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024a0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080025ac  080025ac  000125ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800261c  0800261c  000200a0  2**0
                  CONTENTS
  4 .ARM          00000000  0800261c  0800261c  000200a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800261c  0800261c  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800261c  0800261c  0001261c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002620  08002620  00012620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08002624  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  200000a0  080026c4  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  080026c4  00020184  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008d95  00000000  00000000  000200c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000185c  00000000  00000000  00028e5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000930  00000000  00000000  0002a6c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008c0  00000000  00000000  0002aff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001671b  00000000  00000000  0002b8b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a912  00000000  00000000  00041fcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000829ca  00000000  00000000  0004c8dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cf2a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000295c  00000000  00000000  000cf2fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000a0 	.word	0x200000a0
 8000128:	00000000 	.word	0x00000000
 800012c:	08002594 	.word	0x08002594

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a4 	.word	0x200000a4
 8000148:	08002594 	.word	0x08002594

0800014c <KeypadPressingCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void KeypadPressingCallback(uint8_t key){
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	uint8_t Tx_Buff[2] = {};
 8000156:	2300      	movs	r3, #0
 8000158:	81bb      	strh	r3, [r7, #12]
	sprintf((char *)Tx_Buff, "%c\n", key);
 800015a:	79fa      	ldrb	r2, [r7, #7]
 800015c:	f107 030c 	add.w	r3, r7, #12
 8000160:	4907      	ldr	r1, [pc, #28]	; (8000180 <KeypadPressingCallback+0x34>)
 8000162:	4618      	mov	r0, r3
 8000164:	f001 fddc 	bl	8001d20 <siprintf>
	HAL_UART_Transmit(&huart2, Tx_Buff, 2, 200);
 8000168:	f107 010c 	add.w	r1, r7, #12
 800016c:	23c8      	movs	r3, #200	; 0xc8
 800016e:	2202      	movs	r2, #2
 8000170:	4804      	ldr	r0, [pc, #16]	; (8000184 <KeypadPressingCallback+0x38>)
 8000172:	f001 fb14 	bl	800179e <HAL_UART_Transmit>
}
 8000176:	bf00      	nop
 8000178:	3710      	adds	r7, #16
 800017a:	46bd      	mov	sp, r7
 800017c:	bd80      	pop	{r7, pc}
 800017e:	bf00      	nop
 8000180:	080025ac 	.word	0x080025ac
 8000184:	2000012c 	.word	0x2000012c

08000188 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800018c:	f000 fa62 	bl	8000654 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000190:	f000 f809 	bl	80001a6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000194:	f000 f8a0 	bl	80002d8 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000198:	f000 f846 	bl	8000228 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 800019c:	f000 f872 	bl	8000284 <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Keypad_Handle();
 80001a0:	f001 fd36 	bl	8001c10 <Keypad_Handle>
 80001a4:	e7fc      	b.n	80001a0 <main+0x18>

080001a6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001a6:	b580      	push	{r7, lr}
 80001a8:	b090      	sub	sp, #64	; 0x40
 80001aa:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ac:	f107 0318 	add.w	r3, r7, #24
 80001b0:	2228      	movs	r2, #40	; 0x28
 80001b2:	2100      	movs	r1, #0
 80001b4:	4618      	mov	r0, r3
 80001b6:	f001 fdab 	bl	8001d10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001ba:	1d3b      	adds	r3, r7, #4
 80001bc:	2200      	movs	r2, #0
 80001be:	601a      	str	r2, [r3, #0]
 80001c0:	605a      	str	r2, [r3, #4]
 80001c2:	609a      	str	r2, [r3, #8]
 80001c4:	60da      	str	r2, [r3, #12]
 80001c6:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001c8:	2302      	movs	r3, #2
 80001ca:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001cc:	2301      	movs	r3, #1
 80001ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001d0:	2310      	movs	r3, #16
 80001d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001d4:	2302      	movs	r3, #2
 80001d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001d8:	2300      	movs	r3, #0
 80001da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001dc:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80001e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001e2:	f107 0318 	add.w	r3, r7, #24
 80001e6:	4618      	mov	r0, r3
 80001e8:	f000 fe72 	bl	8000ed0 <HAL_RCC_OscConfig>
 80001ec:	4603      	mov	r3, r0
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d001      	beq.n	80001f6 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80001f2:	f000 f8e3 	bl	80003bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001f6:	230f      	movs	r3, #15
 80001f8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001fa:	2302      	movs	r3, #2
 80001fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001fe:	2300      	movs	r3, #0
 8000200:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000202:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000206:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000208:	2300      	movs	r3, #0
 800020a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800020c:	1d3b      	adds	r3, r7, #4
 800020e:	2102      	movs	r1, #2
 8000210:	4618      	mov	r0, r3
 8000212:	f001 f8dd 	bl	80013d0 <HAL_RCC_ClockConfig>
 8000216:	4603      	mov	r3, r0
 8000218:	2b00      	cmp	r3, #0
 800021a:	d001      	beq.n	8000220 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800021c:	f000 f8ce 	bl	80003bc <Error_Handler>
  }
}
 8000220:	bf00      	nop
 8000222:	3740      	adds	r7, #64	; 0x40
 8000224:	46bd      	mov	sp, r7
 8000226:	bd80      	pop	{r7, pc}

08000228 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800022c:	4b12      	ldr	r3, [pc, #72]	; (8000278 <MX_I2C2_Init+0x50>)
 800022e:	4a13      	ldr	r2, [pc, #76]	; (800027c <MX_I2C2_Init+0x54>)
 8000230:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000232:	4b11      	ldr	r3, [pc, #68]	; (8000278 <MX_I2C2_Init+0x50>)
 8000234:	4a12      	ldr	r2, [pc, #72]	; (8000280 <MX_I2C2_Init+0x58>)
 8000236:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000238:	4b0f      	ldr	r3, [pc, #60]	; (8000278 <MX_I2C2_Init+0x50>)
 800023a:	2200      	movs	r2, #0
 800023c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800023e:	4b0e      	ldr	r3, [pc, #56]	; (8000278 <MX_I2C2_Init+0x50>)
 8000240:	2200      	movs	r2, #0
 8000242:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000244:	4b0c      	ldr	r3, [pc, #48]	; (8000278 <MX_I2C2_Init+0x50>)
 8000246:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800024a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800024c:	4b0a      	ldr	r3, [pc, #40]	; (8000278 <MX_I2C2_Init+0x50>)
 800024e:	2200      	movs	r2, #0
 8000250:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000252:	4b09      	ldr	r3, [pc, #36]	; (8000278 <MX_I2C2_Init+0x50>)
 8000254:	2200      	movs	r2, #0
 8000256:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000258:	4b07      	ldr	r3, [pc, #28]	; (8000278 <MX_I2C2_Init+0x50>)
 800025a:	2200      	movs	r2, #0
 800025c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800025e:	4b06      	ldr	r3, [pc, #24]	; (8000278 <MX_I2C2_Init+0x50>)
 8000260:	2200      	movs	r2, #0
 8000262:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000264:	4804      	ldr	r0, [pc, #16]	; (8000278 <MX_I2C2_Init+0x50>)
 8000266:	f000 fcef 	bl	8000c48 <HAL_I2C_Init>
 800026a:	4603      	mov	r3, r0
 800026c:	2b00      	cmp	r3, #0
 800026e:	d001      	beq.n	8000274 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000270:	f000 f8a4 	bl	80003bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000274:	bf00      	nop
 8000276:	bd80      	pop	{r7, pc}
 8000278:	200000d8 	.word	0x200000d8
 800027c:	40005800 	.word	0x40005800
 8000280:	000186a0 	.word	0x000186a0

08000284 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000288:	4b11      	ldr	r3, [pc, #68]	; (80002d0 <MX_USART2_UART_Init+0x4c>)
 800028a:	4a12      	ldr	r2, [pc, #72]	; (80002d4 <MX_USART2_UART_Init+0x50>)
 800028c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800028e:	4b10      	ldr	r3, [pc, #64]	; (80002d0 <MX_USART2_UART_Init+0x4c>)
 8000290:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000294:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000296:	4b0e      	ldr	r3, [pc, #56]	; (80002d0 <MX_USART2_UART_Init+0x4c>)
 8000298:	2200      	movs	r2, #0
 800029a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800029c:	4b0c      	ldr	r3, [pc, #48]	; (80002d0 <MX_USART2_UART_Init+0x4c>)
 800029e:	2200      	movs	r2, #0
 80002a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80002a2:	4b0b      	ldr	r3, [pc, #44]	; (80002d0 <MX_USART2_UART_Init+0x4c>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80002a8:	4b09      	ldr	r3, [pc, #36]	; (80002d0 <MX_USART2_UART_Init+0x4c>)
 80002aa:	220c      	movs	r2, #12
 80002ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002ae:	4b08      	ldr	r3, [pc, #32]	; (80002d0 <MX_USART2_UART_Init+0x4c>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80002b4:	4b06      	ldr	r3, [pc, #24]	; (80002d0 <MX_USART2_UART_Init+0x4c>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80002ba:	4805      	ldr	r0, [pc, #20]	; (80002d0 <MX_USART2_UART_Init+0x4c>)
 80002bc:	f001 fa22 	bl	8001704 <HAL_UART_Init>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80002c6:	f000 f879 	bl	80003bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80002ca:	bf00      	nop
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	bf00      	nop
 80002d0:	2000012c 	.word	0x2000012c
 80002d4:	40004400 	.word	0x40004400

080002d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b088      	sub	sp, #32
 80002dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002de:	f107 0310 	add.w	r3, r7, #16
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
 80002e8:	609a      	str	r2, [r3, #8]
 80002ea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002ec:	4b2f      	ldr	r3, [pc, #188]	; (80003ac <MX_GPIO_Init+0xd4>)
 80002ee:	699b      	ldr	r3, [r3, #24]
 80002f0:	4a2e      	ldr	r2, [pc, #184]	; (80003ac <MX_GPIO_Init+0xd4>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6193      	str	r3, [r2, #24]
 80002f8:	4b2c      	ldr	r3, [pc, #176]	; (80003ac <MX_GPIO_Init+0xd4>)
 80002fa:	699b      	ldr	r3, [r3, #24]
 80002fc:	f003 0310 	and.w	r3, r3, #16
 8000300:	60fb      	str	r3, [r7, #12]
 8000302:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000304:	4b29      	ldr	r3, [pc, #164]	; (80003ac <MX_GPIO_Init+0xd4>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	4a28      	ldr	r2, [pc, #160]	; (80003ac <MX_GPIO_Init+0xd4>)
 800030a:	f043 0304 	orr.w	r3, r3, #4
 800030e:	6193      	str	r3, [r2, #24]
 8000310:	4b26      	ldr	r3, [pc, #152]	; (80003ac <MX_GPIO_Init+0xd4>)
 8000312:	699b      	ldr	r3, [r3, #24]
 8000314:	f003 0304 	and.w	r3, r3, #4
 8000318:	60bb      	str	r3, [r7, #8]
 800031a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800031c:	4b23      	ldr	r3, [pc, #140]	; (80003ac <MX_GPIO_Init+0xd4>)
 800031e:	699b      	ldr	r3, [r3, #24]
 8000320:	4a22      	ldr	r2, [pc, #136]	; (80003ac <MX_GPIO_Init+0xd4>)
 8000322:	f043 0308 	orr.w	r3, r3, #8
 8000326:	6193      	str	r3, [r2, #24]
 8000328:	4b20      	ldr	r3, [pc, #128]	; (80003ac <MX_GPIO_Init+0xd4>)
 800032a:	699b      	ldr	r3, [r3, #24]
 800032c:	f003 0308 	and.w	r3, r3, #8
 8000330:	607b      	str	r3, [r7, #4]
 8000332:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000334:	2200      	movs	r2, #0
 8000336:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800033a:	481d      	ldr	r0, [pc, #116]	; (80003b0 <MX_GPIO_Init+0xd8>)
 800033c:	f000 fc6b 	bl	8000c16 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8000340:	2200      	movs	r2, #0
 8000342:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8000346:	481b      	ldr	r0, [pc, #108]	; (80003b4 <MX_GPIO_Init+0xdc>)
 8000348:	f000 fc65 	bl	8000c16 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800034c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000350:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000352:	2301      	movs	r3, #1
 8000354:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000356:	2300      	movs	r3, #0
 8000358:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800035a:	2302      	movs	r3, #2
 800035c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800035e:	f107 0310 	add.w	r3, r7, #16
 8000362:	4619      	mov	r1, r3
 8000364:	4812      	ldr	r0, [pc, #72]	; (80003b0 <MX_GPIO_Init+0xd8>)
 8000366:	f000 fabb 	bl	80008e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800036a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800036e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000370:	2300      	movs	r3, #0
 8000372:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000374:	2301      	movs	r3, #1
 8000376:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000378:	f107 0310 	add.w	r3, r7, #16
 800037c:	4619      	mov	r1, r3
 800037e:	480e      	ldr	r0, [pc, #56]	; (80003b8 <MX_GPIO_Init+0xe0>)
 8000380:	f000 faae 	bl	80008e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000384:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000388:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800038a:	2301      	movs	r3, #1
 800038c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800038e:	2300      	movs	r3, #0
 8000390:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000392:	2302      	movs	r3, #2
 8000394:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000396:	f107 0310 	add.w	r3, r7, #16
 800039a:	4619      	mov	r1, r3
 800039c:	4805      	ldr	r0, [pc, #20]	; (80003b4 <MX_GPIO_Init+0xdc>)
 800039e:	f000 fa9f 	bl	80008e0 <HAL_GPIO_Init>

}
 80003a2:	bf00      	nop
 80003a4:	3720      	adds	r7, #32
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	40021000 	.word	0x40021000
 80003b0:	40011000 	.word	0x40011000
 80003b4:	40010800 	.word	0x40010800
 80003b8:	40010c00 	.word	0x40010c00

080003bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003c0:	b672      	cpsid	i
}
 80003c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003c4:	e7fe      	b.n	80003c4 <Error_Handler+0x8>
	...

080003c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003c8:	b480      	push	{r7}
 80003ca:	b085      	sub	sp, #20
 80003cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003ce:	4b15      	ldr	r3, [pc, #84]	; (8000424 <HAL_MspInit+0x5c>)
 80003d0:	699b      	ldr	r3, [r3, #24]
 80003d2:	4a14      	ldr	r2, [pc, #80]	; (8000424 <HAL_MspInit+0x5c>)
 80003d4:	f043 0301 	orr.w	r3, r3, #1
 80003d8:	6193      	str	r3, [r2, #24]
 80003da:	4b12      	ldr	r3, [pc, #72]	; (8000424 <HAL_MspInit+0x5c>)
 80003dc:	699b      	ldr	r3, [r3, #24]
 80003de:	f003 0301 	and.w	r3, r3, #1
 80003e2:	60bb      	str	r3, [r7, #8]
 80003e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003e6:	4b0f      	ldr	r3, [pc, #60]	; (8000424 <HAL_MspInit+0x5c>)
 80003e8:	69db      	ldr	r3, [r3, #28]
 80003ea:	4a0e      	ldr	r2, [pc, #56]	; (8000424 <HAL_MspInit+0x5c>)
 80003ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003f0:	61d3      	str	r3, [r2, #28]
 80003f2:	4b0c      	ldr	r3, [pc, #48]	; (8000424 <HAL_MspInit+0x5c>)
 80003f4:	69db      	ldr	r3, [r3, #28]
 80003f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003fa:	607b      	str	r3, [r7, #4]
 80003fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003fe:	4b0a      	ldr	r3, [pc, #40]	; (8000428 <HAL_MspInit+0x60>)
 8000400:	685b      	ldr	r3, [r3, #4]
 8000402:	60fb      	str	r3, [r7, #12]
 8000404:	68fb      	ldr	r3, [r7, #12]
 8000406:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800040a:	60fb      	str	r3, [r7, #12]
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000412:	60fb      	str	r3, [r7, #12]
 8000414:	4a04      	ldr	r2, [pc, #16]	; (8000428 <HAL_MspInit+0x60>)
 8000416:	68fb      	ldr	r3, [r7, #12]
 8000418:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800041a:	bf00      	nop
 800041c:	3714      	adds	r7, #20
 800041e:	46bd      	mov	sp, r7
 8000420:	bc80      	pop	{r7}
 8000422:	4770      	bx	lr
 8000424:	40021000 	.word	0x40021000
 8000428:	40010000 	.word	0x40010000

0800042c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b088      	sub	sp, #32
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000434:	f107 0310 	add.w	r3, r7, #16
 8000438:	2200      	movs	r2, #0
 800043a:	601a      	str	r2, [r3, #0]
 800043c:	605a      	str	r2, [r3, #4]
 800043e:	609a      	str	r2, [r3, #8]
 8000440:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	4a16      	ldr	r2, [pc, #88]	; (80004a0 <HAL_I2C_MspInit+0x74>)
 8000448:	4293      	cmp	r3, r2
 800044a:	d124      	bne.n	8000496 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800044c:	4b15      	ldr	r3, [pc, #84]	; (80004a4 <HAL_I2C_MspInit+0x78>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	4a14      	ldr	r2, [pc, #80]	; (80004a4 <HAL_I2C_MspInit+0x78>)
 8000452:	f043 0308 	orr.w	r3, r3, #8
 8000456:	6193      	str	r3, [r2, #24]
 8000458:	4b12      	ldr	r3, [pc, #72]	; (80004a4 <HAL_I2C_MspInit+0x78>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	f003 0308 	and.w	r3, r3, #8
 8000460:	60fb      	str	r3, [r7, #12]
 8000462:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000464:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000468:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800046a:	2312      	movs	r3, #18
 800046c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800046e:	2303      	movs	r3, #3
 8000470:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000472:	f107 0310 	add.w	r3, r7, #16
 8000476:	4619      	mov	r1, r3
 8000478:	480b      	ldr	r0, [pc, #44]	; (80004a8 <HAL_I2C_MspInit+0x7c>)
 800047a:	f000 fa31 	bl	80008e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800047e:	4b09      	ldr	r3, [pc, #36]	; (80004a4 <HAL_I2C_MspInit+0x78>)
 8000480:	69db      	ldr	r3, [r3, #28]
 8000482:	4a08      	ldr	r2, [pc, #32]	; (80004a4 <HAL_I2C_MspInit+0x78>)
 8000484:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000488:	61d3      	str	r3, [r2, #28]
 800048a:	4b06      	ldr	r3, [pc, #24]	; (80004a4 <HAL_I2C_MspInit+0x78>)
 800048c:	69db      	ldr	r3, [r3, #28]
 800048e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000492:	60bb      	str	r3, [r7, #8]
 8000494:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000496:	bf00      	nop
 8000498:	3720      	adds	r7, #32
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	40005800 	.word	0x40005800
 80004a4:	40021000 	.word	0x40021000
 80004a8:	40010c00 	.word	0x40010c00

080004ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b088      	sub	sp, #32
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b4:	f107 0310 	add.w	r3, r7, #16
 80004b8:	2200      	movs	r2, #0
 80004ba:	601a      	str	r2, [r3, #0]
 80004bc:	605a      	str	r2, [r3, #4]
 80004be:	609a      	str	r2, [r3, #8]
 80004c0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	4a1b      	ldr	r2, [pc, #108]	; (8000534 <HAL_UART_MspInit+0x88>)
 80004c8:	4293      	cmp	r3, r2
 80004ca:	d12f      	bne.n	800052c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80004cc:	4b1a      	ldr	r3, [pc, #104]	; (8000538 <HAL_UART_MspInit+0x8c>)
 80004ce:	69db      	ldr	r3, [r3, #28]
 80004d0:	4a19      	ldr	r2, [pc, #100]	; (8000538 <HAL_UART_MspInit+0x8c>)
 80004d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004d6:	61d3      	str	r3, [r2, #28]
 80004d8:	4b17      	ldr	r3, [pc, #92]	; (8000538 <HAL_UART_MspInit+0x8c>)
 80004da:	69db      	ldr	r3, [r3, #28]
 80004dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004e0:	60fb      	str	r3, [r7, #12]
 80004e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e4:	4b14      	ldr	r3, [pc, #80]	; (8000538 <HAL_UART_MspInit+0x8c>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	4a13      	ldr	r2, [pc, #76]	; (8000538 <HAL_UART_MspInit+0x8c>)
 80004ea:	f043 0304 	orr.w	r3, r3, #4
 80004ee:	6193      	str	r3, [r2, #24]
 80004f0:	4b11      	ldr	r3, [pc, #68]	; (8000538 <HAL_UART_MspInit+0x8c>)
 80004f2:	699b      	ldr	r3, [r3, #24]
 80004f4:	f003 0304 	and.w	r3, r3, #4
 80004f8:	60bb      	str	r3, [r7, #8]
 80004fa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80004fc:	2304      	movs	r3, #4
 80004fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000500:	2302      	movs	r3, #2
 8000502:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000504:	2303      	movs	r3, #3
 8000506:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000508:	f107 0310 	add.w	r3, r7, #16
 800050c:	4619      	mov	r1, r3
 800050e:	480b      	ldr	r0, [pc, #44]	; (800053c <HAL_UART_MspInit+0x90>)
 8000510:	f000 f9e6 	bl	80008e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000514:	2308      	movs	r3, #8
 8000516:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000518:	2300      	movs	r3, #0
 800051a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051c:	2300      	movs	r3, #0
 800051e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000520:	f107 0310 	add.w	r3, r7, #16
 8000524:	4619      	mov	r1, r3
 8000526:	4805      	ldr	r0, [pc, #20]	; (800053c <HAL_UART_MspInit+0x90>)
 8000528:	f000 f9da 	bl	80008e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800052c:	bf00      	nop
 800052e:	3720      	adds	r7, #32
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	40004400 	.word	0x40004400
 8000538:	40021000 	.word	0x40021000
 800053c:	40010800 	.word	0x40010800

08000540 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000544:	e7fe      	b.n	8000544 <NMI_Handler+0x4>

08000546 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000546:	b480      	push	{r7}
 8000548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800054a:	e7fe      	b.n	800054a <HardFault_Handler+0x4>

0800054c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000550:	e7fe      	b.n	8000550 <MemManage_Handler+0x4>

08000552 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000552:	b480      	push	{r7}
 8000554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000556:	e7fe      	b.n	8000556 <BusFault_Handler+0x4>

08000558 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800055c:	e7fe      	b.n	800055c <UsageFault_Handler+0x4>

0800055e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800055e:	b480      	push	{r7}
 8000560:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000562:	bf00      	nop
 8000564:	46bd      	mov	sp, r7
 8000566:	bc80      	pop	{r7}
 8000568:	4770      	bx	lr

0800056a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800056a:	b480      	push	{r7}
 800056c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800056e:	bf00      	nop
 8000570:	46bd      	mov	sp, r7
 8000572:	bc80      	pop	{r7}
 8000574:	4770      	bx	lr

08000576 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000576:	b480      	push	{r7}
 8000578:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800057a:	bf00      	nop
 800057c:	46bd      	mov	sp, r7
 800057e:	bc80      	pop	{r7}
 8000580:	4770      	bx	lr

08000582 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000582:	b580      	push	{r7, lr}
 8000584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000586:	f000 f8ab 	bl	80006e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800058a:	bf00      	nop
 800058c:	bd80      	pop	{r7, pc}
	...

08000590 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b086      	sub	sp, #24
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000598:	4a14      	ldr	r2, [pc, #80]	; (80005ec <_sbrk+0x5c>)
 800059a:	4b15      	ldr	r3, [pc, #84]	; (80005f0 <_sbrk+0x60>)
 800059c:	1ad3      	subs	r3, r2, r3
 800059e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005a0:	697b      	ldr	r3, [r7, #20]
 80005a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005a4:	4b13      	ldr	r3, [pc, #76]	; (80005f4 <_sbrk+0x64>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d102      	bne.n	80005b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005ac:	4b11      	ldr	r3, [pc, #68]	; (80005f4 <_sbrk+0x64>)
 80005ae:	4a12      	ldr	r2, [pc, #72]	; (80005f8 <_sbrk+0x68>)
 80005b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005b2:	4b10      	ldr	r3, [pc, #64]	; (80005f4 <_sbrk+0x64>)
 80005b4:	681a      	ldr	r2, [r3, #0]
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	4413      	add	r3, r2
 80005ba:	693a      	ldr	r2, [r7, #16]
 80005bc:	429a      	cmp	r2, r3
 80005be:	d207      	bcs.n	80005d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005c0:	f001 fb7c 	bl	8001cbc <__errno>
 80005c4:	4603      	mov	r3, r0
 80005c6:	220c      	movs	r2, #12
 80005c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005ca:	f04f 33ff 	mov.w	r3, #4294967295
 80005ce:	e009      	b.n	80005e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005d0:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <_sbrk+0x64>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005d6:	4b07      	ldr	r3, [pc, #28]	; (80005f4 <_sbrk+0x64>)
 80005d8:	681a      	ldr	r2, [r3, #0]
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	4413      	add	r3, r2
 80005de:	4a05      	ldr	r2, [pc, #20]	; (80005f4 <_sbrk+0x64>)
 80005e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005e2:	68fb      	ldr	r3, [r7, #12]
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	3718      	adds	r7, #24
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	20005000 	.word	0x20005000
 80005f0:	00000400 	.word	0x00000400
 80005f4:	200000bc 	.word	0x200000bc
 80005f8:	20000188 	.word	0x20000188

080005fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000600:	bf00      	nop
 8000602:	46bd      	mov	sp, r7
 8000604:	bc80      	pop	{r7}
 8000606:	4770      	bx	lr

08000608 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000608:	480c      	ldr	r0, [pc, #48]	; (800063c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800060a:	490d      	ldr	r1, [pc, #52]	; (8000640 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800060c:	4a0d      	ldr	r2, [pc, #52]	; (8000644 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800060e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000610:	e002      	b.n	8000618 <LoopCopyDataInit>

08000612 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000612:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000614:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000616:	3304      	adds	r3, #4

08000618 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000618:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800061a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800061c:	d3f9      	bcc.n	8000612 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800061e:	4a0a      	ldr	r2, [pc, #40]	; (8000648 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000620:	4c0a      	ldr	r4, [pc, #40]	; (800064c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000622:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000624:	e001      	b.n	800062a <LoopFillZerobss>

08000626 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000626:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000628:	3204      	adds	r2, #4

0800062a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800062a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800062c:	d3fb      	bcc.n	8000626 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800062e:	f7ff ffe5 	bl	80005fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000632:	f001 fb49 	bl	8001cc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000636:	f7ff fda7 	bl	8000188 <main>
  bx lr
 800063a:	4770      	bx	lr
  ldr r0, =_sdata
 800063c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000640:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8000644:	08002624 	.word	0x08002624
  ldr r2, =_sbss
 8000648:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 800064c:	20000184 	.word	0x20000184

08000650 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000650:	e7fe      	b.n	8000650 <ADC1_2_IRQHandler>
	...

08000654 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000658:	4b08      	ldr	r3, [pc, #32]	; (800067c <HAL_Init+0x28>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a07      	ldr	r2, [pc, #28]	; (800067c <HAL_Init+0x28>)
 800065e:	f043 0310 	orr.w	r3, r3, #16
 8000662:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000664:	2003      	movs	r0, #3
 8000666:	f000 f907 	bl	8000878 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800066a:	200f      	movs	r0, #15
 800066c:	f000 f808 	bl	8000680 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000670:	f7ff feaa 	bl	80003c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000674:	2300      	movs	r3, #0
}
 8000676:	4618      	mov	r0, r3
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40022000 	.word	0x40022000

08000680 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000688:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <HAL_InitTick+0x54>)
 800068a:	681a      	ldr	r2, [r3, #0]
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <HAL_InitTick+0x58>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	4619      	mov	r1, r3
 8000692:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000696:	fbb3 f3f1 	udiv	r3, r3, r1
 800069a:	fbb2 f3f3 	udiv	r3, r2, r3
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 f911 	bl	80008c6 <HAL_SYSTICK_Config>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006aa:	2301      	movs	r3, #1
 80006ac:	e00e      	b.n	80006cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	2b0f      	cmp	r3, #15
 80006b2:	d80a      	bhi.n	80006ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006b4:	2200      	movs	r2, #0
 80006b6:	6879      	ldr	r1, [r7, #4]
 80006b8:	f04f 30ff 	mov.w	r0, #4294967295
 80006bc:	f000 f8e7 	bl	800088e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006c0:	4a06      	ldr	r2, [pc, #24]	; (80006dc <HAL_InitTick+0x5c>)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006c6:	2300      	movs	r3, #0
 80006c8:	e000      	b.n	80006cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006ca:	2301      	movs	r3, #1
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	20000000 	.word	0x20000000
 80006d8:	20000008 	.word	0x20000008
 80006dc:	20000004 	.word	0x20000004

080006e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006e4:	4b05      	ldr	r3, [pc, #20]	; (80006fc <HAL_IncTick+0x1c>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	461a      	mov	r2, r3
 80006ea:	4b05      	ldr	r3, [pc, #20]	; (8000700 <HAL_IncTick+0x20>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	4413      	add	r3, r2
 80006f0:	4a03      	ldr	r2, [pc, #12]	; (8000700 <HAL_IncTick+0x20>)
 80006f2:	6013      	str	r3, [r2, #0]
}
 80006f4:	bf00      	nop
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bc80      	pop	{r7}
 80006fa:	4770      	bx	lr
 80006fc:	20000008 	.word	0x20000008
 8000700:	20000170 	.word	0x20000170

08000704 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  return uwTick;
 8000708:	4b02      	ldr	r3, [pc, #8]	; (8000714 <HAL_GetTick+0x10>)
 800070a:	681b      	ldr	r3, [r3, #0]
}
 800070c:	4618      	mov	r0, r3
 800070e:	46bd      	mov	sp, r7
 8000710:	bc80      	pop	{r7}
 8000712:	4770      	bx	lr
 8000714:	20000170 	.word	0x20000170

08000718 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000718:	b480      	push	{r7}
 800071a:	b085      	sub	sp, #20
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	f003 0307 	and.w	r3, r3, #7
 8000726:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000728:	4b0c      	ldr	r3, [pc, #48]	; (800075c <__NVIC_SetPriorityGrouping+0x44>)
 800072a:	68db      	ldr	r3, [r3, #12]
 800072c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800072e:	68ba      	ldr	r2, [r7, #8]
 8000730:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000734:	4013      	ands	r3, r2
 8000736:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000740:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000744:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000748:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800074a:	4a04      	ldr	r2, [pc, #16]	; (800075c <__NVIC_SetPriorityGrouping+0x44>)
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	60d3      	str	r3, [r2, #12]
}
 8000750:	bf00      	nop
 8000752:	3714      	adds	r7, #20
 8000754:	46bd      	mov	sp, r7
 8000756:	bc80      	pop	{r7}
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	e000ed00 	.word	0xe000ed00

08000760 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000764:	4b04      	ldr	r3, [pc, #16]	; (8000778 <__NVIC_GetPriorityGrouping+0x18>)
 8000766:	68db      	ldr	r3, [r3, #12]
 8000768:	0a1b      	lsrs	r3, r3, #8
 800076a:	f003 0307 	and.w	r3, r3, #7
}
 800076e:	4618      	mov	r0, r3
 8000770:	46bd      	mov	sp, r7
 8000772:	bc80      	pop	{r7}
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	e000ed00 	.word	0xe000ed00

0800077c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	6039      	str	r1, [r7, #0]
 8000786:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800078c:	2b00      	cmp	r3, #0
 800078e:	db0a      	blt.n	80007a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	b2da      	uxtb	r2, r3
 8000794:	490c      	ldr	r1, [pc, #48]	; (80007c8 <__NVIC_SetPriority+0x4c>)
 8000796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800079a:	0112      	lsls	r2, r2, #4
 800079c:	b2d2      	uxtb	r2, r2
 800079e:	440b      	add	r3, r1
 80007a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007a4:	e00a      	b.n	80007bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	b2da      	uxtb	r2, r3
 80007aa:	4908      	ldr	r1, [pc, #32]	; (80007cc <__NVIC_SetPriority+0x50>)
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	f003 030f 	and.w	r3, r3, #15
 80007b2:	3b04      	subs	r3, #4
 80007b4:	0112      	lsls	r2, r2, #4
 80007b6:	b2d2      	uxtb	r2, r2
 80007b8:	440b      	add	r3, r1
 80007ba:	761a      	strb	r2, [r3, #24]
}
 80007bc:	bf00      	nop
 80007be:	370c      	adds	r7, #12
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bc80      	pop	{r7}
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	e000e100 	.word	0xe000e100
 80007cc:	e000ed00 	.word	0xe000ed00

080007d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b089      	sub	sp, #36	; 0x24
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	60f8      	str	r0, [r7, #12]
 80007d8:	60b9      	str	r1, [r7, #8]
 80007da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	f003 0307 	and.w	r3, r3, #7
 80007e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007e4:	69fb      	ldr	r3, [r7, #28]
 80007e6:	f1c3 0307 	rsb	r3, r3, #7
 80007ea:	2b04      	cmp	r3, #4
 80007ec:	bf28      	it	cs
 80007ee:	2304      	movcs	r3, #4
 80007f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007f2:	69fb      	ldr	r3, [r7, #28]
 80007f4:	3304      	adds	r3, #4
 80007f6:	2b06      	cmp	r3, #6
 80007f8:	d902      	bls.n	8000800 <NVIC_EncodePriority+0x30>
 80007fa:	69fb      	ldr	r3, [r7, #28]
 80007fc:	3b03      	subs	r3, #3
 80007fe:	e000      	b.n	8000802 <NVIC_EncodePriority+0x32>
 8000800:	2300      	movs	r3, #0
 8000802:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000804:	f04f 32ff 	mov.w	r2, #4294967295
 8000808:	69bb      	ldr	r3, [r7, #24]
 800080a:	fa02 f303 	lsl.w	r3, r2, r3
 800080e:	43da      	mvns	r2, r3
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	401a      	ands	r2, r3
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000818:	f04f 31ff 	mov.w	r1, #4294967295
 800081c:	697b      	ldr	r3, [r7, #20]
 800081e:	fa01 f303 	lsl.w	r3, r1, r3
 8000822:	43d9      	mvns	r1, r3
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000828:	4313      	orrs	r3, r2
         );
}
 800082a:	4618      	mov	r0, r3
 800082c:	3724      	adds	r7, #36	; 0x24
 800082e:	46bd      	mov	sp, r7
 8000830:	bc80      	pop	{r7}
 8000832:	4770      	bx	lr

08000834 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	3b01      	subs	r3, #1
 8000840:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000844:	d301      	bcc.n	800084a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000846:	2301      	movs	r3, #1
 8000848:	e00f      	b.n	800086a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800084a:	4a0a      	ldr	r2, [pc, #40]	; (8000874 <SysTick_Config+0x40>)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	3b01      	subs	r3, #1
 8000850:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000852:	210f      	movs	r1, #15
 8000854:	f04f 30ff 	mov.w	r0, #4294967295
 8000858:	f7ff ff90 	bl	800077c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800085c:	4b05      	ldr	r3, [pc, #20]	; (8000874 <SysTick_Config+0x40>)
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000862:	4b04      	ldr	r3, [pc, #16]	; (8000874 <SysTick_Config+0x40>)
 8000864:	2207      	movs	r2, #7
 8000866:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000868:	2300      	movs	r3, #0
}
 800086a:	4618      	mov	r0, r3
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	e000e010 	.word	0xe000e010

08000878 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000880:	6878      	ldr	r0, [r7, #4]
 8000882:	f7ff ff49 	bl	8000718 <__NVIC_SetPriorityGrouping>
}
 8000886:	bf00      	nop
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}

0800088e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800088e:	b580      	push	{r7, lr}
 8000890:	b086      	sub	sp, #24
 8000892:	af00      	add	r7, sp, #0
 8000894:	4603      	mov	r3, r0
 8000896:	60b9      	str	r1, [r7, #8]
 8000898:	607a      	str	r2, [r7, #4]
 800089a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800089c:	2300      	movs	r3, #0
 800089e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008a0:	f7ff ff5e 	bl	8000760 <__NVIC_GetPriorityGrouping>
 80008a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008a6:	687a      	ldr	r2, [r7, #4]
 80008a8:	68b9      	ldr	r1, [r7, #8]
 80008aa:	6978      	ldr	r0, [r7, #20]
 80008ac:	f7ff ff90 	bl	80007d0 <NVIC_EncodePriority>
 80008b0:	4602      	mov	r2, r0
 80008b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008b6:	4611      	mov	r1, r2
 80008b8:	4618      	mov	r0, r3
 80008ba:	f7ff ff5f 	bl	800077c <__NVIC_SetPriority>
}
 80008be:	bf00      	nop
 80008c0:	3718      	adds	r7, #24
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b082      	sub	sp, #8
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008ce:	6878      	ldr	r0, [r7, #4]
 80008d0:	f7ff ffb0 	bl	8000834 <SysTick_Config>
 80008d4:	4603      	mov	r3, r0
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
	...

080008e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b08b      	sub	sp, #44	; 0x2c
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
 80008e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008ea:	2300      	movs	r3, #0
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80008ee:	2300      	movs	r3, #0
 80008f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008f2:	e169      	b.n	8000bc8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80008f4:	2201      	movs	r2, #1
 80008f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f8:	fa02 f303 	lsl.w	r3, r2, r3
 80008fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	69fa      	ldr	r2, [r7, #28]
 8000904:	4013      	ands	r3, r2
 8000906:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000908:	69ba      	ldr	r2, [r7, #24]
 800090a:	69fb      	ldr	r3, [r7, #28]
 800090c:	429a      	cmp	r2, r3
 800090e:	f040 8158 	bne.w	8000bc2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	685b      	ldr	r3, [r3, #4]
 8000916:	4a9a      	ldr	r2, [pc, #616]	; (8000b80 <HAL_GPIO_Init+0x2a0>)
 8000918:	4293      	cmp	r3, r2
 800091a:	d05e      	beq.n	80009da <HAL_GPIO_Init+0xfa>
 800091c:	4a98      	ldr	r2, [pc, #608]	; (8000b80 <HAL_GPIO_Init+0x2a0>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d875      	bhi.n	8000a0e <HAL_GPIO_Init+0x12e>
 8000922:	4a98      	ldr	r2, [pc, #608]	; (8000b84 <HAL_GPIO_Init+0x2a4>)
 8000924:	4293      	cmp	r3, r2
 8000926:	d058      	beq.n	80009da <HAL_GPIO_Init+0xfa>
 8000928:	4a96      	ldr	r2, [pc, #600]	; (8000b84 <HAL_GPIO_Init+0x2a4>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d86f      	bhi.n	8000a0e <HAL_GPIO_Init+0x12e>
 800092e:	4a96      	ldr	r2, [pc, #600]	; (8000b88 <HAL_GPIO_Init+0x2a8>)
 8000930:	4293      	cmp	r3, r2
 8000932:	d052      	beq.n	80009da <HAL_GPIO_Init+0xfa>
 8000934:	4a94      	ldr	r2, [pc, #592]	; (8000b88 <HAL_GPIO_Init+0x2a8>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d869      	bhi.n	8000a0e <HAL_GPIO_Init+0x12e>
 800093a:	4a94      	ldr	r2, [pc, #592]	; (8000b8c <HAL_GPIO_Init+0x2ac>)
 800093c:	4293      	cmp	r3, r2
 800093e:	d04c      	beq.n	80009da <HAL_GPIO_Init+0xfa>
 8000940:	4a92      	ldr	r2, [pc, #584]	; (8000b8c <HAL_GPIO_Init+0x2ac>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d863      	bhi.n	8000a0e <HAL_GPIO_Init+0x12e>
 8000946:	4a92      	ldr	r2, [pc, #584]	; (8000b90 <HAL_GPIO_Init+0x2b0>)
 8000948:	4293      	cmp	r3, r2
 800094a:	d046      	beq.n	80009da <HAL_GPIO_Init+0xfa>
 800094c:	4a90      	ldr	r2, [pc, #576]	; (8000b90 <HAL_GPIO_Init+0x2b0>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d85d      	bhi.n	8000a0e <HAL_GPIO_Init+0x12e>
 8000952:	2b12      	cmp	r3, #18
 8000954:	d82a      	bhi.n	80009ac <HAL_GPIO_Init+0xcc>
 8000956:	2b12      	cmp	r3, #18
 8000958:	d859      	bhi.n	8000a0e <HAL_GPIO_Init+0x12e>
 800095a:	a201      	add	r2, pc, #4	; (adr r2, 8000960 <HAL_GPIO_Init+0x80>)
 800095c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000960:	080009db 	.word	0x080009db
 8000964:	080009b5 	.word	0x080009b5
 8000968:	080009c7 	.word	0x080009c7
 800096c:	08000a09 	.word	0x08000a09
 8000970:	08000a0f 	.word	0x08000a0f
 8000974:	08000a0f 	.word	0x08000a0f
 8000978:	08000a0f 	.word	0x08000a0f
 800097c:	08000a0f 	.word	0x08000a0f
 8000980:	08000a0f 	.word	0x08000a0f
 8000984:	08000a0f 	.word	0x08000a0f
 8000988:	08000a0f 	.word	0x08000a0f
 800098c:	08000a0f 	.word	0x08000a0f
 8000990:	08000a0f 	.word	0x08000a0f
 8000994:	08000a0f 	.word	0x08000a0f
 8000998:	08000a0f 	.word	0x08000a0f
 800099c:	08000a0f 	.word	0x08000a0f
 80009a0:	08000a0f 	.word	0x08000a0f
 80009a4:	080009bd 	.word	0x080009bd
 80009a8:	080009d1 	.word	0x080009d1
 80009ac:	4a79      	ldr	r2, [pc, #484]	; (8000b94 <HAL_GPIO_Init+0x2b4>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d013      	beq.n	80009da <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80009b2:	e02c      	b.n	8000a0e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	68db      	ldr	r3, [r3, #12]
 80009b8:	623b      	str	r3, [r7, #32]
          break;
 80009ba:	e029      	b.n	8000a10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	68db      	ldr	r3, [r3, #12]
 80009c0:	3304      	adds	r3, #4
 80009c2:	623b      	str	r3, [r7, #32]
          break;
 80009c4:	e024      	b.n	8000a10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	68db      	ldr	r3, [r3, #12]
 80009ca:	3308      	adds	r3, #8
 80009cc:	623b      	str	r3, [r7, #32]
          break;
 80009ce:	e01f      	b.n	8000a10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	68db      	ldr	r3, [r3, #12]
 80009d4:	330c      	adds	r3, #12
 80009d6:	623b      	str	r3, [r7, #32]
          break;
 80009d8:	e01a      	b.n	8000a10 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	689b      	ldr	r3, [r3, #8]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d102      	bne.n	80009e8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80009e2:	2304      	movs	r3, #4
 80009e4:	623b      	str	r3, [r7, #32]
          break;
 80009e6:	e013      	b.n	8000a10 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	689b      	ldr	r3, [r3, #8]
 80009ec:	2b01      	cmp	r3, #1
 80009ee:	d105      	bne.n	80009fc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009f0:	2308      	movs	r3, #8
 80009f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	69fa      	ldr	r2, [r7, #28]
 80009f8:	611a      	str	r2, [r3, #16]
          break;
 80009fa:	e009      	b.n	8000a10 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009fc:	2308      	movs	r3, #8
 80009fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	69fa      	ldr	r2, [r7, #28]
 8000a04:	615a      	str	r2, [r3, #20]
          break;
 8000a06:	e003      	b.n	8000a10 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	623b      	str	r3, [r7, #32]
          break;
 8000a0c:	e000      	b.n	8000a10 <HAL_GPIO_Init+0x130>
          break;
 8000a0e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a10:	69bb      	ldr	r3, [r7, #24]
 8000a12:	2bff      	cmp	r3, #255	; 0xff
 8000a14:	d801      	bhi.n	8000a1a <HAL_GPIO_Init+0x13a>
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	e001      	b.n	8000a1e <HAL_GPIO_Init+0x13e>
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	3304      	adds	r3, #4
 8000a1e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a20:	69bb      	ldr	r3, [r7, #24]
 8000a22:	2bff      	cmp	r3, #255	; 0xff
 8000a24:	d802      	bhi.n	8000a2c <HAL_GPIO_Init+0x14c>
 8000a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a28:	009b      	lsls	r3, r3, #2
 8000a2a:	e002      	b.n	8000a32 <HAL_GPIO_Init+0x152>
 8000a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a2e:	3b08      	subs	r3, #8
 8000a30:	009b      	lsls	r3, r3, #2
 8000a32:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	210f      	movs	r1, #15
 8000a3a:	693b      	ldr	r3, [r7, #16]
 8000a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a40:	43db      	mvns	r3, r3
 8000a42:	401a      	ands	r2, r3
 8000a44:	6a39      	ldr	r1, [r7, #32]
 8000a46:	693b      	ldr	r3, [r7, #16]
 8000a48:	fa01 f303 	lsl.w	r3, r1, r3
 8000a4c:	431a      	orrs	r2, r3
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	685b      	ldr	r3, [r3, #4]
 8000a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	f000 80b1 	beq.w	8000bc2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a60:	4b4d      	ldr	r3, [pc, #308]	; (8000b98 <HAL_GPIO_Init+0x2b8>)
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	4a4c      	ldr	r2, [pc, #304]	; (8000b98 <HAL_GPIO_Init+0x2b8>)
 8000a66:	f043 0301 	orr.w	r3, r3, #1
 8000a6a:	6193      	str	r3, [r2, #24]
 8000a6c:	4b4a      	ldr	r3, [pc, #296]	; (8000b98 <HAL_GPIO_Init+0x2b8>)
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	f003 0301 	and.w	r3, r3, #1
 8000a74:	60bb      	str	r3, [r7, #8]
 8000a76:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a78:	4a48      	ldr	r2, [pc, #288]	; (8000b9c <HAL_GPIO_Init+0x2bc>)
 8000a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a7c:	089b      	lsrs	r3, r3, #2
 8000a7e:	3302      	adds	r3, #2
 8000a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a84:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a88:	f003 0303 	and.w	r3, r3, #3
 8000a8c:	009b      	lsls	r3, r3, #2
 8000a8e:	220f      	movs	r2, #15
 8000a90:	fa02 f303 	lsl.w	r3, r2, r3
 8000a94:	43db      	mvns	r3, r3
 8000a96:	68fa      	ldr	r2, [r7, #12]
 8000a98:	4013      	ands	r3, r2
 8000a9a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	4a40      	ldr	r2, [pc, #256]	; (8000ba0 <HAL_GPIO_Init+0x2c0>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d013      	beq.n	8000acc <HAL_GPIO_Init+0x1ec>
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	4a3f      	ldr	r2, [pc, #252]	; (8000ba4 <HAL_GPIO_Init+0x2c4>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d00d      	beq.n	8000ac8 <HAL_GPIO_Init+0x1e8>
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	4a3e      	ldr	r2, [pc, #248]	; (8000ba8 <HAL_GPIO_Init+0x2c8>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d007      	beq.n	8000ac4 <HAL_GPIO_Init+0x1e4>
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	4a3d      	ldr	r2, [pc, #244]	; (8000bac <HAL_GPIO_Init+0x2cc>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d101      	bne.n	8000ac0 <HAL_GPIO_Init+0x1e0>
 8000abc:	2303      	movs	r3, #3
 8000abe:	e006      	b.n	8000ace <HAL_GPIO_Init+0x1ee>
 8000ac0:	2304      	movs	r3, #4
 8000ac2:	e004      	b.n	8000ace <HAL_GPIO_Init+0x1ee>
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	e002      	b.n	8000ace <HAL_GPIO_Init+0x1ee>
 8000ac8:	2301      	movs	r3, #1
 8000aca:	e000      	b.n	8000ace <HAL_GPIO_Init+0x1ee>
 8000acc:	2300      	movs	r3, #0
 8000ace:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ad0:	f002 0203 	and.w	r2, r2, #3
 8000ad4:	0092      	lsls	r2, r2, #2
 8000ad6:	4093      	lsls	r3, r2
 8000ad8:	68fa      	ldr	r2, [r7, #12]
 8000ada:	4313      	orrs	r3, r2
 8000adc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ade:	492f      	ldr	r1, [pc, #188]	; (8000b9c <HAL_GPIO_Init+0x2bc>)
 8000ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae2:	089b      	lsrs	r3, r3, #2
 8000ae4:	3302      	adds	r3, #2
 8000ae6:	68fa      	ldr	r2, [r7, #12]
 8000ae8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d006      	beq.n	8000b06 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000af8:	4b2d      	ldr	r3, [pc, #180]	; (8000bb0 <HAL_GPIO_Init+0x2d0>)
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	492c      	ldr	r1, [pc, #176]	; (8000bb0 <HAL_GPIO_Init+0x2d0>)
 8000afe:	69bb      	ldr	r3, [r7, #24]
 8000b00:	4313      	orrs	r3, r2
 8000b02:	600b      	str	r3, [r1, #0]
 8000b04:	e006      	b.n	8000b14 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b06:	4b2a      	ldr	r3, [pc, #168]	; (8000bb0 <HAL_GPIO_Init+0x2d0>)
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	69bb      	ldr	r3, [r7, #24]
 8000b0c:	43db      	mvns	r3, r3
 8000b0e:	4928      	ldr	r1, [pc, #160]	; (8000bb0 <HAL_GPIO_Init+0x2d0>)
 8000b10:	4013      	ands	r3, r2
 8000b12:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d006      	beq.n	8000b2e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b20:	4b23      	ldr	r3, [pc, #140]	; (8000bb0 <HAL_GPIO_Init+0x2d0>)
 8000b22:	685a      	ldr	r2, [r3, #4]
 8000b24:	4922      	ldr	r1, [pc, #136]	; (8000bb0 <HAL_GPIO_Init+0x2d0>)
 8000b26:	69bb      	ldr	r3, [r7, #24]
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	604b      	str	r3, [r1, #4]
 8000b2c:	e006      	b.n	8000b3c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b2e:	4b20      	ldr	r3, [pc, #128]	; (8000bb0 <HAL_GPIO_Init+0x2d0>)
 8000b30:	685a      	ldr	r2, [r3, #4]
 8000b32:	69bb      	ldr	r3, [r7, #24]
 8000b34:	43db      	mvns	r3, r3
 8000b36:	491e      	ldr	r1, [pc, #120]	; (8000bb0 <HAL_GPIO_Init+0x2d0>)
 8000b38:	4013      	ands	r3, r2
 8000b3a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d006      	beq.n	8000b56 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b48:	4b19      	ldr	r3, [pc, #100]	; (8000bb0 <HAL_GPIO_Init+0x2d0>)
 8000b4a:	689a      	ldr	r2, [r3, #8]
 8000b4c:	4918      	ldr	r1, [pc, #96]	; (8000bb0 <HAL_GPIO_Init+0x2d0>)
 8000b4e:	69bb      	ldr	r3, [r7, #24]
 8000b50:	4313      	orrs	r3, r2
 8000b52:	608b      	str	r3, [r1, #8]
 8000b54:	e006      	b.n	8000b64 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b56:	4b16      	ldr	r3, [pc, #88]	; (8000bb0 <HAL_GPIO_Init+0x2d0>)
 8000b58:	689a      	ldr	r2, [r3, #8]
 8000b5a:	69bb      	ldr	r3, [r7, #24]
 8000b5c:	43db      	mvns	r3, r3
 8000b5e:	4914      	ldr	r1, [pc, #80]	; (8000bb0 <HAL_GPIO_Init+0x2d0>)
 8000b60:	4013      	ands	r3, r2
 8000b62:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d021      	beq.n	8000bb4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b70:	4b0f      	ldr	r3, [pc, #60]	; (8000bb0 <HAL_GPIO_Init+0x2d0>)
 8000b72:	68da      	ldr	r2, [r3, #12]
 8000b74:	490e      	ldr	r1, [pc, #56]	; (8000bb0 <HAL_GPIO_Init+0x2d0>)
 8000b76:	69bb      	ldr	r3, [r7, #24]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	60cb      	str	r3, [r1, #12]
 8000b7c:	e021      	b.n	8000bc2 <HAL_GPIO_Init+0x2e2>
 8000b7e:	bf00      	nop
 8000b80:	10320000 	.word	0x10320000
 8000b84:	10310000 	.word	0x10310000
 8000b88:	10220000 	.word	0x10220000
 8000b8c:	10210000 	.word	0x10210000
 8000b90:	10120000 	.word	0x10120000
 8000b94:	10110000 	.word	0x10110000
 8000b98:	40021000 	.word	0x40021000
 8000b9c:	40010000 	.word	0x40010000
 8000ba0:	40010800 	.word	0x40010800
 8000ba4:	40010c00 	.word	0x40010c00
 8000ba8:	40011000 	.word	0x40011000
 8000bac:	40011400 	.word	0x40011400
 8000bb0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000bb4:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <HAL_GPIO_Init+0x304>)
 8000bb6:	68da      	ldr	r2, [r3, #12]
 8000bb8:	69bb      	ldr	r3, [r7, #24]
 8000bba:	43db      	mvns	r3, r3
 8000bbc:	4909      	ldr	r1, [pc, #36]	; (8000be4 <HAL_GPIO_Init+0x304>)
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bce:	fa22 f303 	lsr.w	r3, r2, r3
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	f47f ae8e 	bne.w	80008f4 <HAL_GPIO_Init+0x14>
  }
}
 8000bd8:	bf00      	nop
 8000bda:	bf00      	nop
 8000bdc:	372c      	adds	r7, #44	; 0x2c
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bc80      	pop	{r7}
 8000be2:	4770      	bx	lr
 8000be4:	40010400 	.word	0x40010400

08000be8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b085      	sub	sp, #20
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	460b      	mov	r3, r1
 8000bf2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	689a      	ldr	r2, [r3, #8]
 8000bf8:	887b      	ldrh	r3, [r7, #2]
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d002      	beq.n	8000c06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000c00:	2301      	movs	r3, #1
 8000c02:	73fb      	strb	r3, [r7, #15]
 8000c04:	e001      	b.n	8000c0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000c06:	2300      	movs	r3, #0
 8000c08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3714      	adds	r7, #20
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bc80      	pop	{r7}
 8000c14:	4770      	bx	lr

08000c16 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c16:	b480      	push	{r7}
 8000c18:	b083      	sub	sp, #12
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	6078      	str	r0, [r7, #4]
 8000c1e:	460b      	mov	r3, r1
 8000c20:	807b      	strh	r3, [r7, #2]
 8000c22:	4613      	mov	r3, r2
 8000c24:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c26:	787b      	ldrb	r3, [r7, #1]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d003      	beq.n	8000c34 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c2c:	887a      	ldrh	r2, [r7, #2]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000c32:	e003      	b.n	8000c3c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c34:	887b      	ldrh	r3, [r7, #2]
 8000c36:	041a      	lsls	r2, r3, #16
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	611a      	str	r2, [r3, #16]
}
 8000c3c:	bf00      	nop
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bc80      	pop	{r7}
 8000c44:	4770      	bx	lr
	...

08000c48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d101      	bne.n	8000c5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
 8000c58:	e12b      	b.n	8000eb2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d106      	bne.n	8000c74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2200      	movs	r2, #0
 8000c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000c6e:	6878      	ldr	r0, [r7, #4]
 8000c70:	f7ff fbdc 	bl	800042c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2224      	movs	r2, #36	; 0x24
 8000c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f022 0201 	bic.w	r2, r2, #1
 8000c8a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000c9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000caa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000cac:	f000 fce4 	bl	8001678 <HAL_RCC_GetPCLK1Freq>
 8000cb0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	4a81      	ldr	r2, [pc, #516]	; (8000ebc <HAL_I2C_Init+0x274>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d807      	bhi.n	8000ccc <HAL_I2C_Init+0x84>
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	4a80      	ldr	r2, [pc, #512]	; (8000ec0 <HAL_I2C_Init+0x278>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	bf94      	ite	ls
 8000cc4:	2301      	movls	r3, #1
 8000cc6:	2300      	movhi	r3, #0
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	e006      	b.n	8000cda <HAL_I2C_Init+0x92>
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	4a7d      	ldr	r2, [pc, #500]	; (8000ec4 <HAL_I2C_Init+0x27c>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	bf94      	ite	ls
 8000cd4:	2301      	movls	r3, #1
 8000cd6:	2300      	movhi	r3, #0
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e0e7      	b.n	8000eb2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	4a78      	ldr	r2, [pc, #480]	; (8000ec8 <HAL_I2C_Init+0x280>)
 8000ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8000cea:	0c9b      	lsrs	r3, r3, #18
 8000cec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	68ba      	ldr	r2, [r7, #8]
 8000cfe:	430a      	orrs	r2, r1
 8000d00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	6a1b      	ldr	r3, [r3, #32]
 8000d08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	4a6a      	ldr	r2, [pc, #424]	; (8000ebc <HAL_I2C_Init+0x274>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d802      	bhi.n	8000d1c <HAL_I2C_Init+0xd4>
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	3301      	adds	r3, #1
 8000d1a:	e009      	b.n	8000d30 <HAL_I2C_Init+0xe8>
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000d22:	fb02 f303 	mul.w	r3, r2, r3
 8000d26:	4a69      	ldr	r2, [pc, #420]	; (8000ecc <HAL_I2C_Init+0x284>)
 8000d28:	fba2 2303 	umull	r2, r3, r2, r3
 8000d2c:	099b      	lsrs	r3, r3, #6
 8000d2e:	3301      	adds	r3, #1
 8000d30:	687a      	ldr	r2, [r7, #4]
 8000d32:	6812      	ldr	r2, [r2, #0]
 8000d34:	430b      	orrs	r3, r1
 8000d36:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	69db      	ldr	r3, [r3, #28]
 8000d3e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000d42:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	495c      	ldr	r1, [pc, #368]	; (8000ebc <HAL_I2C_Init+0x274>)
 8000d4c:	428b      	cmp	r3, r1
 8000d4e:	d819      	bhi.n	8000d84 <HAL_I2C_Init+0x13c>
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	1e59      	subs	r1, r3, #1
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d5e:	1c59      	adds	r1, r3, #1
 8000d60:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000d64:	400b      	ands	r3, r1
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d00a      	beq.n	8000d80 <HAL_I2C_Init+0x138>
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	1e59      	subs	r1, r3, #1
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d78:	3301      	adds	r3, #1
 8000d7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d7e:	e051      	b.n	8000e24 <HAL_I2C_Init+0x1dc>
 8000d80:	2304      	movs	r3, #4
 8000d82:	e04f      	b.n	8000e24 <HAL_I2C_Init+0x1dc>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	689b      	ldr	r3, [r3, #8]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d111      	bne.n	8000db0 <HAL_I2C_Init+0x168>
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	1e58      	subs	r0, r3, #1
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6859      	ldr	r1, [r3, #4]
 8000d94:	460b      	mov	r3, r1
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	440b      	add	r3, r1
 8000d9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d9e:	3301      	adds	r3, #1
 8000da0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	bf0c      	ite	eq
 8000da8:	2301      	moveq	r3, #1
 8000daa:	2300      	movne	r3, #0
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	e012      	b.n	8000dd6 <HAL_I2C_Init+0x18e>
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	1e58      	subs	r0, r3, #1
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6859      	ldr	r1, [r3, #4]
 8000db8:	460b      	mov	r3, r1
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	440b      	add	r3, r1
 8000dbe:	0099      	lsls	r1, r3, #2
 8000dc0:	440b      	add	r3, r1
 8000dc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	bf0c      	ite	eq
 8000dd0:	2301      	moveq	r3, #1
 8000dd2:	2300      	movne	r3, #0
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <HAL_I2C_Init+0x196>
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e022      	b.n	8000e24 <HAL_I2C_Init+0x1dc>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	689b      	ldr	r3, [r3, #8]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d10e      	bne.n	8000e04 <HAL_I2C_Init+0x1bc>
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	1e58      	subs	r0, r3, #1
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6859      	ldr	r1, [r3, #4]
 8000dee:	460b      	mov	r3, r1
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	440b      	add	r3, r1
 8000df4:	fbb0 f3f3 	udiv	r3, r0, r3
 8000df8:	3301      	adds	r3, #1
 8000dfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000dfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e02:	e00f      	b.n	8000e24 <HAL_I2C_Init+0x1dc>
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	1e58      	subs	r0, r3, #1
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6859      	ldr	r1, [r3, #4]
 8000e0c:	460b      	mov	r3, r1
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	440b      	add	r3, r1
 8000e12:	0099      	lsls	r1, r3, #2
 8000e14:	440b      	add	r3, r1
 8000e16:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e24:	6879      	ldr	r1, [r7, #4]
 8000e26:	6809      	ldr	r1, [r1, #0]
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	69da      	ldr	r2, [r3, #28]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6a1b      	ldr	r3, [r3, #32]
 8000e3e:	431a      	orrs	r2, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	430a      	orrs	r2, r1
 8000e46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000e52:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	6911      	ldr	r1, [r2, #16]
 8000e5a:	687a      	ldr	r2, [r7, #4]
 8000e5c:	68d2      	ldr	r2, [r2, #12]
 8000e5e:	4311      	orrs	r1, r2
 8000e60:	687a      	ldr	r2, [r7, #4]
 8000e62:	6812      	ldr	r2, [r2, #0]
 8000e64:	430b      	orrs	r3, r1
 8000e66:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	68db      	ldr	r3, [r3, #12]
 8000e6e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	695a      	ldr	r2, [r3, #20]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	699b      	ldr	r3, [r3, #24]
 8000e7a:	431a      	orrs	r2, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	430a      	orrs	r2, r1
 8000e82:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f042 0201 	orr.w	r2, r2, #1
 8000e92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2200      	movs	r2, #0
 8000e98:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2220      	movs	r2, #32
 8000e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2200      	movs	r2, #0
 8000eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3710      	adds	r7, #16
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	000186a0 	.word	0x000186a0
 8000ec0:	001e847f 	.word	0x001e847f
 8000ec4:	003d08ff 	.word	0x003d08ff
 8000ec8:	431bde83 	.word	0x431bde83
 8000ecc:	10624dd3 	.word	0x10624dd3

08000ed0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d101      	bne.n	8000ee2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e26c      	b.n	80013bc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f003 0301 	and.w	r3, r3, #1
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	f000 8087 	beq.w	8000ffe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ef0:	4b92      	ldr	r3, [pc, #584]	; (800113c <HAL_RCC_OscConfig+0x26c>)
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f003 030c 	and.w	r3, r3, #12
 8000ef8:	2b04      	cmp	r3, #4
 8000efa:	d00c      	beq.n	8000f16 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000efc:	4b8f      	ldr	r3, [pc, #572]	; (800113c <HAL_RCC_OscConfig+0x26c>)
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f003 030c 	and.w	r3, r3, #12
 8000f04:	2b08      	cmp	r3, #8
 8000f06:	d112      	bne.n	8000f2e <HAL_RCC_OscConfig+0x5e>
 8000f08:	4b8c      	ldr	r3, [pc, #560]	; (800113c <HAL_RCC_OscConfig+0x26c>)
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f14:	d10b      	bne.n	8000f2e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f16:	4b89      	ldr	r3, [pc, #548]	; (800113c <HAL_RCC_OscConfig+0x26c>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d06c      	beq.n	8000ffc <HAL_RCC_OscConfig+0x12c>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d168      	bne.n	8000ffc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e246      	b.n	80013bc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f36:	d106      	bne.n	8000f46 <HAL_RCC_OscConfig+0x76>
 8000f38:	4b80      	ldr	r3, [pc, #512]	; (800113c <HAL_RCC_OscConfig+0x26c>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a7f      	ldr	r2, [pc, #508]	; (800113c <HAL_RCC_OscConfig+0x26c>)
 8000f3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f42:	6013      	str	r3, [r2, #0]
 8000f44:	e02e      	b.n	8000fa4 <HAL_RCC_OscConfig+0xd4>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d10c      	bne.n	8000f68 <HAL_RCC_OscConfig+0x98>
 8000f4e:	4b7b      	ldr	r3, [pc, #492]	; (800113c <HAL_RCC_OscConfig+0x26c>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a7a      	ldr	r2, [pc, #488]	; (800113c <HAL_RCC_OscConfig+0x26c>)
 8000f54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f58:	6013      	str	r3, [r2, #0]
 8000f5a:	4b78      	ldr	r3, [pc, #480]	; (800113c <HAL_RCC_OscConfig+0x26c>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a77      	ldr	r2, [pc, #476]	; (800113c <HAL_RCC_OscConfig+0x26c>)
 8000f60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f64:	6013      	str	r3, [r2, #0]
 8000f66:	e01d      	b.n	8000fa4 <HAL_RCC_OscConfig+0xd4>
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f70:	d10c      	bne.n	8000f8c <HAL_RCC_OscConfig+0xbc>
 8000f72:	4b72      	ldr	r3, [pc, #456]	; (800113c <HAL_RCC_OscConfig+0x26c>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a71      	ldr	r2, [pc, #452]	; (800113c <HAL_RCC_OscConfig+0x26c>)
 8000f78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f7c:	6013      	str	r3, [r2, #0]
 8000f7e:	4b6f      	ldr	r3, [pc, #444]	; (800113c <HAL_RCC_OscConfig+0x26c>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a6e      	ldr	r2, [pc, #440]	; (800113c <HAL_RCC_OscConfig+0x26c>)
 8000f84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f88:	6013      	str	r3, [r2, #0]
 8000f8a:	e00b      	b.n	8000fa4 <HAL_RCC_OscConfig+0xd4>
 8000f8c:	4b6b      	ldr	r3, [pc, #428]	; (800113c <HAL_RCC_OscConfig+0x26c>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a6a      	ldr	r2, [pc, #424]	; (800113c <HAL_RCC_OscConfig+0x26c>)
 8000f92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f96:	6013      	str	r3, [r2, #0]
 8000f98:	4b68      	ldr	r3, [pc, #416]	; (800113c <HAL_RCC_OscConfig+0x26c>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a67      	ldr	r2, [pc, #412]	; (800113c <HAL_RCC_OscConfig+0x26c>)
 8000f9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fa2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d013      	beq.n	8000fd4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fac:	f7ff fbaa 	bl	8000704 <HAL_GetTick>
 8000fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fb2:	e008      	b.n	8000fc6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fb4:	f7ff fba6 	bl	8000704 <HAL_GetTick>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	2b64      	cmp	r3, #100	; 0x64
 8000fc0:	d901      	bls.n	8000fc6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	e1fa      	b.n	80013bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fc6:	4b5d      	ldr	r3, [pc, #372]	; (800113c <HAL_RCC_OscConfig+0x26c>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d0f0      	beq.n	8000fb4 <HAL_RCC_OscConfig+0xe4>
 8000fd2:	e014      	b.n	8000ffe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd4:	f7ff fb96 	bl	8000704 <HAL_GetTick>
 8000fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fda:	e008      	b.n	8000fee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fdc:	f7ff fb92 	bl	8000704 <HAL_GetTick>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	2b64      	cmp	r3, #100	; 0x64
 8000fe8:	d901      	bls.n	8000fee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000fea:	2303      	movs	r3, #3
 8000fec:	e1e6      	b.n	80013bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fee:	4b53      	ldr	r3, [pc, #332]	; (800113c <HAL_RCC_OscConfig+0x26c>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d1f0      	bne.n	8000fdc <HAL_RCC_OscConfig+0x10c>
 8000ffa:	e000      	b.n	8000ffe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ffc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f003 0302 	and.w	r3, r3, #2
 8001006:	2b00      	cmp	r3, #0
 8001008:	d063      	beq.n	80010d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800100a:	4b4c      	ldr	r3, [pc, #304]	; (800113c <HAL_RCC_OscConfig+0x26c>)
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f003 030c 	and.w	r3, r3, #12
 8001012:	2b00      	cmp	r3, #0
 8001014:	d00b      	beq.n	800102e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001016:	4b49      	ldr	r3, [pc, #292]	; (800113c <HAL_RCC_OscConfig+0x26c>)
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f003 030c 	and.w	r3, r3, #12
 800101e:	2b08      	cmp	r3, #8
 8001020:	d11c      	bne.n	800105c <HAL_RCC_OscConfig+0x18c>
 8001022:	4b46      	ldr	r3, [pc, #280]	; (800113c <HAL_RCC_OscConfig+0x26c>)
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800102a:	2b00      	cmp	r3, #0
 800102c:	d116      	bne.n	800105c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800102e:	4b43      	ldr	r3, [pc, #268]	; (800113c <HAL_RCC_OscConfig+0x26c>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f003 0302 	and.w	r3, r3, #2
 8001036:	2b00      	cmp	r3, #0
 8001038:	d005      	beq.n	8001046 <HAL_RCC_OscConfig+0x176>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	691b      	ldr	r3, [r3, #16]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d001      	beq.n	8001046 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e1ba      	b.n	80013bc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001046:	4b3d      	ldr	r3, [pc, #244]	; (800113c <HAL_RCC_OscConfig+0x26c>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	695b      	ldr	r3, [r3, #20]
 8001052:	00db      	lsls	r3, r3, #3
 8001054:	4939      	ldr	r1, [pc, #228]	; (800113c <HAL_RCC_OscConfig+0x26c>)
 8001056:	4313      	orrs	r3, r2
 8001058:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800105a:	e03a      	b.n	80010d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	691b      	ldr	r3, [r3, #16]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d020      	beq.n	80010a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001064:	4b36      	ldr	r3, [pc, #216]	; (8001140 <HAL_RCC_OscConfig+0x270>)
 8001066:	2201      	movs	r2, #1
 8001068:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800106a:	f7ff fb4b 	bl	8000704 <HAL_GetTick>
 800106e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001070:	e008      	b.n	8001084 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001072:	f7ff fb47 	bl	8000704 <HAL_GetTick>
 8001076:	4602      	mov	r2, r0
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	1ad3      	subs	r3, r2, r3
 800107c:	2b02      	cmp	r3, #2
 800107e:	d901      	bls.n	8001084 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001080:	2303      	movs	r3, #3
 8001082:	e19b      	b.n	80013bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001084:	4b2d      	ldr	r3, [pc, #180]	; (800113c <HAL_RCC_OscConfig+0x26c>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f003 0302 	and.w	r3, r3, #2
 800108c:	2b00      	cmp	r3, #0
 800108e:	d0f0      	beq.n	8001072 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001090:	4b2a      	ldr	r3, [pc, #168]	; (800113c <HAL_RCC_OscConfig+0x26c>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	695b      	ldr	r3, [r3, #20]
 800109c:	00db      	lsls	r3, r3, #3
 800109e:	4927      	ldr	r1, [pc, #156]	; (800113c <HAL_RCC_OscConfig+0x26c>)
 80010a0:	4313      	orrs	r3, r2
 80010a2:	600b      	str	r3, [r1, #0]
 80010a4:	e015      	b.n	80010d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010a6:	4b26      	ldr	r3, [pc, #152]	; (8001140 <HAL_RCC_OscConfig+0x270>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ac:	f7ff fb2a 	bl	8000704 <HAL_GetTick>
 80010b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010b2:	e008      	b.n	80010c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010b4:	f7ff fb26 	bl	8000704 <HAL_GetTick>
 80010b8:	4602      	mov	r2, r0
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	2b02      	cmp	r3, #2
 80010c0:	d901      	bls.n	80010c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80010c2:	2303      	movs	r3, #3
 80010c4:	e17a      	b.n	80013bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010c6:	4b1d      	ldr	r3, [pc, #116]	; (800113c <HAL_RCC_OscConfig+0x26c>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f003 0302 	and.w	r3, r3, #2
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d1f0      	bne.n	80010b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f003 0308 	and.w	r3, r3, #8
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d03a      	beq.n	8001154 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	699b      	ldr	r3, [r3, #24]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d019      	beq.n	800111a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010e6:	4b17      	ldr	r3, [pc, #92]	; (8001144 <HAL_RCC_OscConfig+0x274>)
 80010e8:	2201      	movs	r2, #1
 80010ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010ec:	f7ff fb0a 	bl	8000704 <HAL_GetTick>
 80010f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010f2:	e008      	b.n	8001106 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010f4:	f7ff fb06 	bl	8000704 <HAL_GetTick>
 80010f8:	4602      	mov	r2, r0
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	2b02      	cmp	r3, #2
 8001100:	d901      	bls.n	8001106 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001102:	2303      	movs	r3, #3
 8001104:	e15a      	b.n	80013bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001106:	4b0d      	ldr	r3, [pc, #52]	; (800113c <HAL_RCC_OscConfig+0x26c>)
 8001108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800110a:	f003 0302 	and.w	r3, r3, #2
 800110e:	2b00      	cmp	r3, #0
 8001110:	d0f0      	beq.n	80010f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001112:	2001      	movs	r0, #1
 8001114:	f000 fad8 	bl	80016c8 <RCC_Delay>
 8001118:	e01c      	b.n	8001154 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800111a:	4b0a      	ldr	r3, [pc, #40]	; (8001144 <HAL_RCC_OscConfig+0x274>)
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001120:	f7ff faf0 	bl	8000704 <HAL_GetTick>
 8001124:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001126:	e00f      	b.n	8001148 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001128:	f7ff faec 	bl	8000704 <HAL_GetTick>
 800112c:	4602      	mov	r2, r0
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	2b02      	cmp	r3, #2
 8001134:	d908      	bls.n	8001148 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001136:	2303      	movs	r3, #3
 8001138:	e140      	b.n	80013bc <HAL_RCC_OscConfig+0x4ec>
 800113a:	bf00      	nop
 800113c:	40021000 	.word	0x40021000
 8001140:	42420000 	.word	0x42420000
 8001144:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001148:	4b9e      	ldr	r3, [pc, #632]	; (80013c4 <HAL_RCC_OscConfig+0x4f4>)
 800114a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800114c:	f003 0302 	and.w	r3, r3, #2
 8001150:	2b00      	cmp	r3, #0
 8001152:	d1e9      	bne.n	8001128 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f003 0304 	and.w	r3, r3, #4
 800115c:	2b00      	cmp	r3, #0
 800115e:	f000 80a6 	beq.w	80012ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001162:	2300      	movs	r3, #0
 8001164:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001166:	4b97      	ldr	r3, [pc, #604]	; (80013c4 <HAL_RCC_OscConfig+0x4f4>)
 8001168:	69db      	ldr	r3, [r3, #28]
 800116a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d10d      	bne.n	800118e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001172:	4b94      	ldr	r3, [pc, #592]	; (80013c4 <HAL_RCC_OscConfig+0x4f4>)
 8001174:	69db      	ldr	r3, [r3, #28]
 8001176:	4a93      	ldr	r2, [pc, #588]	; (80013c4 <HAL_RCC_OscConfig+0x4f4>)
 8001178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800117c:	61d3      	str	r3, [r2, #28]
 800117e:	4b91      	ldr	r3, [pc, #580]	; (80013c4 <HAL_RCC_OscConfig+0x4f4>)
 8001180:	69db      	ldr	r3, [r3, #28]
 8001182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001186:	60bb      	str	r3, [r7, #8]
 8001188:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800118a:	2301      	movs	r3, #1
 800118c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800118e:	4b8e      	ldr	r3, [pc, #568]	; (80013c8 <HAL_RCC_OscConfig+0x4f8>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001196:	2b00      	cmp	r3, #0
 8001198:	d118      	bne.n	80011cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800119a:	4b8b      	ldr	r3, [pc, #556]	; (80013c8 <HAL_RCC_OscConfig+0x4f8>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a8a      	ldr	r2, [pc, #552]	; (80013c8 <HAL_RCC_OscConfig+0x4f8>)
 80011a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011a6:	f7ff faad 	bl	8000704 <HAL_GetTick>
 80011aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011ac:	e008      	b.n	80011c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011ae:	f7ff faa9 	bl	8000704 <HAL_GetTick>
 80011b2:	4602      	mov	r2, r0
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	2b64      	cmp	r3, #100	; 0x64
 80011ba:	d901      	bls.n	80011c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80011bc:	2303      	movs	r3, #3
 80011be:	e0fd      	b.n	80013bc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011c0:	4b81      	ldr	r3, [pc, #516]	; (80013c8 <HAL_RCC_OscConfig+0x4f8>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d0f0      	beq.n	80011ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d106      	bne.n	80011e2 <HAL_RCC_OscConfig+0x312>
 80011d4:	4b7b      	ldr	r3, [pc, #492]	; (80013c4 <HAL_RCC_OscConfig+0x4f4>)
 80011d6:	6a1b      	ldr	r3, [r3, #32]
 80011d8:	4a7a      	ldr	r2, [pc, #488]	; (80013c4 <HAL_RCC_OscConfig+0x4f4>)
 80011da:	f043 0301 	orr.w	r3, r3, #1
 80011de:	6213      	str	r3, [r2, #32]
 80011e0:	e02d      	b.n	800123e <HAL_RCC_OscConfig+0x36e>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	68db      	ldr	r3, [r3, #12]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d10c      	bne.n	8001204 <HAL_RCC_OscConfig+0x334>
 80011ea:	4b76      	ldr	r3, [pc, #472]	; (80013c4 <HAL_RCC_OscConfig+0x4f4>)
 80011ec:	6a1b      	ldr	r3, [r3, #32]
 80011ee:	4a75      	ldr	r2, [pc, #468]	; (80013c4 <HAL_RCC_OscConfig+0x4f4>)
 80011f0:	f023 0301 	bic.w	r3, r3, #1
 80011f4:	6213      	str	r3, [r2, #32]
 80011f6:	4b73      	ldr	r3, [pc, #460]	; (80013c4 <HAL_RCC_OscConfig+0x4f4>)
 80011f8:	6a1b      	ldr	r3, [r3, #32]
 80011fa:	4a72      	ldr	r2, [pc, #456]	; (80013c4 <HAL_RCC_OscConfig+0x4f4>)
 80011fc:	f023 0304 	bic.w	r3, r3, #4
 8001200:	6213      	str	r3, [r2, #32]
 8001202:	e01c      	b.n	800123e <HAL_RCC_OscConfig+0x36e>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	2b05      	cmp	r3, #5
 800120a:	d10c      	bne.n	8001226 <HAL_RCC_OscConfig+0x356>
 800120c:	4b6d      	ldr	r3, [pc, #436]	; (80013c4 <HAL_RCC_OscConfig+0x4f4>)
 800120e:	6a1b      	ldr	r3, [r3, #32]
 8001210:	4a6c      	ldr	r2, [pc, #432]	; (80013c4 <HAL_RCC_OscConfig+0x4f4>)
 8001212:	f043 0304 	orr.w	r3, r3, #4
 8001216:	6213      	str	r3, [r2, #32]
 8001218:	4b6a      	ldr	r3, [pc, #424]	; (80013c4 <HAL_RCC_OscConfig+0x4f4>)
 800121a:	6a1b      	ldr	r3, [r3, #32]
 800121c:	4a69      	ldr	r2, [pc, #420]	; (80013c4 <HAL_RCC_OscConfig+0x4f4>)
 800121e:	f043 0301 	orr.w	r3, r3, #1
 8001222:	6213      	str	r3, [r2, #32]
 8001224:	e00b      	b.n	800123e <HAL_RCC_OscConfig+0x36e>
 8001226:	4b67      	ldr	r3, [pc, #412]	; (80013c4 <HAL_RCC_OscConfig+0x4f4>)
 8001228:	6a1b      	ldr	r3, [r3, #32]
 800122a:	4a66      	ldr	r2, [pc, #408]	; (80013c4 <HAL_RCC_OscConfig+0x4f4>)
 800122c:	f023 0301 	bic.w	r3, r3, #1
 8001230:	6213      	str	r3, [r2, #32]
 8001232:	4b64      	ldr	r3, [pc, #400]	; (80013c4 <HAL_RCC_OscConfig+0x4f4>)
 8001234:	6a1b      	ldr	r3, [r3, #32]
 8001236:	4a63      	ldr	r2, [pc, #396]	; (80013c4 <HAL_RCC_OscConfig+0x4f4>)
 8001238:	f023 0304 	bic.w	r3, r3, #4
 800123c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	68db      	ldr	r3, [r3, #12]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d015      	beq.n	8001272 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001246:	f7ff fa5d 	bl	8000704 <HAL_GetTick>
 800124a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800124c:	e00a      	b.n	8001264 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800124e:	f7ff fa59 	bl	8000704 <HAL_GetTick>
 8001252:	4602      	mov	r2, r0
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	f241 3288 	movw	r2, #5000	; 0x1388
 800125c:	4293      	cmp	r3, r2
 800125e:	d901      	bls.n	8001264 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001260:	2303      	movs	r3, #3
 8001262:	e0ab      	b.n	80013bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001264:	4b57      	ldr	r3, [pc, #348]	; (80013c4 <HAL_RCC_OscConfig+0x4f4>)
 8001266:	6a1b      	ldr	r3, [r3, #32]
 8001268:	f003 0302 	and.w	r3, r3, #2
 800126c:	2b00      	cmp	r3, #0
 800126e:	d0ee      	beq.n	800124e <HAL_RCC_OscConfig+0x37e>
 8001270:	e014      	b.n	800129c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001272:	f7ff fa47 	bl	8000704 <HAL_GetTick>
 8001276:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001278:	e00a      	b.n	8001290 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800127a:	f7ff fa43 	bl	8000704 <HAL_GetTick>
 800127e:	4602      	mov	r2, r0
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	f241 3288 	movw	r2, #5000	; 0x1388
 8001288:	4293      	cmp	r3, r2
 800128a:	d901      	bls.n	8001290 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800128c:	2303      	movs	r3, #3
 800128e:	e095      	b.n	80013bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001290:	4b4c      	ldr	r3, [pc, #304]	; (80013c4 <HAL_RCC_OscConfig+0x4f4>)
 8001292:	6a1b      	ldr	r3, [r3, #32]
 8001294:	f003 0302 	and.w	r3, r3, #2
 8001298:	2b00      	cmp	r3, #0
 800129a:	d1ee      	bne.n	800127a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800129c:	7dfb      	ldrb	r3, [r7, #23]
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d105      	bne.n	80012ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012a2:	4b48      	ldr	r3, [pc, #288]	; (80013c4 <HAL_RCC_OscConfig+0x4f4>)
 80012a4:	69db      	ldr	r3, [r3, #28]
 80012a6:	4a47      	ldr	r2, [pc, #284]	; (80013c4 <HAL_RCC_OscConfig+0x4f4>)
 80012a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	69db      	ldr	r3, [r3, #28]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	f000 8081 	beq.w	80013ba <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012b8:	4b42      	ldr	r3, [pc, #264]	; (80013c4 <HAL_RCC_OscConfig+0x4f4>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f003 030c 	and.w	r3, r3, #12
 80012c0:	2b08      	cmp	r3, #8
 80012c2:	d061      	beq.n	8001388 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	69db      	ldr	r3, [r3, #28]
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d146      	bne.n	800135a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012cc:	4b3f      	ldr	r3, [pc, #252]	; (80013cc <HAL_RCC_OscConfig+0x4fc>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d2:	f7ff fa17 	bl	8000704 <HAL_GetTick>
 80012d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012d8:	e008      	b.n	80012ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012da:	f7ff fa13 	bl	8000704 <HAL_GetTick>
 80012de:	4602      	mov	r2, r0
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	1ad3      	subs	r3, r2, r3
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	d901      	bls.n	80012ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80012e8:	2303      	movs	r3, #3
 80012ea:	e067      	b.n	80013bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012ec:	4b35      	ldr	r3, [pc, #212]	; (80013c4 <HAL_RCC_OscConfig+0x4f4>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d1f0      	bne.n	80012da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6a1b      	ldr	r3, [r3, #32]
 80012fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001300:	d108      	bne.n	8001314 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001302:	4b30      	ldr	r3, [pc, #192]	; (80013c4 <HAL_RCC_OscConfig+0x4f4>)
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	492d      	ldr	r1, [pc, #180]	; (80013c4 <HAL_RCC_OscConfig+0x4f4>)
 8001310:	4313      	orrs	r3, r2
 8001312:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001314:	4b2b      	ldr	r3, [pc, #172]	; (80013c4 <HAL_RCC_OscConfig+0x4f4>)
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6a19      	ldr	r1, [r3, #32]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001324:	430b      	orrs	r3, r1
 8001326:	4927      	ldr	r1, [pc, #156]	; (80013c4 <HAL_RCC_OscConfig+0x4f4>)
 8001328:	4313      	orrs	r3, r2
 800132a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800132c:	4b27      	ldr	r3, [pc, #156]	; (80013cc <HAL_RCC_OscConfig+0x4fc>)
 800132e:	2201      	movs	r2, #1
 8001330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001332:	f7ff f9e7 	bl	8000704 <HAL_GetTick>
 8001336:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001338:	e008      	b.n	800134c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800133a:	f7ff f9e3 	bl	8000704 <HAL_GetTick>
 800133e:	4602      	mov	r2, r0
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	2b02      	cmp	r3, #2
 8001346:	d901      	bls.n	800134c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001348:	2303      	movs	r3, #3
 800134a:	e037      	b.n	80013bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800134c:	4b1d      	ldr	r3, [pc, #116]	; (80013c4 <HAL_RCC_OscConfig+0x4f4>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001354:	2b00      	cmp	r3, #0
 8001356:	d0f0      	beq.n	800133a <HAL_RCC_OscConfig+0x46a>
 8001358:	e02f      	b.n	80013ba <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800135a:	4b1c      	ldr	r3, [pc, #112]	; (80013cc <HAL_RCC_OscConfig+0x4fc>)
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001360:	f7ff f9d0 	bl	8000704 <HAL_GetTick>
 8001364:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001366:	e008      	b.n	800137a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001368:	f7ff f9cc 	bl	8000704 <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	2b02      	cmp	r3, #2
 8001374:	d901      	bls.n	800137a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e020      	b.n	80013bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800137a:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <HAL_RCC_OscConfig+0x4f4>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d1f0      	bne.n	8001368 <HAL_RCC_OscConfig+0x498>
 8001386:	e018      	b.n	80013ba <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	69db      	ldr	r3, [r3, #28]
 800138c:	2b01      	cmp	r3, #1
 800138e:	d101      	bne.n	8001394 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	e013      	b.n	80013bc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001394:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <HAL_RCC_OscConfig+0x4f4>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6a1b      	ldr	r3, [r3, #32]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d106      	bne.n	80013b6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d001      	beq.n	80013ba <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e000      	b.n	80013bc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80013ba:	2300      	movs	r3, #0
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3718      	adds	r7, #24
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40021000 	.word	0x40021000
 80013c8:	40007000 	.word	0x40007000
 80013cc:	42420060 	.word	0x42420060

080013d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d101      	bne.n	80013e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	e0d0      	b.n	8001586 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013e4:	4b6a      	ldr	r3, [pc, #424]	; (8001590 <HAL_RCC_ClockConfig+0x1c0>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0307 	and.w	r3, r3, #7
 80013ec:	683a      	ldr	r2, [r7, #0]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d910      	bls.n	8001414 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013f2:	4b67      	ldr	r3, [pc, #412]	; (8001590 <HAL_RCC_ClockConfig+0x1c0>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f023 0207 	bic.w	r2, r3, #7
 80013fa:	4965      	ldr	r1, [pc, #404]	; (8001590 <HAL_RCC_ClockConfig+0x1c0>)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	4313      	orrs	r3, r2
 8001400:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001402:	4b63      	ldr	r3, [pc, #396]	; (8001590 <HAL_RCC_ClockConfig+0x1c0>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 0307 	and.w	r3, r3, #7
 800140a:	683a      	ldr	r2, [r7, #0]
 800140c:	429a      	cmp	r2, r3
 800140e:	d001      	beq.n	8001414 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e0b8      	b.n	8001586 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 0302 	and.w	r3, r3, #2
 800141c:	2b00      	cmp	r3, #0
 800141e:	d020      	beq.n	8001462 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 0304 	and.w	r3, r3, #4
 8001428:	2b00      	cmp	r3, #0
 800142a:	d005      	beq.n	8001438 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800142c:	4b59      	ldr	r3, [pc, #356]	; (8001594 <HAL_RCC_ClockConfig+0x1c4>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	4a58      	ldr	r2, [pc, #352]	; (8001594 <HAL_RCC_ClockConfig+0x1c4>)
 8001432:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001436:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 0308 	and.w	r3, r3, #8
 8001440:	2b00      	cmp	r3, #0
 8001442:	d005      	beq.n	8001450 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001444:	4b53      	ldr	r3, [pc, #332]	; (8001594 <HAL_RCC_ClockConfig+0x1c4>)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	4a52      	ldr	r2, [pc, #328]	; (8001594 <HAL_RCC_ClockConfig+0x1c4>)
 800144a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800144e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001450:	4b50      	ldr	r3, [pc, #320]	; (8001594 <HAL_RCC_ClockConfig+0x1c4>)
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	494d      	ldr	r1, [pc, #308]	; (8001594 <HAL_RCC_ClockConfig+0x1c4>)
 800145e:	4313      	orrs	r3, r2
 8001460:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	2b00      	cmp	r3, #0
 800146c:	d040      	beq.n	80014f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d107      	bne.n	8001486 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001476:	4b47      	ldr	r3, [pc, #284]	; (8001594 <HAL_RCC_ClockConfig+0x1c4>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d115      	bne.n	80014ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e07f      	b.n	8001586 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	2b02      	cmp	r3, #2
 800148c:	d107      	bne.n	800149e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800148e:	4b41      	ldr	r3, [pc, #260]	; (8001594 <HAL_RCC_ClockConfig+0x1c4>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d109      	bne.n	80014ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e073      	b.n	8001586 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800149e:	4b3d      	ldr	r3, [pc, #244]	; (8001594 <HAL_RCC_ClockConfig+0x1c4>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d101      	bne.n	80014ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e06b      	b.n	8001586 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014ae:	4b39      	ldr	r3, [pc, #228]	; (8001594 <HAL_RCC_ClockConfig+0x1c4>)
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f023 0203 	bic.w	r2, r3, #3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	4936      	ldr	r1, [pc, #216]	; (8001594 <HAL_RCC_ClockConfig+0x1c4>)
 80014bc:	4313      	orrs	r3, r2
 80014be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014c0:	f7ff f920 	bl	8000704 <HAL_GetTick>
 80014c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014c6:	e00a      	b.n	80014de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014c8:	f7ff f91c 	bl	8000704 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d901      	bls.n	80014de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e053      	b.n	8001586 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014de:	4b2d      	ldr	r3, [pc, #180]	; (8001594 <HAL_RCC_ClockConfig+0x1c4>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f003 020c 	and.w	r2, r3, #12
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d1eb      	bne.n	80014c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014f0:	4b27      	ldr	r3, [pc, #156]	; (8001590 <HAL_RCC_ClockConfig+0x1c0>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 0307 	and.w	r3, r3, #7
 80014f8:	683a      	ldr	r2, [r7, #0]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d210      	bcs.n	8001520 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014fe:	4b24      	ldr	r3, [pc, #144]	; (8001590 <HAL_RCC_ClockConfig+0x1c0>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f023 0207 	bic.w	r2, r3, #7
 8001506:	4922      	ldr	r1, [pc, #136]	; (8001590 <HAL_RCC_ClockConfig+0x1c0>)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	4313      	orrs	r3, r2
 800150c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800150e:	4b20      	ldr	r3, [pc, #128]	; (8001590 <HAL_RCC_ClockConfig+0x1c0>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0307 	and.w	r3, r3, #7
 8001516:	683a      	ldr	r2, [r7, #0]
 8001518:	429a      	cmp	r2, r3
 800151a:	d001      	beq.n	8001520 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e032      	b.n	8001586 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 0304 	and.w	r3, r3, #4
 8001528:	2b00      	cmp	r3, #0
 800152a:	d008      	beq.n	800153e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800152c:	4b19      	ldr	r3, [pc, #100]	; (8001594 <HAL_RCC_ClockConfig+0x1c4>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	4916      	ldr	r1, [pc, #88]	; (8001594 <HAL_RCC_ClockConfig+0x1c4>)
 800153a:	4313      	orrs	r3, r2
 800153c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0308 	and.w	r3, r3, #8
 8001546:	2b00      	cmp	r3, #0
 8001548:	d009      	beq.n	800155e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800154a:	4b12      	ldr	r3, [pc, #72]	; (8001594 <HAL_RCC_ClockConfig+0x1c4>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	691b      	ldr	r3, [r3, #16]
 8001556:	00db      	lsls	r3, r3, #3
 8001558:	490e      	ldr	r1, [pc, #56]	; (8001594 <HAL_RCC_ClockConfig+0x1c4>)
 800155a:	4313      	orrs	r3, r2
 800155c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800155e:	f000 f821 	bl	80015a4 <HAL_RCC_GetSysClockFreq>
 8001562:	4602      	mov	r2, r0
 8001564:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <HAL_RCC_ClockConfig+0x1c4>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	091b      	lsrs	r3, r3, #4
 800156a:	f003 030f 	and.w	r3, r3, #15
 800156e:	490a      	ldr	r1, [pc, #40]	; (8001598 <HAL_RCC_ClockConfig+0x1c8>)
 8001570:	5ccb      	ldrb	r3, [r1, r3]
 8001572:	fa22 f303 	lsr.w	r3, r2, r3
 8001576:	4a09      	ldr	r2, [pc, #36]	; (800159c <HAL_RCC_ClockConfig+0x1cc>)
 8001578:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800157a:	4b09      	ldr	r3, [pc, #36]	; (80015a0 <HAL_RCC_ClockConfig+0x1d0>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff f87e 	bl	8000680 <HAL_InitTick>

  return HAL_OK;
 8001584:	2300      	movs	r3, #0
}
 8001586:	4618      	mov	r0, r3
 8001588:	3710      	adds	r7, #16
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40022000 	.word	0x40022000
 8001594:	40021000 	.word	0x40021000
 8001598:	080025c0 	.word	0x080025c0
 800159c:	20000000 	.word	0x20000000
 80015a0:	20000004 	.word	0x20000004

080015a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015a4:	b490      	push	{r4, r7}
 80015a6:	b08a      	sub	sp, #40	; 0x28
 80015a8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80015aa:	4b2a      	ldr	r3, [pc, #168]	; (8001654 <HAL_RCC_GetSysClockFreq+0xb0>)
 80015ac:	1d3c      	adds	r4, r7, #4
 80015ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80015b4:	f240 2301 	movw	r3, #513	; 0x201
 80015b8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80015ba:	2300      	movs	r3, #0
 80015bc:	61fb      	str	r3, [r7, #28]
 80015be:	2300      	movs	r3, #0
 80015c0:	61bb      	str	r3, [r7, #24]
 80015c2:	2300      	movs	r3, #0
 80015c4:	627b      	str	r3, [r7, #36]	; 0x24
 80015c6:	2300      	movs	r3, #0
 80015c8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80015ca:	2300      	movs	r3, #0
 80015cc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80015ce:	4b22      	ldr	r3, [pc, #136]	; (8001658 <HAL_RCC_GetSysClockFreq+0xb4>)
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	f003 030c 	and.w	r3, r3, #12
 80015da:	2b04      	cmp	r3, #4
 80015dc:	d002      	beq.n	80015e4 <HAL_RCC_GetSysClockFreq+0x40>
 80015de:	2b08      	cmp	r3, #8
 80015e0:	d003      	beq.n	80015ea <HAL_RCC_GetSysClockFreq+0x46>
 80015e2:	e02d      	b.n	8001640 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80015e4:	4b1d      	ldr	r3, [pc, #116]	; (800165c <HAL_RCC_GetSysClockFreq+0xb8>)
 80015e6:	623b      	str	r3, [r7, #32]
      break;
 80015e8:	e02d      	b.n	8001646 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	0c9b      	lsrs	r3, r3, #18
 80015ee:	f003 030f 	and.w	r3, r3, #15
 80015f2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80015f6:	4413      	add	r3, r2
 80015f8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80015fc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d013      	beq.n	8001630 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001608:	4b13      	ldr	r3, [pc, #76]	; (8001658 <HAL_RCC_GetSysClockFreq+0xb4>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	0c5b      	lsrs	r3, r3, #17
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001616:	4413      	add	r3, r2
 8001618:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800161c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	4a0e      	ldr	r2, [pc, #56]	; (800165c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001622:	fb02 f203 	mul.w	r2, r2, r3
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	fbb2 f3f3 	udiv	r3, r2, r3
 800162c:	627b      	str	r3, [r7, #36]	; 0x24
 800162e:	e004      	b.n	800163a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	4a0b      	ldr	r2, [pc, #44]	; (8001660 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001634:	fb02 f303 	mul.w	r3, r2, r3
 8001638:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800163a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163c:	623b      	str	r3, [r7, #32]
      break;
 800163e:	e002      	b.n	8001646 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001640:	4b06      	ldr	r3, [pc, #24]	; (800165c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001642:	623b      	str	r3, [r7, #32]
      break;
 8001644:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001646:	6a3b      	ldr	r3, [r7, #32]
}
 8001648:	4618      	mov	r0, r3
 800164a:	3728      	adds	r7, #40	; 0x28
 800164c:	46bd      	mov	sp, r7
 800164e:	bc90      	pop	{r4, r7}
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	080025b0 	.word	0x080025b0
 8001658:	40021000 	.word	0x40021000
 800165c:	007a1200 	.word	0x007a1200
 8001660:	003d0900 	.word	0x003d0900

08001664 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001668:	4b02      	ldr	r3, [pc, #8]	; (8001674 <HAL_RCC_GetHCLKFreq+0x10>)
 800166a:	681b      	ldr	r3, [r3, #0]
}
 800166c:	4618      	mov	r0, r3
 800166e:	46bd      	mov	sp, r7
 8001670:	bc80      	pop	{r7}
 8001672:	4770      	bx	lr
 8001674:	20000000 	.word	0x20000000

08001678 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800167c:	f7ff fff2 	bl	8001664 <HAL_RCC_GetHCLKFreq>
 8001680:	4602      	mov	r2, r0
 8001682:	4b05      	ldr	r3, [pc, #20]	; (8001698 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	0a1b      	lsrs	r3, r3, #8
 8001688:	f003 0307 	and.w	r3, r3, #7
 800168c:	4903      	ldr	r1, [pc, #12]	; (800169c <HAL_RCC_GetPCLK1Freq+0x24>)
 800168e:	5ccb      	ldrb	r3, [r1, r3]
 8001690:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001694:	4618      	mov	r0, r3
 8001696:	bd80      	pop	{r7, pc}
 8001698:	40021000 	.word	0x40021000
 800169c:	080025d0 	.word	0x080025d0

080016a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80016a4:	f7ff ffde 	bl	8001664 <HAL_RCC_GetHCLKFreq>
 80016a8:	4602      	mov	r2, r0
 80016aa:	4b05      	ldr	r3, [pc, #20]	; (80016c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	0adb      	lsrs	r3, r3, #11
 80016b0:	f003 0307 	and.w	r3, r3, #7
 80016b4:	4903      	ldr	r1, [pc, #12]	; (80016c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80016b6:	5ccb      	ldrb	r3, [r1, r3]
 80016b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016bc:	4618      	mov	r0, r3
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40021000 	.word	0x40021000
 80016c4:	080025d0 	.word	0x080025d0

080016c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80016d0:	4b0a      	ldr	r3, [pc, #40]	; (80016fc <RCC_Delay+0x34>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a0a      	ldr	r2, [pc, #40]	; (8001700 <RCC_Delay+0x38>)
 80016d6:	fba2 2303 	umull	r2, r3, r2, r3
 80016da:	0a5b      	lsrs	r3, r3, #9
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	fb02 f303 	mul.w	r3, r2, r3
 80016e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80016e4:	bf00      	nop
  }
  while (Delay --);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	1e5a      	subs	r2, r3, #1
 80016ea:	60fa      	str	r2, [r7, #12]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d1f9      	bne.n	80016e4 <RCC_Delay+0x1c>
}
 80016f0:	bf00      	nop
 80016f2:	bf00      	nop
 80016f4:	3714      	adds	r7, #20
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bc80      	pop	{r7}
 80016fa:	4770      	bx	lr
 80016fc:	20000000 	.word	0x20000000
 8001700:	10624dd3 	.word	0x10624dd3

08001704 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d101      	bne.n	8001716 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e03f      	b.n	8001796 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800171c:	b2db      	uxtb	r3, r3
 800171e:	2b00      	cmp	r3, #0
 8001720:	d106      	bne.n	8001730 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2200      	movs	r2, #0
 8001726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f7fe febe 	bl	80004ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2224      	movs	r2, #36	; 0x24
 8001734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	68da      	ldr	r2, [r3, #12]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001746:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f000 f905 	bl	8001958 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	691a      	ldr	r2, [r3, #16]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800175c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	695a      	ldr	r2, [r3, #20]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800176c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	68da      	ldr	r2, [r3, #12]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800177c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2220      	movs	r2, #32
 8001788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2220      	movs	r2, #32
 8001790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b08a      	sub	sp, #40	; 0x28
 80017a2:	af02      	add	r7, sp, #8
 80017a4:	60f8      	str	r0, [r7, #12]
 80017a6:	60b9      	str	r1, [r7, #8]
 80017a8:	603b      	str	r3, [r7, #0]
 80017aa:	4613      	mov	r3, r2
 80017ac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80017ae:	2300      	movs	r3, #0
 80017b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	2b20      	cmp	r3, #32
 80017bc:	d17c      	bne.n	80018b8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d002      	beq.n	80017ca <HAL_UART_Transmit+0x2c>
 80017c4:	88fb      	ldrh	r3, [r7, #6]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d101      	bne.n	80017ce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e075      	b.n	80018ba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d101      	bne.n	80017dc <HAL_UART_Transmit+0x3e>
 80017d8:	2302      	movs	r3, #2
 80017da:	e06e      	b.n	80018ba <HAL_UART_Transmit+0x11c>
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2201      	movs	r2, #1
 80017e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2200      	movs	r2, #0
 80017e8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	2221      	movs	r2, #33	; 0x21
 80017ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80017f2:	f7fe ff87 	bl	8000704 <HAL_GetTick>
 80017f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	88fa      	ldrh	r2, [r7, #6]
 80017fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	88fa      	ldrh	r2, [r7, #6]
 8001802:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800180c:	d108      	bne.n	8001820 <HAL_UART_Transmit+0x82>
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	691b      	ldr	r3, [r3, #16]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d104      	bne.n	8001820 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001816:	2300      	movs	r3, #0
 8001818:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	61bb      	str	r3, [r7, #24]
 800181e:	e003      	b.n	8001828 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001824:	2300      	movs	r3, #0
 8001826:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	2200      	movs	r2, #0
 800182c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001830:	e02a      	b.n	8001888 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	9300      	str	r3, [sp, #0]
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	2200      	movs	r2, #0
 800183a:	2180      	movs	r1, #128	; 0x80
 800183c:	68f8      	ldr	r0, [r7, #12]
 800183e:	f000 f840 	bl	80018c2 <UART_WaitOnFlagUntilTimeout>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e036      	b.n	80018ba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d10b      	bne.n	800186a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	881b      	ldrh	r3, [r3, #0]
 8001856:	461a      	mov	r2, r3
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001860:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	3302      	adds	r3, #2
 8001866:	61bb      	str	r3, [r7, #24]
 8001868:	e007      	b.n	800187a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	781a      	ldrb	r2, [r3, #0]
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	3301      	adds	r3, #1
 8001878:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800187e:	b29b      	uxth	r3, r3
 8001880:	3b01      	subs	r3, #1
 8001882:	b29a      	uxth	r2, r3
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800188c:	b29b      	uxth	r3, r3
 800188e:	2b00      	cmp	r3, #0
 8001890:	d1cf      	bne.n	8001832 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	9300      	str	r3, [sp, #0]
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	2200      	movs	r2, #0
 800189a:	2140      	movs	r1, #64	; 0x40
 800189c:	68f8      	ldr	r0, [r7, #12]
 800189e:	f000 f810 	bl	80018c2 <UART_WaitOnFlagUntilTimeout>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e006      	b.n	80018ba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2220      	movs	r2, #32
 80018b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80018b4:	2300      	movs	r3, #0
 80018b6:	e000      	b.n	80018ba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80018b8:	2302      	movs	r3, #2
  }
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3720      	adds	r7, #32
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b084      	sub	sp, #16
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	60f8      	str	r0, [r7, #12]
 80018ca:	60b9      	str	r1, [r7, #8]
 80018cc:	603b      	str	r3, [r7, #0]
 80018ce:	4613      	mov	r3, r2
 80018d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80018d2:	e02c      	b.n	800192e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018da:	d028      	beq.n	800192e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d007      	beq.n	80018f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80018e2:	f7fe ff0f 	bl	8000704 <HAL_GetTick>
 80018e6:	4602      	mov	r2, r0
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d21d      	bcs.n	800192e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	68da      	ldr	r2, [r3, #12]
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001900:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	695a      	ldr	r2, [r3, #20]
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f022 0201 	bic.w	r2, r2, #1
 8001910:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2220      	movs	r2, #32
 8001916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2220      	movs	r2, #32
 800191e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	2200      	movs	r2, #0
 8001926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e00f      	b.n	800194e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	4013      	ands	r3, r2
 8001938:	68ba      	ldr	r2, [r7, #8]
 800193a:	429a      	cmp	r2, r3
 800193c:	bf0c      	ite	eq
 800193e:	2301      	moveq	r3, #1
 8001940:	2300      	movne	r3, #0
 8001942:	b2db      	uxtb	r3, r3
 8001944:	461a      	mov	r2, r3
 8001946:	79fb      	ldrb	r3, [r7, #7]
 8001948:	429a      	cmp	r2, r3
 800194a:	d0c3      	beq.n	80018d4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
	...

08001958 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	691b      	ldr	r3, [r3, #16]
 8001966:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	68da      	ldr	r2, [r3, #12]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	430a      	orrs	r2, r1
 8001974:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	689a      	ldr	r2, [r3, #8]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	691b      	ldr	r3, [r3, #16]
 800197e:	431a      	orrs	r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	695b      	ldr	r3, [r3, #20]
 8001984:	4313      	orrs	r3, r2
 8001986:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	68db      	ldr	r3, [r3, #12]
 800198e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001992:	f023 030c 	bic.w	r3, r3, #12
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	6812      	ldr	r2, [r2, #0]
 800199a:	68b9      	ldr	r1, [r7, #8]
 800199c:	430b      	orrs	r3, r1
 800199e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	695b      	ldr	r3, [r3, #20]
 80019a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	699a      	ldr	r2, [r3, #24]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	430a      	orrs	r2, r1
 80019b4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a2c      	ldr	r2, [pc, #176]	; (8001a6c <UART_SetConfig+0x114>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d103      	bne.n	80019c8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80019c0:	f7ff fe6e 	bl	80016a0 <HAL_RCC_GetPCLK2Freq>
 80019c4:	60f8      	str	r0, [r7, #12]
 80019c6:	e002      	b.n	80019ce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80019c8:	f7ff fe56 	bl	8001678 <HAL_RCC_GetPCLK1Freq>
 80019cc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80019ce:	68fa      	ldr	r2, [r7, #12]
 80019d0:	4613      	mov	r3, r2
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	4413      	add	r3, r2
 80019d6:	009a      	lsls	r2, r3, #2
 80019d8:	441a      	add	r2, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e4:	4a22      	ldr	r2, [pc, #136]	; (8001a70 <UART_SetConfig+0x118>)
 80019e6:	fba2 2303 	umull	r2, r3, r2, r3
 80019ea:	095b      	lsrs	r3, r3, #5
 80019ec:	0119      	lsls	r1, r3, #4
 80019ee:	68fa      	ldr	r2, [r7, #12]
 80019f0:	4613      	mov	r3, r2
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	4413      	add	r3, r2
 80019f6:	009a      	lsls	r2, r3, #2
 80019f8:	441a      	add	r2, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a04:	4b1a      	ldr	r3, [pc, #104]	; (8001a70 <UART_SetConfig+0x118>)
 8001a06:	fba3 0302 	umull	r0, r3, r3, r2
 8001a0a:	095b      	lsrs	r3, r3, #5
 8001a0c:	2064      	movs	r0, #100	; 0x64
 8001a0e:	fb00 f303 	mul.w	r3, r0, r3
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	011b      	lsls	r3, r3, #4
 8001a16:	3332      	adds	r3, #50	; 0x32
 8001a18:	4a15      	ldr	r2, [pc, #84]	; (8001a70 <UART_SetConfig+0x118>)
 8001a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a1e:	095b      	lsrs	r3, r3, #5
 8001a20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a24:	4419      	add	r1, r3
 8001a26:	68fa      	ldr	r2, [r7, #12]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	4413      	add	r3, r2
 8001a2e:	009a      	lsls	r2, r3, #2
 8001a30:	441a      	add	r2, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a3c:	4b0c      	ldr	r3, [pc, #48]	; (8001a70 <UART_SetConfig+0x118>)
 8001a3e:	fba3 0302 	umull	r0, r3, r3, r2
 8001a42:	095b      	lsrs	r3, r3, #5
 8001a44:	2064      	movs	r0, #100	; 0x64
 8001a46:	fb00 f303 	mul.w	r3, r0, r3
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	011b      	lsls	r3, r3, #4
 8001a4e:	3332      	adds	r3, #50	; 0x32
 8001a50:	4a07      	ldr	r2, [pc, #28]	; (8001a70 <UART_SetConfig+0x118>)
 8001a52:	fba2 2303 	umull	r2, r3, r2, r3
 8001a56:	095b      	lsrs	r3, r3, #5
 8001a58:	f003 020f 	and.w	r2, r3, #15
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	440a      	add	r2, r1
 8001a62:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001a64:	bf00      	nop
 8001a66:	3710      	adds	r7, #16
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	40013800 	.word	0x40013800
 8001a70:	51eb851f 	.word	0x51eb851f

08001a74 <KeypadPressedShortCallback>:
__weak void KeypadPressingCallback(uint8_t key)
{

}
__weak void KeypadPressedShortCallback(uint8_t key)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	71fb      	strb	r3, [r7, #7]

}
 8001a7e:	bf00      	nop
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bc80      	pop	{r7}
 8001a86:	4770      	bx	lr

08001a88 <KeypadReleaseCallback>:
__weak void KeypadReleaseCallback(uint8_t key)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4603      	mov	r3, r0
 8001a90:	71fb      	strb	r3, [r7, #7]

}
 8001a92:	bf00      	nop
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bc80      	pop	{r7}
 8001a9a:	4770      	bx	lr

08001a9c <KeypadPressingTimeoutCallback>:

__weak void KeypadPressingTimeoutCallback(uint8_t key)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	71fb      	strb	r3, [r7, #7]

}
 8001aa6:	bf00      	nop
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bc80      	pop	{r7}
 8001aae:	4770      	bx	lr

08001ab0 <KeyPad_Select_Row>:

void KeyPad_Select_Row(uint8_t row)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(Keypad_RowPort[row],Keypad_RowPin[row], GPIO_PIN_RESET);
 8001aba:	79fb      	ldrb	r3, [r7, #7]
 8001abc:	4a07      	ldr	r2, [pc, #28]	; (8001adc <KeyPad_Select_Row+0x2c>)
 8001abe:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001ac2:	79fb      	ldrb	r3, [r7, #7]
 8001ac4:	4a06      	ldr	r2, [pc, #24]	; (8001ae0 <KeyPad_Select_Row+0x30>)
 8001ac6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001aca:	2200      	movs	r2, #0
 8001acc:	4619      	mov	r1, r3
 8001ace:	f7ff f8a2 	bl	8000c16 <HAL_GPIO_WritePin>
}
 8001ad2:	bf00      	nop
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	2000000c 	.word	0x2000000c
 8001ae0:	2000001c 	.word	0x2000001c

08001ae4 <KeyPad_UnSelect_Row>:
void KeyPad_UnSelect_Row()
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
	for(uint8_t row=0; row < KEYPAD_ROW; row++)
 8001aea:	2300      	movs	r3, #0
 8001aec:	71fb      	strb	r3, [r7, #7]
 8001aee:	e00e      	b.n	8001b0e <KeyPad_UnSelect_Row+0x2a>
	{
		HAL_GPIO_WritePin(Keypad_RowPort[row],Keypad_RowPin[row], GPIO_PIN_SET);
 8001af0:	79fb      	ldrb	r3, [r7, #7]
 8001af2:	4a0b      	ldr	r2, [pc, #44]	; (8001b20 <KeyPad_UnSelect_Row+0x3c>)
 8001af4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001af8:	79fb      	ldrb	r3, [r7, #7]
 8001afa:	4a0a      	ldr	r2, [pc, #40]	; (8001b24 <KeyPad_UnSelect_Row+0x40>)
 8001afc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b00:	2201      	movs	r2, #1
 8001b02:	4619      	mov	r1, r3
 8001b04:	f7ff f887 	bl	8000c16 <HAL_GPIO_WritePin>
	for(uint8_t row=0; row < KEYPAD_ROW; row++)
 8001b08:	79fb      	ldrb	r3, [r7, #7]
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	71fb      	strb	r3, [r7, #7]
 8001b0e:	79fb      	ldrb	r3, [r7, #7]
 8001b10:	2b03      	cmp	r3, #3
 8001b12:	d9ed      	bls.n	8001af0 <KeyPad_UnSelect_Row+0xc>
	}
}
 8001b14:	bf00      	nop
 8001b16:	bf00      	nop
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	2000000c 	.word	0x2000000c
 8001b24:	2000001c 	.word	0x2000001c

08001b28 <KeyPad_GetKey>:

static uint8_t KeyPad_GetKey()
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
	for(uint8_t row = 0; row < KEYPAD_ROW; row++)
 8001b2e:	2300      	movs	r3, #0
 8001b30:	71fb      	strb	r3, [r7, #7]
 8001b32:	e028      	b.n	8001b86 <KeyPad_GetKey+0x5e>
	{
		KeyPad_UnSelect_Row();
 8001b34:	f7ff ffd6 	bl	8001ae4 <KeyPad_UnSelect_Row>
		KeyPad_Select_Row(row);
 8001b38:	79fb      	ldrb	r3, [r7, #7]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff ffb8 	bl	8001ab0 <KeyPad_Select_Row>
		for(uint8_t col =0; col < KEYPAD_COL; col++)
 8001b40:	2300      	movs	r3, #0
 8001b42:	71bb      	strb	r3, [r7, #6]
 8001b44:	e019      	b.n	8001b7a <KeyPad_GetKey+0x52>
		{
			if(HAL_GPIO_ReadPin(Keypad_ColPort[col],Keypad_ColPin[col]) == 0)
 8001b46:	79bb      	ldrb	r3, [r7, #6]
 8001b48:	4a13      	ldr	r2, [pc, #76]	; (8001b98 <KeyPad_GetKey+0x70>)
 8001b4a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001b4e:	79bb      	ldrb	r3, [r7, #6]
 8001b50:	4912      	ldr	r1, [pc, #72]	; (8001b9c <KeyPad_GetKey+0x74>)
 8001b52:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001b56:	4619      	mov	r1, r3
 8001b58:	4610      	mov	r0, r2
 8001b5a:	f7ff f845 	bl	8000be8 <HAL_GPIO_ReadPin>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d107      	bne.n	8001b74 <KeyPad_GetKey+0x4c>
			{
				return key_code[row][col];
 8001b64:	79fa      	ldrb	r2, [r7, #7]
 8001b66:	79bb      	ldrb	r3, [r7, #6]
 8001b68:	490d      	ldr	r1, [pc, #52]	; (8001ba0 <KeyPad_GetKey+0x78>)
 8001b6a:	0092      	lsls	r2, r2, #2
 8001b6c:	440a      	add	r2, r1
 8001b6e:	4413      	add	r3, r2
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	e00c      	b.n	8001b8e <KeyPad_GetKey+0x66>
		for(uint8_t col =0; col < KEYPAD_COL; col++)
 8001b74:	79bb      	ldrb	r3, [r7, #6]
 8001b76:	3301      	adds	r3, #1
 8001b78:	71bb      	strb	r3, [r7, #6]
 8001b7a:	79bb      	ldrb	r3, [r7, #6]
 8001b7c:	2b03      	cmp	r3, #3
 8001b7e:	d9e2      	bls.n	8001b46 <KeyPad_GetKey+0x1e>
	for(uint8_t row = 0; row < KEYPAD_ROW; row++)
 8001b80:	79fb      	ldrb	r3, [r7, #7]
 8001b82:	3301      	adds	r3, #1
 8001b84:	71fb      	strb	r3, [r7, #7]
 8001b86:	79fb      	ldrb	r3, [r7, #7]
 8001b88:	2b03      	cmp	r3, #3
 8001b8a:	d9d3      	bls.n	8001b34 <KeyPad_GetKey+0xc>
			}
		}
	}
	return 0;
 8001b8c:	2300      	movs	r3, #0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	20000024 	.word	0x20000024
 8001b9c:	20000034 	.word	0x20000034
 8001ba0:	080025d8 	.word	0x080025d8

08001ba4 <Keypad_Filter>:

static void Keypad_Filter()
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
	uint8_t key = KeyPad_GetKey();
 8001baa:	f7ff ffbd 	bl	8001b28 <KeyPad_GetKey>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	71fb      	strb	r3, [r7, #7]
	if(key != key_debounce)
 8001bb2:	4b13      	ldr	r3, [pc, #76]	; (8001c00 <Keypad_Filter+0x5c>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	79fa      	ldrb	r2, [r7, #7]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d00a      	beq.n	8001bd2 <Keypad_Filter+0x2e>
	{
		debouncing = 1;
 8001bbc:	4b11      	ldr	r3, [pc, #68]	; (8001c04 <Keypad_Filter+0x60>)
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	701a      	strb	r2, [r3, #0]
		t_debounce = HAL_GetTick();
 8001bc2:	f7fe fd9f 	bl	8000704 <HAL_GetTick>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	4a0f      	ldr	r2, [pc, #60]	; (8001c08 <Keypad_Filter+0x64>)
 8001bca:	6013      	str	r3, [r2, #0]
		key_debounce = key;
 8001bcc:	4a0c      	ldr	r2, [pc, #48]	; (8001c00 <Keypad_Filter+0x5c>)
 8001bce:	79fb      	ldrb	r3, [r7, #7]
 8001bd0:	7013      	strb	r3, [r2, #0]
	}
	//trang thai da xac lap
	if(debouncing && (HAL_GetTick() - t_debounce >= 15))
 8001bd2:	4b0c      	ldr	r3, [pc, #48]	; (8001c04 <Keypad_Filter+0x60>)
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d00e      	beq.n	8001bf8 <Keypad_Filter+0x54>
 8001bda:	f7fe fd93 	bl	8000704 <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	4b09      	ldr	r3, [pc, #36]	; (8001c08 <Keypad_Filter+0x64>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b0e      	cmp	r3, #14
 8001be8:	d906      	bls.n	8001bf8 <Keypad_Filter+0x54>
	{
		key_current = key_debounce;
 8001bea:	4b05      	ldr	r3, [pc, #20]	; (8001c00 <Keypad_Filter+0x5c>)
 8001bec:	781a      	ldrb	r2, [r3, #0]
 8001bee:	4b07      	ldr	r3, [pc, #28]	; (8001c0c <Keypad_Filter+0x68>)
 8001bf0:	701a      	strb	r2, [r3, #0]
		debouncing = 0;
 8001bf2:	4b04      	ldr	r3, [pc, #16]	; (8001c04 <Keypad_Filter+0x60>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	701a      	strb	r2, [r3, #0]
	}
}
 8001bf8:	bf00      	nop
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	200000c2 	.word	0x200000c2
 8001c04:	200000c3 	.word	0x200000c3
 8001c08:	200000c4 	.word	0x200000c4
 8001c0c:	200000c0 	.word	0x200000c0

08001c10 <Keypad_Handle>:

void Keypad_Handle()
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
	Keypad_Filter();
 8001c14:	f7ff ffc6 	bl	8001ba4 <Keypad_Filter>
	
	if(key_current != key_last)
 8001c18:	4b24      	ldr	r3, [pc, #144]	; (8001cac <Keypad_Handle+0x9c>)
 8001c1a:	781a      	ldrb	r2, [r3, #0]
 8001c1c:	4b24      	ldr	r3, [pc, #144]	; (8001cb0 <Keypad_Handle+0xa0>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d02b      	beq.n	8001c7c <Keypad_Handle+0x6c>
	{
		
		if(key_current != 0)
 8001c24:	4b21      	ldr	r3, [pc, #132]	; (8001cac <Keypad_Handle+0x9c>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d00d      	beq.n	8001c48 <Keypad_Handle+0x38>
		{
			is_press = 1;
 8001c2c:	4b21      	ldr	r3, [pc, #132]	; (8001cb4 <Keypad_Handle+0xa4>)
 8001c2e:	2201      	movs	r2, #1
 8001c30:	701a      	strb	r2, [r3, #0]
			t_start_press = HAL_GetTick();
 8001c32:	f7fe fd67 	bl	8000704 <HAL_GetTick>
 8001c36:	4603      	mov	r3, r0
 8001c38:	4a1f      	ldr	r2, [pc, #124]	; (8001cb8 <Keypad_Handle+0xa8>)
 8001c3a:	6013      	str	r3, [r2, #0]
			KeypadPressingCallback(key_current);
 8001c3c:	4b1b      	ldr	r3, [pc, #108]	; (8001cac <Keypad_Handle+0x9c>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7fe fa83 	bl	800014c <KeypadPressingCallback>
 8001c46:	e015      	b.n	8001c74 <Keypad_Handle+0x64>
		}
		else
		{
			is_press = 0;
 8001c48:	4b1a      	ldr	r3, [pc, #104]	; (8001cb4 <Keypad_Handle+0xa4>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	701a      	strb	r2, [r3, #0]
			if(HAL_GetTick() - t_start_press <=1000)//nhan nha nhanh
 8001c4e:	f7fe fd59 	bl	8000704 <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	4b18      	ldr	r3, [pc, #96]	; (8001cb8 <Keypad_Handle+0xa8>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c5e:	d804      	bhi.n	8001c6a <Keypad_Handle+0x5a>
			{
				KeypadPressedShortCallback(key_last);
 8001c60:	4b13      	ldr	r3, [pc, #76]	; (8001cb0 <Keypad_Handle+0xa0>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff ff05 	bl	8001a74 <KeypadPressedShortCallback>
			}
			KeypadReleaseCallback(key_last);
 8001c6a:	4b11      	ldr	r3, [pc, #68]	; (8001cb0 <Keypad_Handle+0xa0>)
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff ff0a 	bl	8001a88 <KeypadReleaseCallback>
		}
		key_last = key_current;
 8001c74:	4b0d      	ldr	r3, [pc, #52]	; (8001cac <Keypad_Handle+0x9c>)
 8001c76:	781a      	ldrb	r2, [r3, #0]
 8001c78:	4b0d      	ldr	r3, [pc, #52]	; (8001cb0 <Keypad_Handle+0xa0>)
 8001c7a:	701a      	strb	r2, [r3, #0]
	}
	
	if(is_press && (HAL_GetTick() - t_start_press >= 3000)) //nhan giu phim
 8001c7c:	4b0d      	ldr	r3, [pc, #52]	; (8001cb4 <Keypad_Handle+0xa4>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d011      	beq.n	8001ca8 <Keypad_Handle+0x98>
 8001c84:	f7fe fd3e 	bl	8000704 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	4b0b      	ldr	r3, [pc, #44]	; (8001cb8 <Keypad_Handle+0xa8>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d907      	bls.n	8001ca8 <Keypad_Handle+0x98>
	{
		KeypadPressingTimeoutCallback(key_current);
 8001c98:	4b04      	ldr	r3, [pc, #16]	; (8001cac <Keypad_Handle+0x9c>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff fefd 	bl	8001a9c <KeypadPressingTimeoutCallback>
		is_press = 0;
 8001ca2:	4b04      	ldr	r3, [pc, #16]	; (8001cb4 <Keypad_Handle+0xa4>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	701a      	strb	r2, [r3, #0]
	}
}
 8001ca8:	bf00      	nop
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	200000c0 	.word	0x200000c0
 8001cb0:	200000c1 	.word	0x200000c1
 8001cb4:	200000cc 	.word	0x200000cc
 8001cb8:	200000c8 	.word	0x200000c8

08001cbc <__errno>:
 8001cbc:	4b01      	ldr	r3, [pc, #4]	; (8001cc4 <__errno+0x8>)
 8001cbe:	6818      	ldr	r0, [r3, #0]
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	2000003c 	.word	0x2000003c

08001cc8 <__libc_init_array>:
 8001cc8:	b570      	push	{r4, r5, r6, lr}
 8001cca:	2600      	movs	r6, #0
 8001ccc:	4d0c      	ldr	r5, [pc, #48]	; (8001d00 <__libc_init_array+0x38>)
 8001cce:	4c0d      	ldr	r4, [pc, #52]	; (8001d04 <__libc_init_array+0x3c>)
 8001cd0:	1b64      	subs	r4, r4, r5
 8001cd2:	10a4      	asrs	r4, r4, #2
 8001cd4:	42a6      	cmp	r6, r4
 8001cd6:	d109      	bne.n	8001cec <__libc_init_array+0x24>
 8001cd8:	f000 fc5c 	bl	8002594 <_init>
 8001cdc:	2600      	movs	r6, #0
 8001cde:	4d0a      	ldr	r5, [pc, #40]	; (8001d08 <__libc_init_array+0x40>)
 8001ce0:	4c0a      	ldr	r4, [pc, #40]	; (8001d0c <__libc_init_array+0x44>)
 8001ce2:	1b64      	subs	r4, r4, r5
 8001ce4:	10a4      	asrs	r4, r4, #2
 8001ce6:	42a6      	cmp	r6, r4
 8001ce8:	d105      	bne.n	8001cf6 <__libc_init_array+0x2e>
 8001cea:	bd70      	pop	{r4, r5, r6, pc}
 8001cec:	f855 3b04 	ldr.w	r3, [r5], #4
 8001cf0:	4798      	blx	r3
 8001cf2:	3601      	adds	r6, #1
 8001cf4:	e7ee      	b.n	8001cd4 <__libc_init_array+0xc>
 8001cf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8001cfa:	4798      	blx	r3
 8001cfc:	3601      	adds	r6, #1
 8001cfe:	e7f2      	b.n	8001ce6 <__libc_init_array+0x1e>
 8001d00:	0800261c 	.word	0x0800261c
 8001d04:	0800261c 	.word	0x0800261c
 8001d08:	0800261c 	.word	0x0800261c
 8001d0c:	08002620 	.word	0x08002620

08001d10 <memset>:
 8001d10:	4603      	mov	r3, r0
 8001d12:	4402      	add	r2, r0
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d100      	bne.n	8001d1a <memset+0xa>
 8001d18:	4770      	bx	lr
 8001d1a:	f803 1b01 	strb.w	r1, [r3], #1
 8001d1e:	e7f9      	b.n	8001d14 <memset+0x4>

08001d20 <siprintf>:
 8001d20:	b40e      	push	{r1, r2, r3}
 8001d22:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001d26:	b500      	push	{lr}
 8001d28:	b09c      	sub	sp, #112	; 0x70
 8001d2a:	ab1d      	add	r3, sp, #116	; 0x74
 8001d2c:	9002      	str	r0, [sp, #8]
 8001d2e:	9006      	str	r0, [sp, #24]
 8001d30:	9107      	str	r1, [sp, #28]
 8001d32:	9104      	str	r1, [sp, #16]
 8001d34:	4808      	ldr	r0, [pc, #32]	; (8001d58 <siprintf+0x38>)
 8001d36:	4909      	ldr	r1, [pc, #36]	; (8001d5c <siprintf+0x3c>)
 8001d38:	f853 2b04 	ldr.w	r2, [r3], #4
 8001d3c:	9105      	str	r1, [sp, #20]
 8001d3e:	6800      	ldr	r0, [r0, #0]
 8001d40:	a902      	add	r1, sp, #8
 8001d42:	9301      	str	r3, [sp, #4]
 8001d44:	f000 f868 	bl	8001e18 <_svfiprintf_r>
 8001d48:	2200      	movs	r2, #0
 8001d4a:	9b02      	ldr	r3, [sp, #8]
 8001d4c:	701a      	strb	r2, [r3, #0]
 8001d4e:	b01c      	add	sp, #112	; 0x70
 8001d50:	f85d eb04 	ldr.w	lr, [sp], #4
 8001d54:	b003      	add	sp, #12
 8001d56:	4770      	bx	lr
 8001d58:	2000003c 	.word	0x2000003c
 8001d5c:	ffff0208 	.word	0xffff0208

08001d60 <__ssputs_r>:
 8001d60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001d64:	688e      	ldr	r6, [r1, #8]
 8001d66:	4682      	mov	sl, r0
 8001d68:	429e      	cmp	r6, r3
 8001d6a:	460c      	mov	r4, r1
 8001d6c:	4690      	mov	r8, r2
 8001d6e:	461f      	mov	r7, r3
 8001d70:	d838      	bhi.n	8001de4 <__ssputs_r+0x84>
 8001d72:	898a      	ldrh	r2, [r1, #12]
 8001d74:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001d78:	d032      	beq.n	8001de0 <__ssputs_r+0x80>
 8001d7a:	6825      	ldr	r5, [r4, #0]
 8001d7c:	6909      	ldr	r1, [r1, #16]
 8001d7e:	3301      	adds	r3, #1
 8001d80:	eba5 0901 	sub.w	r9, r5, r1
 8001d84:	6965      	ldr	r5, [r4, #20]
 8001d86:	444b      	add	r3, r9
 8001d88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001d8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001d90:	106d      	asrs	r5, r5, #1
 8001d92:	429d      	cmp	r5, r3
 8001d94:	bf38      	it	cc
 8001d96:	461d      	movcc	r5, r3
 8001d98:	0553      	lsls	r3, r2, #21
 8001d9a:	d531      	bpl.n	8001e00 <__ssputs_r+0xa0>
 8001d9c:	4629      	mov	r1, r5
 8001d9e:	f000 fb53 	bl	8002448 <_malloc_r>
 8001da2:	4606      	mov	r6, r0
 8001da4:	b950      	cbnz	r0, 8001dbc <__ssputs_r+0x5c>
 8001da6:	230c      	movs	r3, #12
 8001da8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dac:	f8ca 3000 	str.w	r3, [sl]
 8001db0:	89a3      	ldrh	r3, [r4, #12]
 8001db2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001db6:	81a3      	strh	r3, [r4, #12]
 8001db8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001dbc:	464a      	mov	r2, r9
 8001dbe:	6921      	ldr	r1, [r4, #16]
 8001dc0:	f000 face 	bl	8002360 <memcpy>
 8001dc4:	89a3      	ldrh	r3, [r4, #12]
 8001dc6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001dca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dce:	81a3      	strh	r3, [r4, #12]
 8001dd0:	6126      	str	r6, [r4, #16]
 8001dd2:	444e      	add	r6, r9
 8001dd4:	6026      	str	r6, [r4, #0]
 8001dd6:	463e      	mov	r6, r7
 8001dd8:	6165      	str	r5, [r4, #20]
 8001dda:	eba5 0509 	sub.w	r5, r5, r9
 8001dde:	60a5      	str	r5, [r4, #8]
 8001de0:	42be      	cmp	r6, r7
 8001de2:	d900      	bls.n	8001de6 <__ssputs_r+0x86>
 8001de4:	463e      	mov	r6, r7
 8001de6:	4632      	mov	r2, r6
 8001de8:	4641      	mov	r1, r8
 8001dea:	6820      	ldr	r0, [r4, #0]
 8001dec:	f000 fac6 	bl	800237c <memmove>
 8001df0:	68a3      	ldr	r3, [r4, #8]
 8001df2:	6822      	ldr	r2, [r4, #0]
 8001df4:	1b9b      	subs	r3, r3, r6
 8001df6:	4432      	add	r2, r6
 8001df8:	2000      	movs	r0, #0
 8001dfa:	60a3      	str	r3, [r4, #8]
 8001dfc:	6022      	str	r2, [r4, #0]
 8001dfe:	e7db      	b.n	8001db8 <__ssputs_r+0x58>
 8001e00:	462a      	mov	r2, r5
 8001e02:	f000 fb7b 	bl	80024fc <_realloc_r>
 8001e06:	4606      	mov	r6, r0
 8001e08:	2800      	cmp	r0, #0
 8001e0a:	d1e1      	bne.n	8001dd0 <__ssputs_r+0x70>
 8001e0c:	4650      	mov	r0, sl
 8001e0e:	6921      	ldr	r1, [r4, #16]
 8001e10:	f000 face 	bl	80023b0 <_free_r>
 8001e14:	e7c7      	b.n	8001da6 <__ssputs_r+0x46>
	...

08001e18 <_svfiprintf_r>:
 8001e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e1c:	4698      	mov	r8, r3
 8001e1e:	898b      	ldrh	r3, [r1, #12]
 8001e20:	4607      	mov	r7, r0
 8001e22:	061b      	lsls	r3, r3, #24
 8001e24:	460d      	mov	r5, r1
 8001e26:	4614      	mov	r4, r2
 8001e28:	b09d      	sub	sp, #116	; 0x74
 8001e2a:	d50e      	bpl.n	8001e4a <_svfiprintf_r+0x32>
 8001e2c:	690b      	ldr	r3, [r1, #16]
 8001e2e:	b963      	cbnz	r3, 8001e4a <_svfiprintf_r+0x32>
 8001e30:	2140      	movs	r1, #64	; 0x40
 8001e32:	f000 fb09 	bl	8002448 <_malloc_r>
 8001e36:	6028      	str	r0, [r5, #0]
 8001e38:	6128      	str	r0, [r5, #16]
 8001e3a:	b920      	cbnz	r0, 8001e46 <_svfiprintf_r+0x2e>
 8001e3c:	230c      	movs	r3, #12
 8001e3e:	603b      	str	r3, [r7, #0]
 8001e40:	f04f 30ff 	mov.w	r0, #4294967295
 8001e44:	e0d1      	b.n	8001fea <_svfiprintf_r+0x1d2>
 8001e46:	2340      	movs	r3, #64	; 0x40
 8001e48:	616b      	str	r3, [r5, #20]
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	9309      	str	r3, [sp, #36]	; 0x24
 8001e4e:	2320      	movs	r3, #32
 8001e50:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001e54:	2330      	movs	r3, #48	; 0x30
 8001e56:	f04f 0901 	mov.w	r9, #1
 8001e5a:	f8cd 800c 	str.w	r8, [sp, #12]
 8001e5e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002004 <_svfiprintf_r+0x1ec>
 8001e62:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001e66:	4623      	mov	r3, r4
 8001e68:	469a      	mov	sl, r3
 8001e6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001e6e:	b10a      	cbz	r2, 8001e74 <_svfiprintf_r+0x5c>
 8001e70:	2a25      	cmp	r2, #37	; 0x25
 8001e72:	d1f9      	bne.n	8001e68 <_svfiprintf_r+0x50>
 8001e74:	ebba 0b04 	subs.w	fp, sl, r4
 8001e78:	d00b      	beq.n	8001e92 <_svfiprintf_r+0x7a>
 8001e7a:	465b      	mov	r3, fp
 8001e7c:	4622      	mov	r2, r4
 8001e7e:	4629      	mov	r1, r5
 8001e80:	4638      	mov	r0, r7
 8001e82:	f7ff ff6d 	bl	8001d60 <__ssputs_r>
 8001e86:	3001      	adds	r0, #1
 8001e88:	f000 80aa 	beq.w	8001fe0 <_svfiprintf_r+0x1c8>
 8001e8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001e8e:	445a      	add	r2, fp
 8001e90:	9209      	str	r2, [sp, #36]	; 0x24
 8001e92:	f89a 3000 	ldrb.w	r3, [sl]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f000 80a2 	beq.w	8001fe0 <_svfiprintf_r+0x1c8>
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	f04f 32ff 	mov.w	r2, #4294967295
 8001ea2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001ea6:	f10a 0a01 	add.w	sl, sl, #1
 8001eaa:	9304      	str	r3, [sp, #16]
 8001eac:	9307      	str	r3, [sp, #28]
 8001eae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001eb2:	931a      	str	r3, [sp, #104]	; 0x68
 8001eb4:	4654      	mov	r4, sl
 8001eb6:	2205      	movs	r2, #5
 8001eb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001ebc:	4851      	ldr	r0, [pc, #324]	; (8002004 <_svfiprintf_r+0x1ec>)
 8001ebe:	f000 fa41 	bl	8002344 <memchr>
 8001ec2:	9a04      	ldr	r2, [sp, #16]
 8001ec4:	b9d8      	cbnz	r0, 8001efe <_svfiprintf_r+0xe6>
 8001ec6:	06d0      	lsls	r0, r2, #27
 8001ec8:	bf44      	itt	mi
 8001eca:	2320      	movmi	r3, #32
 8001ecc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001ed0:	0711      	lsls	r1, r2, #28
 8001ed2:	bf44      	itt	mi
 8001ed4:	232b      	movmi	r3, #43	; 0x2b
 8001ed6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001eda:	f89a 3000 	ldrb.w	r3, [sl]
 8001ede:	2b2a      	cmp	r3, #42	; 0x2a
 8001ee0:	d015      	beq.n	8001f0e <_svfiprintf_r+0xf6>
 8001ee2:	4654      	mov	r4, sl
 8001ee4:	2000      	movs	r0, #0
 8001ee6:	f04f 0c0a 	mov.w	ip, #10
 8001eea:	9a07      	ldr	r2, [sp, #28]
 8001eec:	4621      	mov	r1, r4
 8001eee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001ef2:	3b30      	subs	r3, #48	; 0x30
 8001ef4:	2b09      	cmp	r3, #9
 8001ef6:	d94e      	bls.n	8001f96 <_svfiprintf_r+0x17e>
 8001ef8:	b1b0      	cbz	r0, 8001f28 <_svfiprintf_r+0x110>
 8001efa:	9207      	str	r2, [sp, #28]
 8001efc:	e014      	b.n	8001f28 <_svfiprintf_r+0x110>
 8001efe:	eba0 0308 	sub.w	r3, r0, r8
 8001f02:	fa09 f303 	lsl.w	r3, r9, r3
 8001f06:	4313      	orrs	r3, r2
 8001f08:	46a2      	mov	sl, r4
 8001f0a:	9304      	str	r3, [sp, #16]
 8001f0c:	e7d2      	b.n	8001eb4 <_svfiprintf_r+0x9c>
 8001f0e:	9b03      	ldr	r3, [sp, #12]
 8001f10:	1d19      	adds	r1, r3, #4
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	9103      	str	r1, [sp, #12]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	bfbb      	ittet	lt
 8001f1a:	425b      	neglt	r3, r3
 8001f1c:	f042 0202 	orrlt.w	r2, r2, #2
 8001f20:	9307      	strge	r3, [sp, #28]
 8001f22:	9307      	strlt	r3, [sp, #28]
 8001f24:	bfb8      	it	lt
 8001f26:	9204      	strlt	r2, [sp, #16]
 8001f28:	7823      	ldrb	r3, [r4, #0]
 8001f2a:	2b2e      	cmp	r3, #46	; 0x2e
 8001f2c:	d10c      	bne.n	8001f48 <_svfiprintf_r+0x130>
 8001f2e:	7863      	ldrb	r3, [r4, #1]
 8001f30:	2b2a      	cmp	r3, #42	; 0x2a
 8001f32:	d135      	bne.n	8001fa0 <_svfiprintf_r+0x188>
 8001f34:	9b03      	ldr	r3, [sp, #12]
 8001f36:	3402      	adds	r4, #2
 8001f38:	1d1a      	adds	r2, r3, #4
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	9203      	str	r2, [sp, #12]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	bfb8      	it	lt
 8001f42:	f04f 33ff 	movlt.w	r3, #4294967295
 8001f46:	9305      	str	r3, [sp, #20]
 8001f48:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002014 <_svfiprintf_r+0x1fc>
 8001f4c:	2203      	movs	r2, #3
 8001f4e:	4650      	mov	r0, sl
 8001f50:	7821      	ldrb	r1, [r4, #0]
 8001f52:	f000 f9f7 	bl	8002344 <memchr>
 8001f56:	b140      	cbz	r0, 8001f6a <_svfiprintf_r+0x152>
 8001f58:	2340      	movs	r3, #64	; 0x40
 8001f5a:	eba0 000a 	sub.w	r0, r0, sl
 8001f5e:	fa03 f000 	lsl.w	r0, r3, r0
 8001f62:	9b04      	ldr	r3, [sp, #16]
 8001f64:	3401      	adds	r4, #1
 8001f66:	4303      	orrs	r3, r0
 8001f68:	9304      	str	r3, [sp, #16]
 8001f6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001f6e:	2206      	movs	r2, #6
 8001f70:	4825      	ldr	r0, [pc, #148]	; (8002008 <_svfiprintf_r+0x1f0>)
 8001f72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001f76:	f000 f9e5 	bl	8002344 <memchr>
 8001f7a:	2800      	cmp	r0, #0
 8001f7c:	d038      	beq.n	8001ff0 <_svfiprintf_r+0x1d8>
 8001f7e:	4b23      	ldr	r3, [pc, #140]	; (800200c <_svfiprintf_r+0x1f4>)
 8001f80:	bb1b      	cbnz	r3, 8001fca <_svfiprintf_r+0x1b2>
 8001f82:	9b03      	ldr	r3, [sp, #12]
 8001f84:	3307      	adds	r3, #7
 8001f86:	f023 0307 	bic.w	r3, r3, #7
 8001f8a:	3308      	adds	r3, #8
 8001f8c:	9303      	str	r3, [sp, #12]
 8001f8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001f90:	4433      	add	r3, r6
 8001f92:	9309      	str	r3, [sp, #36]	; 0x24
 8001f94:	e767      	b.n	8001e66 <_svfiprintf_r+0x4e>
 8001f96:	460c      	mov	r4, r1
 8001f98:	2001      	movs	r0, #1
 8001f9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8001f9e:	e7a5      	b.n	8001eec <_svfiprintf_r+0xd4>
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	f04f 0c0a 	mov.w	ip, #10
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	3401      	adds	r4, #1
 8001faa:	9305      	str	r3, [sp, #20]
 8001fac:	4620      	mov	r0, r4
 8001fae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001fb2:	3a30      	subs	r2, #48	; 0x30
 8001fb4:	2a09      	cmp	r2, #9
 8001fb6:	d903      	bls.n	8001fc0 <_svfiprintf_r+0x1a8>
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d0c5      	beq.n	8001f48 <_svfiprintf_r+0x130>
 8001fbc:	9105      	str	r1, [sp, #20]
 8001fbe:	e7c3      	b.n	8001f48 <_svfiprintf_r+0x130>
 8001fc0:	4604      	mov	r4, r0
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	fb0c 2101 	mla	r1, ip, r1, r2
 8001fc8:	e7f0      	b.n	8001fac <_svfiprintf_r+0x194>
 8001fca:	ab03      	add	r3, sp, #12
 8001fcc:	9300      	str	r3, [sp, #0]
 8001fce:	462a      	mov	r2, r5
 8001fd0:	4638      	mov	r0, r7
 8001fd2:	4b0f      	ldr	r3, [pc, #60]	; (8002010 <_svfiprintf_r+0x1f8>)
 8001fd4:	a904      	add	r1, sp, #16
 8001fd6:	f3af 8000 	nop.w
 8001fda:	1c42      	adds	r2, r0, #1
 8001fdc:	4606      	mov	r6, r0
 8001fde:	d1d6      	bne.n	8001f8e <_svfiprintf_r+0x176>
 8001fe0:	89ab      	ldrh	r3, [r5, #12]
 8001fe2:	065b      	lsls	r3, r3, #25
 8001fe4:	f53f af2c 	bmi.w	8001e40 <_svfiprintf_r+0x28>
 8001fe8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001fea:	b01d      	add	sp, #116	; 0x74
 8001fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ff0:	ab03      	add	r3, sp, #12
 8001ff2:	9300      	str	r3, [sp, #0]
 8001ff4:	462a      	mov	r2, r5
 8001ff6:	4638      	mov	r0, r7
 8001ff8:	4b05      	ldr	r3, [pc, #20]	; (8002010 <_svfiprintf_r+0x1f8>)
 8001ffa:	a904      	add	r1, sp, #16
 8001ffc:	f000 f87c 	bl	80020f8 <_printf_i>
 8002000:	e7eb      	b.n	8001fda <_svfiprintf_r+0x1c2>
 8002002:	bf00      	nop
 8002004:	080025e8 	.word	0x080025e8
 8002008:	080025f2 	.word	0x080025f2
 800200c:	00000000 	.word	0x00000000
 8002010:	08001d61 	.word	0x08001d61
 8002014:	080025ee 	.word	0x080025ee

08002018 <_printf_common>:
 8002018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800201c:	4616      	mov	r6, r2
 800201e:	4699      	mov	r9, r3
 8002020:	688a      	ldr	r2, [r1, #8]
 8002022:	690b      	ldr	r3, [r1, #16]
 8002024:	4607      	mov	r7, r0
 8002026:	4293      	cmp	r3, r2
 8002028:	bfb8      	it	lt
 800202a:	4613      	movlt	r3, r2
 800202c:	6033      	str	r3, [r6, #0]
 800202e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002032:	460c      	mov	r4, r1
 8002034:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002038:	b10a      	cbz	r2, 800203e <_printf_common+0x26>
 800203a:	3301      	adds	r3, #1
 800203c:	6033      	str	r3, [r6, #0]
 800203e:	6823      	ldr	r3, [r4, #0]
 8002040:	0699      	lsls	r1, r3, #26
 8002042:	bf42      	ittt	mi
 8002044:	6833      	ldrmi	r3, [r6, #0]
 8002046:	3302      	addmi	r3, #2
 8002048:	6033      	strmi	r3, [r6, #0]
 800204a:	6825      	ldr	r5, [r4, #0]
 800204c:	f015 0506 	ands.w	r5, r5, #6
 8002050:	d106      	bne.n	8002060 <_printf_common+0x48>
 8002052:	f104 0a19 	add.w	sl, r4, #25
 8002056:	68e3      	ldr	r3, [r4, #12]
 8002058:	6832      	ldr	r2, [r6, #0]
 800205a:	1a9b      	subs	r3, r3, r2
 800205c:	42ab      	cmp	r3, r5
 800205e:	dc28      	bgt.n	80020b2 <_printf_common+0x9a>
 8002060:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002064:	1e13      	subs	r3, r2, #0
 8002066:	6822      	ldr	r2, [r4, #0]
 8002068:	bf18      	it	ne
 800206a:	2301      	movne	r3, #1
 800206c:	0692      	lsls	r2, r2, #26
 800206e:	d42d      	bmi.n	80020cc <_printf_common+0xb4>
 8002070:	4649      	mov	r1, r9
 8002072:	4638      	mov	r0, r7
 8002074:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002078:	47c0      	blx	r8
 800207a:	3001      	adds	r0, #1
 800207c:	d020      	beq.n	80020c0 <_printf_common+0xa8>
 800207e:	6823      	ldr	r3, [r4, #0]
 8002080:	68e5      	ldr	r5, [r4, #12]
 8002082:	f003 0306 	and.w	r3, r3, #6
 8002086:	2b04      	cmp	r3, #4
 8002088:	bf18      	it	ne
 800208a:	2500      	movne	r5, #0
 800208c:	6832      	ldr	r2, [r6, #0]
 800208e:	f04f 0600 	mov.w	r6, #0
 8002092:	68a3      	ldr	r3, [r4, #8]
 8002094:	bf08      	it	eq
 8002096:	1aad      	subeq	r5, r5, r2
 8002098:	6922      	ldr	r2, [r4, #16]
 800209a:	bf08      	it	eq
 800209c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80020a0:	4293      	cmp	r3, r2
 80020a2:	bfc4      	itt	gt
 80020a4:	1a9b      	subgt	r3, r3, r2
 80020a6:	18ed      	addgt	r5, r5, r3
 80020a8:	341a      	adds	r4, #26
 80020aa:	42b5      	cmp	r5, r6
 80020ac:	d11a      	bne.n	80020e4 <_printf_common+0xcc>
 80020ae:	2000      	movs	r0, #0
 80020b0:	e008      	b.n	80020c4 <_printf_common+0xac>
 80020b2:	2301      	movs	r3, #1
 80020b4:	4652      	mov	r2, sl
 80020b6:	4649      	mov	r1, r9
 80020b8:	4638      	mov	r0, r7
 80020ba:	47c0      	blx	r8
 80020bc:	3001      	adds	r0, #1
 80020be:	d103      	bne.n	80020c8 <_printf_common+0xb0>
 80020c0:	f04f 30ff 	mov.w	r0, #4294967295
 80020c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80020c8:	3501      	adds	r5, #1
 80020ca:	e7c4      	b.n	8002056 <_printf_common+0x3e>
 80020cc:	2030      	movs	r0, #48	; 0x30
 80020ce:	18e1      	adds	r1, r4, r3
 80020d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80020d4:	1c5a      	adds	r2, r3, #1
 80020d6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80020da:	4422      	add	r2, r4
 80020dc:	3302      	adds	r3, #2
 80020de:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80020e2:	e7c5      	b.n	8002070 <_printf_common+0x58>
 80020e4:	2301      	movs	r3, #1
 80020e6:	4622      	mov	r2, r4
 80020e8:	4649      	mov	r1, r9
 80020ea:	4638      	mov	r0, r7
 80020ec:	47c0      	blx	r8
 80020ee:	3001      	adds	r0, #1
 80020f0:	d0e6      	beq.n	80020c0 <_printf_common+0xa8>
 80020f2:	3601      	adds	r6, #1
 80020f4:	e7d9      	b.n	80020aa <_printf_common+0x92>
	...

080020f8 <_printf_i>:
 80020f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80020fc:	460c      	mov	r4, r1
 80020fe:	7e27      	ldrb	r7, [r4, #24]
 8002100:	4691      	mov	r9, r2
 8002102:	2f78      	cmp	r7, #120	; 0x78
 8002104:	4680      	mov	r8, r0
 8002106:	469a      	mov	sl, r3
 8002108:	990c      	ldr	r1, [sp, #48]	; 0x30
 800210a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800210e:	d807      	bhi.n	8002120 <_printf_i+0x28>
 8002110:	2f62      	cmp	r7, #98	; 0x62
 8002112:	d80a      	bhi.n	800212a <_printf_i+0x32>
 8002114:	2f00      	cmp	r7, #0
 8002116:	f000 80d9 	beq.w	80022cc <_printf_i+0x1d4>
 800211a:	2f58      	cmp	r7, #88	; 0x58
 800211c:	f000 80a4 	beq.w	8002268 <_printf_i+0x170>
 8002120:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002124:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002128:	e03a      	b.n	80021a0 <_printf_i+0xa8>
 800212a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800212e:	2b15      	cmp	r3, #21
 8002130:	d8f6      	bhi.n	8002120 <_printf_i+0x28>
 8002132:	a001      	add	r0, pc, #4	; (adr r0, 8002138 <_printf_i+0x40>)
 8002134:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002138:	08002191 	.word	0x08002191
 800213c:	080021a5 	.word	0x080021a5
 8002140:	08002121 	.word	0x08002121
 8002144:	08002121 	.word	0x08002121
 8002148:	08002121 	.word	0x08002121
 800214c:	08002121 	.word	0x08002121
 8002150:	080021a5 	.word	0x080021a5
 8002154:	08002121 	.word	0x08002121
 8002158:	08002121 	.word	0x08002121
 800215c:	08002121 	.word	0x08002121
 8002160:	08002121 	.word	0x08002121
 8002164:	080022b3 	.word	0x080022b3
 8002168:	080021d5 	.word	0x080021d5
 800216c:	08002295 	.word	0x08002295
 8002170:	08002121 	.word	0x08002121
 8002174:	08002121 	.word	0x08002121
 8002178:	080022d5 	.word	0x080022d5
 800217c:	08002121 	.word	0x08002121
 8002180:	080021d5 	.word	0x080021d5
 8002184:	08002121 	.word	0x08002121
 8002188:	08002121 	.word	0x08002121
 800218c:	0800229d 	.word	0x0800229d
 8002190:	680b      	ldr	r3, [r1, #0]
 8002192:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002196:	1d1a      	adds	r2, r3, #4
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	600a      	str	r2, [r1, #0]
 800219c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80021a0:	2301      	movs	r3, #1
 80021a2:	e0a4      	b.n	80022ee <_printf_i+0x1f6>
 80021a4:	6825      	ldr	r5, [r4, #0]
 80021a6:	6808      	ldr	r0, [r1, #0]
 80021a8:	062e      	lsls	r6, r5, #24
 80021aa:	f100 0304 	add.w	r3, r0, #4
 80021ae:	d50a      	bpl.n	80021c6 <_printf_i+0xce>
 80021b0:	6805      	ldr	r5, [r0, #0]
 80021b2:	600b      	str	r3, [r1, #0]
 80021b4:	2d00      	cmp	r5, #0
 80021b6:	da03      	bge.n	80021c0 <_printf_i+0xc8>
 80021b8:	232d      	movs	r3, #45	; 0x2d
 80021ba:	426d      	negs	r5, r5
 80021bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80021c0:	230a      	movs	r3, #10
 80021c2:	485e      	ldr	r0, [pc, #376]	; (800233c <_printf_i+0x244>)
 80021c4:	e019      	b.n	80021fa <_printf_i+0x102>
 80021c6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80021ca:	6805      	ldr	r5, [r0, #0]
 80021cc:	600b      	str	r3, [r1, #0]
 80021ce:	bf18      	it	ne
 80021d0:	b22d      	sxthne	r5, r5
 80021d2:	e7ef      	b.n	80021b4 <_printf_i+0xbc>
 80021d4:	680b      	ldr	r3, [r1, #0]
 80021d6:	6825      	ldr	r5, [r4, #0]
 80021d8:	1d18      	adds	r0, r3, #4
 80021da:	6008      	str	r0, [r1, #0]
 80021dc:	0628      	lsls	r0, r5, #24
 80021de:	d501      	bpl.n	80021e4 <_printf_i+0xec>
 80021e0:	681d      	ldr	r5, [r3, #0]
 80021e2:	e002      	b.n	80021ea <_printf_i+0xf2>
 80021e4:	0669      	lsls	r1, r5, #25
 80021e6:	d5fb      	bpl.n	80021e0 <_printf_i+0xe8>
 80021e8:	881d      	ldrh	r5, [r3, #0]
 80021ea:	2f6f      	cmp	r7, #111	; 0x6f
 80021ec:	bf0c      	ite	eq
 80021ee:	2308      	moveq	r3, #8
 80021f0:	230a      	movne	r3, #10
 80021f2:	4852      	ldr	r0, [pc, #328]	; (800233c <_printf_i+0x244>)
 80021f4:	2100      	movs	r1, #0
 80021f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80021fa:	6866      	ldr	r6, [r4, #4]
 80021fc:	2e00      	cmp	r6, #0
 80021fe:	bfa8      	it	ge
 8002200:	6821      	ldrge	r1, [r4, #0]
 8002202:	60a6      	str	r6, [r4, #8]
 8002204:	bfa4      	itt	ge
 8002206:	f021 0104 	bicge.w	r1, r1, #4
 800220a:	6021      	strge	r1, [r4, #0]
 800220c:	b90d      	cbnz	r5, 8002212 <_printf_i+0x11a>
 800220e:	2e00      	cmp	r6, #0
 8002210:	d04d      	beq.n	80022ae <_printf_i+0x1b6>
 8002212:	4616      	mov	r6, r2
 8002214:	fbb5 f1f3 	udiv	r1, r5, r3
 8002218:	fb03 5711 	mls	r7, r3, r1, r5
 800221c:	5dc7      	ldrb	r7, [r0, r7]
 800221e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002222:	462f      	mov	r7, r5
 8002224:	42bb      	cmp	r3, r7
 8002226:	460d      	mov	r5, r1
 8002228:	d9f4      	bls.n	8002214 <_printf_i+0x11c>
 800222a:	2b08      	cmp	r3, #8
 800222c:	d10b      	bne.n	8002246 <_printf_i+0x14e>
 800222e:	6823      	ldr	r3, [r4, #0]
 8002230:	07df      	lsls	r7, r3, #31
 8002232:	d508      	bpl.n	8002246 <_printf_i+0x14e>
 8002234:	6923      	ldr	r3, [r4, #16]
 8002236:	6861      	ldr	r1, [r4, #4]
 8002238:	4299      	cmp	r1, r3
 800223a:	bfde      	ittt	le
 800223c:	2330      	movle	r3, #48	; 0x30
 800223e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002242:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002246:	1b92      	subs	r2, r2, r6
 8002248:	6122      	str	r2, [r4, #16]
 800224a:	464b      	mov	r3, r9
 800224c:	4621      	mov	r1, r4
 800224e:	4640      	mov	r0, r8
 8002250:	f8cd a000 	str.w	sl, [sp]
 8002254:	aa03      	add	r2, sp, #12
 8002256:	f7ff fedf 	bl	8002018 <_printf_common>
 800225a:	3001      	adds	r0, #1
 800225c:	d14c      	bne.n	80022f8 <_printf_i+0x200>
 800225e:	f04f 30ff 	mov.w	r0, #4294967295
 8002262:	b004      	add	sp, #16
 8002264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002268:	4834      	ldr	r0, [pc, #208]	; (800233c <_printf_i+0x244>)
 800226a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800226e:	680e      	ldr	r6, [r1, #0]
 8002270:	6823      	ldr	r3, [r4, #0]
 8002272:	f856 5b04 	ldr.w	r5, [r6], #4
 8002276:	061f      	lsls	r7, r3, #24
 8002278:	600e      	str	r6, [r1, #0]
 800227a:	d514      	bpl.n	80022a6 <_printf_i+0x1ae>
 800227c:	07d9      	lsls	r1, r3, #31
 800227e:	bf44      	itt	mi
 8002280:	f043 0320 	orrmi.w	r3, r3, #32
 8002284:	6023      	strmi	r3, [r4, #0]
 8002286:	b91d      	cbnz	r5, 8002290 <_printf_i+0x198>
 8002288:	6823      	ldr	r3, [r4, #0]
 800228a:	f023 0320 	bic.w	r3, r3, #32
 800228e:	6023      	str	r3, [r4, #0]
 8002290:	2310      	movs	r3, #16
 8002292:	e7af      	b.n	80021f4 <_printf_i+0xfc>
 8002294:	6823      	ldr	r3, [r4, #0]
 8002296:	f043 0320 	orr.w	r3, r3, #32
 800229a:	6023      	str	r3, [r4, #0]
 800229c:	2378      	movs	r3, #120	; 0x78
 800229e:	4828      	ldr	r0, [pc, #160]	; (8002340 <_printf_i+0x248>)
 80022a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80022a4:	e7e3      	b.n	800226e <_printf_i+0x176>
 80022a6:	065e      	lsls	r6, r3, #25
 80022a8:	bf48      	it	mi
 80022aa:	b2ad      	uxthmi	r5, r5
 80022ac:	e7e6      	b.n	800227c <_printf_i+0x184>
 80022ae:	4616      	mov	r6, r2
 80022b0:	e7bb      	b.n	800222a <_printf_i+0x132>
 80022b2:	680b      	ldr	r3, [r1, #0]
 80022b4:	6826      	ldr	r6, [r4, #0]
 80022b6:	1d1d      	adds	r5, r3, #4
 80022b8:	6960      	ldr	r0, [r4, #20]
 80022ba:	600d      	str	r5, [r1, #0]
 80022bc:	0635      	lsls	r5, r6, #24
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	d501      	bpl.n	80022c6 <_printf_i+0x1ce>
 80022c2:	6018      	str	r0, [r3, #0]
 80022c4:	e002      	b.n	80022cc <_printf_i+0x1d4>
 80022c6:	0671      	lsls	r1, r6, #25
 80022c8:	d5fb      	bpl.n	80022c2 <_printf_i+0x1ca>
 80022ca:	8018      	strh	r0, [r3, #0]
 80022cc:	2300      	movs	r3, #0
 80022ce:	4616      	mov	r6, r2
 80022d0:	6123      	str	r3, [r4, #16]
 80022d2:	e7ba      	b.n	800224a <_printf_i+0x152>
 80022d4:	680b      	ldr	r3, [r1, #0]
 80022d6:	1d1a      	adds	r2, r3, #4
 80022d8:	600a      	str	r2, [r1, #0]
 80022da:	681e      	ldr	r6, [r3, #0]
 80022dc:	2100      	movs	r1, #0
 80022de:	4630      	mov	r0, r6
 80022e0:	6862      	ldr	r2, [r4, #4]
 80022e2:	f000 f82f 	bl	8002344 <memchr>
 80022e6:	b108      	cbz	r0, 80022ec <_printf_i+0x1f4>
 80022e8:	1b80      	subs	r0, r0, r6
 80022ea:	6060      	str	r0, [r4, #4]
 80022ec:	6863      	ldr	r3, [r4, #4]
 80022ee:	6123      	str	r3, [r4, #16]
 80022f0:	2300      	movs	r3, #0
 80022f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80022f6:	e7a8      	b.n	800224a <_printf_i+0x152>
 80022f8:	4632      	mov	r2, r6
 80022fa:	4649      	mov	r1, r9
 80022fc:	4640      	mov	r0, r8
 80022fe:	6923      	ldr	r3, [r4, #16]
 8002300:	47d0      	blx	sl
 8002302:	3001      	adds	r0, #1
 8002304:	d0ab      	beq.n	800225e <_printf_i+0x166>
 8002306:	6823      	ldr	r3, [r4, #0]
 8002308:	079b      	lsls	r3, r3, #30
 800230a:	d413      	bmi.n	8002334 <_printf_i+0x23c>
 800230c:	68e0      	ldr	r0, [r4, #12]
 800230e:	9b03      	ldr	r3, [sp, #12]
 8002310:	4298      	cmp	r0, r3
 8002312:	bfb8      	it	lt
 8002314:	4618      	movlt	r0, r3
 8002316:	e7a4      	b.n	8002262 <_printf_i+0x16a>
 8002318:	2301      	movs	r3, #1
 800231a:	4632      	mov	r2, r6
 800231c:	4649      	mov	r1, r9
 800231e:	4640      	mov	r0, r8
 8002320:	47d0      	blx	sl
 8002322:	3001      	adds	r0, #1
 8002324:	d09b      	beq.n	800225e <_printf_i+0x166>
 8002326:	3501      	adds	r5, #1
 8002328:	68e3      	ldr	r3, [r4, #12]
 800232a:	9903      	ldr	r1, [sp, #12]
 800232c:	1a5b      	subs	r3, r3, r1
 800232e:	42ab      	cmp	r3, r5
 8002330:	dcf2      	bgt.n	8002318 <_printf_i+0x220>
 8002332:	e7eb      	b.n	800230c <_printf_i+0x214>
 8002334:	2500      	movs	r5, #0
 8002336:	f104 0619 	add.w	r6, r4, #25
 800233a:	e7f5      	b.n	8002328 <_printf_i+0x230>
 800233c:	080025f9 	.word	0x080025f9
 8002340:	0800260a 	.word	0x0800260a

08002344 <memchr>:
 8002344:	4603      	mov	r3, r0
 8002346:	b510      	push	{r4, lr}
 8002348:	b2c9      	uxtb	r1, r1
 800234a:	4402      	add	r2, r0
 800234c:	4293      	cmp	r3, r2
 800234e:	4618      	mov	r0, r3
 8002350:	d101      	bne.n	8002356 <memchr+0x12>
 8002352:	2000      	movs	r0, #0
 8002354:	e003      	b.n	800235e <memchr+0x1a>
 8002356:	7804      	ldrb	r4, [r0, #0]
 8002358:	3301      	adds	r3, #1
 800235a:	428c      	cmp	r4, r1
 800235c:	d1f6      	bne.n	800234c <memchr+0x8>
 800235e:	bd10      	pop	{r4, pc}

08002360 <memcpy>:
 8002360:	440a      	add	r2, r1
 8002362:	4291      	cmp	r1, r2
 8002364:	f100 33ff 	add.w	r3, r0, #4294967295
 8002368:	d100      	bne.n	800236c <memcpy+0xc>
 800236a:	4770      	bx	lr
 800236c:	b510      	push	{r4, lr}
 800236e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002372:	4291      	cmp	r1, r2
 8002374:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002378:	d1f9      	bne.n	800236e <memcpy+0xe>
 800237a:	bd10      	pop	{r4, pc}

0800237c <memmove>:
 800237c:	4288      	cmp	r0, r1
 800237e:	b510      	push	{r4, lr}
 8002380:	eb01 0402 	add.w	r4, r1, r2
 8002384:	d902      	bls.n	800238c <memmove+0x10>
 8002386:	4284      	cmp	r4, r0
 8002388:	4623      	mov	r3, r4
 800238a:	d807      	bhi.n	800239c <memmove+0x20>
 800238c:	1e43      	subs	r3, r0, #1
 800238e:	42a1      	cmp	r1, r4
 8002390:	d008      	beq.n	80023a4 <memmove+0x28>
 8002392:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002396:	f803 2f01 	strb.w	r2, [r3, #1]!
 800239a:	e7f8      	b.n	800238e <memmove+0x12>
 800239c:	4601      	mov	r1, r0
 800239e:	4402      	add	r2, r0
 80023a0:	428a      	cmp	r2, r1
 80023a2:	d100      	bne.n	80023a6 <memmove+0x2a>
 80023a4:	bd10      	pop	{r4, pc}
 80023a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80023aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80023ae:	e7f7      	b.n	80023a0 <memmove+0x24>

080023b0 <_free_r>:
 80023b0:	b538      	push	{r3, r4, r5, lr}
 80023b2:	4605      	mov	r5, r0
 80023b4:	2900      	cmp	r1, #0
 80023b6:	d043      	beq.n	8002440 <_free_r+0x90>
 80023b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80023bc:	1f0c      	subs	r4, r1, #4
 80023be:	2b00      	cmp	r3, #0
 80023c0:	bfb8      	it	lt
 80023c2:	18e4      	addlt	r4, r4, r3
 80023c4:	f000 f8d0 	bl	8002568 <__malloc_lock>
 80023c8:	4a1e      	ldr	r2, [pc, #120]	; (8002444 <_free_r+0x94>)
 80023ca:	6813      	ldr	r3, [r2, #0]
 80023cc:	4610      	mov	r0, r2
 80023ce:	b933      	cbnz	r3, 80023de <_free_r+0x2e>
 80023d0:	6063      	str	r3, [r4, #4]
 80023d2:	6014      	str	r4, [r2, #0]
 80023d4:	4628      	mov	r0, r5
 80023d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80023da:	f000 b8cb 	b.w	8002574 <__malloc_unlock>
 80023de:	42a3      	cmp	r3, r4
 80023e0:	d90a      	bls.n	80023f8 <_free_r+0x48>
 80023e2:	6821      	ldr	r1, [r4, #0]
 80023e4:	1862      	adds	r2, r4, r1
 80023e6:	4293      	cmp	r3, r2
 80023e8:	bf01      	itttt	eq
 80023ea:	681a      	ldreq	r2, [r3, #0]
 80023ec:	685b      	ldreq	r3, [r3, #4]
 80023ee:	1852      	addeq	r2, r2, r1
 80023f0:	6022      	streq	r2, [r4, #0]
 80023f2:	6063      	str	r3, [r4, #4]
 80023f4:	6004      	str	r4, [r0, #0]
 80023f6:	e7ed      	b.n	80023d4 <_free_r+0x24>
 80023f8:	461a      	mov	r2, r3
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	b10b      	cbz	r3, 8002402 <_free_r+0x52>
 80023fe:	42a3      	cmp	r3, r4
 8002400:	d9fa      	bls.n	80023f8 <_free_r+0x48>
 8002402:	6811      	ldr	r1, [r2, #0]
 8002404:	1850      	adds	r0, r2, r1
 8002406:	42a0      	cmp	r0, r4
 8002408:	d10b      	bne.n	8002422 <_free_r+0x72>
 800240a:	6820      	ldr	r0, [r4, #0]
 800240c:	4401      	add	r1, r0
 800240e:	1850      	adds	r0, r2, r1
 8002410:	4283      	cmp	r3, r0
 8002412:	6011      	str	r1, [r2, #0]
 8002414:	d1de      	bne.n	80023d4 <_free_r+0x24>
 8002416:	6818      	ldr	r0, [r3, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	4401      	add	r1, r0
 800241c:	6011      	str	r1, [r2, #0]
 800241e:	6053      	str	r3, [r2, #4]
 8002420:	e7d8      	b.n	80023d4 <_free_r+0x24>
 8002422:	d902      	bls.n	800242a <_free_r+0x7a>
 8002424:	230c      	movs	r3, #12
 8002426:	602b      	str	r3, [r5, #0]
 8002428:	e7d4      	b.n	80023d4 <_free_r+0x24>
 800242a:	6820      	ldr	r0, [r4, #0]
 800242c:	1821      	adds	r1, r4, r0
 800242e:	428b      	cmp	r3, r1
 8002430:	bf01      	itttt	eq
 8002432:	6819      	ldreq	r1, [r3, #0]
 8002434:	685b      	ldreq	r3, [r3, #4]
 8002436:	1809      	addeq	r1, r1, r0
 8002438:	6021      	streq	r1, [r4, #0]
 800243a:	6063      	str	r3, [r4, #4]
 800243c:	6054      	str	r4, [r2, #4]
 800243e:	e7c9      	b.n	80023d4 <_free_r+0x24>
 8002440:	bd38      	pop	{r3, r4, r5, pc}
 8002442:	bf00      	nop
 8002444:	200000d0 	.word	0x200000d0

08002448 <_malloc_r>:
 8002448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800244a:	1ccd      	adds	r5, r1, #3
 800244c:	f025 0503 	bic.w	r5, r5, #3
 8002450:	3508      	adds	r5, #8
 8002452:	2d0c      	cmp	r5, #12
 8002454:	bf38      	it	cc
 8002456:	250c      	movcc	r5, #12
 8002458:	2d00      	cmp	r5, #0
 800245a:	4606      	mov	r6, r0
 800245c:	db01      	blt.n	8002462 <_malloc_r+0x1a>
 800245e:	42a9      	cmp	r1, r5
 8002460:	d903      	bls.n	800246a <_malloc_r+0x22>
 8002462:	230c      	movs	r3, #12
 8002464:	6033      	str	r3, [r6, #0]
 8002466:	2000      	movs	r0, #0
 8002468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800246a:	f000 f87d 	bl	8002568 <__malloc_lock>
 800246e:	4921      	ldr	r1, [pc, #132]	; (80024f4 <_malloc_r+0xac>)
 8002470:	680a      	ldr	r2, [r1, #0]
 8002472:	4614      	mov	r4, r2
 8002474:	b99c      	cbnz	r4, 800249e <_malloc_r+0x56>
 8002476:	4f20      	ldr	r7, [pc, #128]	; (80024f8 <_malloc_r+0xb0>)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	b923      	cbnz	r3, 8002486 <_malloc_r+0x3e>
 800247c:	4621      	mov	r1, r4
 800247e:	4630      	mov	r0, r6
 8002480:	f000 f862 	bl	8002548 <_sbrk_r>
 8002484:	6038      	str	r0, [r7, #0]
 8002486:	4629      	mov	r1, r5
 8002488:	4630      	mov	r0, r6
 800248a:	f000 f85d 	bl	8002548 <_sbrk_r>
 800248e:	1c43      	adds	r3, r0, #1
 8002490:	d123      	bne.n	80024da <_malloc_r+0x92>
 8002492:	230c      	movs	r3, #12
 8002494:	4630      	mov	r0, r6
 8002496:	6033      	str	r3, [r6, #0]
 8002498:	f000 f86c 	bl	8002574 <__malloc_unlock>
 800249c:	e7e3      	b.n	8002466 <_malloc_r+0x1e>
 800249e:	6823      	ldr	r3, [r4, #0]
 80024a0:	1b5b      	subs	r3, r3, r5
 80024a2:	d417      	bmi.n	80024d4 <_malloc_r+0x8c>
 80024a4:	2b0b      	cmp	r3, #11
 80024a6:	d903      	bls.n	80024b0 <_malloc_r+0x68>
 80024a8:	6023      	str	r3, [r4, #0]
 80024aa:	441c      	add	r4, r3
 80024ac:	6025      	str	r5, [r4, #0]
 80024ae:	e004      	b.n	80024ba <_malloc_r+0x72>
 80024b0:	6863      	ldr	r3, [r4, #4]
 80024b2:	42a2      	cmp	r2, r4
 80024b4:	bf0c      	ite	eq
 80024b6:	600b      	streq	r3, [r1, #0]
 80024b8:	6053      	strne	r3, [r2, #4]
 80024ba:	4630      	mov	r0, r6
 80024bc:	f000 f85a 	bl	8002574 <__malloc_unlock>
 80024c0:	f104 000b 	add.w	r0, r4, #11
 80024c4:	1d23      	adds	r3, r4, #4
 80024c6:	f020 0007 	bic.w	r0, r0, #7
 80024ca:	1ac2      	subs	r2, r0, r3
 80024cc:	d0cc      	beq.n	8002468 <_malloc_r+0x20>
 80024ce:	1a1b      	subs	r3, r3, r0
 80024d0:	50a3      	str	r3, [r4, r2]
 80024d2:	e7c9      	b.n	8002468 <_malloc_r+0x20>
 80024d4:	4622      	mov	r2, r4
 80024d6:	6864      	ldr	r4, [r4, #4]
 80024d8:	e7cc      	b.n	8002474 <_malloc_r+0x2c>
 80024da:	1cc4      	adds	r4, r0, #3
 80024dc:	f024 0403 	bic.w	r4, r4, #3
 80024e0:	42a0      	cmp	r0, r4
 80024e2:	d0e3      	beq.n	80024ac <_malloc_r+0x64>
 80024e4:	1a21      	subs	r1, r4, r0
 80024e6:	4630      	mov	r0, r6
 80024e8:	f000 f82e 	bl	8002548 <_sbrk_r>
 80024ec:	3001      	adds	r0, #1
 80024ee:	d1dd      	bne.n	80024ac <_malloc_r+0x64>
 80024f0:	e7cf      	b.n	8002492 <_malloc_r+0x4a>
 80024f2:	bf00      	nop
 80024f4:	200000d0 	.word	0x200000d0
 80024f8:	200000d4 	.word	0x200000d4

080024fc <_realloc_r>:
 80024fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024fe:	4607      	mov	r7, r0
 8002500:	4614      	mov	r4, r2
 8002502:	460e      	mov	r6, r1
 8002504:	b921      	cbnz	r1, 8002510 <_realloc_r+0x14>
 8002506:	4611      	mov	r1, r2
 8002508:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800250c:	f7ff bf9c 	b.w	8002448 <_malloc_r>
 8002510:	b922      	cbnz	r2, 800251c <_realloc_r+0x20>
 8002512:	f7ff ff4d 	bl	80023b0 <_free_r>
 8002516:	4625      	mov	r5, r4
 8002518:	4628      	mov	r0, r5
 800251a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800251c:	f000 f830 	bl	8002580 <_malloc_usable_size_r>
 8002520:	42a0      	cmp	r0, r4
 8002522:	d20f      	bcs.n	8002544 <_realloc_r+0x48>
 8002524:	4621      	mov	r1, r4
 8002526:	4638      	mov	r0, r7
 8002528:	f7ff ff8e 	bl	8002448 <_malloc_r>
 800252c:	4605      	mov	r5, r0
 800252e:	2800      	cmp	r0, #0
 8002530:	d0f2      	beq.n	8002518 <_realloc_r+0x1c>
 8002532:	4631      	mov	r1, r6
 8002534:	4622      	mov	r2, r4
 8002536:	f7ff ff13 	bl	8002360 <memcpy>
 800253a:	4631      	mov	r1, r6
 800253c:	4638      	mov	r0, r7
 800253e:	f7ff ff37 	bl	80023b0 <_free_r>
 8002542:	e7e9      	b.n	8002518 <_realloc_r+0x1c>
 8002544:	4635      	mov	r5, r6
 8002546:	e7e7      	b.n	8002518 <_realloc_r+0x1c>

08002548 <_sbrk_r>:
 8002548:	b538      	push	{r3, r4, r5, lr}
 800254a:	2300      	movs	r3, #0
 800254c:	4d05      	ldr	r5, [pc, #20]	; (8002564 <_sbrk_r+0x1c>)
 800254e:	4604      	mov	r4, r0
 8002550:	4608      	mov	r0, r1
 8002552:	602b      	str	r3, [r5, #0]
 8002554:	f7fe f81c 	bl	8000590 <_sbrk>
 8002558:	1c43      	adds	r3, r0, #1
 800255a:	d102      	bne.n	8002562 <_sbrk_r+0x1a>
 800255c:	682b      	ldr	r3, [r5, #0]
 800255e:	b103      	cbz	r3, 8002562 <_sbrk_r+0x1a>
 8002560:	6023      	str	r3, [r4, #0]
 8002562:	bd38      	pop	{r3, r4, r5, pc}
 8002564:	20000174 	.word	0x20000174

08002568 <__malloc_lock>:
 8002568:	4801      	ldr	r0, [pc, #4]	; (8002570 <__malloc_lock+0x8>)
 800256a:	f000 b811 	b.w	8002590 <__retarget_lock_acquire_recursive>
 800256e:	bf00      	nop
 8002570:	2000017c 	.word	0x2000017c

08002574 <__malloc_unlock>:
 8002574:	4801      	ldr	r0, [pc, #4]	; (800257c <__malloc_unlock+0x8>)
 8002576:	f000 b80c 	b.w	8002592 <__retarget_lock_release_recursive>
 800257a:	bf00      	nop
 800257c:	2000017c 	.word	0x2000017c

08002580 <_malloc_usable_size_r>:
 8002580:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002584:	1f18      	subs	r0, r3, #4
 8002586:	2b00      	cmp	r3, #0
 8002588:	bfbc      	itt	lt
 800258a:	580b      	ldrlt	r3, [r1, r0]
 800258c:	18c0      	addlt	r0, r0, r3
 800258e:	4770      	bx	lr

08002590 <__retarget_lock_acquire_recursive>:
 8002590:	4770      	bx	lr

08002592 <__retarget_lock_release_recursive>:
 8002592:	4770      	bx	lr

08002594 <_init>:
 8002594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002596:	bf00      	nop
 8002598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800259a:	bc08      	pop	{r3}
 800259c:	469e      	mov	lr, r3
 800259e:	4770      	bx	lr

080025a0 <_fini>:
 80025a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025a2:	bf00      	nop
 80025a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025a6:	bc08      	pop	{r3}
 80025a8:	469e      	mov	lr, r3
 80025aa:	4770      	bx	lr
