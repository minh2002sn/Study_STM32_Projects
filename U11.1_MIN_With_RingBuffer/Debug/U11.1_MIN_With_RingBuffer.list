
U11.1_MIN_With_RingBuffer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000321c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080033b4  080033b4  000133b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033cc  080033cc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080033cc  080033cc  000133cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080033d4  080033d4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033d4  080033d4  000133d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080033d8  080033d8  000133d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080033dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006bc  2000000c  080033e8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006c8  080033e8  000206c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009e07  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ad4  00000000  00000000  00029e43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000810  00000000  00000000  0002b918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000768  00000000  00000000  0002c128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014cdc  00000000  00000000  0002c890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009ab6  00000000  00000000  0004156c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082407  00000000  00000000  0004b022  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cd429  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001fa8  00000000  00000000  000cd47c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800339c 	.word	0x0800339c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	0800339c 	.word	0x0800339c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t Rx_Buffer;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart2.Instance){
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681a      	ldr	r2, [r3, #0]
 80004dc:	4b08      	ldr	r3, [pc, #32]	; (8000500 <HAL_UART_RxCpltCallback+0x30>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	429a      	cmp	r2, r3
 80004e2:	d109      	bne.n	80004f8 <HAL_UART_RxCpltCallback+0x28>
		UART_Receive(Rx_Buffer);
 80004e4:	4b07      	ldr	r3, [pc, #28]	; (8000504 <HAL_UART_RxCpltCallback+0x34>)
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	4618      	mov	r0, r3
 80004ea:	f002 ff01 	bl	80032f0 <UART_Receive>
		HAL_UART_Receive_IT(huart, &Rx_Buffer, 1);
 80004ee:	2201      	movs	r2, #1
 80004f0:	4904      	ldr	r1, [pc, #16]	; (8000504 <HAL_UART_RxCpltCallback+0x34>)
 80004f2:	6878      	ldr	r0, [r7, #4]
 80004f4:	f001 fadd 	bl	8001ab2 <HAL_UART_Receive_IT>
	}
}
 80004f8:	bf00      	nop
 80004fa:	3708      	adds	r7, #8
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	20000070 	.word	0x20000070
 8000504:	2000006c 	.word	0x2000006c

08000508 <min_application_handler>:

struct min_context min_ctx;

void min_application_handler(uint8_t min_id, uint8_t const *min_payload, uint8_t len_payload, uint8_t port){
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	6039      	str	r1, [r7, #0]
 8000510:	4611      	mov	r1, r2
 8000512:	461a      	mov	r2, r3
 8000514:	4603      	mov	r3, r0
 8000516:	71fb      	strb	r3, [r7, #7]
 8000518:	460b      	mov	r3, r1
 800051a:	71bb      	strb	r3, [r7, #6]
 800051c:	4613      	mov	r3, r2
 800051e:	717b      	strb	r3, [r7, #5]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, (GPIO_PinState)min_payload[0]);
 8000520:	683b      	ldr	r3, [r7, #0]
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	461a      	mov	r2, r3
 8000526:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800052a:	4803      	ldr	r0, [pc, #12]	; (8000538 <min_application_handler+0x30>)
 800052c:	f000 fe12 	bl	8001154 <HAL_GPIO_WritePin>
}
 8000530:	bf00      	nop
 8000532:	3708      	adds	r7, #8
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	40020c00 	.word	0x40020c00

0800053c <min_time_ms>:

uint32_t min_time_ms(void){
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8000540:	f000 fab0 	bl	8000aa4 <HAL_GetTick>
 8000544:	4603      	mov	r3, r0
}
 8000546:	4618      	mov	r0, r3
 8000548:	bd80      	pop	{r7, pc}

0800054a <min_tx_space>:

uint16_t min_tx_space(uint8_t port){
 800054a:	b480      	push	{r7}
 800054c:	b083      	sub	sp, #12
 800054e:	af00      	add	r7, sp, #0
 8000550:	4603      	mov	r3, r0
 8000552:	71fb      	strb	r3, [r7, #7]
	return 512;
 8000554:	f44f 7300 	mov.w	r3, #512	; 0x200
}
 8000558:	4618      	mov	r0, r3
 800055a:	370c      	adds	r7, #12
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr

08000564 <min_tx_byte>:

void min_tx_byte(uint8_t port, uint8_t byte){
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0
 800056a:	4603      	mov	r3, r0
 800056c:	460a      	mov	r2, r1
 800056e:	71fb      	strb	r3, [r7, #7]
 8000570:	4613      	mov	r3, r2
 8000572:	71bb      	strb	r3, [r7, #6]
	USART2->DR = byte;
 8000574:	4a08      	ldr	r2, [pc, #32]	; (8000598 <min_tx_byte+0x34>)
 8000576:	79bb      	ldrb	r3, [r7, #6]
 8000578:	6053      	str	r3, [r2, #4]
	while(!(USART2->SR & USART_SR_TC));
 800057a:	bf00      	nop
 800057c:	4b06      	ldr	r3, [pc, #24]	; (8000598 <min_tx_byte+0x34>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000584:	2b00      	cmp	r3, #0
 8000586:	d0f9      	beq.n	800057c <min_tx_byte+0x18>
}
 8000588:	bf00      	nop
 800058a:	bf00      	nop
 800058c:	370c      	adds	r7, #12
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	40004400 	.word	0x40004400

0800059c <min_tx_start>:

void min_tx_start(uint8_t port){
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	71fb      	strb	r3, [r7, #7]

}
 80005a6:	bf00      	nop
 80005a8:	370c      	adds	r7, #12
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr

080005b2 <min_tx_finished>:

void min_tx_finished(uint8_t port){
 80005b2:	b480      	push	{r7}
 80005b4:	b083      	sub	sp, #12
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	4603      	mov	r3, r0
 80005ba:	71fb      	strb	r3, [r7, #7]

}
 80005bc:	bf00      	nop
 80005be:	370c      	adds	r7, #12
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr

080005c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ce:	f000 fa03 	bl	80009d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d2:	f000 f82f 	bl	8000634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d6:	f000 f8bf 	bl	8000758 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005da:	f000 f893 	bl	8000704 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  UART_Init();
 80005de:	f002 fe79 	bl	80032d4 <UART_Init>
  HAL_UART_Receive_IT(&huart2, &Rx_Buffer, 1);
 80005e2:	2201      	movs	r2, #1
 80005e4:	4910      	ldr	r1, [pc, #64]	; (8000628 <main+0x60>)
 80005e6:	4811      	ldr	r0, [pc, #68]	; (800062c <main+0x64>)
 80005e8:	f001 fa63 	bl	8001ab2 <HAL_UART_Receive_IT>
  min_init_context(&min_ctx, 0);
 80005ec:	2100      	movs	r1, #0
 80005ee:	4810      	ldr	r0, [pc, #64]	; (8000630 <main+0x68>)
 80005f0:	f002 fdbc 	bl	800316c <min_init_context>
  HAL_Delay(1000);
 80005f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005f8:	f000 fa60 	bl	8000abc <HAL_Delay>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  uint8_t t_data = 0;
 80005fc:	2300      	movs	r3, #0
 80005fe:	71bb      	strb	r3, [r7, #6]
	  uint8_t len = 0;
 8000600:	2300      	movs	r3, #0
 8000602:	71fb      	strb	r3, [r7, #7]
	  if(UART_Available() != 0){
 8000604:	f002 fe94 	bl	8003330 <UART_Available>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d005      	beq.n	800061a <main+0x52>
		  t_data = UART_Read();
 800060e:	f002 fe7f 	bl	8003310 <UART_Read>
 8000612:	4603      	mov	r3, r0
 8000614:	71bb      	strb	r3, [r7, #6]
		  len = 1;
 8000616:	2301      	movs	r3, #1
 8000618:	71fb      	strb	r3, [r7, #7]
	  }
	  min_poll(&min_ctx, &t_data, len);
 800061a:	79fa      	ldrb	r2, [r7, #7]
 800061c:	1dbb      	adds	r3, r7, #6
 800061e:	4619      	mov	r1, r3
 8000620:	4803      	ldr	r0, [pc, #12]	; (8000630 <main+0x68>)
 8000622:	f002 fcfd 	bl	8003020 <min_poll>
  {
 8000626:	e7e9      	b.n	80005fc <main+0x34>
 8000628:	2000006c 	.word	0x2000006c
 800062c:	20000070 	.word	0x20000070
 8000630:	200000b4 	.word	0x200000b4

08000634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b094      	sub	sp, #80	; 0x50
 8000638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063a:	f107 0320 	add.w	r3, r7, #32
 800063e:	2230      	movs	r2, #48	; 0x30
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f002 fea2 	bl	800338c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000648:	f107 030c 	add.w	r3, r7, #12
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000658:	2300      	movs	r3, #0
 800065a:	60bb      	str	r3, [r7, #8]
 800065c:	4b27      	ldr	r3, [pc, #156]	; (80006fc <SystemClock_Config+0xc8>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000660:	4a26      	ldr	r2, [pc, #152]	; (80006fc <SystemClock_Config+0xc8>)
 8000662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000666:	6413      	str	r3, [r2, #64]	; 0x40
 8000668:	4b24      	ldr	r3, [pc, #144]	; (80006fc <SystemClock_Config+0xc8>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000670:	60bb      	str	r3, [r7, #8]
 8000672:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000674:	2300      	movs	r3, #0
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	4b21      	ldr	r3, [pc, #132]	; (8000700 <SystemClock_Config+0xcc>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a20      	ldr	r2, [pc, #128]	; (8000700 <SystemClock_Config+0xcc>)
 800067e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000682:	6013      	str	r3, [r2, #0]
 8000684:	4b1e      	ldr	r3, [pc, #120]	; (8000700 <SystemClock_Config+0xcc>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000690:	2302      	movs	r3, #2
 8000692:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000694:	2301      	movs	r3, #1
 8000696:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000698:	2310      	movs	r3, #16
 800069a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069c:	2302      	movs	r3, #2
 800069e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006a0:	2300      	movs	r3, #0
 80006a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006a4:	2308      	movs	r3, #8
 80006a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80006a8:	2364      	movs	r3, #100	; 0x64
 80006aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ac:	2302      	movs	r3, #2
 80006ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006b0:	2304      	movs	r3, #4
 80006b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b4:	f107 0320 	add.w	r3, r7, #32
 80006b8:	4618      	mov	r0, r3
 80006ba:	f000 fd65 	bl	8001188 <HAL_RCC_OscConfig>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006c4:	f000 f89a 	bl	80007fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c8:	230f      	movs	r3, #15
 80006ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006cc:	2302      	movs	r3, #2
 80006ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006da:	2300      	movs	r3, #0
 80006dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006de:	f107 030c 	add.w	r3, r7, #12
 80006e2:	2103      	movs	r1, #3
 80006e4:	4618      	mov	r0, r3
 80006e6:	f000 ffc7 	bl	8001678 <HAL_RCC_ClockConfig>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006f0:	f000 f884 	bl	80007fc <Error_Handler>
  }
}
 80006f4:	bf00      	nop
 80006f6:	3750      	adds	r7, #80	; 0x50
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40023800 	.word	0x40023800
 8000700:	40007000 	.word	0x40007000

08000704 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000708:	4b11      	ldr	r3, [pc, #68]	; (8000750 <MX_USART2_UART_Init+0x4c>)
 800070a:	4a12      	ldr	r2, [pc, #72]	; (8000754 <MX_USART2_UART_Init+0x50>)
 800070c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800070e:	4b10      	ldr	r3, [pc, #64]	; (8000750 <MX_USART2_UART_Init+0x4c>)
 8000710:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000714:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000716:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <MX_USART2_UART_Init+0x4c>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800071c:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <MX_USART2_UART_Init+0x4c>)
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000722:	4b0b      	ldr	r3, [pc, #44]	; (8000750 <MX_USART2_UART_Init+0x4c>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000728:	4b09      	ldr	r3, [pc, #36]	; (8000750 <MX_USART2_UART_Init+0x4c>)
 800072a:	220c      	movs	r2, #12
 800072c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072e:	4b08      	ldr	r3, [pc, #32]	; (8000750 <MX_USART2_UART_Init+0x4c>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <MX_USART2_UART_Init+0x4c>)
 8000736:	2200      	movs	r2, #0
 8000738:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800073a:	4805      	ldr	r0, [pc, #20]	; (8000750 <MX_USART2_UART_Init+0x4c>)
 800073c:	f001 f96c 	bl	8001a18 <HAL_UART_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000746:	f000 f859 	bl	80007fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000070 	.word	0x20000070
 8000754:	40004400 	.word	0x40004400

08000758 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b088      	sub	sp, #32
 800075c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075e:	f107 030c 	add.w	r3, r7, #12
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
 800076c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	60bb      	str	r3, [r7, #8]
 8000772:	4b20      	ldr	r3, [pc, #128]	; (80007f4 <MX_GPIO_Init+0x9c>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a1f      	ldr	r2, [pc, #124]	; (80007f4 <MX_GPIO_Init+0x9c>)
 8000778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b1d      	ldr	r3, [pc, #116]	; (80007f4 <MX_GPIO_Init+0x9c>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	4b19      	ldr	r3, [pc, #100]	; (80007f4 <MX_GPIO_Init+0x9c>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a18      	ldr	r2, [pc, #96]	; (80007f4 <MX_GPIO_Init+0x9c>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b16      	ldr	r3, [pc, #88]	; (80007f4 <MX_GPIO_Init+0x9c>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	603b      	str	r3, [r7, #0]
 80007aa:	4b12      	ldr	r3, [pc, #72]	; (80007f4 <MX_GPIO_Init+0x9c>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a11      	ldr	r2, [pc, #68]	; (80007f4 <MX_GPIO_Init+0x9c>)
 80007b0:	f043 0308 	orr.w	r3, r3, #8
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <MX_GPIO_Init+0x9c>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0308 	and.w	r3, r3, #8
 80007be:	603b      	str	r3, [r7, #0]
 80007c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007c8:	480b      	ldr	r0, [pc, #44]	; (80007f8 <MX_GPIO_Init+0xa0>)
 80007ca:	f000 fcc3 	bl	8001154 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80007ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d4:	2301      	movs	r3, #1
 80007d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007dc:	2300      	movs	r3, #0
 80007de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007e0:	f107 030c 	add.w	r3, r7, #12
 80007e4:	4619      	mov	r1, r3
 80007e6:	4804      	ldr	r0, [pc, #16]	; (80007f8 <MX_GPIO_Init+0xa0>)
 80007e8:	f000 fb30 	bl	8000e4c <HAL_GPIO_Init>

}
 80007ec:	bf00      	nop
 80007ee:	3720      	adds	r7, #32
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40023800 	.word	0x40023800
 80007f8:	40020c00 	.word	0x40020c00

080007fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000800:	b672      	cpsid	i
}
 8000802:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000804:	e7fe      	b.n	8000804 <Error_Handler+0x8>
	...

08000808 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	4b10      	ldr	r3, [pc, #64]	; (8000854 <HAL_MspInit+0x4c>)
 8000814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000816:	4a0f      	ldr	r2, [pc, #60]	; (8000854 <HAL_MspInit+0x4c>)
 8000818:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800081c:	6453      	str	r3, [r2, #68]	; 0x44
 800081e:	4b0d      	ldr	r3, [pc, #52]	; (8000854 <HAL_MspInit+0x4c>)
 8000820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000822:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	603b      	str	r3, [r7, #0]
 800082e:	4b09      	ldr	r3, [pc, #36]	; (8000854 <HAL_MspInit+0x4c>)
 8000830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000832:	4a08      	ldr	r2, [pc, #32]	; (8000854 <HAL_MspInit+0x4c>)
 8000834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000838:	6413      	str	r3, [r2, #64]	; 0x40
 800083a:	4b06      	ldr	r3, [pc, #24]	; (8000854 <HAL_MspInit+0x4c>)
 800083c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000842:	603b      	str	r3, [r7, #0]
 8000844:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000846:	bf00      	nop
 8000848:	370c      	adds	r7, #12
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	40023800 	.word	0x40023800

08000858 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08a      	sub	sp, #40	; 0x28
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000860:	f107 0314 	add.w	r3, r7, #20
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]
 800086e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a1d      	ldr	r2, [pc, #116]	; (80008ec <HAL_UART_MspInit+0x94>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d133      	bne.n	80008e2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	613b      	str	r3, [r7, #16]
 800087e:	4b1c      	ldr	r3, [pc, #112]	; (80008f0 <HAL_UART_MspInit+0x98>)
 8000880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000882:	4a1b      	ldr	r2, [pc, #108]	; (80008f0 <HAL_UART_MspInit+0x98>)
 8000884:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000888:	6413      	str	r3, [r2, #64]	; 0x40
 800088a:	4b19      	ldr	r3, [pc, #100]	; (80008f0 <HAL_UART_MspInit+0x98>)
 800088c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000892:	613b      	str	r3, [r7, #16]
 8000894:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	60fb      	str	r3, [r7, #12]
 800089a:	4b15      	ldr	r3, [pc, #84]	; (80008f0 <HAL_UART_MspInit+0x98>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a14      	ldr	r2, [pc, #80]	; (80008f0 <HAL_UART_MspInit+0x98>)
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b12      	ldr	r3, [pc, #72]	; (80008f0 <HAL_UART_MspInit+0x98>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008b2:	230c      	movs	r3, #12
 80008b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b6:	2302      	movs	r3, #2
 80008b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008be:	2303      	movs	r3, #3
 80008c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008c2:	2307      	movs	r3, #7
 80008c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c6:	f107 0314 	add.w	r3, r7, #20
 80008ca:	4619      	mov	r1, r3
 80008cc:	4809      	ldr	r0, [pc, #36]	; (80008f4 <HAL_UART_MspInit+0x9c>)
 80008ce:	f000 fabd 	bl	8000e4c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80008d2:	2200      	movs	r2, #0
 80008d4:	2100      	movs	r1, #0
 80008d6:	2026      	movs	r0, #38	; 0x26
 80008d8:	f000 f9ef 	bl	8000cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008dc:	2026      	movs	r0, #38	; 0x26
 80008de:	f000 fa08 	bl	8000cf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008e2:	bf00      	nop
 80008e4:	3728      	adds	r7, #40	; 0x28
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40004400 	.word	0x40004400
 80008f0:	40023800 	.word	0x40023800
 80008f4:	40020000 	.word	0x40020000

080008f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008fc:	e7fe      	b.n	80008fc <NMI_Handler+0x4>

080008fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000902:	e7fe      	b.n	8000902 <HardFault_Handler+0x4>

08000904 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000908:	e7fe      	b.n	8000908 <MemManage_Handler+0x4>

0800090a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800090a:	b480      	push	{r7}
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800090e:	e7fe      	b.n	800090e <BusFault_Handler+0x4>

08000910 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000914:	e7fe      	b.n	8000914 <UsageFault_Handler+0x4>

08000916 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000916:	b480      	push	{r7}
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr

08000932 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000936:	bf00      	nop
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr

08000940 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000944:	f000 f89a 	bl	8000a7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000948:	bf00      	nop
 800094a:	bd80      	pop	{r7, pc}

0800094c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000950:	4802      	ldr	r0, [pc, #8]	; (800095c <USART2_IRQHandler+0x10>)
 8000952:	f001 f8df 	bl	8001b14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20000070 	.word	0x20000070

08000960 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000964:	4b06      	ldr	r3, [pc, #24]	; (8000980 <SystemInit+0x20>)
 8000966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800096a:	4a05      	ldr	r2, [pc, #20]	; (8000980 <SystemInit+0x20>)
 800096c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000970:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	e000ed00 	.word	0xe000ed00

08000984 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000984:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000988:	480d      	ldr	r0, [pc, #52]	; (80009c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800098a:	490e      	ldr	r1, [pc, #56]	; (80009c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800098c:	4a0e      	ldr	r2, [pc, #56]	; (80009c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800098e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000990:	e002      	b.n	8000998 <LoopCopyDataInit>

08000992 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000992:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000994:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000996:	3304      	adds	r3, #4

08000998 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000998:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800099a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800099c:	d3f9      	bcc.n	8000992 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800099e:	4a0b      	ldr	r2, [pc, #44]	; (80009cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009a0:	4c0b      	ldr	r4, [pc, #44]	; (80009d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a4:	e001      	b.n	80009aa <LoopFillZerobss>

080009a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a8:	3204      	adds	r2, #4

080009aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009ac:	d3fb      	bcc.n	80009a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80009ae:	f7ff ffd7 	bl	8000960 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009b2:	f002 fcc7 	bl	8003344 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009b6:	f7ff fe07 	bl	80005c8 <main>
  bx  lr    
 80009ba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80009bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009c4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009c8:	080033dc 	.word	0x080033dc
  ldr r2, =_sbss
 80009cc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009d0:	200006c8 	.word	0x200006c8

080009d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009d4:	e7fe      	b.n	80009d4 <ADC_IRQHandler>
	...

080009d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009dc:	4b0e      	ldr	r3, [pc, #56]	; (8000a18 <HAL_Init+0x40>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a0d      	ldr	r2, [pc, #52]	; (8000a18 <HAL_Init+0x40>)
 80009e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009e8:	4b0b      	ldr	r3, [pc, #44]	; (8000a18 <HAL_Init+0x40>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a0a      	ldr	r2, [pc, #40]	; (8000a18 <HAL_Init+0x40>)
 80009ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009f4:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <HAL_Init+0x40>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a07      	ldr	r2, [pc, #28]	; (8000a18 <HAL_Init+0x40>)
 80009fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a00:	2003      	movs	r0, #3
 8000a02:	f000 f94f 	bl	8000ca4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a06:	200f      	movs	r0, #15
 8000a08:	f000 f808 	bl	8000a1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a0c:	f7ff fefc 	bl	8000808 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a10:	2300      	movs	r3, #0
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40023c00 	.word	0x40023c00

08000a1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a24:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <HAL_InitTick+0x54>)
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <HAL_InitTick+0x58>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f000 f967 	bl	8000d0e <HAL_SYSTICK_Config>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a46:	2301      	movs	r3, #1
 8000a48:	e00e      	b.n	8000a68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2b0f      	cmp	r3, #15
 8000a4e:	d80a      	bhi.n	8000a66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a50:	2200      	movs	r2, #0
 8000a52:	6879      	ldr	r1, [r7, #4]
 8000a54:	f04f 30ff 	mov.w	r0, #4294967295
 8000a58:	f000 f92f 	bl	8000cba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a5c:	4a06      	ldr	r2, [pc, #24]	; (8000a78 <HAL_InitTick+0x5c>)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a62:	2300      	movs	r3, #0
 8000a64:	e000      	b.n	8000a68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a66:	2301      	movs	r3, #1
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	3708      	adds	r7, #8
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	20000000 	.word	0x20000000
 8000a74:	20000008 	.word	0x20000008
 8000a78:	20000004 	.word	0x20000004

08000a7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a80:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <HAL_IncTick+0x20>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	461a      	mov	r2, r3
 8000a86:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <HAL_IncTick+0x24>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4413      	add	r3, r2
 8000a8c:	4a04      	ldr	r2, [pc, #16]	; (8000aa0 <HAL_IncTick+0x24>)
 8000a8e:	6013      	str	r3, [r2, #0]
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	20000008 	.word	0x20000008
 8000aa0:	200002b8 	.word	0x200002b8

08000aa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  return uwTick;
 8000aa8:	4b03      	ldr	r3, [pc, #12]	; (8000ab8 <HAL_GetTick+0x14>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	200002b8 	.word	0x200002b8

08000abc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ac4:	f7ff ffee 	bl	8000aa4 <HAL_GetTick>
 8000ac8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ad4:	d005      	beq.n	8000ae2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ad6:	4b0a      	ldr	r3, [pc, #40]	; (8000b00 <HAL_Delay+0x44>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	461a      	mov	r2, r3
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	4413      	add	r3, r2
 8000ae0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ae2:	bf00      	nop
 8000ae4:	f7ff ffde 	bl	8000aa4 <HAL_GetTick>
 8000ae8:	4602      	mov	r2, r0
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	1ad3      	subs	r3, r2, r3
 8000aee:	68fa      	ldr	r2, [r7, #12]
 8000af0:	429a      	cmp	r2, r3
 8000af2:	d8f7      	bhi.n	8000ae4 <HAL_Delay+0x28>
  {
  }
}
 8000af4:	bf00      	nop
 8000af6:	bf00      	nop
 8000af8:	3710      	adds	r7, #16
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000008 	.word	0x20000008

08000b04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b085      	sub	sp, #20
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	f003 0307 	and.w	r3, r3, #7
 8000b12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b14:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <__NVIC_SetPriorityGrouping+0x44>)
 8000b16:	68db      	ldr	r3, [r3, #12]
 8000b18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b1a:	68ba      	ldr	r2, [r7, #8]
 8000b1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b20:	4013      	ands	r3, r2
 8000b22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b36:	4a04      	ldr	r2, [pc, #16]	; (8000b48 <__NVIC_SetPriorityGrouping+0x44>)
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	60d3      	str	r3, [r2, #12]
}
 8000b3c:	bf00      	nop
 8000b3e:	3714      	adds	r7, #20
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	e000ed00 	.word	0xe000ed00

08000b4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b50:	4b04      	ldr	r3, [pc, #16]	; (8000b64 <__NVIC_GetPriorityGrouping+0x18>)
 8000b52:	68db      	ldr	r3, [r3, #12]
 8000b54:	0a1b      	lsrs	r3, r3, #8
 8000b56:	f003 0307 	and.w	r3, r3, #7
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	db0b      	blt.n	8000b92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	f003 021f 	and.w	r2, r3, #31
 8000b80:	4907      	ldr	r1, [pc, #28]	; (8000ba0 <__NVIC_EnableIRQ+0x38>)
 8000b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b86:	095b      	lsrs	r3, r3, #5
 8000b88:	2001      	movs	r0, #1
 8000b8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b92:	bf00      	nop
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	e000e100 	.word	0xe000e100

08000ba4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	6039      	str	r1, [r7, #0]
 8000bae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	db0a      	blt.n	8000bce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	b2da      	uxtb	r2, r3
 8000bbc:	490c      	ldr	r1, [pc, #48]	; (8000bf0 <__NVIC_SetPriority+0x4c>)
 8000bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc2:	0112      	lsls	r2, r2, #4
 8000bc4:	b2d2      	uxtb	r2, r2
 8000bc6:	440b      	add	r3, r1
 8000bc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bcc:	e00a      	b.n	8000be4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	b2da      	uxtb	r2, r3
 8000bd2:	4908      	ldr	r1, [pc, #32]	; (8000bf4 <__NVIC_SetPriority+0x50>)
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	f003 030f 	and.w	r3, r3, #15
 8000bda:	3b04      	subs	r3, #4
 8000bdc:	0112      	lsls	r2, r2, #4
 8000bde:	b2d2      	uxtb	r2, r2
 8000be0:	440b      	add	r3, r1
 8000be2:	761a      	strb	r2, [r3, #24]
}
 8000be4:	bf00      	nop
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	e000e100 	.word	0xe000e100
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b089      	sub	sp, #36	; 0x24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	60b9      	str	r1, [r7, #8]
 8000c02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	f003 0307 	and.w	r3, r3, #7
 8000c0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c0c:	69fb      	ldr	r3, [r7, #28]
 8000c0e:	f1c3 0307 	rsb	r3, r3, #7
 8000c12:	2b04      	cmp	r3, #4
 8000c14:	bf28      	it	cs
 8000c16:	2304      	movcs	r3, #4
 8000c18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	3304      	adds	r3, #4
 8000c1e:	2b06      	cmp	r3, #6
 8000c20:	d902      	bls.n	8000c28 <NVIC_EncodePriority+0x30>
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	3b03      	subs	r3, #3
 8000c26:	e000      	b.n	8000c2a <NVIC_EncodePriority+0x32>
 8000c28:	2300      	movs	r3, #0
 8000c2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c30:	69bb      	ldr	r3, [r7, #24]
 8000c32:	fa02 f303 	lsl.w	r3, r2, r3
 8000c36:	43da      	mvns	r2, r3
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	401a      	ands	r2, r3
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c40:	f04f 31ff 	mov.w	r1, #4294967295
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4a:	43d9      	mvns	r1, r3
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c50:	4313      	orrs	r3, r2
         );
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3724      	adds	r7, #36	; 0x24
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
	...

08000c60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c70:	d301      	bcc.n	8000c76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c72:	2301      	movs	r3, #1
 8000c74:	e00f      	b.n	8000c96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c76:	4a0a      	ldr	r2, [pc, #40]	; (8000ca0 <SysTick_Config+0x40>)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	3b01      	subs	r3, #1
 8000c7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c7e:	210f      	movs	r1, #15
 8000c80:	f04f 30ff 	mov.w	r0, #4294967295
 8000c84:	f7ff ff8e 	bl	8000ba4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c88:	4b05      	ldr	r3, [pc, #20]	; (8000ca0 <SysTick_Config+0x40>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c8e:	4b04      	ldr	r3, [pc, #16]	; (8000ca0 <SysTick_Config+0x40>)
 8000c90:	2207      	movs	r2, #7
 8000c92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c94:	2300      	movs	r3, #0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	e000e010 	.word	0xe000e010

08000ca4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	f7ff ff29 	bl	8000b04 <__NVIC_SetPriorityGrouping>
}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b086      	sub	sp, #24
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	60b9      	str	r1, [r7, #8]
 8000cc4:	607a      	str	r2, [r7, #4]
 8000cc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ccc:	f7ff ff3e 	bl	8000b4c <__NVIC_GetPriorityGrouping>
 8000cd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cd2:	687a      	ldr	r2, [r7, #4]
 8000cd4:	68b9      	ldr	r1, [r7, #8]
 8000cd6:	6978      	ldr	r0, [r7, #20]
 8000cd8:	f7ff ff8e 	bl	8000bf8 <NVIC_EncodePriority>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ce2:	4611      	mov	r1, r2
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff ff5d 	bl	8000ba4 <__NVIC_SetPriority>
}
 8000cea:	bf00      	nop
 8000cec:	3718      	adds	r7, #24
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b082      	sub	sp, #8
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff ff31 	bl	8000b68 <__NVIC_EnableIRQ>
}
 8000d06:	bf00      	nop
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b082      	sub	sp, #8
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f7ff ffa2 	bl	8000c60 <SysTick_Config>
 8000d1c:	4603      	mov	r3, r0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b084      	sub	sp, #16
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d32:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000d34:	f7ff feb6 	bl	8000aa4 <HAL_GetTick>
 8000d38:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	2b02      	cmp	r3, #2
 8000d44:	d008      	beq.n	8000d58 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2280      	movs	r2, #128	; 0x80
 8000d4a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2200      	movs	r2, #0
 8000d50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000d54:	2301      	movs	r3, #1
 8000d56:	e052      	b.n	8000dfe <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f022 0216 	bic.w	r2, r2, #22
 8000d66:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	695a      	ldr	r2, [r3, #20]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d76:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d103      	bne.n	8000d88 <HAL_DMA_Abort+0x62>
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d007      	beq.n	8000d98 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f022 0208 	bic.w	r2, r2, #8
 8000d96:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f022 0201 	bic.w	r2, r2, #1
 8000da6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000da8:	e013      	b.n	8000dd2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000daa:	f7ff fe7b 	bl	8000aa4 <HAL_GetTick>
 8000dae:	4602      	mov	r2, r0
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	1ad3      	subs	r3, r2, r3
 8000db4:	2b05      	cmp	r3, #5
 8000db6:	d90c      	bls.n	8000dd2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2220      	movs	r2, #32
 8000dbc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2203      	movs	r2, #3
 8000dc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000dce:	2303      	movs	r3, #3
 8000dd0:	e015      	b.n	8000dfe <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f003 0301 	and.w	r3, r3, #1
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d1e4      	bne.n	8000daa <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000de4:	223f      	movs	r2, #63	; 0x3f
 8000de6:	409a      	lsls	r2, r3
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2201      	movs	r2, #1
 8000df0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2200      	movs	r2, #0
 8000df8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000dfc:	2300      	movs	r3, #0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3710      	adds	r7, #16
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e06:	b480      	push	{r7}
 8000e08:	b083      	sub	sp, #12
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	2b02      	cmp	r3, #2
 8000e18:	d004      	beq.n	8000e24 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2280      	movs	r2, #128	; 0x80
 8000e1e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000e20:	2301      	movs	r3, #1
 8000e22:	e00c      	b.n	8000e3e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2205      	movs	r2, #5
 8000e28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f022 0201 	bic.w	r2, r2, #1
 8000e3a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000e3c:	2300      	movs	r3, #0
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
	...

08000e4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b089      	sub	sp, #36	; 0x24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e56:	2300      	movs	r3, #0
 8000e58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e62:	2300      	movs	r3, #0
 8000e64:	61fb      	str	r3, [r7, #28]
 8000e66:	e159      	b.n	800111c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e68:	2201      	movs	r2, #1
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	697a      	ldr	r2, [r7, #20]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	f040 8148 	bne.w	8001116 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f003 0303 	and.w	r3, r3, #3
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d005      	beq.n	8000e9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e9a:	2b02      	cmp	r3, #2
 8000e9c:	d130      	bne.n	8000f00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	689b      	ldr	r3, [r3, #8]
 8000ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	2203      	movs	r2, #3
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	43db      	mvns	r3, r3
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	68da      	ldr	r2, [r3, #12]
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	43db      	mvns	r3, r3
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	091b      	lsrs	r3, r3, #4
 8000eea:	f003 0201 	and.w	r2, r3, #1
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f003 0303 	and.w	r3, r3, #3
 8000f08:	2b03      	cmp	r3, #3
 8000f0a:	d017      	beq.n	8000f3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	2203      	movs	r2, #3
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	4013      	ands	r3, r2
 8000f22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	689a      	ldr	r2, [r3, #8]
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f003 0303 	and.w	r3, r3, #3
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d123      	bne.n	8000f90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	08da      	lsrs	r2, r3, #3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	3208      	adds	r2, #8
 8000f50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	f003 0307 	and.w	r3, r3, #7
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	220f      	movs	r2, #15
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	43db      	mvns	r3, r3
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	691a      	ldr	r2, [r3, #16]
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	f003 0307 	and.w	r3, r3, #7
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	08da      	lsrs	r2, r3, #3
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	3208      	adds	r2, #8
 8000f8a:	69b9      	ldr	r1, [r7, #24]
 8000f8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	2203      	movs	r2, #3
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f003 0203 	and.w	r2, r3, #3
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	f000 80a2 	beq.w	8001116 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60fb      	str	r3, [r7, #12]
 8000fd6:	4b57      	ldr	r3, [pc, #348]	; (8001134 <HAL_GPIO_Init+0x2e8>)
 8000fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fda:	4a56      	ldr	r2, [pc, #344]	; (8001134 <HAL_GPIO_Init+0x2e8>)
 8000fdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fe0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fe2:	4b54      	ldr	r3, [pc, #336]	; (8001134 <HAL_GPIO_Init+0x2e8>)
 8000fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fee:	4a52      	ldr	r2, [pc, #328]	; (8001138 <HAL_GPIO_Init+0x2ec>)
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	089b      	lsrs	r3, r3, #2
 8000ff4:	3302      	adds	r3, #2
 8000ff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	f003 0303 	and.w	r3, r3, #3
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	220f      	movs	r2, #15
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	43db      	mvns	r3, r3
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	4013      	ands	r3, r2
 8001010:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a49      	ldr	r2, [pc, #292]	; (800113c <HAL_GPIO_Init+0x2f0>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d019      	beq.n	800104e <HAL_GPIO_Init+0x202>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a48      	ldr	r2, [pc, #288]	; (8001140 <HAL_GPIO_Init+0x2f4>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d013      	beq.n	800104a <HAL_GPIO_Init+0x1fe>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a47      	ldr	r2, [pc, #284]	; (8001144 <HAL_GPIO_Init+0x2f8>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d00d      	beq.n	8001046 <HAL_GPIO_Init+0x1fa>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a46      	ldr	r2, [pc, #280]	; (8001148 <HAL_GPIO_Init+0x2fc>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d007      	beq.n	8001042 <HAL_GPIO_Init+0x1f6>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a45      	ldr	r2, [pc, #276]	; (800114c <HAL_GPIO_Init+0x300>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d101      	bne.n	800103e <HAL_GPIO_Init+0x1f2>
 800103a:	2304      	movs	r3, #4
 800103c:	e008      	b.n	8001050 <HAL_GPIO_Init+0x204>
 800103e:	2307      	movs	r3, #7
 8001040:	e006      	b.n	8001050 <HAL_GPIO_Init+0x204>
 8001042:	2303      	movs	r3, #3
 8001044:	e004      	b.n	8001050 <HAL_GPIO_Init+0x204>
 8001046:	2302      	movs	r3, #2
 8001048:	e002      	b.n	8001050 <HAL_GPIO_Init+0x204>
 800104a:	2301      	movs	r3, #1
 800104c:	e000      	b.n	8001050 <HAL_GPIO_Init+0x204>
 800104e:	2300      	movs	r3, #0
 8001050:	69fa      	ldr	r2, [r7, #28]
 8001052:	f002 0203 	and.w	r2, r2, #3
 8001056:	0092      	lsls	r2, r2, #2
 8001058:	4093      	lsls	r3, r2
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4313      	orrs	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001060:	4935      	ldr	r1, [pc, #212]	; (8001138 <HAL_GPIO_Init+0x2ec>)
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	089b      	lsrs	r3, r3, #2
 8001066:	3302      	adds	r3, #2
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800106e:	4b38      	ldr	r3, [pc, #224]	; (8001150 <HAL_GPIO_Init+0x304>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	43db      	mvns	r3, r3
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	4013      	ands	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001086:	2b00      	cmp	r3, #0
 8001088:	d003      	beq.n	8001092 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	4313      	orrs	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001092:	4a2f      	ldr	r2, [pc, #188]	; (8001150 <HAL_GPIO_Init+0x304>)
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001098:	4b2d      	ldr	r3, [pc, #180]	; (8001150 <HAL_GPIO_Init+0x304>)
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	43db      	mvns	r3, r3
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	4013      	ands	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d003      	beq.n	80010bc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010bc:	4a24      	ldr	r2, [pc, #144]	; (8001150 <HAL_GPIO_Init+0x304>)
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010c2:	4b23      	ldr	r3, [pc, #140]	; (8001150 <HAL_GPIO_Init+0x304>)
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	43db      	mvns	r3, r3
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4013      	ands	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d003      	beq.n	80010e6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010e6:	4a1a      	ldr	r2, [pc, #104]	; (8001150 <HAL_GPIO_Init+0x304>)
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010ec:	4b18      	ldr	r3, [pc, #96]	; (8001150 <HAL_GPIO_Init+0x304>)
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	43db      	mvns	r3, r3
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4013      	ands	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001104:	2b00      	cmp	r3, #0
 8001106:	d003      	beq.n	8001110 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	4313      	orrs	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001110:	4a0f      	ldr	r2, [pc, #60]	; (8001150 <HAL_GPIO_Init+0x304>)
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	3301      	adds	r3, #1
 800111a:	61fb      	str	r3, [r7, #28]
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	2b0f      	cmp	r3, #15
 8001120:	f67f aea2 	bls.w	8000e68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001124:	bf00      	nop
 8001126:	bf00      	nop
 8001128:	3724      	adds	r7, #36	; 0x24
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	40023800 	.word	0x40023800
 8001138:	40013800 	.word	0x40013800
 800113c:	40020000 	.word	0x40020000
 8001140:	40020400 	.word	0x40020400
 8001144:	40020800 	.word	0x40020800
 8001148:	40020c00 	.word	0x40020c00
 800114c:	40021000 	.word	0x40021000
 8001150:	40013c00 	.word	0x40013c00

08001154 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	460b      	mov	r3, r1
 800115e:	807b      	strh	r3, [r7, #2]
 8001160:	4613      	mov	r3, r2
 8001162:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001164:	787b      	ldrb	r3, [r7, #1]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d003      	beq.n	8001172 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800116a:	887a      	ldrh	r2, [r7, #2]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001170:	e003      	b.n	800117a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001172:	887b      	ldrh	r3, [r7, #2]
 8001174:	041a      	lsls	r2, r3, #16
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	619a      	str	r2, [r3, #24]
}
 800117a:	bf00      	nop
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
	...

08001188 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d101      	bne.n	800119a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e264      	b.n	8001664 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d075      	beq.n	8001292 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011a6:	4ba3      	ldr	r3, [pc, #652]	; (8001434 <HAL_RCC_OscConfig+0x2ac>)
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	f003 030c 	and.w	r3, r3, #12
 80011ae:	2b04      	cmp	r3, #4
 80011b0:	d00c      	beq.n	80011cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011b2:	4ba0      	ldr	r3, [pc, #640]	; (8001434 <HAL_RCC_OscConfig+0x2ac>)
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011ba:	2b08      	cmp	r3, #8
 80011bc:	d112      	bne.n	80011e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011be:	4b9d      	ldr	r3, [pc, #628]	; (8001434 <HAL_RCC_OscConfig+0x2ac>)
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011ca:	d10b      	bne.n	80011e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011cc:	4b99      	ldr	r3, [pc, #612]	; (8001434 <HAL_RCC_OscConfig+0x2ac>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d05b      	beq.n	8001290 <HAL_RCC_OscConfig+0x108>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d157      	bne.n	8001290 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011e0:	2301      	movs	r3, #1
 80011e2:	e23f      	b.n	8001664 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011ec:	d106      	bne.n	80011fc <HAL_RCC_OscConfig+0x74>
 80011ee:	4b91      	ldr	r3, [pc, #580]	; (8001434 <HAL_RCC_OscConfig+0x2ac>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a90      	ldr	r2, [pc, #576]	; (8001434 <HAL_RCC_OscConfig+0x2ac>)
 80011f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011f8:	6013      	str	r3, [r2, #0]
 80011fa:	e01d      	b.n	8001238 <HAL_RCC_OscConfig+0xb0>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001204:	d10c      	bne.n	8001220 <HAL_RCC_OscConfig+0x98>
 8001206:	4b8b      	ldr	r3, [pc, #556]	; (8001434 <HAL_RCC_OscConfig+0x2ac>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a8a      	ldr	r2, [pc, #552]	; (8001434 <HAL_RCC_OscConfig+0x2ac>)
 800120c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001210:	6013      	str	r3, [r2, #0]
 8001212:	4b88      	ldr	r3, [pc, #544]	; (8001434 <HAL_RCC_OscConfig+0x2ac>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a87      	ldr	r2, [pc, #540]	; (8001434 <HAL_RCC_OscConfig+0x2ac>)
 8001218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800121c:	6013      	str	r3, [r2, #0]
 800121e:	e00b      	b.n	8001238 <HAL_RCC_OscConfig+0xb0>
 8001220:	4b84      	ldr	r3, [pc, #528]	; (8001434 <HAL_RCC_OscConfig+0x2ac>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a83      	ldr	r2, [pc, #524]	; (8001434 <HAL_RCC_OscConfig+0x2ac>)
 8001226:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800122a:	6013      	str	r3, [r2, #0]
 800122c:	4b81      	ldr	r3, [pc, #516]	; (8001434 <HAL_RCC_OscConfig+0x2ac>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a80      	ldr	r2, [pc, #512]	; (8001434 <HAL_RCC_OscConfig+0x2ac>)
 8001232:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001236:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d013      	beq.n	8001268 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001240:	f7ff fc30 	bl	8000aa4 <HAL_GetTick>
 8001244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001246:	e008      	b.n	800125a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001248:	f7ff fc2c 	bl	8000aa4 <HAL_GetTick>
 800124c:	4602      	mov	r2, r0
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	2b64      	cmp	r3, #100	; 0x64
 8001254:	d901      	bls.n	800125a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001256:	2303      	movs	r3, #3
 8001258:	e204      	b.n	8001664 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800125a:	4b76      	ldr	r3, [pc, #472]	; (8001434 <HAL_RCC_OscConfig+0x2ac>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d0f0      	beq.n	8001248 <HAL_RCC_OscConfig+0xc0>
 8001266:	e014      	b.n	8001292 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001268:	f7ff fc1c 	bl	8000aa4 <HAL_GetTick>
 800126c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800126e:	e008      	b.n	8001282 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001270:	f7ff fc18 	bl	8000aa4 <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2b64      	cmp	r3, #100	; 0x64
 800127c:	d901      	bls.n	8001282 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e1f0      	b.n	8001664 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001282:	4b6c      	ldr	r3, [pc, #432]	; (8001434 <HAL_RCC_OscConfig+0x2ac>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d1f0      	bne.n	8001270 <HAL_RCC_OscConfig+0xe8>
 800128e:	e000      	b.n	8001292 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001290:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	2b00      	cmp	r3, #0
 800129c:	d063      	beq.n	8001366 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800129e:	4b65      	ldr	r3, [pc, #404]	; (8001434 <HAL_RCC_OscConfig+0x2ac>)
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	f003 030c 	and.w	r3, r3, #12
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d00b      	beq.n	80012c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012aa:	4b62      	ldr	r3, [pc, #392]	; (8001434 <HAL_RCC_OscConfig+0x2ac>)
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012b2:	2b08      	cmp	r3, #8
 80012b4:	d11c      	bne.n	80012f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012b6:	4b5f      	ldr	r3, [pc, #380]	; (8001434 <HAL_RCC_OscConfig+0x2ac>)
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d116      	bne.n	80012f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012c2:	4b5c      	ldr	r3, [pc, #368]	; (8001434 <HAL_RCC_OscConfig+0x2ac>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d005      	beq.n	80012da <HAL_RCC_OscConfig+0x152>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	68db      	ldr	r3, [r3, #12]
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d001      	beq.n	80012da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e1c4      	b.n	8001664 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012da:	4b56      	ldr	r3, [pc, #344]	; (8001434 <HAL_RCC_OscConfig+0x2ac>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	691b      	ldr	r3, [r3, #16]
 80012e6:	00db      	lsls	r3, r3, #3
 80012e8:	4952      	ldr	r1, [pc, #328]	; (8001434 <HAL_RCC_OscConfig+0x2ac>)
 80012ea:	4313      	orrs	r3, r2
 80012ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ee:	e03a      	b.n	8001366 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d020      	beq.n	800133a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012f8:	4b4f      	ldr	r3, [pc, #316]	; (8001438 <HAL_RCC_OscConfig+0x2b0>)
 80012fa:	2201      	movs	r2, #1
 80012fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012fe:	f7ff fbd1 	bl	8000aa4 <HAL_GetTick>
 8001302:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001304:	e008      	b.n	8001318 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001306:	f7ff fbcd 	bl	8000aa4 <HAL_GetTick>
 800130a:	4602      	mov	r2, r0
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	2b02      	cmp	r3, #2
 8001312:	d901      	bls.n	8001318 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001314:	2303      	movs	r3, #3
 8001316:	e1a5      	b.n	8001664 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001318:	4b46      	ldr	r3, [pc, #280]	; (8001434 <HAL_RCC_OscConfig+0x2ac>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f003 0302 	and.w	r3, r3, #2
 8001320:	2b00      	cmp	r3, #0
 8001322:	d0f0      	beq.n	8001306 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001324:	4b43      	ldr	r3, [pc, #268]	; (8001434 <HAL_RCC_OscConfig+0x2ac>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	691b      	ldr	r3, [r3, #16]
 8001330:	00db      	lsls	r3, r3, #3
 8001332:	4940      	ldr	r1, [pc, #256]	; (8001434 <HAL_RCC_OscConfig+0x2ac>)
 8001334:	4313      	orrs	r3, r2
 8001336:	600b      	str	r3, [r1, #0]
 8001338:	e015      	b.n	8001366 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800133a:	4b3f      	ldr	r3, [pc, #252]	; (8001438 <HAL_RCC_OscConfig+0x2b0>)
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001340:	f7ff fbb0 	bl	8000aa4 <HAL_GetTick>
 8001344:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001346:	e008      	b.n	800135a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001348:	f7ff fbac 	bl	8000aa4 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	2b02      	cmp	r3, #2
 8001354:	d901      	bls.n	800135a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e184      	b.n	8001664 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800135a:	4b36      	ldr	r3, [pc, #216]	; (8001434 <HAL_RCC_OscConfig+0x2ac>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	2b00      	cmp	r3, #0
 8001364:	d1f0      	bne.n	8001348 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0308 	and.w	r3, r3, #8
 800136e:	2b00      	cmp	r3, #0
 8001370:	d030      	beq.n	80013d4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	695b      	ldr	r3, [r3, #20]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d016      	beq.n	80013a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800137a:	4b30      	ldr	r3, [pc, #192]	; (800143c <HAL_RCC_OscConfig+0x2b4>)
 800137c:	2201      	movs	r2, #1
 800137e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001380:	f7ff fb90 	bl	8000aa4 <HAL_GetTick>
 8001384:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001386:	e008      	b.n	800139a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001388:	f7ff fb8c 	bl	8000aa4 <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	2b02      	cmp	r3, #2
 8001394:	d901      	bls.n	800139a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e164      	b.n	8001664 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800139a:	4b26      	ldr	r3, [pc, #152]	; (8001434 <HAL_RCC_OscConfig+0x2ac>)
 800139c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d0f0      	beq.n	8001388 <HAL_RCC_OscConfig+0x200>
 80013a6:	e015      	b.n	80013d4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013a8:	4b24      	ldr	r3, [pc, #144]	; (800143c <HAL_RCC_OscConfig+0x2b4>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ae:	f7ff fb79 	bl	8000aa4 <HAL_GetTick>
 80013b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013b4:	e008      	b.n	80013c8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013b6:	f7ff fb75 	bl	8000aa4 <HAL_GetTick>
 80013ba:	4602      	mov	r2, r0
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d901      	bls.n	80013c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	e14d      	b.n	8001664 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013c8:	4b1a      	ldr	r3, [pc, #104]	; (8001434 <HAL_RCC_OscConfig+0x2ac>)
 80013ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013cc:	f003 0302 	and.w	r3, r3, #2
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d1f0      	bne.n	80013b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 0304 	and.w	r3, r3, #4
 80013dc:	2b00      	cmp	r3, #0
 80013de:	f000 80a0 	beq.w	8001522 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013e2:	2300      	movs	r3, #0
 80013e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013e6:	4b13      	ldr	r3, [pc, #76]	; (8001434 <HAL_RCC_OscConfig+0x2ac>)
 80013e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d10f      	bne.n	8001412 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	60bb      	str	r3, [r7, #8]
 80013f6:	4b0f      	ldr	r3, [pc, #60]	; (8001434 <HAL_RCC_OscConfig+0x2ac>)
 80013f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fa:	4a0e      	ldr	r2, [pc, #56]	; (8001434 <HAL_RCC_OscConfig+0x2ac>)
 80013fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001400:	6413      	str	r3, [r2, #64]	; 0x40
 8001402:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <HAL_RCC_OscConfig+0x2ac>)
 8001404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800140a:	60bb      	str	r3, [r7, #8]
 800140c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800140e:	2301      	movs	r3, #1
 8001410:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001412:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <HAL_RCC_OscConfig+0x2b8>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800141a:	2b00      	cmp	r3, #0
 800141c:	d121      	bne.n	8001462 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800141e:	4b08      	ldr	r3, [pc, #32]	; (8001440 <HAL_RCC_OscConfig+0x2b8>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a07      	ldr	r2, [pc, #28]	; (8001440 <HAL_RCC_OscConfig+0x2b8>)
 8001424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001428:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800142a:	f7ff fb3b 	bl	8000aa4 <HAL_GetTick>
 800142e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001430:	e011      	b.n	8001456 <HAL_RCC_OscConfig+0x2ce>
 8001432:	bf00      	nop
 8001434:	40023800 	.word	0x40023800
 8001438:	42470000 	.word	0x42470000
 800143c:	42470e80 	.word	0x42470e80
 8001440:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001444:	f7ff fb2e 	bl	8000aa4 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b02      	cmp	r3, #2
 8001450:	d901      	bls.n	8001456 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	e106      	b.n	8001664 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001456:	4b85      	ldr	r3, [pc, #532]	; (800166c <HAL_RCC_OscConfig+0x4e4>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800145e:	2b00      	cmp	r3, #0
 8001460:	d0f0      	beq.n	8001444 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	2b01      	cmp	r3, #1
 8001468:	d106      	bne.n	8001478 <HAL_RCC_OscConfig+0x2f0>
 800146a:	4b81      	ldr	r3, [pc, #516]	; (8001670 <HAL_RCC_OscConfig+0x4e8>)
 800146c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800146e:	4a80      	ldr	r2, [pc, #512]	; (8001670 <HAL_RCC_OscConfig+0x4e8>)
 8001470:	f043 0301 	orr.w	r3, r3, #1
 8001474:	6713      	str	r3, [r2, #112]	; 0x70
 8001476:	e01c      	b.n	80014b2 <HAL_RCC_OscConfig+0x32a>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	2b05      	cmp	r3, #5
 800147e:	d10c      	bne.n	800149a <HAL_RCC_OscConfig+0x312>
 8001480:	4b7b      	ldr	r3, [pc, #492]	; (8001670 <HAL_RCC_OscConfig+0x4e8>)
 8001482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001484:	4a7a      	ldr	r2, [pc, #488]	; (8001670 <HAL_RCC_OscConfig+0x4e8>)
 8001486:	f043 0304 	orr.w	r3, r3, #4
 800148a:	6713      	str	r3, [r2, #112]	; 0x70
 800148c:	4b78      	ldr	r3, [pc, #480]	; (8001670 <HAL_RCC_OscConfig+0x4e8>)
 800148e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001490:	4a77      	ldr	r2, [pc, #476]	; (8001670 <HAL_RCC_OscConfig+0x4e8>)
 8001492:	f043 0301 	orr.w	r3, r3, #1
 8001496:	6713      	str	r3, [r2, #112]	; 0x70
 8001498:	e00b      	b.n	80014b2 <HAL_RCC_OscConfig+0x32a>
 800149a:	4b75      	ldr	r3, [pc, #468]	; (8001670 <HAL_RCC_OscConfig+0x4e8>)
 800149c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800149e:	4a74      	ldr	r2, [pc, #464]	; (8001670 <HAL_RCC_OscConfig+0x4e8>)
 80014a0:	f023 0301 	bic.w	r3, r3, #1
 80014a4:	6713      	str	r3, [r2, #112]	; 0x70
 80014a6:	4b72      	ldr	r3, [pc, #456]	; (8001670 <HAL_RCC_OscConfig+0x4e8>)
 80014a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014aa:	4a71      	ldr	r2, [pc, #452]	; (8001670 <HAL_RCC_OscConfig+0x4e8>)
 80014ac:	f023 0304 	bic.w	r3, r3, #4
 80014b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d015      	beq.n	80014e6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ba:	f7ff faf3 	bl	8000aa4 <HAL_GetTick>
 80014be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014c0:	e00a      	b.n	80014d8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014c2:	f7ff faef 	bl	8000aa4 <HAL_GetTick>
 80014c6:	4602      	mov	r2, r0
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d901      	bls.n	80014d8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80014d4:	2303      	movs	r3, #3
 80014d6:	e0c5      	b.n	8001664 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014d8:	4b65      	ldr	r3, [pc, #404]	; (8001670 <HAL_RCC_OscConfig+0x4e8>)
 80014da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014dc:	f003 0302 	and.w	r3, r3, #2
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d0ee      	beq.n	80014c2 <HAL_RCC_OscConfig+0x33a>
 80014e4:	e014      	b.n	8001510 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014e6:	f7ff fadd 	bl	8000aa4 <HAL_GetTick>
 80014ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014ec:	e00a      	b.n	8001504 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014ee:	f7ff fad9 	bl	8000aa4 <HAL_GetTick>
 80014f2:	4602      	mov	r2, r0
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d901      	bls.n	8001504 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	e0af      	b.n	8001664 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001504:	4b5a      	ldr	r3, [pc, #360]	; (8001670 <HAL_RCC_OscConfig+0x4e8>)
 8001506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001508:	f003 0302 	and.w	r3, r3, #2
 800150c:	2b00      	cmp	r3, #0
 800150e:	d1ee      	bne.n	80014ee <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001510:	7dfb      	ldrb	r3, [r7, #23]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d105      	bne.n	8001522 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001516:	4b56      	ldr	r3, [pc, #344]	; (8001670 <HAL_RCC_OscConfig+0x4e8>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	4a55      	ldr	r2, [pc, #340]	; (8001670 <HAL_RCC_OscConfig+0x4e8>)
 800151c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001520:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	699b      	ldr	r3, [r3, #24]
 8001526:	2b00      	cmp	r3, #0
 8001528:	f000 809b 	beq.w	8001662 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800152c:	4b50      	ldr	r3, [pc, #320]	; (8001670 <HAL_RCC_OscConfig+0x4e8>)
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	f003 030c 	and.w	r3, r3, #12
 8001534:	2b08      	cmp	r3, #8
 8001536:	d05c      	beq.n	80015f2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	2b02      	cmp	r3, #2
 800153e:	d141      	bne.n	80015c4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001540:	4b4c      	ldr	r3, [pc, #304]	; (8001674 <HAL_RCC_OscConfig+0x4ec>)
 8001542:	2200      	movs	r2, #0
 8001544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001546:	f7ff faad 	bl	8000aa4 <HAL_GetTick>
 800154a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800154c:	e008      	b.n	8001560 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800154e:	f7ff faa9 	bl	8000aa4 <HAL_GetTick>
 8001552:	4602      	mov	r2, r0
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	2b02      	cmp	r3, #2
 800155a:	d901      	bls.n	8001560 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800155c:	2303      	movs	r3, #3
 800155e:	e081      	b.n	8001664 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001560:	4b43      	ldr	r3, [pc, #268]	; (8001670 <HAL_RCC_OscConfig+0x4e8>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d1f0      	bne.n	800154e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	69da      	ldr	r2, [r3, #28]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6a1b      	ldr	r3, [r3, #32]
 8001574:	431a      	orrs	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157a:	019b      	lsls	r3, r3, #6
 800157c:	431a      	orrs	r2, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001582:	085b      	lsrs	r3, r3, #1
 8001584:	3b01      	subs	r3, #1
 8001586:	041b      	lsls	r3, r3, #16
 8001588:	431a      	orrs	r2, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158e:	061b      	lsls	r3, r3, #24
 8001590:	4937      	ldr	r1, [pc, #220]	; (8001670 <HAL_RCC_OscConfig+0x4e8>)
 8001592:	4313      	orrs	r3, r2
 8001594:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001596:	4b37      	ldr	r3, [pc, #220]	; (8001674 <HAL_RCC_OscConfig+0x4ec>)
 8001598:	2201      	movs	r2, #1
 800159a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800159c:	f7ff fa82 	bl	8000aa4 <HAL_GetTick>
 80015a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015a2:	e008      	b.n	80015b6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015a4:	f7ff fa7e 	bl	8000aa4 <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d901      	bls.n	80015b6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e056      	b.n	8001664 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015b6:	4b2e      	ldr	r3, [pc, #184]	; (8001670 <HAL_RCC_OscConfig+0x4e8>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d0f0      	beq.n	80015a4 <HAL_RCC_OscConfig+0x41c>
 80015c2:	e04e      	b.n	8001662 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015c4:	4b2b      	ldr	r3, [pc, #172]	; (8001674 <HAL_RCC_OscConfig+0x4ec>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ca:	f7ff fa6b 	bl	8000aa4 <HAL_GetTick>
 80015ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015d0:	e008      	b.n	80015e4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015d2:	f7ff fa67 	bl	8000aa4 <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d901      	bls.n	80015e4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e03f      	b.n	8001664 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015e4:	4b22      	ldr	r3, [pc, #136]	; (8001670 <HAL_RCC_OscConfig+0x4e8>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d1f0      	bne.n	80015d2 <HAL_RCC_OscConfig+0x44a>
 80015f0:	e037      	b.n	8001662 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	699b      	ldr	r3, [r3, #24]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d101      	bne.n	80015fe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e032      	b.n	8001664 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80015fe:	4b1c      	ldr	r3, [pc, #112]	; (8001670 <HAL_RCC_OscConfig+0x4e8>)
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	699b      	ldr	r3, [r3, #24]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d028      	beq.n	800165e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001616:	429a      	cmp	r2, r3
 8001618:	d121      	bne.n	800165e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001624:	429a      	cmp	r2, r3
 8001626:	d11a      	bne.n	800165e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001628:	68fa      	ldr	r2, [r7, #12]
 800162a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800162e:	4013      	ands	r3, r2
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001634:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001636:	4293      	cmp	r3, r2
 8001638:	d111      	bne.n	800165e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001644:	085b      	lsrs	r3, r3, #1
 8001646:	3b01      	subs	r3, #1
 8001648:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800164a:	429a      	cmp	r2, r3
 800164c:	d107      	bne.n	800165e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001658:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800165a:	429a      	cmp	r2, r3
 800165c:	d001      	beq.n	8001662 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e000      	b.n	8001664 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001662:	2300      	movs	r3, #0
}
 8001664:	4618      	mov	r0, r3
 8001666:	3718      	adds	r7, #24
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40007000 	.word	0x40007000
 8001670:	40023800 	.word	0x40023800
 8001674:	42470060 	.word	0x42470060

08001678 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d101      	bne.n	800168c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e0cc      	b.n	8001826 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800168c:	4b68      	ldr	r3, [pc, #416]	; (8001830 <HAL_RCC_ClockConfig+0x1b8>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0307 	and.w	r3, r3, #7
 8001694:	683a      	ldr	r2, [r7, #0]
 8001696:	429a      	cmp	r2, r3
 8001698:	d90c      	bls.n	80016b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800169a:	4b65      	ldr	r3, [pc, #404]	; (8001830 <HAL_RCC_ClockConfig+0x1b8>)
 800169c:	683a      	ldr	r2, [r7, #0]
 800169e:	b2d2      	uxtb	r2, r2
 80016a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016a2:	4b63      	ldr	r3, [pc, #396]	; (8001830 <HAL_RCC_ClockConfig+0x1b8>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0307 	and.w	r3, r3, #7
 80016aa:	683a      	ldr	r2, [r7, #0]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d001      	beq.n	80016b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e0b8      	b.n	8001826 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0302 	and.w	r3, r3, #2
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d020      	beq.n	8001702 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0304 	and.w	r3, r3, #4
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d005      	beq.n	80016d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016cc:	4b59      	ldr	r3, [pc, #356]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	4a58      	ldr	r2, [pc, #352]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 80016d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0308 	and.w	r3, r3, #8
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d005      	beq.n	80016f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016e4:	4b53      	ldr	r3, [pc, #332]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	4a52      	ldr	r2, [pc, #328]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 80016ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016f0:	4b50      	ldr	r3, [pc, #320]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	494d      	ldr	r1, [pc, #308]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 80016fe:	4313      	orrs	r3, r2
 8001700:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	2b00      	cmp	r3, #0
 800170c:	d044      	beq.n	8001798 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d107      	bne.n	8001726 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001716:	4b47      	ldr	r3, [pc, #284]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d119      	bne.n	8001756 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e07f      	b.n	8001826 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	2b02      	cmp	r3, #2
 800172c:	d003      	beq.n	8001736 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001732:	2b03      	cmp	r3, #3
 8001734:	d107      	bne.n	8001746 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001736:	4b3f      	ldr	r3, [pc, #252]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d109      	bne.n	8001756 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e06f      	b.n	8001826 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001746:	4b3b      	ldr	r3, [pc, #236]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	2b00      	cmp	r3, #0
 8001750:	d101      	bne.n	8001756 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e067      	b.n	8001826 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001756:	4b37      	ldr	r3, [pc, #220]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	f023 0203 	bic.w	r2, r3, #3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	4934      	ldr	r1, [pc, #208]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 8001764:	4313      	orrs	r3, r2
 8001766:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001768:	f7ff f99c 	bl	8000aa4 <HAL_GetTick>
 800176c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800176e:	e00a      	b.n	8001786 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001770:	f7ff f998 	bl	8000aa4 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	f241 3288 	movw	r2, #5000	; 0x1388
 800177e:	4293      	cmp	r3, r2
 8001780:	d901      	bls.n	8001786 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e04f      	b.n	8001826 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001786:	4b2b      	ldr	r3, [pc, #172]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f003 020c 	and.w	r2, r3, #12
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	429a      	cmp	r2, r3
 8001796:	d1eb      	bne.n	8001770 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001798:	4b25      	ldr	r3, [pc, #148]	; (8001830 <HAL_RCC_ClockConfig+0x1b8>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0307 	and.w	r3, r3, #7
 80017a0:	683a      	ldr	r2, [r7, #0]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d20c      	bcs.n	80017c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017a6:	4b22      	ldr	r3, [pc, #136]	; (8001830 <HAL_RCC_ClockConfig+0x1b8>)
 80017a8:	683a      	ldr	r2, [r7, #0]
 80017aa:	b2d2      	uxtb	r2, r2
 80017ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ae:	4b20      	ldr	r3, [pc, #128]	; (8001830 <HAL_RCC_ClockConfig+0x1b8>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0307 	and.w	r3, r3, #7
 80017b6:	683a      	ldr	r2, [r7, #0]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d001      	beq.n	80017c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e032      	b.n	8001826 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0304 	and.w	r3, r3, #4
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d008      	beq.n	80017de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017cc:	4b19      	ldr	r3, [pc, #100]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	4916      	ldr	r1, [pc, #88]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 80017da:	4313      	orrs	r3, r2
 80017dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0308 	and.w	r3, r3, #8
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d009      	beq.n	80017fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017ea:	4b12      	ldr	r3, [pc, #72]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	691b      	ldr	r3, [r3, #16]
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	490e      	ldr	r1, [pc, #56]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 80017fa:	4313      	orrs	r3, r2
 80017fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017fe:	f000 f821 	bl	8001844 <HAL_RCC_GetSysClockFreq>
 8001802:	4602      	mov	r2, r0
 8001804:	4b0b      	ldr	r3, [pc, #44]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	091b      	lsrs	r3, r3, #4
 800180a:	f003 030f 	and.w	r3, r3, #15
 800180e:	490a      	ldr	r1, [pc, #40]	; (8001838 <HAL_RCC_ClockConfig+0x1c0>)
 8001810:	5ccb      	ldrb	r3, [r1, r3]
 8001812:	fa22 f303 	lsr.w	r3, r2, r3
 8001816:	4a09      	ldr	r2, [pc, #36]	; (800183c <HAL_RCC_ClockConfig+0x1c4>)
 8001818:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800181a:	4b09      	ldr	r3, [pc, #36]	; (8001840 <HAL_RCC_ClockConfig+0x1c8>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff f8fc 	bl	8000a1c <HAL_InitTick>

  return HAL_OK;
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40023c00 	.word	0x40023c00
 8001834:	40023800 	.word	0x40023800
 8001838:	080033b4 	.word	0x080033b4
 800183c:	20000000 	.word	0x20000000
 8001840:	20000004 	.word	0x20000004

08001844 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001844:	b5b0      	push	{r4, r5, r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800184a:	2100      	movs	r1, #0
 800184c:	6079      	str	r1, [r7, #4]
 800184e:	2100      	movs	r1, #0
 8001850:	60f9      	str	r1, [r7, #12]
 8001852:	2100      	movs	r1, #0
 8001854:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001856:	2100      	movs	r1, #0
 8001858:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800185a:	4952      	ldr	r1, [pc, #328]	; (80019a4 <HAL_RCC_GetSysClockFreq+0x160>)
 800185c:	6889      	ldr	r1, [r1, #8]
 800185e:	f001 010c 	and.w	r1, r1, #12
 8001862:	2908      	cmp	r1, #8
 8001864:	d00d      	beq.n	8001882 <HAL_RCC_GetSysClockFreq+0x3e>
 8001866:	2908      	cmp	r1, #8
 8001868:	f200 8094 	bhi.w	8001994 <HAL_RCC_GetSysClockFreq+0x150>
 800186c:	2900      	cmp	r1, #0
 800186e:	d002      	beq.n	8001876 <HAL_RCC_GetSysClockFreq+0x32>
 8001870:	2904      	cmp	r1, #4
 8001872:	d003      	beq.n	800187c <HAL_RCC_GetSysClockFreq+0x38>
 8001874:	e08e      	b.n	8001994 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001876:	4b4c      	ldr	r3, [pc, #304]	; (80019a8 <HAL_RCC_GetSysClockFreq+0x164>)
 8001878:	60bb      	str	r3, [r7, #8]
       break;
 800187a:	e08e      	b.n	800199a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800187c:	4b4b      	ldr	r3, [pc, #300]	; (80019ac <HAL_RCC_GetSysClockFreq+0x168>)
 800187e:	60bb      	str	r3, [r7, #8]
      break;
 8001880:	e08b      	b.n	800199a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001882:	4948      	ldr	r1, [pc, #288]	; (80019a4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001884:	6849      	ldr	r1, [r1, #4]
 8001886:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800188a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800188c:	4945      	ldr	r1, [pc, #276]	; (80019a4 <HAL_RCC_GetSysClockFreq+0x160>)
 800188e:	6849      	ldr	r1, [r1, #4]
 8001890:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001894:	2900      	cmp	r1, #0
 8001896:	d024      	beq.n	80018e2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001898:	4942      	ldr	r1, [pc, #264]	; (80019a4 <HAL_RCC_GetSysClockFreq+0x160>)
 800189a:	6849      	ldr	r1, [r1, #4]
 800189c:	0989      	lsrs	r1, r1, #6
 800189e:	4608      	mov	r0, r1
 80018a0:	f04f 0100 	mov.w	r1, #0
 80018a4:	f240 14ff 	movw	r4, #511	; 0x1ff
 80018a8:	f04f 0500 	mov.w	r5, #0
 80018ac:	ea00 0204 	and.w	r2, r0, r4
 80018b0:	ea01 0305 	and.w	r3, r1, r5
 80018b4:	493d      	ldr	r1, [pc, #244]	; (80019ac <HAL_RCC_GetSysClockFreq+0x168>)
 80018b6:	fb01 f003 	mul.w	r0, r1, r3
 80018ba:	2100      	movs	r1, #0
 80018bc:	fb01 f102 	mul.w	r1, r1, r2
 80018c0:	1844      	adds	r4, r0, r1
 80018c2:	493a      	ldr	r1, [pc, #232]	; (80019ac <HAL_RCC_GetSysClockFreq+0x168>)
 80018c4:	fba2 0101 	umull	r0, r1, r2, r1
 80018c8:	1863      	adds	r3, r4, r1
 80018ca:	4619      	mov	r1, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	461a      	mov	r2, r3
 80018d0:	f04f 0300 	mov.w	r3, #0
 80018d4:	f7fe fc80 	bl	80001d8 <__aeabi_uldivmod>
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	4613      	mov	r3, r2
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	e04a      	b.n	8001978 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018e2:	4b30      	ldr	r3, [pc, #192]	; (80019a4 <HAL_RCC_GetSysClockFreq+0x160>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	099b      	lsrs	r3, r3, #6
 80018e8:	461a      	mov	r2, r3
 80018ea:	f04f 0300 	mov.w	r3, #0
 80018ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 80018f2:	f04f 0100 	mov.w	r1, #0
 80018f6:	ea02 0400 	and.w	r4, r2, r0
 80018fa:	ea03 0501 	and.w	r5, r3, r1
 80018fe:	4620      	mov	r0, r4
 8001900:	4629      	mov	r1, r5
 8001902:	f04f 0200 	mov.w	r2, #0
 8001906:	f04f 0300 	mov.w	r3, #0
 800190a:	014b      	lsls	r3, r1, #5
 800190c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001910:	0142      	lsls	r2, r0, #5
 8001912:	4610      	mov	r0, r2
 8001914:	4619      	mov	r1, r3
 8001916:	1b00      	subs	r0, r0, r4
 8001918:	eb61 0105 	sbc.w	r1, r1, r5
 800191c:	f04f 0200 	mov.w	r2, #0
 8001920:	f04f 0300 	mov.w	r3, #0
 8001924:	018b      	lsls	r3, r1, #6
 8001926:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800192a:	0182      	lsls	r2, r0, #6
 800192c:	1a12      	subs	r2, r2, r0
 800192e:	eb63 0301 	sbc.w	r3, r3, r1
 8001932:	f04f 0000 	mov.w	r0, #0
 8001936:	f04f 0100 	mov.w	r1, #0
 800193a:	00d9      	lsls	r1, r3, #3
 800193c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001940:	00d0      	lsls	r0, r2, #3
 8001942:	4602      	mov	r2, r0
 8001944:	460b      	mov	r3, r1
 8001946:	1912      	adds	r2, r2, r4
 8001948:	eb45 0303 	adc.w	r3, r5, r3
 800194c:	f04f 0000 	mov.w	r0, #0
 8001950:	f04f 0100 	mov.w	r1, #0
 8001954:	0299      	lsls	r1, r3, #10
 8001956:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800195a:	0290      	lsls	r0, r2, #10
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	4610      	mov	r0, r2
 8001962:	4619      	mov	r1, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	461a      	mov	r2, r3
 8001968:	f04f 0300 	mov.w	r3, #0
 800196c:	f7fe fc34 	bl	80001d8 <__aeabi_uldivmod>
 8001970:	4602      	mov	r2, r0
 8001972:	460b      	mov	r3, r1
 8001974:	4613      	mov	r3, r2
 8001976:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001978:	4b0a      	ldr	r3, [pc, #40]	; (80019a4 <HAL_RCC_GetSysClockFreq+0x160>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	0c1b      	lsrs	r3, r3, #16
 800197e:	f003 0303 	and.w	r3, r3, #3
 8001982:	3301      	adds	r3, #1
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001988:	68fa      	ldr	r2, [r7, #12]
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001990:	60bb      	str	r3, [r7, #8]
      break;
 8001992:	e002      	b.n	800199a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001994:	4b04      	ldr	r3, [pc, #16]	; (80019a8 <HAL_RCC_GetSysClockFreq+0x164>)
 8001996:	60bb      	str	r3, [r7, #8]
      break;
 8001998:	bf00      	nop
    }
  }
  return sysclockfreq;
 800199a:	68bb      	ldr	r3, [r7, #8]
}
 800199c:	4618      	mov	r0, r3
 800199e:	3710      	adds	r7, #16
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bdb0      	pop	{r4, r5, r7, pc}
 80019a4:	40023800 	.word	0x40023800
 80019a8:	00f42400 	.word	0x00f42400
 80019ac:	017d7840 	.word	0x017d7840

080019b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019b4:	4b03      	ldr	r3, [pc, #12]	; (80019c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80019b6:	681b      	ldr	r3, [r3, #0]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	20000000 	.word	0x20000000

080019c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80019cc:	f7ff fff0 	bl	80019b0 <HAL_RCC_GetHCLKFreq>
 80019d0:	4602      	mov	r2, r0
 80019d2:	4b05      	ldr	r3, [pc, #20]	; (80019e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	0a9b      	lsrs	r3, r3, #10
 80019d8:	f003 0307 	and.w	r3, r3, #7
 80019dc:	4903      	ldr	r1, [pc, #12]	; (80019ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80019de:	5ccb      	ldrb	r3, [r1, r3]
 80019e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40023800 	.word	0x40023800
 80019ec:	080033c4 	.word	0x080033c4

080019f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80019f4:	f7ff ffdc 	bl	80019b0 <HAL_RCC_GetHCLKFreq>
 80019f8:	4602      	mov	r2, r0
 80019fa:	4b05      	ldr	r3, [pc, #20]	; (8001a10 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	0b5b      	lsrs	r3, r3, #13
 8001a00:	f003 0307 	and.w	r3, r3, #7
 8001a04:	4903      	ldr	r1, [pc, #12]	; (8001a14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a06:	5ccb      	ldrb	r3, [r1, r3]
 8001a08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	40023800 	.word	0x40023800
 8001a14:	080033c4 	.word	0x080033c4

08001a18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d101      	bne.n	8001a2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e03f      	b.n	8001aaa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d106      	bne.n	8001a44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f7fe ff0a 	bl	8000858 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2224      	movs	r2, #36	; 0x24
 8001a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	68da      	ldr	r2, [r3, #12]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f000 fcdb 	bl	8002418 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	691a      	ldr	r2, [r3, #16]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001a70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	695a      	ldr	r2, [r3, #20]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	68da      	ldr	r2, [r3, #12]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2220      	movs	r2, #32
 8001a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2220      	movs	r2, #32
 8001aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b084      	sub	sp, #16
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	60f8      	str	r0, [r7, #12]
 8001aba:	60b9      	str	r1, [r7, #8]
 8001abc:	4613      	mov	r3, r2
 8001abe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	2b20      	cmp	r3, #32
 8001aca:	d11d      	bne.n	8001b08 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d002      	beq.n	8001ad8 <HAL_UART_Receive_IT+0x26>
 8001ad2:	88fb      	ldrh	r3, [r7, #6]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d101      	bne.n	8001adc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e016      	b.n	8001b0a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d101      	bne.n	8001aea <HAL_UART_Receive_IT+0x38>
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	e00f      	b.n	8001b0a <HAL_UART_Receive_IT+0x58>
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2201      	movs	r2, #1
 8001aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2200      	movs	r2, #0
 8001af6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001af8:	88fb      	ldrh	r3, [r7, #6]
 8001afa:	461a      	mov	r2, r3
 8001afc:	68b9      	ldr	r1, [r7, #8]
 8001afe:	68f8      	ldr	r0, [r7, #12]
 8001b00:	f000 fab6 	bl	8002070 <UART_Start_Receive_IT>
 8001b04:	4603      	mov	r3, r0
 8001b06:	e000      	b.n	8001b0a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8001b08:	2302      	movs	r3, #2
  }
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3710      	adds	r7, #16
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
	...

08001b14 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b0ba      	sub	sp, #232	; 0xe8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	695b      	ldr	r3, [r3, #20]
 8001b36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001b40:	2300      	movs	r3, #0
 8001b42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001b46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001b4a:	f003 030f 	and.w	r3, r3, #15
 8001b4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001b52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d10f      	bne.n	8001b7a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001b5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001b5e:	f003 0320 	and.w	r3, r3, #32
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d009      	beq.n	8001b7a <HAL_UART_IRQHandler+0x66>
 8001b66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001b6a:	f003 0320 	and.w	r3, r3, #32
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d003      	beq.n	8001b7a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f000 fb95 	bl	80022a2 <UART_Receive_IT>
      return;
 8001b78:	e256      	b.n	8002028 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001b7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	f000 80de 	beq.w	8001d40 <HAL_UART_IRQHandler+0x22c>
 8001b84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001b88:	f003 0301 	and.w	r3, r3, #1
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d106      	bne.n	8001b9e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001b90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001b94:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	f000 80d1 	beq.w	8001d40 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001b9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001ba2:	f003 0301 	and.w	r3, r3, #1
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d00b      	beq.n	8001bc2 <HAL_UART_IRQHandler+0xae>
 8001baa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d005      	beq.n	8001bc2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bba:	f043 0201 	orr.w	r2, r3, #1
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001bc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001bc6:	f003 0304 	and.w	r3, r3, #4
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d00b      	beq.n	8001be6 <HAL_UART_IRQHandler+0xd2>
 8001bce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d005      	beq.n	8001be6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bde:	f043 0202 	orr.w	r2, r3, #2
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d00b      	beq.n	8001c0a <HAL_UART_IRQHandler+0xf6>
 8001bf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d005      	beq.n	8001c0a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c02:	f043 0204 	orr.w	r2, r3, #4
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001c0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001c0e:	f003 0308 	and.w	r3, r3, #8
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d011      	beq.n	8001c3a <HAL_UART_IRQHandler+0x126>
 8001c16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001c1a:	f003 0320 	and.w	r3, r3, #32
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d105      	bne.n	8001c2e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001c22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d005      	beq.n	8001c3a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c32:	f043 0208 	orr.w	r2, r3, #8
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	f000 81ed 	beq.w	800201e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001c44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001c48:	f003 0320 	and.w	r3, r3, #32
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d008      	beq.n	8001c62 <HAL_UART_IRQHandler+0x14e>
 8001c50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001c54:	f003 0320 	and.w	r3, r3, #32
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d002      	beq.n	8001c62 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f000 fb20 	bl	80022a2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	695b      	ldr	r3, [r3, #20]
 8001c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c6c:	2b40      	cmp	r3, #64	; 0x40
 8001c6e:	bf0c      	ite	eq
 8001c70:	2301      	moveq	r3, #1
 8001c72:	2300      	movne	r3, #0
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	f003 0308 	and.w	r3, r3, #8
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d103      	bne.n	8001c8e <HAL_UART_IRQHandler+0x17a>
 8001c86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d04f      	beq.n	8001d2e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f000 fa28 	bl	80020e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c9e:	2b40      	cmp	r3, #64	; 0x40
 8001ca0:	d141      	bne.n	8001d26 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	3314      	adds	r3, #20
 8001ca8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001cac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001cb0:	e853 3f00 	ldrex	r3, [r3]
 8001cb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8001cb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001cbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001cc0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	3314      	adds	r3, #20
 8001cca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001cce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001cd2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001cd6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001cda:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001cde:	e841 2300 	strex	r3, r2, [r1]
 8001ce2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8001ce6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1d9      	bne.n	8001ca2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d013      	beq.n	8001d1e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cfa:	4a7d      	ldr	r2, [pc, #500]	; (8001ef0 <HAL_UART_IRQHandler+0x3dc>)
 8001cfc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff f87f 	bl	8000e06 <HAL_DMA_Abort_IT>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d016      	beq.n	8001d3c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d18:	4610      	mov	r0, r2
 8001d1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d1c:	e00e      	b.n	8001d3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 f990 	bl	8002044 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d24:	e00a      	b.n	8001d3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 f98c 	bl	8002044 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d2c:	e006      	b.n	8001d3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 f988 	bl	8002044 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8001d3a:	e170      	b.n	800201e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d3c:	bf00      	nop
    return;
 8001d3e:	e16e      	b.n	800201e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	f040 814a 	bne.w	8001fde <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001d4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001d4e:	f003 0310 	and.w	r3, r3, #16
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	f000 8143 	beq.w	8001fde <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001d58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001d5c:	f003 0310 	and.w	r3, r3, #16
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	f000 813c 	beq.w	8001fde <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001d66:	2300      	movs	r3, #0
 8001d68:	60bb      	str	r3, [r7, #8]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	60bb      	str	r3, [r7, #8]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	60bb      	str	r3, [r7, #8]
 8001d7a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	695b      	ldr	r3, [r3, #20]
 8001d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d86:	2b40      	cmp	r3, #64	; 0x40
 8001d88:	f040 80b4 	bne.w	8001ef4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001d98:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	f000 8140 	beq.w	8002022 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001da6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001daa:	429a      	cmp	r2, r3
 8001dac:	f080 8139 	bcs.w	8002022 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001db6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dbc:	69db      	ldr	r3, [r3, #28]
 8001dbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dc2:	f000 8088 	beq.w	8001ed6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	330c      	adds	r3, #12
 8001dcc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001dd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001dd4:	e853 3f00 	ldrex	r3, [r3]
 8001dd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8001ddc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001de0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001de4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	330c      	adds	r3, #12
 8001dee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001df2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001df6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001dfa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001dfe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001e02:	e841 2300 	strex	r3, r2, [r1]
 8001e06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8001e0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d1d9      	bne.n	8001dc6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	3314      	adds	r3, #20
 8001e18:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e1c:	e853 3f00 	ldrex	r3, [r3]
 8001e20:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8001e22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e24:	f023 0301 	bic.w	r3, r3, #1
 8001e28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	3314      	adds	r3, #20
 8001e32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001e36:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8001e3a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e3c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001e3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001e42:	e841 2300 	strex	r3, r2, [r1]
 8001e46:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8001e48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d1e1      	bne.n	8001e12 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	3314      	adds	r3, #20
 8001e54:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e58:	e853 3f00 	ldrex	r3, [r3]
 8001e5c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8001e5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	3314      	adds	r3, #20
 8001e6e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001e72:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001e74:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e76:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001e78:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001e7a:	e841 2300 	strex	r3, r2, [r1]
 8001e7e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8001e80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d1e3      	bne.n	8001e4e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2220      	movs	r2, #32
 8001e8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	330c      	adds	r3, #12
 8001e9a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e9e:	e853 3f00 	ldrex	r3, [r3]
 8001ea2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8001ea4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ea6:	f023 0310 	bic.w	r3, r3, #16
 8001eaa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	330c      	adds	r3, #12
 8001eb4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001eb8:	65ba      	str	r2, [r7, #88]	; 0x58
 8001eba:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ebc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001ebe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001ec0:	e841 2300 	strex	r3, r2, [r1]
 8001ec4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8001ec6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d1e3      	bne.n	8001e94 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7fe ff28 	bl	8000d26 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f000 f8b6 	bl	8002058 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001eec:	e099      	b.n	8002022 <HAL_UART_IRQHandler+0x50e>
 8001eee:	bf00      	nop
 8001ef0:	080021ab 	.word	0x080021ab
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	f000 808b 	beq.w	8002026 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8001f10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	f000 8086 	beq.w	8002026 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	330c      	adds	r3, #12
 8001f20:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f24:	e853 3f00 	ldrex	r3, [r3]
 8001f28:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8001f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001f30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	330c      	adds	r3, #12
 8001f3a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8001f3e:	647a      	str	r2, [r7, #68]	; 0x44
 8001f40:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f42:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001f44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001f46:	e841 2300 	strex	r3, r2, [r1]
 8001f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8001f4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d1e3      	bne.n	8001f1a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	3314      	adds	r3, #20
 8001f58:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5c:	e853 3f00 	ldrex	r3, [r3]
 8001f60:	623b      	str	r3, [r7, #32]
   return(result);
 8001f62:	6a3b      	ldr	r3, [r7, #32]
 8001f64:	f023 0301 	bic.w	r3, r3, #1
 8001f68:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	3314      	adds	r3, #20
 8001f72:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001f76:	633a      	str	r2, [r7, #48]	; 0x30
 8001f78:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001f7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f7e:	e841 2300 	strex	r3, r2, [r1]
 8001f82:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8001f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d1e3      	bne.n	8001f52 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2220      	movs	r2, #32
 8001f8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	330c      	adds	r3, #12
 8001f9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	e853 3f00 	ldrex	r3, [r3]
 8001fa6:	60fb      	str	r3, [r7, #12]
   return(result);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f023 0310 	bic.w	r3, r3, #16
 8001fae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	330c      	adds	r3, #12
 8001fb8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001fbc:	61fa      	str	r2, [r7, #28]
 8001fbe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fc0:	69b9      	ldr	r1, [r7, #24]
 8001fc2:	69fa      	ldr	r2, [r7, #28]
 8001fc4:	e841 2300 	strex	r3, r2, [r1]
 8001fc8:	617b      	str	r3, [r7, #20]
   return(result);
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d1e3      	bne.n	8001f98 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001fd0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f000 f83e 	bl	8002058 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001fdc:	e023      	b.n	8002026 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d009      	beq.n	8001ffe <HAL_UART_IRQHandler+0x4ea>
 8001fea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d003      	beq.n	8001ffe <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f000 f8eb 	bl	80021d2 <UART_Transmit_IT>
    return;
 8001ffc:	e014      	b.n	8002028 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002006:	2b00      	cmp	r3, #0
 8002008:	d00e      	beq.n	8002028 <HAL_UART_IRQHandler+0x514>
 800200a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800200e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002012:	2b00      	cmp	r3, #0
 8002014:	d008      	beq.n	8002028 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f000 f92b 	bl	8002272 <UART_EndTransmit_IT>
    return;
 800201c:	e004      	b.n	8002028 <HAL_UART_IRQHandler+0x514>
    return;
 800201e:	bf00      	nop
 8002020:	e002      	b.n	8002028 <HAL_UART_IRQHandler+0x514>
      return;
 8002022:	bf00      	nop
 8002024:	e000      	b.n	8002028 <HAL_UART_IRQHandler+0x514>
      return;
 8002026:	bf00      	nop
  }
}
 8002028:	37e8      	adds	r7, #232	; 0xe8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop

08002030 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	460b      	mov	r3, r1
 8002062:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002064:	bf00      	nop
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	4613      	mov	r3, r2
 800207c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	68ba      	ldr	r2, [r7, #8]
 8002082:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	88fa      	ldrh	r2, [r7, #6]
 8002088:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	88fa      	ldrh	r2, [r7, #6]
 800208e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2200      	movs	r2, #0
 8002094:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2222      	movs	r2, #34	; 0x22
 800209a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2200      	movs	r2, #0
 80020a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	68da      	ldr	r2, [r3, #12]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020b4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	695a      	ldr	r2, [r3, #20]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f042 0201 	orr.w	r2, r2, #1
 80020c4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	68da      	ldr	r2, [r3, #12]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f042 0220 	orr.w	r2, r2, #32
 80020d4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80020d6:	2300      	movs	r3, #0
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3714      	adds	r7, #20
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b095      	sub	sp, #84	; 0x54
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	330c      	adds	r3, #12
 80020f2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020f6:	e853 3f00 	ldrex	r3, [r3]
 80020fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80020fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002102:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	330c      	adds	r3, #12
 800210a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800210c:	643a      	str	r2, [r7, #64]	; 0x40
 800210e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002110:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002112:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002114:	e841 2300 	strex	r3, r2, [r1]
 8002118:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800211a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800211c:	2b00      	cmp	r3, #0
 800211e:	d1e5      	bne.n	80020ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	3314      	adds	r3, #20
 8002126:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002128:	6a3b      	ldr	r3, [r7, #32]
 800212a:	e853 3f00 	ldrex	r3, [r3]
 800212e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	f023 0301 	bic.w	r3, r3, #1
 8002136:	64bb      	str	r3, [r7, #72]	; 0x48
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	3314      	adds	r3, #20
 800213e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002140:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002142:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002144:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002146:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002148:	e841 2300 	strex	r3, r2, [r1]
 800214c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800214e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1e5      	bne.n	8002120 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002158:	2b01      	cmp	r3, #1
 800215a:	d119      	bne.n	8002190 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	330c      	adds	r3, #12
 8002162:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	e853 3f00 	ldrex	r3, [r3]
 800216a:	60bb      	str	r3, [r7, #8]
   return(result);
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	f023 0310 	bic.w	r3, r3, #16
 8002172:	647b      	str	r3, [r7, #68]	; 0x44
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	330c      	adds	r3, #12
 800217a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800217c:	61ba      	str	r2, [r7, #24]
 800217e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002180:	6979      	ldr	r1, [r7, #20]
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	e841 2300 	strex	r3, r2, [r1]
 8002188:	613b      	str	r3, [r7, #16]
   return(result);
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d1e5      	bne.n	800215c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2220      	movs	r2, #32
 8002194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800219e:	bf00      	nop
 80021a0:	3754      	adds	r7, #84	; 0x54
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr

080021aa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b084      	sub	sp, #16
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021b6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2200      	movs	r2, #0
 80021bc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2200      	movs	r2, #0
 80021c2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80021c4:	68f8      	ldr	r0, [r7, #12]
 80021c6:	f7ff ff3d 	bl	8002044 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80021ca:	bf00      	nop
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80021d2:	b480      	push	{r7}
 80021d4:	b085      	sub	sp, #20
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	2b21      	cmp	r3, #33	; 0x21
 80021e4:	d13e      	bne.n	8002264 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021ee:	d114      	bne.n	800221a <UART_Transmit_IT+0x48>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d110      	bne.n	800221a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	881b      	ldrh	r3, [r3, #0]
 8002202:	461a      	mov	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800220c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a1b      	ldr	r3, [r3, #32]
 8002212:	1c9a      	adds	r2, r3, #2
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	621a      	str	r2, [r3, #32]
 8002218:	e008      	b.n	800222c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a1b      	ldr	r3, [r3, #32]
 800221e:	1c59      	adds	r1, r3, #1
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	6211      	str	r1, [r2, #32]
 8002224:	781a      	ldrb	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002230:	b29b      	uxth	r3, r3
 8002232:	3b01      	subs	r3, #1
 8002234:	b29b      	uxth	r3, r3
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	4619      	mov	r1, r3
 800223a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800223c:	2b00      	cmp	r3, #0
 800223e:	d10f      	bne.n	8002260 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68da      	ldr	r2, [r3, #12]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800224e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	68da      	ldr	r2, [r3, #12]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800225e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002260:	2300      	movs	r3, #0
 8002262:	e000      	b.n	8002266 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002264:	2302      	movs	r3, #2
  }
}
 8002266:	4618      	mov	r0, r3
 8002268:	3714      	adds	r7, #20
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr

08002272 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002272:	b580      	push	{r7, lr}
 8002274:	b082      	sub	sp, #8
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	68da      	ldr	r2, [r3, #12]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002288:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2220      	movs	r2, #32
 800228e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f7ff fecc 	bl	8002030 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b08c      	sub	sp, #48	; 0x30
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b22      	cmp	r3, #34	; 0x22
 80022b4:	f040 80ab 	bne.w	800240e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022c0:	d117      	bne.n	80022f2 <UART_Receive_IT+0x50>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d113      	bne.n	80022f2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80022ca:	2300      	movs	r3, #0
 80022cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	b29b      	uxth	r3, r3
 80022dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022e0:	b29a      	uxth	r2, r3
 80022e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ea:	1c9a      	adds	r2, r3, #2
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	629a      	str	r2, [r3, #40]	; 0x28
 80022f0:	e026      	b.n	8002340 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80022f8:	2300      	movs	r3, #0
 80022fa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002304:	d007      	beq.n	8002316 <UART_Receive_IT+0x74>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d10a      	bne.n	8002324 <UART_Receive_IT+0x82>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d106      	bne.n	8002324 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	b2da      	uxtb	r2, r3
 800231e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002320:	701a      	strb	r2, [r3, #0]
 8002322:	e008      	b.n	8002336 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	b2db      	uxtb	r3, r3
 800232c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002330:	b2da      	uxtb	r2, r3
 8002332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002334:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800233a:	1c5a      	adds	r2, r3, #1
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002344:	b29b      	uxth	r3, r3
 8002346:	3b01      	subs	r3, #1
 8002348:	b29b      	uxth	r3, r3
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	4619      	mov	r1, r3
 800234e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002350:	2b00      	cmp	r3, #0
 8002352:	d15a      	bne.n	800240a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	68da      	ldr	r2, [r3, #12]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f022 0220 	bic.w	r2, r2, #32
 8002362:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68da      	ldr	r2, [r3, #12]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002372:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	695a      	ldr	r2, [r3, #20]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f022 0201 	bic.w	r2, r2, #1
 8002382:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2220      	movs	r2, #32
 8002388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002390:	2b01      	cmp	r3, #1
 8002392:	d135      	bne.n	8002400 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	330c      	adds	r3, #12
 80023a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	e853 3f00 	ldrex	r3, [r3]
 80023a8:	613b      	str	r3, [r7, #16]
   return(result);
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	f023 0310 	bic.w	r3, r3, #16
 80023b0:	627b      	str	r3, [r7, #36]	; 0x24
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	330c      	adds	r3, #12
 80023b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ba:	623a      	str	r2, [r7, #32]
 80023bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023be:	69f9      	ldr	r1, [r7, #28]
 80023c0:	6a3a      	ldr	r2, [r7, #32]
 80023c2:	e841 2300 	strex	r3, r2, [r1]
 80023c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1e5      	bne.n	800239a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0310 	and.w	r3, r3, #16
 80023d8:	2b10      	cmp	r3, #16
 80023da:	d10a      	bne.n	80023f2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80023dc:	2300      	movs	r3, #0
 80023de:	60fb      	str	r3, [r7, #12]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	60fb      	str	r3, [r7, #12]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	60fb      	str	r3, [r7, #12]
 80023f0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80023f6:	4619      	mov	r1, r3
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f7ff fe2d 	bl	8002058 <HAL_UARTEx_RxEventCallback>
 80023fe:	e002      	b.n	8002406 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f7fe f865 	bl	80004d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002406:	2300      	movs	r3, #0
 8002408:	e002      	b.n	8002410 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800240a:	2300      	movs	r3, #0
 800240c:	e000      	b.n	8002410 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800240e:	2302      	movs	r3, #2
  }
}
 8002410:	4618      	mov	r0, r3
 8002412:	3730      	adds	r7, #48	; 0x30
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800241c:	b09f      	sub	sp, #124	; 0x7c
 800241e:	af00      	add	r7, sp, #0
 8002420:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002422:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	691b      	ldr	r3, [r3, #16]
 8002428:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800242c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800242e:	68d9      	ldr	r1, [r3, #12]
 8002430:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	ea40 0301 	orr.w	r3, r0, r1
 8002438:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800243a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800243c:	689a      	ldr	r2, [r3, #8]
 800243e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	431a      	orrs	r2, r3
 8002444:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002446:	695b      	ldr	r3, [r3, #20]
 8002448:	431a      	orrs	r2, r3
 800244a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800244c:	69db      	ldr	r3, [r3, #28]
 800244e:	4313      	orrs	r3, r2
 8002450:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002452:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800245c:	f021 010c 	bic.w	r1, r1, #12
 8002460:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002466:	430b      	orrs	r3, r1
 8002468:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800246a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	695b      	ldr	r3, [r3, #20]
 8002470:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002474:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002476:	6999      	ldr	r1, [r3, #24]
 8002478:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	ea40 0301 	orr.w	r3, r0, r1
 8002480:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002482:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	4bc5      	ldr	r3, [pc, #788]	; (800279c <UART_SetConfig+0x384>)
 8002488:	429a      	cmp	r2, r3
 800248a:	d004      	beq.n	8002496 <UART_SetConfig+0x7e>
 800248c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	4bc3      	ldr	r3, [pc, #780]	; (80027a0 <UART_SetConfig+0x388>)
 8002492:	429a      	cmp	r2, r3
 8002494:	d103      	bne.n	800249e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002496:	f7ff faab 	bl	80019f0 <HAL_RCC_GetPCLK2Freq>
 800249a:	6778      	str	r0, [r7, #116]	; 0x74
 800249c:	e002      	b.n	80024a4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800249e:	f7ff fa93 	bl	80019c8 <HAL_RCC_GetPCLK1Freq>
 80024a2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024a6:	69db      	ldr	r3, [r3, #28]
 80024a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024ac:	f040 80b6 	bne.w	800261c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80024b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024b2:	461c      	mov	r4, r3
 80024b4:	f04f 0500 	mov.w	r5, #0
 80024b8:	4622      	mov	r2, r4
 80024ba:	462b      	mov	r3, r5
 80024bc:	1891      	adds	r1, r2, r2
 80024be:	6439      	str	r1, [r7, #64]	; 0x40
 80024c0:	415b      	adcs	r3, r3
 80024c2:	647b      	str	r3, [r7, #68]	; 0x44
 80024c4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80024c8:	1912      	adds	r2, r2, r4
 80024ca:	eb45 0303 	adc.w	r3, r5, r3
 80024ce:	f04f 0000 	mov.w	r0, #0
 80024d2:	f04f 0100 	mov.w	r1, #0
 80024d6:	00d9      	lsls	r1, r3, #3
 80024d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80024dc:	00d0      	lsls	r0, r2, #3
 80024de:	4602      	mov	r2, r0
 80024e0:	460b      	mov	r3, r1
 80024e2:	1911      	adds	r1, r2, r4
 80024e4:	6639      	str	r1, [r7, #96]	; 0x60
 80024e6:	416b      	adcs	r3, r5
 80024e8:	667b      	str	r3, [r7, #100]	; 0x64
 80024ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	461a      	mov	r2, r3
 80024f0:	f04f 0300 	mov.w	r3, #0
 80024f4:	1891      	adds	r1, r2, r2
 80024f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80024f8:	415b      	adcs	r3, r3
 80024fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002500:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002504:	f7fd fe68 	bl	80001d8 <__aeabi_uldivmod>
 8002508:	4602      	mov	r2, r0
 800250a:	460b      	mov	r3, r1
 800250c:	4ba5      	ldr	r3, [pc, #660]	; (80027a4 <UART_SetConfig+0x38c>)
 800250e:	fba3 2302 	umull	r2, r3, r3, r2
 8002512:	095b      	lsrs	r3, r3, #5
 8002514:	011e      	lsls	r6, r3, #4
 8002516:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002518:	461c      	mov	r4, r3
 800251a:	f04f 0500 	mov.w	r5, #0
 800251e:	4622      	mov	r2, r4
 8002520:	462b      	mov	r3, r5
 8002522:	1891      	adds	r1, r2, r2
 8002524:	6339      	str	r1, [r7, #48]	; 0x30
 8002526:	415b      	adcs	r3, r3
 8002528:	637b      	str	r3, [r7, #52]	; 0x34
 800252a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800252e:	1912      	adds	r2, r2, r4
 8002530:	eb45 0303 	adc.w	r3, r5, r3
 8002534:	f04f 0000 	mov.w	r0, #0
 8002538:	f04f 0100 	mov.w	r1, #0
 800253c:	00d9      	lsls	r1, r3, #3
 800253e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002542:	00d0      	lsls	r0, r2, #3
 8002544:	4602      	mov	r2, r0
 8002546:	460b      	mov	r3, r1
 8002548:	1911      	adds	r1, r2, r4
 800254a:	65b9      	str	r1, [r7, #88]	; 0x58
 800254c:	416b      	adcs	r3, r5
 800254e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002550:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	461a      	mov	r2, r3
 8002556:	f04f 0300 	mov.w	r3, #0
 800255a:	1891      	adds	r1, r2, r2
 800255c:	62b9      	str	r1, [r7, #40]	; 0x28
 800255e:	415b      	adcs	r3, r3
 8002560:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002562:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002566:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800256a:	f7fd fe35 	bl	80001d8 <__aeabi_uldivmod>
 800256e:	4602      	mov	r2, r0
 8002570:	460b      	mov	r3, r1
 8002572:	4b8c      	ldr	r3, [pc, #560]	; (80027a4 <UART_SetConfig+0x38c>)
 8002574:	fba3 1302 	umull	r1, r3, r3, r2
 8002578:	095b      	lsrs	r3, r3, #5
 800257a:	2164      	movs	r1, #100	; 0x64
 800257c:	fb01 f303 	mul.w	r3, r1, r3
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	3332      	adds	r3, #50	; 0x32
 8002586:	4a87      	ldr	r2, [pc, #540]	; (80027a4 <UART_SetConfig+0x38c>)
 8002588:	fba2 2303 	umull	r2, r3, r2, r3
 800258c:	095b      	lsrs	r3, r3, #5
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002594:	441e      	add	r6, r3
 8002596:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002598:	4618      	mov	r0, r3
 800259a:	f04f 0100 	mov.w	r1, #0
 800259e:	4602      	mov	r2, r0
 80025a0:	460b      	mov	r3, r1
 80025a2:	1894      	adds	r4, r2, r2
 80025a4:	623c      	str	r4, [r7, #32]
 80025a6:	415b      	adcs	r3, r3
 80025a8:	627b      	str	r3, [r7, #36]	; 0x24
 80025aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80025ae:	1812      	adds	r2, r2, r0
 80025b0:	eb41 0303 	adc.w	r3, r1, r3
 80025b4:	f04f 0400 	mov.w	r4, #0
 80025b8:	f04f 0500 	mov.w	r5, #0
 80025bc:	00dd      	lsls	r5, r3, #3
 80025be:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80025c2:	00d4      	lsls	r4, r2, #3
 80025c4:	4622      	mov	r2, r4
 80025c6:	462b      	mov	r3, r5
 80025c8:	1814      	adds	r4, r2, r0
 80025ca:	653c      	str	r4, [r7, #80]	; 0x50
 80025cc:	414b      	adcs	r3, r1
 80025ce:	657b      	str	r3, [r7, #84]	; 0x54
 80025d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	461a      	mov	r2, r3
 80025d6:	f04f 0300 	mov.w	r3, #0
 80025da:	1891      	adds	r1, r2, r2
 80025dc:	61b9      	str	r1, [r7, #24]
 80025de:	415b      	adcs	r3, r3
 80025e0:	61fb      	str	r3, [r7, #28]
 80025e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025e6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80025ea:	f7fd fdf5 	bl	80001d8 <__aeabi_uldivmod>
 80025ee:	4602      	mov	r2, r0
 80025f0:	460b      	mov	r3, r1
 80025f2:	4b6c      	ldr	r3, [pc, #432]	; (80027a4 <UART_SetConfig+0x38c>)
 80025f4:	fba3 1302 	umull	r1, r3, r3, r2
 80025f8:	095b      	lsrs	r3, r3, #5
 80025fa:	2164      	movs	r1, #100	; 0x64
 80025fc:	fb01 f303 	mul.w	r3, r1, r3
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	3332      	adds	r3, #50	; 0x32
 8002606:	4a67      	ldr	r2, [pc, #412]	; (80027a4 <UART_SetConfig+0x38c>)
 8002608:	fba2 2303 	umull	r2, r3, r2, r3
 800260c:	095b      	lsrs	r3, r3, #5
 800260e:	f003 0207 	and.w	r2, r3, #7
 8002612:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4432      	add	r2, r6
 8002618:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800261a:	e0b9      	b.n	8002790 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800261c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800261e:	461c      	mov	r4, r3
 8002620:	f04f 0500 	mov.w	r5, #0
 8002624:	4622      	mov	r2, r4
 8002626:	462b      	mov	r3, r5
 8002628:	1891      	adds	r1, r2, r2
 800262a:	6139      	str	r1, [r7, #16]
 800262c:	415b      	adcs	r3, r3
 800262e:	617b      	str	r3, [r7, #20]
 8002630:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002634:	1912      	adds	r2, r2, r4
 8002636:	eb45 0303 	adc.w	r3, r5, r3
 800263a:	f04f 0000 	mov.w	r0, #0
 800263e:	f04f 0100 	mov.w	r1, #0
 8002642:	00d9      	lsls	r1, r3, #3
 8002644:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002648:	00d0      	lsls	r0, r2, #3
 800264a:	4602      	mov	r2, r0
 800264c:	460b      	mov	r3, r1
 800264e:	eb12 0804 	adds.w	r8, r2, r4
 8002652:	eb43 0905 	adc.w	r9, r3, r5
 8002656:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	4618      	mov	r0, r3
 800265c:	f04f 0100 	mov.w	r1, #0
 8002660:	f04f 0200 	mov.w	r2, #0
 8002664:	f04f 0300 	mov.w	r3, #0
 8002668:	008b      	lsls	r3, r1, #2
 800266a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800266e:	0082      	lsls	r2, r0, #2
 8002670:	4640      	mov	r0, r8
 8002672:	4649      	mov	r1, r9
 8002674:	f7fd fdb0 	bl	80001d8 <__aeabi_uldivmod>
 8002678:	4602      	mov	r2, r0
 800267a:	460b      	mov	r3, r1
 800267c:	4b49      	ldr	r3, [pc, #292]	; (80027a4 <UART_SetConfig+0x38c>)
 800267e:	fba3 2302 	umull	r2, r3, r3, r2
 8002682:	095b      	lsrs	r3, r3, #5
 8002684:	011e      	lsls	r6, r3, #4
 8002686:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002688:	4618      	mov	r0, r3
 800268a:	f04f 0100 	mov.w	r1, #0
 800268e:	4602      	mov	r2, r0
 8002690:	460b      	mov	r3, r1
 8002692:	1894      	adds	r4, r2, r2
 8002694:	60bc      	str	r4, [r7, #8]
 8002696:	415b      	adcs	r3, r3
 8002698:	60fb      	str	r3, [r7, #12]
 800269a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800269e:	1812      	adds	r2, r2, r0
 80026a0:	eb41 0303 	adc.w	r3, r1, r3
 80026a4:	f04f 0400 	mov.w	r4, #0
 80026a8:	f04f 0500 	mov.w	r5, #0
 80026ac:	00dd      	lsls	r5, r3, #3
 80026ae:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80026b2:	00d4      	lsls	r4, r2, #3
 80026b4:	4622      	mov	r2, r4
 80026b6:	462b      	mov	r3, r5
 80026b8:	1814      	adds	r4, r2, r0
 80026ba:	64bc      	str	r4, [r7, #72]	; 0x48
 80026bc:	414b      	adcs	r3, r1
 80026be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	4618      	mov	r0, r3
 80026c6:	f04f 0100 	mov.w	r1, #0
 80026ca:	f04f 0200 	mov.w	r2, #0
 80026ce:	f04f 0300 	mov.w	r3, #0
 80026d2:	008b      	lsls	r3, r1, #2
 80026d4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80026d8:	0082      	lsls	r2, r0, #2
 80026da:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80026de:	f7fd fd7b 	bl	80001d8 <__aeabi_uldivmod>
 80026e2:	4602      	mov	r2, r0
 80026e4:	460b      	mov	r3, r1
 80026e6:	4b2f      	ldr	r3, [pc, #188]	; (80027a4 <UART_SetConfig+0x38c>)
 80026e8:	fba3 1302 	umull	r1, r3, r3, r2
 80026ec:	095b      	lsrs	r3, r3, #5
 80026ee:	2164      	movs	r1, #100	; 0x64
 80026f0:	fb01 f303 	mul.w	r3, r1, r3
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	011b      	lsls	r3, r3, #4
 80026f8:	3332      	adds	r3, #50	; 0x32
 80026fa:	4a2a      	ldr	r2, [pc, #168]	; (80027a4 <UART_SetConfig+0x38c>)
 80026fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002700:	095b      	lsrs	r3, r3, #5
 8002702:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002706:	441e      	add	r6, r3
 8002708:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800270a:	4618      	mov	r0, r3
 800270c:	f04f 0100 	mov.w	r1, #0
 8002710:	4602      	mov	r2, r0
 8002712:	460b      	mov	r3, r1
 8002714:	1894      	adds	r4, r2, r2
 8002716:	603c      	str	r4, [r7, #0]
 8002718:	415b      	adcs	r3, r3
 800271a:	607b      	str	r3, [r7, #4]
 800271c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002720:	1812      	adds	r2, r2, r0
 8002722:	eb41 0303 	adc.w	r3, r1, r3
 8002726:	f04f 0400 	mov.w	r4, #0
 800272a:	f04f 0500 	mov.w	r5, #0
 800272e:	00dd      	lsls	r5, r3, #3
 8002730:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002734:	00d4      	lsls	r4, r2, #3
 8002736:	4622      	mov	r2, r4
 8002738:	462b      	mov	r3, r5
 800273a:	eb12 0a00 	adds.w	sl, r2, r0
 800273e:	eb43 0b01 	adc.w	fp, r3, r1
 8002742:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	4618      	mov	r0, r3
 8002748:	f04f 0100 	mov.w	r1, #0
 800274c:	f04f 0200 	mov.w	r2, #0
 8002750:	f04f 0300 	mov.w	r3, #0
 8002754:	008b      	lsls	r3, r1, #2
 8002756:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800275a:	0082      	lsls	r2, r0, #2
 800275c:	4650      	mov	r0, sl
 800275e:	4659      	mov	r1, fp
 8002760:	f7fd fd3a 	bl	80001d8 <__aeabi_uldivmod>
 8002764:	4602      	mov	r2, r0
 8002766:	460b      	mov	r3, r1
 8002768:	4b0e      	ldr	r3, [pc, #56]	; (80027a4 <UART_SetConfig+0x38c>)
 800276a:	fba3 1302 	umull	r1, r3, r3, r2
 800276e:	095b      	lsrs	r3, r3, #5
 8002770:	2164      	movs	r1, #100	; 0x64
 8002772:	fb01 f303 	mul.w	r3, r1, r3
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	011b      	lsls	r3, r3, #4
 800277a:	3332      	adds	r3, #50	; 0x32
 800277c:	4a09      	ldr	r2, [pc, #36]	; (80027a4 <UART_SetConfig+0x38c>)
 800277e:	fba2 2303 	umull	r2, r3, r2, r3
 8002782:	095b      	lsrs	r3, r3, #5
 8002784:	f003 020f 	and.w	r2, r3, #15
 8002788:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4432      	add	r2, r6
 800278e:	609a      	str	r2, [r3, #8]
}
 8002790:	bf00      	nop
 8002792:	377c      	adds	r7, #124	; 0x7c
 8002794:	46bd      	mov	sp, r7
 8002796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800279a:	bf00      	nop
 800279c:	40011000 	.word	0x40011000
 80027a0:	40011400 	.word	0x40011400
 80027a4:	51eb851f 	.word	0x51eb851f

080027a8 <crc32_init_context>:
static uint32_t now;
static void send_reset(struct min_context *self);
#endif

static void crc32_init_context(struct crc32_context *context)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
    context->crc = 0xffffffffU;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f04f 32ff 	mov.w	r2, #4294967295
 80027b6:	601a      	str	r2, [r3, #0]
}
 80027b8:	bf00      	nop
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <crc32_step>:

static void crc32_step(struct crc32_context *context, uint8_t byte)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	460b      	mov	r3, r1
 80027ce:	70fb      	strb	r3, [r7, #3]
    uint32_t j;
    context->crc ^= byte;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	78fb      	ldrb	r3, [r7, #3]
 80027d6:	405a      	eors	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	601a      	str	r2, [r3, #0]
    for(j = 0; j < 8; j++) {
 80027dc:	2300      	movs	r3, #0
 80027de:	60fb      	str	r3, [r7, #12]
 80027e0:	e011      	b.n	8002806 <crc32_step+0x42>
        uint32_t mask = (uint32_t) -(context->crc & 1U);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	425b      	negs	r3, r3
 80027ec:	60bb      	str	r3, [r7, #8]
        context->crc = (context->crc >> 1) ^ (0xedb88320U & mask);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	085a      	lsrs	r2, r3, #1
 80027f4:	68b9      	ldr	r1, [r7, #8]
 80027f6:	4b09      	ldr	r3, [pc, #36]	; (800281c <crc32_step+0x58>)
 80027f8:	400b      	ands	r3, r1
 80027fa:	405a      	eors	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	601a      	str	r2, [r3, #0]
    for(j = 0; j < 8; j++) {
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	3301      	adds	r3, #1
 8002804:	60fb      	str	r3, [r7, #12]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2b07      	cmp	r3, #7
 800280a:	d9ea      	bls.n	80027e2 <crc32_step+0x1e>
    }
}
 800280c:	bf00      	nop
 800280e:	bf00      	nop
 8002810:	3714      	adds	r7, #20
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	edb88320 	.word	0xedb88320

08002820 <crc32_finalize>:

static uint32_t crc32_finalize(struct crc32_context *context)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
    return ~context->crc;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	43db      	mvns	r3, r3
}
 800282e:	4618      	mov	r0, r3
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr

0800283a <stuffed_tx_byte>:


static void stuffed_tx_byte(struct min_context *self, uint8_t byte, bool crc)
{
 800283a:	b580      	push	{r7, lr}
 800283c:	b082      	sub	sp, #8
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
 8002842:	460b      	mov	r3, r1
 8002844:	70fb      	strb	r3, [r7, #3]
 8002846:	4613      	mov	r3, r2
 8002848:	70bb      	strb	r3, [r7, #2]
    // Transmit the byte
    min_tx_byte(self->port, byte);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8002850:	78fa      	ldrb	r2, [r7, #3]
 8002852:	4611      	mov	r1, r2
 8002854:	4618      	mov	r0, r3
 8002856:	f7fd fe85 	bl	8000564 <min_tx_byte>
    if(crc) {
 800285a:	78bb      	ldrb	r3, [r7, #2]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d007      	beq.n	8002870 <stuffed_tx_byte+0x36>
        crc32_step(&self->tx_checksum, byte);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002866:	78fa      	ldrb	r2, [r7, #3]
 8002868:	4611      	mov	r1, r2
 800286a:	4618      	mov	r0, r3
 800286c:	f7ff ffaa 	bl	80027c4 <crc32_step>
    }

    // See if an additional stuff byte is needed
    if(byte == HEADER_BYTE) {
 8002870:	78fb      	ldrb	r3, [r7, #3]
 8002872:	2baa      	cmp	r3, #170	; 0xaa
 8002874:	d118      	bne.n	80028a8 <stuffed_tx_byte+0x6e>
        if(--self->tx_header_byte_countdown == 0) {
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 800287c:	3b01      	subs	r3, #1
 800287e:	b2da      	uxtb	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 800288c:	2b00      	cmp	r3, #0
 800288e:	d10f      	bne.n	80028b0 <stuffed_tx_byte+0x76>
            min_tx_byte(self->port, STUFF_BYTE);        // Stuff byte
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8002896:	2155      	movs	r1, #85	; 0x55
 8002898:	4618      	mov	r0, r3
 800289a:	f7fd fe63 	bl	8000564 <min_tx_byte>
            self->tx_header_byte_countdown = 2U;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2202      	movs	r2, #2
 80028a2:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
        }
    }
    else {
        self->tx_header_byte_countdown = 2U;
    }
}
 80028a6:	e003      	b.n	80028b0 <stuffed_tx_byte+0x76>
        self->tx_header_byte_countdown = 2U;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2202      	movs	r2, #2
 80028ac:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
}
 80028b0:	bf00      	nop
 80028b2:	3708      	adds	r7, #8
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <on_wire_bytes>:

static void on_wire_bytes(struct min_context *self, uint8_t id_control, uint8_t seq, uint8_t const *payload_base, uint16_t payload_offset, uint16_t payload_mask, uint8_t payload_len)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b086      	sub	sp, #24
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	607b      	str	r3, [r7, #4]
 80028c2:	460b      	mov	r3, r1
 80028c4:	72fb      	strb	r3, [r7, #11]
 80028c6:	4613      	mov	r3, r2
 80028c8:	72bb      	strb	r3, [r7, #10]
    uint8_t n, i;
    uint32_t checksum;

    self->tx_header_byte_countdown = 2U;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2202      	movs	r2, #2
 80028ce:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
    crc32_init_context(&self->tx_checksum);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80028d8:	4618      	mov	r0, r3
 80028da:	f7ff ff65 	bl	80027a8 <crc32_init_context>

    min_tx_start(self->port);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7fd fe59 	bl	800059c <min_tx_start>

    // Header is 3 bytes; because unstuffed will reset receiver immediately
    min_tx_byte(self->port, HEADER_BYTE);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80028f0:	21aa      	movs	r1, #170	; 0xaa
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7fd fe36 	bl	8000564 <min_tx_byte>
    min_tx_byte(self->port, HEADER_BYTE);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80028fe:	21aa      	movs	r1, #170	; 0xaa
 8002900:	4618      	mov	r0, r3
 8002902:	f7fd fe2f 	bl	8000564 <min_tx_byte>
    min_tx_byte(self->port, HEADER_BYTE);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800290c:	21aa      	movs	r1, #170	; 0xaa
 800290e:	4618      	mov	r0, r3
 8002910:	f7fd fe28 	bl	8000564 <min_tx_byte>

    stuffed_tx_byte(self, id_control, true);
 8002914:	7afb      	ldrb	r3, [r7, #11]
 8002916:	2201      	movs	r2, #1
 8002918:	4619      	mov	r1, r3
 800291a:	68f8      	ldr	r0, [r7, #12]
 800291c:	f7ff ff8d 	bl	800283a <stuffed_tx_byte>
    if(id_control & 0x80U) {
 8002920:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002924:	2b00      	cmp	r3, #0
 8002926:	da05      	bge.n	8002934 <on_wire_bytes+0x7c>
        // Send the sequence number if it is a transport frame
        stuffed_tx_byte(self, seq, true);
 8002928:	7abb      	ldrb	r3, [r7, #10]
 800292a:	2201      	movs	r2, #1
 800292c:	4619      	mov	r1, r3
 800292e:	68f8      	ldr	r0, [r7, #12]
 8002930:	f7ff ff83 	bl	800283a <stuffed_tx_byte>
    }

    stuffed_tx_byte(self, payload_len, true);
 8002934:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002938:	2201      	movs	r2, #1
 800293a:	4619      	mov	r1, r3
 800293c:	68f8      	ldr	r0, [r7, #12]
 800293e:	f7ff ff7c 	bl	800283a <stuffed_tx_byte>

    for(i = 0, n = payload_len; n > 0; n--, i++) {
 8002942:	2300      	movs	r3, #0
 8002944:	75bb      	strb	r3, [r7, #22]
 8002946:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800294a:	75fb      	strb	r3, [r7, #23]
 800294c:	e015      	b.n	800297a <on_wire_bytes+0xc2>
        stuffed_tx_byte(self, payload_base[payload_offset], true);
 800294e:	8c3b      	ldrh	r3, [r7, #32]
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	4413      	add	r3, r2
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	2201      	movs	r2, #1
 8002958:	4619      	mov	r1, r3
 800295a:	68f8      	ldr	r0, [r7, #12]
 800295c:	f7ff ff6d 	bl	800283a <stuffed_tx_byte>
        payload_offset++;
 8002960:	8c3b      	ldrh	r3, [r7, #32]
 8002962:	3301      	adds	r3, #1
 8002964:	843b      	strh	r3, [r7, #32]
        payload_offset &= payload_mask;
 8002966:	8c3a      	ldrh	r2, [r7, #32]
 8002968:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800296a:	4013      	ands	r3, r2
 800296c:	843b      	strh	r3, [r7, #32]
    for(i = 0, n = payload_len; n > 0; n--, i++) {
 800296e:	7dfb      	ldrb	r3, [r7, #23]
 8002970:	3b01      	subs	r3, #1
 8002972:	75fb      	strb	r3, [r7, #23]
 8002974:	7dbb      	ldrb	r3, [r7, #22]
 8002976:	3301      	adds	r3, #1
 8002978:	75bb      	strb	r3, [r7, #22]
 800297a:	7dfb      	ldrb	r3, [r7, #23]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d1e6      	bne.n	800294e <on_wire_bytes+0x96>
    }

    checksum = crc32_finalize(&self->tx_checksum);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002986:	4618      	mov	r0, r3
 8002988:	f7ff ff4a 	bl	8002820 <crc32_finalize>
 800298c:	6138      	str	r0, [r7, #16]

    // Network order is big-endian. A decent C compiler will spot that this
    // is extracting bytes and will use efficient instructions.
    stuffed_tx_byte(self, (uint8_t)((checksum >> 24) & 0xffU), false);
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	0e1b      	lsrs	r3, r3, #24
 8002992:	b2db      	uxtb	r3, r3
 8002994:	2200      	movs	r2, #0
 8002996:	4619      	mov	r1, r3
 8002998:	68f8      	ldr	r0, [r7, #12]
 800299a:	f7ff ff4e 	bl	800283a <stuffed_tx_byte>
    stuffed_tx_byte(self, (uint8_t)((checksum >> 16) & 0xffU), false);
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	0c1b      	lsrs	r3, r3, #16
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	2200      	movs	r2, #0
 80029a6:	4619      	mov	r1, r3
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	f7ff ff46 	bl	800283a <stuffed_tx_byte>
    stuffed_tx_byte(self, (uint8_t)((checksum >> 8) & 0xffU), false);
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	0a1b      	lsrs	r3, r3, #8
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	2200      	movs	r2, #0
 80029b6:	4619      	mov	r1, r3
 80029b8:	68f8      	ldr	r0, [r7, #12]
 80029ba:	f7ff ff3e 	bl	800283a <stuffed_tx_byte>
    stuffed_tx_byte(self, (uint8_t)((checksum >> 0) & 0xffU), false);
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2200      	movs	r2, #0
 80029c4:	4619      	mov	r1, r3
 80029c6:	68f8      	ldr	r0, [r7, #12]
 80029c8:	f7ff ff37 	bl	800283a <stuffed_tx_byte>

    // Ensure end-of-frame doesn't contain 0xaa and confuse search for start-of-frame
    min_tx_byte(self->port, EOF_BYTE);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80029d2:	2155      	movs	r1, #85	; 0x55
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7fd fdc5 	bl	8000564 <min_tx_byte>

    min_tx_finished(self->port);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7fd fde6 	bl	80005b2 <min_tx_finished>
}
 80029e6:	bf00      	nop
 80029e8:	3718      	adds	r7, #24
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <transport_fifo_pop>:

#ifdef TRANSPORT_PROTOCOL

// Pops frame from front of queue, reclaims its ring buffer space
static void transport_fifo_pop(struct min_context *self)
{
 80029ee:	b480      	push	{r7}
 80029f0:	b085      	sub	sp, #20
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
#ifdef ASSERTION_CHECKING
    assert(self->transport_fifo.n_frames != 0);
#endif
    struct transport_frame *frame = &self->transport_fifo.frames[self->transport_fifo.head_idx];
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 80029fc:	461a      	mov	r2, r3
 80029fe:	4613      	mov	r3, r2
 8002a00:	005b      	lsls	r3, r3, #1
 8002a02:	4413      	add	r3, r2
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	4413      	add	r3, r2
 8002a0a:	60fb      	str	r3, [r7, #12]

#ifdef ASSERTION_CHECKING
    assert(self->transport_fifo.n_ring_buffer_bytes >= frame->payload_len);
#endif

    self->transport_fifo.n_frames--;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 8002a12:	3b01      	subs	r3, #1
 8002a14:	b2da      	uxtb	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
    self->transport_fifo.head_idx++;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 8002a22:	3301      	adds	r3, #1
 8002a24:	b2da      	uxtb	r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
    self->transport_fifo.head_idx &= TRANSPORT_FIFO_SIZE_FRAMES_MASK;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 8002a32:	f003 030f 	and.w	r3, r3, #15
 8002a36:	b2da      	uxtb	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
    self->transport_fifo.n_ring_buffer_bytes -= frame->payload_len;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f8b3 20dc 	ldrh.w	r2, [r3, #220]	; 0xdc
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	799b      	ldrb	r3, [r3, #6]
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	b29a      	uxth	r2, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
}
 8002a54:	bf00      	nop
 8002a56:	3714      	adds	r7, #20
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <transport_fifo_get>:
    return ret;
}

// Return the nth frame in the FIFO
static struct transport_frame *transport_fifo_get(struct min_context *self, uint8_t n)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b085      	sub	sp, #20
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	460b      	mov	r3, r1
 8002a6a:	70fb      	strb	r3, [r7, #3]
    uint8_t idx = self->transport_fifo.head_idx;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 8002a72:	73fb      	strb	r3, [r7, #15]
    return &self->transport_fifo.frames[(idx + n) & TRANSPORT_FIFO_SIZE_FRAMES_MASK];
 8002a74:	7bfa      	ldrb	r2, [r7, #15]
 8002a76:	78fb      	ldrb	r3, [r7, #3]
 8002a78:	4413      	add	r3, r2
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	f003 020f 	and.w	r2, r3, #15
 8002a80:	4613      	mov	r3, r2
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	4413      	add	r3, r2
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	4413      	add	r3, r2
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3714      	adds	r7, #20
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <transport_fifo_send>:

// Sends the given frame to the serial line
static void transport_fifo_send(struct min_context *self, struct transport_frame *frame)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af04      	add	r7, sp, #16
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
    min_debug_print("transport_fifo_send: min_id=%d, seq=%d, payload_len=%d\n", frame->min_id, frame->seq, frame->payload_len);
    on_wire_bytes(self, frame->min_id | (uint8_t)0x80U, frame->seq, payloads_ring_buffer, frame->payload_offset, TRANSPORT_FIFO_SIZE_FRAME_DATA_MASK, frame->payload_len);
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	79db      	ldrb	r3, [r3, #7]
 8002aa6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002aaa:	b2d9      	uxtb	r1, r3
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	7a18      	ldrb	r0, [r3, #8]
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	889b      	ldrh	r3, [r3, #4]
 8002ab4:	683a      	ldr	r2, [r7, #0]
 8002ab6:	7992      	ldrb	r2, [r2, #6]
 8002ab8:	9202      	str	r2, [sp, #8]
 8002aba:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8002abe:	9201      	str	r2, [sp, #4]
 8002ac0:	9300      	str	r3, [sp, #0]
 8002ac2:	4b06      	ldr	r3, [pc, #24]	; (8002adc <transport_fifo_send+0x44>)
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f7ff fef6 	bl	80028b8 <on_wire_bytes>
    frame->last_sent_time_ms = now;
 8002acc:	4b04      	ldr	r3, [pc, #16]	; (8002ae0 <transport_fifo_send+0x48>)
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	601a      	str	r2, [r3, #0]
}
 8002ad4:	bf00      	nop
 8002ad6:	3708      	adds	r7, #8
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	200002bc 	.word	0x200002bc
 8002ae0:	20000028 	.word	0x20000028

08002ae4 <send_ack>:

// We don't queue an ACK frame - we send it straight away (if there's space to do so)
static void send_ack(struct min_context *self)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af04      	add	r7, sp, #16
 8002aea:	6078      	str	r0, [r7, #4]
    // In the embedded end we don't reassemble out-of-order frames and so never ask for retransmits. Payload is
    // always the same as the sequence number.
    min_debug_print("send ACK: seq=%d\n", self->transport_fifo.rn);
    if(ON_WIRE_SIZE(0) <= min_tx_space(self->port)) {
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7fd fd29 	bl	800054a <min_tx_space>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b0a      	cmp	r3, #10
 8002afc:	d913      	bls.n	8002b26 <send_ack+0x42>
        on_wire_bytes(self, ACK, self->transport_fifo.rn, &self->transport_fifo.rn, 0, 0xffU, 1U);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	33e8      	adds	r3, #232	; 0xe8
 8002b08:	2101      	movs	r1, #1
 8002b0a:	9102      	str	r1, [sp, #8]
 8002b0c:	21ff      	movs	r1, #255	; 0xff
 8002b0e:	9101      	str	r1, [sp, #4]
 8002b10:	2100      	movs	r1, #0
 8002b12:	9100      	str	r1, [sp, #0]
 8002b14:	21ff      	movs	r1, #255	; 0xff
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f7ff fece 	bl	80028b8 <on_wire_bytes>
        self->transport_fifo.last_sent_ack_time_ms = now;
 8002b1c:	4b04      	ldr	r3, [pc, #16]	; (8002b30 <send_ack+0x4c>)
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    }
}
 8002b26:	bf00      	nop
 8002b28:	3708      	adds	r7, #8
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	20000028 	.word	0x20000028

08002b34 <transport_fifo_reset>:
        on_wire_bytes(self, RESET, 0, 0, 0, 0, 0);
    }
}

static void transport_fifo_reset(struct min_context *self)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
    // Clear down the transmission FIFO queue
    self->transport_fifo.n_frames = 0;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
    self->transport_fifo.head_idx = 0;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
    self->transport_fifo.tail_idx = 0;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 20e5 	strb.w	r2, [r3, #229]	; 0xe5
    self->transport_fifo.n_ring_buffer_bytes = 0;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
    self->transport_fifo.ring_buffer_tail_offset = 0;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
    self->transport_fifo.sn_max = 0;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
    self->transport_fifo.sn_min = 0;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 20e6 	strb.w	r2, [r3, #230]	; 0xe6
    self->transport_fifo.rn = 0;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8

    // Reset the timers
    self->transport_fifo.last_received_anything_ms = now;
 8002b7c:	4b09      	ldr	r3, [pc, #36]	; (8002ba4 <transport_fifo_reset+0x70>)
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    self->transport_fifo.last_sent_ack_time_ms = now;
 8002b86:	4b07      	ldr	r3, [pc, #28]	; (8002ba4 <transport_fifo_reset+0x70>)
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    self->transport_fifo.last_received_frame_ms = 0;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 8002b98:	bf00      	nop
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr
 8002ba4:	20000028 	.word	0x20000028

08002ba8 <find_retransmit_frame>:
           self->transport_fifo.n_ring_buffer_bytes <= TRANSPORT_FIFO_MAX_FRAME_DATA - payload_len;
}

// Finds the frame in the window that was sent least recently
static struct transport_frame *find_retransmit_frame(struct min_context *self)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b089      	sub	sp, #36	; 0x24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
    uint8_t idx;
    uint8_t i;
    uint8_t window_size = self->transport_fifo.sn_max - self->transport_fifo.sn_min;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f893 30e6 	ldrb.w	r3, [r3, #230]	; 0xe6
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	74fb      	strb	r3, [r7, #19]
    assert(window_size > 0);
    assert(window_size <= self->transport_fifo.n_frames);
#endif

    // Start with the head of the queue and call this the oldest
    struct transport_frame *oldest_frame = &self->transport_fifo.frames[self->transport_fifo.head_idx];
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	4613      	mov	r3, r2
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	4413      	add	r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	61bb      	str	r3, [r7, #24]
    uint32_t oldest_elapsed_time = now - oldest_frame->last_sent_time_ms;
 8002bd6:	4b1e      	ldr	r3, [pc, #120]	; (8002c50 <find_retransmit_frame+0xa8>)
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	617b      	str	r3, [r7, #20]

    idx = self->transport_fifo.head_idx;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 8002be8:	77fb      	strb	r3, [r7, #31]
    for(i = 0; i < window_size; i++) {
 8002bea:	2300      	movs	r3, #0
 8002bec:	77bb      	strb	r3, [r7, #30]
 8002bee:	e023      	b.n	8002c38 <find_retransmit_frame+0x90>
        uint32_t elapsed = now - self->transport_fifo.frames[idx].last_sent_time_ms;
 8002bf0:	4b17      	ldr	r3, [pc, #92]	; (8002c50 <find_retransmit_frame+0xa8>)
 8002bf2:	6819      	ldr	r1, [r3, #0]
 8002bf4:	7ffa      	ldrb	r2, [r7, #31]
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	005b      	lsls	r3, r3, #1
 8002bfc:	4413      	add	r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	4403      	add	r3, r0
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	1acb      	subs	r3, r1, r3
 8002c06:	60fb      	str	r3, [r7, #12]
        if(elapsed > oldest_elapsed_time) { // Strictly older only; otherwise the earlier frame is deemed the older
 8002c08:	68fa      	ldr	r2, [r7, #12]
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d909      	bls.n	8002c24 <find_retransmit_frame+0x7c>
            oldest_elapsed_time = elapsed;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	617b      	str	r3, [r7, #20]
            oldest_frame = &self->transport_fifo.frames[idx];
 8002c14:	7ffa      	ldrb	r2, [r7, #31]
 8002c16:	4613      	mov	r3, r2
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	4413      	add	r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	4413      	add	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
        }
        idx++;
 8002c24:	7ffb      	ldrb	r3, [r7, #31]
 8002c26:	3301      	adds	r3, #1
 8002c28:	77fb      	strb	r3, [r7, #31]
        idx &= TRANSPORT_FIFO_SIZE_FRAMES_MASK;
 8002c2a:	7ffb      	ldrb	r3, [r7, #31]
 8002c2c:	f003 030f 	and.w	r3, r3, #15
 8002c30:	77fb      	strb	r3, [r7, #31]
    for(i = 0; i < window_size; i++) {
 8002c32:	7fbb      	ldrb	r3, [r7, #30]
 8002c34:	3301      	adds	r3, #1
 8002c36:	77bb      	strb	r3, [r7, #30]
 8002c38:	7fba      	ldrb	r2, [r7, #30]
 8002c3a:	7cfb      	ldrb	r3, [r7, #19]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d3d7      	bcc.n	8002bf0 <find_retransmit_frame+0x48>
    }

    return oldest_frame;
 8002c40:	69bb      	ldr	r3, [r7, #24]
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3724      	adds	r7, #36	; 0x24
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	20000028 	.word	0x20000028

08002c54 <valid_frame_received>:
#endif // TRANSPORT_PROTOCOL

// This runs the receiving half of the transport protocol, acknowledging frames received, discarding
// duplicates received, and handling RESET requests.
static void valid_frame_received(struct min_context *self)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b088      	sub	sp, #32
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
    uint8_t id_control = self->rx_frame_id_control;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f893 31fb 	ldrb.w	r3, [r3, #507]	; 0x1fb
 8002c62:	777b      	strb	r3, [r7, #29]
    uint8_t *payload = self->rx_frame_payload_buf;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	33ec      	adds	r3, #236	; 0xec
 8002c68:	61bb      	str	r3, [r7, #24]
    uint8_t payload_len = self->rx_control;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8002c70:	75fb      	strb	r3, [r7, #23]

#ifdef TRANSPORT_PROTOCOL
    uint8_t seq = self->rx_frame_seq;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8002c78:	75bb      	strb	r3, [r7, #22]
    uint8_t num_acked;
    uint8_t num_nacked;
    uint8_t num_in_window;

    // When we receive anything we know the other end is still active and won't shut down
    self->transport_fifo.last_received_anything_ms = now;
 8002c7a:	4b52      	ldr	r3, [pc, #328]	; (8002dc4 <valid_frame_received+0x170>)
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

    switch(id_control) {
 8002c84:	7f7b      	ldrb	r3, [r7, #29]
 8002c86:	2bfe      	cmp	r3, #254	; 0xfe
 8002c88:	d053      	beq.n	8002d32 <valid_frame_received+0xde>
 8002c8a:	2bff      	cmp	r3, #255	; 0xff
 8002c8c:	d15c      	bne.n	8002d48 <valid_frame_received+0xf4>
        case ACK:
            // If we get an ACK then we remove all the acknowledged frames with seq < rn
            // The payload byte specifies the number of NACKed frames: how many we want retransmitted because
            // they have gone missing.
            // But we need to make sure we don't accidentally ACK too many because of a stale ACK from an old session
            num_acked = seq - self->transport_fifo.sn_min;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f893 30e6 	ldrb.w	r3, [r3, #230]	; 0xe6
 8002c94:	7dba      	ldrb	r2, [r7, #22]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	757b      	strb	r3, [r7, #21]
            num_nacked = payload[0] - seq;
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	781a      	ldrb	r2, [r3, #0]
 8002c9e:	7dbb      	ldrb	r3, [r7, #22]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	753b      	strb	r3, [r7, #20]
            num_in_window = self->transport_fifo.sn_max - self->transport_fifo.sn_min;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f893 30e6 	ldrb.w	r3, [r3, #230]	; 0xe6
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	74fb      	strb	r3, [r7, #19]

            if(num_acked <= num_in_window) {
 8002cb4:	7d7a      	ldrb	r2, [r7, #21]
 8002cb6:	7cfb      	ldrb	r3, [r7, #19]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d832      	bhi.n	8002d22 <valid_frame_received+0xce>
                uint8_t i;

                self->transport_fifo.sn_min = seq;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	7dba      	ldrb	r2, [r7, #22]
 8002cc0:	f883 20e6 	strb.w	r2, [r3, #230]	; 0xe6
                assert(num_nacked <= TRANSPORT_MAX_WINDOW_SIZE);
#endif
                // Now pop off all the frames up to (but not including) rn
                // The ACK contains Rn; all frames before Rn are ACKed and can be removed from the window
                min_debug_print("Received ACK seq=%d, num_acked=%d, num_nacked=%d\n", seq, num_acked, num_nacked);
                for(i = 0; i < num_acked; i++) {
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	77fb      	strb	r3, [r7, #31]
 8002cc8:	e005      	b.n	8002cd6 <valid_frame_received+0x82>
                    transport_fifo_pop(self);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f7ff fe8f 	bl	80029ee <transport_fifo_pop>
                for(i = 0; i < num_acked; i++) {
 8002cd0:	7ffb      	ldrb	r3, [r7, #31]
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	77fb      	strb	r3, [r7, #31]
 8002cd6:	7ffa      	ldrb	r2, [r7, #31]
 8002cd8:	7d7b      	ldrb	r3, [r7, #21]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d3f5      	bcc.n	8002cca <valid_frame_received+0x76>
                }
                uint8_t idx = self->transport_fifo.head_idx;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 8002ce4:	77bb      	strb	r3, [r7, #30]
                // Now retransmit the number of frames that were requested
                for(i = 0; i < num_nacked; i++) {
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	77fb      	strb	r3, [r7, #31]
 8002cea:	e015      	b.n	8002d18 <valid_frame_received+0xc4>
                    struct transport_frame *retransmit_frame = &self->transport_fifo.frames[idx];
 8002cec:	7fba      	ldrb	r2, [r7, #30]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	4413      	add	r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	60fb      	str	r3, [r7, #12]
                    transport_fifo_send(self, retransmit_frame);
 8002cfc:	68f9      	ldr	r1, [r7, #12]
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f7ff feca 	bl	8002a98 <transport_fifo_send>
                    idx++;
 8002d04:	7fbb      	ldrb	r3, [r7, #30]
 8002d06:	3301      	adds	r3, #1
 8002d08:	77bb      	strb	r3, [r7, #30]
                    idx &= TRANSPORT_FIFO_SIZE_FRAMES_MASK;
 8002d0a:	7fbb      	ldrb	r3, [r7, #30]
 8002d0c:	f003 030f 	and.w	r3, r3, #15
 8002d10:	77bb      	strb	r3, [r7, #30]
                for(i = 0; i < num_nacked; i++) {
 8002d12:	7ffb      	ldrb	r3, [r7, #31]
 8002d14:	3301      	adds	r3, #1
 8002d16:	77fb      	strb	r3, [r7, #31]
 8002d18:	7ffa      	ldrb	r2, [r7, #31]
 8002d1a:	7d3b      	ldrb	r3, [r7, #20]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d3e5      	bcc.n	8002cec <valid_frame_received+0x98>
            }
            else {
                min_debug_print("Received spurious ACK seq=%d\n", seq);
                self->transport_fifo.spurious_acks++;
            }
            break;
 8002d20:	e04c      	b.n	8002dbc <valid_frame_received+0x168>
                self->transport_fifo.spurious_acks++;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8002d28:	1c5a      	adds	r2, r3, #1
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
            break;
 8002d30:	e044      	b.n	8002dbc <valid_frame_received+0x168>
            // If we get a RESET demand then we reset the transport protocol (empty the FIFO, reset the
            // sequence numbers, etc.)
            // We don't send anything, we just do it. The other end can send frames to see if this end is
            // alive (pings, etc.) or just wait to get application frames.
            min_debug_print("Received reset\n");
            self->transport_fifo.resets_received++;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002d38:	1c5a      	adds	r2, r3, #1
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
            transport_fifo_reset(self);
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f7ff fef7 	bl	8002b34 <transport_fifo_reset>
            break;
 8002d46:	e039      	b.n	8002dbc <valid_frame_received+0x168>
        default:
            if (id_control & 0x80U) {
 8002d48:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	da29      	bge.n	8002da4 <valid_frame_received+0x150>
                // Incoming application frames

                // Reset the activity time (an idle connection will be stalled)
                self->transport_fifo.last_received_frame_ms = now;
 8002d50:	4b1c      	ldr	r3, [pc, #112]	; (8002dc4 <valid_frame_received+0x170>)
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

                if (seq == self->transport_fifo.rn) {
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8002d60:	7dba      	ldrb	r2, [r7, #22]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d116      	bne.n	8002d94 <valid_frame_received+0x140>
                    // Accept this frame as matching the sequence number we were looking for

                    // Now looking for the next one in the sequence
                    self->transport_fifo.rn++;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	b2da      	uxtb	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
                    // Always send an ACK back for the frame we received
                    // ACKs are short (should be about 9 microseconds to send on the wire) and
                    // this will cut the latency down.
                    // We also periodically send an ACK in case the ACK was lost, and in any case
                    // frames are re-sent.
                    send_ack(self);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f7ff feb4 	bl	8002ae4 <send_ack>

                    // Now ready to pass this up to the application handlers

                    // Pass frame up to application handler to deal with
                    min_debug_print("Incoming app transport frame seq=%d, id=%d, payload len=%d\n", seq, id_control & (uint8_t)0x3fU, payload_len);
                    min_application_handler(id_control & (uint8_t)0x3fU, payload, payload_len, self->port);
 8002d7c:	7f7b      	ldrb	r3, [r7, #29]
 8002d7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d82:	b2d8      	uxtb	r0, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8002d8a:	7dfa      	ldrb	r2, [r7, #23]
 8002d8c:	69b9      	ldr	r1, [r7, #24]
 8002d8e:	f7fd fbbb 	bl	8000508 <min_application_handler>
            else {
                // Not a transport frame
                min_debug_print("Incoming app frame id=%d, payload len=%d\n", id_control & (uint8_t)0x3fU, payload_len);
                min_application_handler(id_control & (uint8_t)0x3fU, payload, payload_len, self->port);
            }
            break;
 8002d92:	e012      	b.n	8002dba <valid_frame_received+0x166>
                    self->transport_fifo.sequence_mismatch_drop++;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002d9a:	1c5a      	adds	r2, r3, #1
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
            break;
 8002da2:	e00a      	b.n	8002dba <valid_frame_received+0x166>
                min_application_handler(id_control & (uint8_t)0x3fU, payload, payload_len, self->port);
 8002da4:	7f7b      	ldrb	r3, [r7, #29]
 8002da6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002daa:	b2d8      	uxtb	r0, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8002db2:	7dfa      	ldrb	r2, [r7, #23]
 8002db4:	69b9      	ldr	r1, [r7, #24]
 8002db6:	f7fd fba7 	bl	8000508 <min_application_handler>
            break;
 8002dba:	bf00      	nop
    }
#else // TRANSPORT_PROTOCOL
    min_application_handler(id_control & (uint8_t)0x3fU, payload, payload_len, self->port);
#endif // TRANSPORT_PROTOCOL
}
 8002dbc:	bf00      	nop
 8002dbe:	3720      	adds	r7, #32
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	20000028 	.word	0x20000028

08002dc8 <rx_byte>:

static void rx_byte(struct min_context *self, uint8_t byte)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	70fb      	strb	r3, [r7, #3]
    // should reset the frame buffer and be ready to receive frame data
    //
    // Two in a row in over the frame means to expect a stuff byte.
    uint32_t crc;

    if(self->rx_header_bytes_seen == 2) {
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f893 31f8 	ldrb.w	r3, [r3, #504]	; 0x1f8
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d114      	bne.n	8002e08 <rx_byte+0x40>
        self->rx_header_bytes_seen = 0;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
        if(byte == HEADER_BYTE) {
 8002de6:	78fb      	ldrb	r3, [r7, #3]
 8002de8:	2baa      	cmp	r3, #170	; 0xaa
 8002dea:	d104      	bne.n	8002df6 <rx_byte+0x2e>
            self->rx_frame_state = RECEIVING_ID_CONTROL;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9
            return;
 8002df4:	e110      	b.n	8003018 <rx_byte+0x250>
        }
        if(byte == STUFF_BYTE) {
 8002df6:	78fb      	ldrb	r3, [r7, #3]
 8002df8:	2b55      	cmp	r3, #85	; 0x55
 8002dfa:	f000 8108 	beq.w	800300e <rx_byte+0x246>
            /* Discard this byte; carry on receiving on the next character */
            return;
        }
        else {
            /* Something has gone wrong, give up on this frame and look for header again */
            self->rx_frame_state = SEARCHING_FOR_SOF;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9
            return;
 8002e06:	e107      	b.n	8003018 <rx_byte+0x250>
        }
    }

    if(byte == HEADER_BYTE) {
 8002e08:	78fb      	ldrb	r3, [r7, #3]
 8002e0a:	2baa      	cmp	r3, #170	; 0xaa
 8002e0c:	d108      	bne.n	8002e20 <rx_byte+0x58>
        self->rx_header_bytes_seen++;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f893 31f8 	ldrb.w	r3, [r3, #504]	; 0x1f8
 8002e14:	3301      	adds	r3, #1
 8002e16:	b2da      	uxtb	r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
 8002e1e:	e003      	b.n	8002e28 <rx_byte+0x60>
    }
    else {
        self->rx_header_bytes_seen = 0;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
    }

    switch(self->rx_frame_state) {
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f893 31f9 	ldrb.w	r3, [r3, #505]	; 0x1f9
 8002e2e:	2b09      	cmp	r3, #9
 8002e30:	f200 80e8 	bhi.w	8003004 <rx_byte+0x23c>
 8002e34:	a201      	add	r2, pc, #4	; (adr r2, 8002e3c <rx_byte+0x74>)
 8002e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e3a:	bf00      	nop
 8002e3c:	08003013 	.word	0x08003013
 8002e40:	08002e65 	.word	0x08002e65
 8002e44:	08002eb5 	.word	0x08002eb5
 8002e48:	08002ed7 	.word	0x08002ed7
 8002e4c:	08002f15 	.word	0x08002f15
 8002e50:	08002f65 	.word	0x08002f65
 8002e54:	08002f79 	.word	0x08002f79
 8002e58:	08002f95 	.word	0x08002f95
 8002e5c:	08002fb1 	.word	0x08002fb1
 8002e60:	08002fef 	.word	0x08002fef
        case SEARCHING_FOR_SOF:
            break;
        case RECEIVING_ID_CONTROL:
            self->rx_frame_id_control = byte;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	78fa      	ldrb	r2, [r7, #3]
 8002e68:	f883 21fb 	strb.w	r2, [r3, #507]	; 0x1fb
            self->rx_frame_payload_bytes = 0;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 21fa 	strb.w	r2, [r3, #506]	; 0x1fa
            crc32_init_context(&self->rx_checksum);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7ff fc94 	bl	80027a8 <crc32_init_context>
            crc32_step(&self->rx_checksum, byte);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 8002e86:	78fa      	ldrb	r2, [r7, #3]
 8002e88:	4611      	mov	r1, r2
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7ff fc9a 	bl	80027c4 <crc32_step>
            if(byte & 0x80U) {
 8002e90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	da04      	bge.n	8002ea2 <rx_byte+0xda>
#ifdef TRANSPORT_PROTOCOL
                self->rx_frame_state = RECEIVING_SEQ;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2202      	movs	r2, #2
 8002e9c:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9
            }
            else {
                self->rx_frame_seq = 0;
                self->rx_frame_state = RECEIVING_LENGTH;
            }
            break;
 8002ea0:	e0ba      	b.n	8003018 <rx_byte+0x250>
                self->rx_frame_seq = 0;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
                self->rx_frame_state = RECEIVING_LENGTH;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2203      	movs	r2, #3
 8002eae:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9
            break;
 8002eb2:	e0b1      	b.n	8003018 <rx_byte+0x250>
        case RECEIVING_SEQ:
            self->rx_frame_seq = byte;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	78fa      	ldrb	r2, [r7, #3]
 8002eb8:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
            crc32_step(&self->rx_checksum, byte);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 8002ec2:	78fa      	ldrb	r2, [r7, #3]
 8002ec4:	4611      	mov	r1, r2
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7ff fc7c 	bl	80027c4 <crc32_step>
            self->rx_frame_state = RECEIVING_LENGTH;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2203      	movs	r2, #3
 8002ed0:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9
            break;
 8002ed4:	e0a0      	b.n	8003018 <rx_byte+0x250>
        case RECEIVING_LENGTH:
            self->rx_frame_length = byte;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	78fa      	ldrb	r2, [r7, #3]
 8002eda:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
            self->rx_control = byte;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	78fa      	ldrb	r2, [r7, #3]
 8002ee2:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
            crc32_step(&self->rx_checksum, byte);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 8002eec:	78fa      	ldrb	r2, [r7, #3]
 8002eee:	4611      	mov	r1, r2
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7ff fc67 	bl	80027c4 <crc32_step>
            if(self->rx_frame_length > 0) {
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f893 31fd 	ldrb.w	r3, [r3, #509]	; 0x1fd
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d004      	beq.n	8002f0a <rx_byte+0x142>
                // Can reduce the RAM size by compiling limits to frame sizes
                if(self->rx_frame_length <= MAX_PAYLOAD) {
                    self->rx_frame_state = RECEIVING_PAYLOAD;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2204      	movs	r2, #4
 8002f04:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9
                }
            }
            else {
                self->rx_frame_state = RECEIVING_CHECKSUM_3;
            }
            break;
 8002f08:	e086      	b.n	8003018 <rx_byte+0x250>
                self->rx_frame_state = RECEIVING_CHECKSUM_3;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2205      	movs	r2, #5
 8002f0e:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9
            break;
 8002f12:	e081      	b.n	8003018 <rx_byte+0x250>
        case RECEIVING_PAYLOAD:
            self->rx_frame_payload_buf[self->rx_frame_payload_bytes++] = byte;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f893 31fa 	ldrb.w	r3, [r3, #506]	; 0x1fa
 8002f1a:	1c5a      	adds	r2, r3, #1
 8002f1c:	b2d1      	uxtb	r1, r2
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	f882 11fa 	strb.w	r1, [r2, #506]	; 0x1fa
 8002f24:	461a      	mov	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4413      	add	r3, r2
 8002f2a:	78fa      	ldrb	r2, [r7, #3]
 8002f2c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
            crc32_step(&self->rx_checksum, byte);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 8002f36:	78fa      	ldrb	r2, [r7, #3]
 8002f38:	4611      	mov	r1, r2
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7ff fc42 	bl	80027c4 <crc32_step>
            if(--self->rx_frame_length == 0) {
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f893 31fd 	ldrb.w	r3, [r3, #509]	; 0x1fd
 8002f46:	3b01      	subs	r3, #1
 8002f48:	b2da      	uxtb	r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f893 31fd 	ldrb.w	r3, [r3, #509]	; 0x1fd
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d15d      	bne.n	8003016 <rx_byte+0x24e>
                self->rx_frame_state = RECEIVING_CHECKSUM_3;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2205      	movs	r2, #5
 8002f5e:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9
            }
            break;
 8002f62:	e058      	b.n	8003016 <rx_byte+0x24e>
        case RECEIVING_CHECKSUM_3:
            self->rx_frame_checksum = ((uint32_t)byte) << 24;
 8002f64:	78fb      	ldrb	r3, [r7, #3]
 8002f66:	061a      	lsls	r2, r3, #24
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
            self->rx_frame_state = RECEIVING_CHECKSUM_2;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2206      	movs	r2, #6
 8002f72:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9
            break;
 8002f76:	e04f      	b.n	8003018 <rx_byte+0x250>
        case RECEIVING_CHECKSUM_2:
            self->rx_frame_checksum |= ((uint32_t)byte) << 16;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f8d3 21ec 	ldr.w	r2, [r3, #492]	; 0x1ec
 8002f7e:	78fb      	ldrb	r3, [r7, #3]
 8002f80:	041b      	lsls	r3, r3, #16
 8002f82:	431a      	orrs	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
            self->rx_frame_state = RECEIVING_CHECKSUM_1;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2207      	movs	r2, #7
 8002f8e:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9
            break;
 8002f92:	e041      	b.n	8003018 <rx_byte+0x250>
        case RECEIVING_CHECKSUM_1:
            self->rx_frame_checksum |= ((uint32_t)byte) << 8;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f8d3 21ec 	ldr.w	r2, [r3, #492]	; 0x1ec
 8002f9a:	78fb      	ldrb	r3, [r7, #3]
 8002f9c:	021b      	lsls	r3, r3, #8
 8002f9e:	431a      	orrs	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
            self->rx_frame_state = RECEIVING_CHECKSUM_0;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2208      	movs	r2, #8
 8002faa:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9
            break;
 8002fae:	e033      	b.n	8003018 <rx_byte+0x250>
        case RECEIVING_CHECKSUM_0:
            self->rx_frame_checksum |= byte;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f8d3 21ec 	ldr.w	r2, [r3, #492]	; 0x1ec
 8002fb6:	78fb      	ldrb	r3, [r7, #3]
 8002fb8:	431a      	orrs	r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
            crc = crc32_finalize(&self->rx_checksum);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7ff fc2a 	bl	8002820 <crc32_finalize>
 8002fcc:	60f8      	str	r0, [r7, #12]
            if(self->rx_frame_checksum != crc) {
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d004      	beq.n	8002fe4 <rx_byte+0x21c>
                min_debug_print("Checksum failed, received 0x%08X, computed 0x%08X", self->rx_frame_checksum, crc);
                // Frame fails the checksum and so is dropped
                self->rx_frame_state = SEARCHING_FOR_SOF;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9
            }
            else {
                // Checksum passes, go on to check for the end-of-frame marker
                self->rx_frame_state = RECEIVING_EOF;
            }
            break;
 8002fe2:	e019      	b.n	8003018 <rx_byte+0x250>
                self->rx_frame_state = RECEIVING_EOF;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2209      	movs	r2, #9
 8002fe8:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9
            break;
 8002fec:	e014      	b.n	8003018 <rx_byte+0x250>
        case RECEIVING_EOF:
            if(byte == 0x55u) {
 8002fee:	78fb      	ldrb	r3, [r7, #3]
 8002ff0:	2b55      	cmp	r3, #85	; 0x55
 8002ff2:	d102      	bne.n	8002ffa <rx_byte+0x232>
                // Frame received OK, pass up data to handler
                valid_frame_received(self);
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f7ff fe2d 	bl	8002c54 <valid_frame_received>
            } else {
                // else discard
                min_debug_print("Received invalid EOF 0x%02X", byte);
            }
            // Look for next frame */
            self->rx_frame_state = SEARCHING_FOR_SOF;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9
            break;
 8003002:	e009      	b.n	8003018 <rx_byte+0x250>
        default:
            // Should never get here but in case we do then reset to a safe state
            min_debug_print("Received byte 0x%02X in invalid state %d", byte, self->rx_frame_state);
            self->rx_frame_state = SEARCHING_FOR_SOF;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9
            break;
 800300c:	e004      	b.n	8003018 <rx_byte+0x250>
            return;
 800300e:	bf00      	nop
 8003010:	e002      	b.n	8003018 <rx_byte+0x250>
            break;
 8003012:	bf00      	nop
 8003014:	e000      	b.n	8003018 <rx_byte+0x250>
            break;
 8003016:	bf00      	nop
    }
}
 8003018:	3710      	adds	r7, #16
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop

08003020 <min_poll>:

// API call: sends received bytes into a MIN context and runs the transport timeouts
void min_poll(struct min_context *self, uint8_t const *buf, uint32_t buf_len)
{
 8003020:	b590      	push	{r4, r7, lr}
 8003022:	b089      	sub	sp, #36	; 0x24
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	607a      	str	r2, [r7, #4]
    uint32_t i;
    for(i = 0; i < buf_len; i++) {
 800302c:	2300      	movs	r3, #0
 800302e:	61fb      	str	r3, [r7, #28]
 8003030:	e00a      	b.n	8003048 <min_poll+0x28>
        rx_byte(self, buf[i]);
 8003032:	68ba      	ldr	r2, [r7, #8]
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	4413      	add	r3, r2
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	4619      	mov	r1, r3
 800303c:	68f8      	ldr	r0, [r7, #12]
 800303e:	f7ff fec3 	bl	8002dc8 <rx_byte>
    for(i = 0; i < buf_len; i++) {
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	3301      	adds	r3, #1
 8003046:	61fb      	str	r3, [r7, #28]
 8003048:	69fa      	ldr	r2, [r7, #28]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	429a      	cmp	r2, r3
 800304e:	d3f0      	bcc.n	8003032 <min_poll+0x12>
    }

#ifdef TRANSPORT_PROTOCOL
    uint8_t window_size;

    now = min_time_ms();
 8003050:	f7fd fa74 	bl	800053c <min_time_ms>
 8003054:	4603      	mov	r3, r0
 8003056:	4a44      	ldr	r2, [pc, #272]	; (8003168 <min_poll+0x148>)
 8003058:	6013      	str	r3, [r2, #0]

    bool remote_connected = (now - self->transport_fifo.last_received_anything_ms < TRANSPORT_IDLE_TIMEOUT_MS);
 800305a:	4b43      	ldr	r3, [pc, #268]	; (8003168 <min_poll+0x148>)
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	f240 32e7 	movw	r2, #999	; 0x3e7
 800306a:	4293      	cmp	r3, r2
 800306c:	bf94      	ite	ls
 800306e:	2301      	movls	r3, #1
 8003070:	2300      	movhi	r3, #0
 8003072:	76fb      	strb	r3, [r7, #27]
    bool remote_active = (now - self->transport_fifo.last_received_frame_ms < TRANSPORT_IDLE_TIMEOUT_MS);
 8003074:	4b3c      	ldr	r3, [pc, #240]	; (8003168 <min_poll+0x148>)
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003084:	4293      	cmp	r3, r2
 8003086:	bf94      	ite	ls
 8003088:	2301      	movls	r3, #1
 800308a:	2300      	movhi	r3, #0
 800308c:	76bb      	strb	r3, [r7, #26]

    // This sends one new frame or resends one old frame
    window_size = self->transport_fifo.sn_max - self->transport_fifo.sn_min; // Window size
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f893 30e6 	ldrb.w	r3, [r3, #230]	; 0xe6
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	767b      	strb	r3, [r7, #25]
    if((window_size < TRANSPORT_MAX_WINDOW_SIZE) && (self->transport_fifo.n_frames > window_size)) {
 800309e:	7e7b      	ldrb	r3, [r7, #25]
 80030a0:	2b0f      	cmp	r3, #15
 80030a2:	d82a      	bhi.n	80030fa <min_poll+0xda>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 80030aa:	7e7a      	ldrb	r2, [r7, #25]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d224      	bcs.n	80030fa <min_poll+0xda>
        // There are new frames we can send; but don't even bother if there's no buffer space for them
        struct transport_frame *frame = transport_fifo_get(self, window_size);
 80030b0:	7e7b      	ldrb	r3, [r7, #25]
 80030b2:	4619      	mov	r1, r3
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	f7ff fcd3 	bl	8002a60 <transport_fifo_get>
 80030ba:	6178      	str	r0, [r7, #20]
        if(ON_WIRE_SIZE(frame->payload_len) <= min_tx_space(self->port)) {
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	799b      	ldrb	r3, [r3, #6]
 80030c0:	f103 040b 	add.w	r4, r3, #11
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7fd fa3d 	bl	800054a <min_tx_space>
 80030d0:	4603      	mov	r3, r0
 80030d2:	429c      	cmp	r4, r3
 80030d4:	d834      	bhi.n	8003140 <min_poll+0x120>
            frame->seq = self->transport_fifo.sn_max;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	721a      	strb	r2, [r3, #8]
            transport_fifo_send(self, frame);
 80030e0:	6979      	ldr	r1, [r7, #20]
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f7ff fcd8 	bl	8002a98 <transport_fifo_send>

            // Move window on
            self->transport_fifo.sn_max++;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
 80030ee:	3301      	adds	r3, #1
 80030f0:	b2da      	uxtb	r2, r3
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
    if((window_size < TRANSPORT_MAX_WINDOW_SIZE) && (self->transport_fifo.n_frames > window_size)) {
 80030f8:	e022      	b.n	8003140 <min_poll+0x120>
        }
    }
    else {
        // Sender cannot send new frames so resend old ones (if there's anyone there)
        if((window_size > 0) && remote_connected) {
 80030fa:	7e7b      	ldrb	r3, [r7, #25]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d020      	beq.n	8003142 <min_poll+0x122>
 8003100:	7efb      	ldrb	r3, [r7, #27]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d01d      	beq.n	8003142 <min_poll+0x122>
            // There are unacknowledged frames. Can re-send an old frame. Pick the least recently sent one.
            struct transport_frame *oldest_frame = find_retransmit_frame(self);
 8003106:	68f8      	ldr	r0, [r7, #12]
 8003108:	f7ff fd4e 	bl	8002ba8 <find_retransmit_frame>
 800310c:	6138      	str	r0, [r7, #16]
            if(now - oldest_frame->last_sent_time_ms >= TRANSPORT_FRAME_RETRANSMIT_TIMEOUT_MS) {
 800310e:	4b16      	ldr	r3, [pc, #88]	; (8003168 <min_poll+0x148>)
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	2b31      	cmp	r3, #49	; 0x31
 800311a:	d912      	bls.n	8003142 <min_poll+0x122>
                // Resending oldest frame if there's a chance there's enough space to send it
                if(ON_WIRE_SIZE(oldest_frame->payload_len) <= min_tx_space(self->port)) {
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	799b      	ldrb	r3, [r3, #6]
 8003120:	f103 040b 	add.w	r4, r3, #11
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800312a:	4618      	mov	r0, r3
 800312c:	f7fd fa0d 	bl	800054a <min_tx_space>
 8003130:	4603      	mov	r3, r0
 8003132:	429c      	cmp	r4, r3
 8003134:	d805      	bhi.n	8003142 <min_poll+0x122>
                    transport_fifo_send(self, oldest_frame);
 8003136:	6939      	ldr	r1, [r7, #16]
 8003138:	68f8      	ldr	r0, [r7, #12]
 800313a:	f7ff fcad 	bl	8002a98 <transport_fifo_send>
 800313e:	e000      	b.n	8003142 <min_poll+0x122>
    if((window_size < TRANSPORT_MAX_WINDOW_SIZE) && (self->transport_fifo.n_frames > window_size)) {
 8003140:	bf00      	nop
        }
    }

#ifndef DISABLE_TRANSPORT_ACK_RETRANSMIT
    // Periodically transmit the ACK with the rn value, unless the line has gone idle
    if(now - self->transport_fifo.last_sent_ack_time_ms > TRANSPORT_ACK_RETRANSMIT_TIMEOUT_MS) {
 8003142:	4b09      	ldr	r3, [pc, #36]	; (8003168 <min_poll+0x148>)
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b19      	cmp	r3, #25
 8003150:	d905      	bls.n	800315e <min_poll+0x13e>
        if(remote_active) {
 8003152:	7ebb      	ldrb	r3, [r7, #26]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d002      	beq.n	800315e <min_poll+0x13e>
            send_ack(self);
 8003158:	68f8      	ldr	r0, [r7, #12]
 800315a:	f7ff fcc3 	bl	8002ae4 <send_ack>
        }
    }
#endif // DISABLE_TRANSPORT_ACK_RETRANSMIT
#endif // TRANSPORT_PROTOCOL
}
 800315e:	bf00      	nop
 8003160:	3724      	adds	r7, #36	; 0x24
 8003162:	46bd      	mov	sp, r7
 8003164:	bd90      	pop	{r4, r7, pc}
 8003166:	bf00      	nop
 8003168:	20000028 	.word	0x20000028

0800316c <min_init_context>:
#ifdef VALIDATE_MAX_PAYLOAD
void min_init_context_validate(struct min_context *self, uint8_t port, void * p_rx_frame_checksum)
#else
void min_init_context(struct min_context *self, uint8_t port)
#endif
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	460b      	mov	r3, r1
 8003176:	70fb      	strb	r3, [r7, #3]
    // compiling calling code and this code.
    assert((void *)(self->rx_frame_payload_buf + MAX_PAYLOAD) <= p_rx_frame_checksum);
#endif
#endif
    // Initialize context
    self->rx_header_bytes_seen = 0;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
    self->rx_frame_state = SEARCHING_FOR_SOF;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9
    self->port = port;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	78fa      	ldrb	r2, [r7, #3]
 800318c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

#ifdef TRANSPORT_PROTOCOL
    // Counters for diagnosis purposes
    self->transport_fifo.spurious_acks = 0;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    self->transport_fifo.sequence_mismatch_drop = 0;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    self->transport_fifo.dropped_frames = 0;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
    self->transport_fifo.resets_received = 0;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
    self->transport_fifo.n_ring_buffer_bytes_max = 0;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
    self->transport_fifo.n_frames_max = 0;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
    transport_fifo_reset(self);
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f7ff fcb7 	bl	8002b34 <transport_fifo_reset>
#endif // TRANSPORT_PROTOCOL
    min_debug_print("MIN init complete\n");
}
 80031c6:	bf00      	nop
 80031c8:	3708      	adds	r7, #8
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}

080031ce <RING_BUFFER_Init>:
#include "ring_buffer.h"

void RING_BUFFER_Init(RING_BUFFER_HandleTypeDef *p_ring_buffer, uint8_t * p_buffer, uint16_t p_max_length){
 80031ce:	b480      	push	{r7}
 80031d0:	b085      	sub	sp, #20
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	60f8      	str	r0, [r7, #12]
 80031d6:	60b9      	str	r1, [r7, #8]
 80031d8:	4613      	mov	r3, r2
 80031da:	80fb      	strh	r3, [r7, #6]
	p_ring_buffer->buffer = p_buffer;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	68ba      	ldr	r2, [r7, #8]
 80031e0:	601a      	str	r2, [r3, #0]
	p_ring_buffer->head = 0;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2200      	movs	r2, #0
 80031e6:	809a      	strh	r2, [r3, #4]
	p_ring_buffer->tail = 0;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	80da      	strh	r2, [r3, #6]
	p_ring_buffer->max_length = p_max_length;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	88fa      	ldrh	r2, [r7, #6]
 80031f2:	811a      	strh	r2, [r3, #8]
}
 80031f4:	bf00      	nop
 80031f6:	3714      	adds	r7, #20
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <RING_BUFFER_Push>:

int8_t RING_BUFFER_Push(RING_BUFFER_HandleTypeDef *p_ring_buffer, uint8_t p_data){
 8003200:	b480      	push	{r7}
 8003202:	b085      	sub	sp, #20
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	460b      	mov	r3, r1
 800320a:	70fb      	strb	r3, [r7, #3]
	uint16_t t_next;

	t_next = p_ring_buffer->head + 1;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	889b      	ldrh	r3, [r3, #4]
 8003210:	3301      	adds	r3, #1
 8003212:	81fb      	strh	r3, [r7, #14]
	if(t_next >= p_ring_buffer->max_length)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	891b      	ldrh	r3, [r3, #8]
 8003218:	89fa      	ldrh	r2, [r7, #14]
 800321a:	429a      	cmp	r2, r3
 800321c:	d301      	bcc.n	8003222 <RING_BUFFER_Push+0x22>
		t_next = 0;
 800321e:	2300      	movs	r3, #0
 8003220:	81fb      	strh	r3, [r7, #14]

	if(t_next == p_ring_buffer->tail)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	88db      	ldrh	r3, [r3, #6]
 8003226:	89fa      	ldrh	r2, [r7, #14]
 8003228:	429a      	cmp	r2, r3
 800322a:	d102      	bne.n	8003232 <RING_BUFFER_Push+0x32>
		return -1;
 800322c:	f04f 33ff 	mov.w	r3, #4294967295
 8003230:	e00a      	b.n	8003248 <RING_BUFFER_Push+0x48>

	p_ring_buffer->buffer[p_ring_buffer->head] = p_data;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	8892      	ldrh	r2, [r2, #4]
 800323a:	4413      	add	r3, r2
 800323c:	78fa      	ldrb	r2, [r7, #3]
 800323e:	701a      	strb	r2, [r3, #0]
	p_ring_buffer->head = t_next;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	89fa      	ldrh	r2, [r7, #14]
 8003244:	809a      	strh	r2, [r3, #4]

	return 0;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3714      	adds	r7, #20
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <RING_BUFFER_Pop>:

int8_t RING_BUFFER_Pop(RING_BUFFER_HandleTypeDef *p_ring_buffer, uint8_t * p_data){
 8003254:	b480      	push	{r7}
 8003256:	b085      	sub	sp, #20
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
	uint16_t t_next;

	if(p_ring_buffer->tail == p_ring_buffer->head)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	88da      	ldrh	r2, [r3, #6]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	889b      	ldrh	r3, [r3, #4]
 8003266:	429a      	cmp	r2, r3
 8003268:	d102      	bne.n	8003270 <RING_BUFFER_Pop+0x1c>
		return -1;
 800326a:	f04f 33ff 	mov.w	r3, #4294967295
 800326e:	e016      	b.n	800329e <RING_BUFFER_Pop+0x4a>

	t_next = p_ring_buffer->tail + 1;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	88db      	ldrh	r3, [r3, #6]
 8003274:	3301      	adds	r3, #1
 8003276:	81fb      	strh	r3, [r7, #14]
	if(t_next >= p_ring_buffer->max_length)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	891b      	ldrh	r3, [r3, #8]
 800327c:	89fa      	ldrh	r2, [r7, #14]
 800327e:	429a      	cmp	r2, r3
 8003280:	d301      	bcc.n	8003286 <RING_BUFFER_Pop+0x32>
		t_next = 0;
 8003282:	2300      	movs	r3, #0
 8003284:	81fb      	strh	r3, [r7, #14]

	*p_data = p_ring_buffer->buffer[p_ring_buffer->tail];
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	88d2      	ldrh	r2, [r2, #6]
 800328e:	4413      	add	r3, r2
 8003290:	781a      	ldrb	r2, [r3, #0]
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	701a      	strb	r2, [r3, #0]
	p_ring_buffer->tail = t_next;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	89fa      	ldrh	r2, [r7, #14]
 800329a:	80da      	strh	r2, [r3, #6]

	return 0;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3714      	adds	r7, #20
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr

080032aa <RING_BUFFER_Available>:

uint16_t RING_BUFFER_Available(RING_BUFFER_HandleTypeDef *p_ring_buffer){
 80032aa:	b480      	push	{r7}
 80032ac:	b083      	sub	sp, #12
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
//	} else if(p_ring_buffer->head < p_ring_buffer->tail){
//		return p_ring_buffer->max_length - (p_ring_buffer->head - p_ring_buffer->tail);
//	} else if(p_ring_buffer->head == p_ring_buffer->tail){
//		return 0;
//	}
	return (p_ring_buffer->head == p_ring_buffer->tail) ? 0 : 1;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	889a      	ldrh	r2, [r3, #4]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	88db      	ldrh	r3, [r3, #6]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	bf14      	ite	ne
 80032be:	2301      	movne	r3, #1
 80032c0:	2300      	moveq	r3, #0
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	b29b      	uxth	r3, r3
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	370c      	adds	r7, #12
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
	...

080032d4 <UART_Init>:
static uint8_t uart_buffer[UART_MAX_LEN];
static uint8_t uart_pointer = 0;
static uint8_t uart_flag = 0;
RING_BUFFER_HandleTypeDef uart_ring_buffer;

void UART_Init(){
 80032d4:	b580      	push	{r7, lr}
 80032d6:	af00      	add	r7, sp, #0
	RING_BUFFER_Init(&uart_ring_buffer, uart_buffer, UART_MAX_LEN);
 80032d8:	2240      	movs	r2, #64	; 0x40
 80032da:	4903      	ldr	r1, [pc, #12]	; (80032e8 <UART_Init+0x14>)
 80032dc:	4803      	ldr	r0, [pc, #12]	; (80032ec <UART_Init+0x18>)
 80032de:	f7ff ff76 	bl	80031ce <RING_BUFFER_Init>
}
 80032e2:	bf00      	nop
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	2000002c 	.word	0x2000002c
 80032ec:	200006bc 	.word	0x200006bc

080032f0 <UART_Receive>:

void UART_Receive(uint8_t Rx_Buffer){
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	4603      	mov	r3, r0
 80032f8:	71fb      	strb	r3, [r7, #7]
	RING_BUFFER_Push(&uart_ring_buffer, Rx_Buffer);
 80032fa:	79fb      	ldrb	r3, [r7, #7]
 80032fc:	4619      	mov	r1, r3
 80032fe:	4803      	ldr	r0, [pc, #12]	; (800330c <UART_Receive+0x1c>)
 8003300:	f7ff ff7e 	bl	8003200 <RING_BUFFER_Push>
}
 8003304:	bf00      	nop
 8003306:	3708      	adds	r7, #8
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	200006bc 	.word	0x200006bc

08003310 <UART_Read>:
		uart_pointer = 0;
		uart_flag = 0;
	}
}

uint8_t UART_Read(){
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
	uint8_t t_data;
	RING_BUFFER_Pop(&uart_ring_buffer, &t_data);
 8003316:	1dfb      	adds	r3, r7, #7
 8003318:	4619      	mov	r1, r3
 800331a:	4804      	ldr	r0, [pc, #16]	; (800332c <UART_Read+0x1c>)
 800331c:	f7ff ff9a 	bl	8003254 <RING_BUFFER_Pop>
	return t_data;
 8003320:	79fb      	ldrb	r3, [r7, #7]
}
 8003322:	4618      	mov	r0, r3
 8003324:	3708      	adds	r7, #8
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	200006bc 	.word	0x200006bc

08003330 <UART_Available>:

uint16_t UART_Available(){
 8003330:	b580      	push	{r7, lr}
 8003332:	af00      	add	r7, sp, #0
	return RING_BUFFER_Available(&uart_ring_buffer);
 8003334:	4802      	ldr	r0, [pc, #8]	; (8003340 <UART_Available+0x10>)
 8003336:	f7ff ffb8 	bl	80032aa <RING_BUFFER_Available>
 800333a:	4603      	mov	r3, r0
}
 800333c:	4618      	mov	r0, r3
 800333e:	bd80      	pop	{r7, pc}
 8003340:	200006bc 	.word	0x200006bc

08003344 <__libc_init_array>:
 8003344:	b570      	push	{r4, r5, r6, lr}
 8003346:	4d0d      	ldr	r5, [pc, #52]	; (800337c <__libc_init_array+0x38>)
 8003348:	4c0d      	ldr	r4, [pc, #52]	; (8003380 <__libc_init_array+0x3c>)
 800334a:	1b64      	subs	r4, r4, r5
 800334c:	10a4      	asrs	r4, r4, #2
 800334e:	2600      	movs	r6, #0
 8003350:	42a6      	cmp	r6, r4
 8003352:	d109      	bne.n	8003368 <__libc_init_array+0x24>
 8003354:	4d0b      	ldr	r5, [pc, #44]	; (8003384 <__libc_init_array+0x40>)
 8003356:	4c0c      	ldr	r4, [pc, #48]	; (8003388 <__libc_init_array+0x44>)
 8003358:	f000 f820 	bl	800339c <_init>
 800335c:	1b64      	subs	r4, r4, r5
 800335e:	10a4      	asrs	r4, r4, #2
 8003360:	2600      	movs	r6, #0
 8003362:	42a6      	cmp	r6, r4
 8003364:	d105      	bne.n	8003372 <__libc_init_array+0x2e>
 8003366:	bd70      	pop	{r4, r5, r6, pc}
 8003368:	f855 3b04 	ldr.w	r3, [r5], #4
 800336c:	4798      	blx	r3
 800336e:	3601      	adds	r6, #1
 8003370:	e7ee      	b.n	8003350 <__libc_init_array+0xc>
 8003372:	f855 3b04 	ldr.w	r3, [r5], #4
 8003376:	4798      	blx	r3
 8003378:	3601      	adds	r6, #1
 800337a:	e7f2      	b.n	8003362 <__libc_init_array+0x1e>
 800337c:	080033d4 	.word	0x080033d4
 8003380:	080033d4 	.word	0x080033d4
 8003384:	080033d4 	.word	0x080033d4
 8003388:	080033d8 	.word	0x080033d8

0800338c <memset>:
 800338c:	4402      	add	r2, r0
 800338e:	4603      	mov	r3, r0
 8003390:	4293      	cmp	r3, r2
 8003392:	d100      	bne.n	8003396 <memset+0xa>
 8003394:	4770      	bx	lr
 8003396:	f803 1b01 	strb.w	r1, [r3], #1
 800339a:	e7f9      	b.n	8003390 <memset+0x4>

0800339c <_init>:
 800339c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800339e:	bf00      	nop
 80033a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033a2:	bc08      	pop	{r3}
 80033a4:	469e      	mov	lr, r3
 80033a6:	4770      	bx	lr

080033a8 <_fini>:
 80033a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033aa:	bf00      	nop
 80033ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033ae:	bc08      	pop	{r3}
 80033b0:	469e      	mov	lr, r3
 80033b2:	4770      	bx	lr
